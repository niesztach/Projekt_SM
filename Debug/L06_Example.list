
L06_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e780  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  0800e950  0800e950  0001e950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef24  0800ef24  00020134  2**0
                  CONTENTS
  4 .ARM          00000008  0800ef24  0800ef24  0001ef24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ef2c  0800ef2c  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef2c  0800ef2c  0001ef2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ef30  0800ef30  0001ef30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  0800ef34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027f0  20000138  0800f068  00020138  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002928  0800f068  00022928  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020887  00000000  00000000  000201a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004d83  00000000  00000000  00040a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ad8  00000000  00000000  000457b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014d5  00000000  00000000  00047290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b8a9  00000000  00000000  00048765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027f93  00000000  00000000  0007400e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fdea0  00000000  00000000  0009bfa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007570  00000000  00000000  00199e44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001a13b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000138 	.word	0x20000138
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e938 	.word	0x0800e938

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000013c 	.word	0x2000013c
 800020c:	0800e938 	.word	0x0800e938

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_d2f>:
 8000bec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf4:	bf24      	itt	cs
 8000bf6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfe:	d90d      	bls.n	8000c1c <__aeabi_d2f+0x30>
 8000c00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c14:	bf08      	it	eq
 8000c16:	f020 0001 	biceq.w	r0, r0, #1
 8000c1a:	4770      	bx	lr
 8000c1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c20:	d121      	bne.n	8000c66 <__aeabi_d2f+0x7a>
 8000c22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c26:	bfbc      	itt	lt
 8000c28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	4770      	bxlt	lr
 8000c2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c36:	f1c2 0218 	rsb	r2, r2, #24
 8000c3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c42:	fa20 f002 	lsr.w	r0, r0, r2
 8000c46:	bf18      	it	ne
 8000c48:	f040 0001 	orrne.w	r0, r0, #1
 8000c4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c58:	ea40 000c 	orr.w	r0, r0, ip
 8000c5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c64:	e7cc      	b.n	8000c00 <__aeabi_d2f+0x14>
 8000c66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6a:	d107      	bne.n	8000c7c <__aeabi_d2f+0x90>
 8000c6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c70:	bf1e      	ittt	ne
 8000c72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7a:	4770      	bxne	lr
 8000c7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <__aeabi_uldivmod>:
 8000c8c:	b953      	cbnz	r3, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c8e:	b94a      	cbnz	r2, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c90:	2900      	cmp	r1, #0
 8000c92:	bf08      	it	eq
 8000c94:	2800      	cmpeq	r0, #0
 8000c96:	bf1c      	itt	ne
 8000c98:	f04f 31ff 	movne.w	r1, #4294967295
 8000c9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca0:	f000 b970 	b.w	8000f84 <__aeabi_idiv0>
 8000ca4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cac:	f000 f806 	bl	8000cbc <__udivmoddi4>
 8000cb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb8:	b004      	add	sp, #16
 8000cba:	4770      	bx	lr

08000cbc <__udivmoddi4>:
 8000cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc0:	9e08      	ldr	r6, [sp, #32]
 8000cc2:	460d      	mov	r5, r1
 8000cc4:	4604      	mov	r4, r0
 8000cc6:	460f      	mov	r7, r1
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d14a      	bne.n	8000d62 <__udivmoddi4+0xa6>
 8000ccc:	428a      	cmp	r2, r1
 8000cce:	4694      	mov	ip, r2
 8000cd0:	d965      	bls.n	8000d9e <__udivmoddi4+0xe2>
 8000cd2:	fab2 f382 	clz	r3, r2
 8000cd6:	b143      	cbz	r3, 8000cea <__udivmoddi4+0x2e>
 8000cd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cdc:	f1c3 0220 	rsb	r2, r3, #32
 8000ce0:	409f      	lsls	r7, r3
 8000ce2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce6:	4317      	orrs	r7, r2
 8000ce8:	409c      	lsls	r4, r3
 8000cea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cee:	fa1f f58c 	uxth.w	r5, ip
 8000cf2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf6:	0c22      	lsrs	r2, r4, #16
 8000cf8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cfc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d00:	fb01 f005 	mul.w	r0, r1, r5
 8000d04:	4290      	cmp	r0, r2
 8000d06:	d90a      	bls.n	8000d1e <__udivmoddi4+0x62>
 8000d08:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d10:	f080 811c 	bcs.w	8000f4c <__udivmoddi4+0x290>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f240 8119 	bls.w	8000f4c <__udivmoddi4+0x290>
 8000d1a:	3902      	subs	r1, #2
 8000d1c:	4462      	add	r2, ip
 8000d1e:	1a12      	subs	r2, r2, r0
 8000d20:	b2a4      	uxth	r4, r4
 8000d22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2e:	fb00 f505 	mul.w	r5, r0, r5
 8000d32:	42a5      	cmp	r5, r4
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x90>
 8000d36:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3e:	f080 8107 	bcs.w	8000f50 <__udivmoddi4+0x294>
 8000d42:	42a5      	cmp	r5, r4
 8000d44:	f240 8104 	bls.w	8000f50 <__udivmoddi4+0x294>
 8000d48:	4464      	add	r4, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d50:	1b64      	subs	r4, r4, r5
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11e      	cbz	r6, 8000d5e <__udivmoddi4+0xa2>
 8000d56:	40dc      	lsrs	r4, r3
 8000d58:	2300      	movs	r3, #0
 8000d5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0xbc>
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	f000 80ed 	beq.w	8000f46 <__udivmoddi4+0x28a>
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000d72:	4608      	mov	r0, r1
 8000d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d78:	fab3 f183 	clz	r1, r3
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	d149      	bne.n	8000e14 <__udivmoddi4+0x158>
 8000d80:	42ab      	cmp	r3, r5
 8000d82:	d302      	bcc.n	8000d8a <__udivmoddi4+0xce>
 8000d84:	4282      	cmp	r2, r0
 8000d86:	f200 80f8 	bhi.w	8000f7a <__udivmoddi4+0x2be>
 8000d8a:	1a84      	subs	r4, r0, r2
 8000d8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000d90:	2001      	movs	r0, #1
 8000d92:	4617      	mov	r7, r2
 8000d94:	2e00      	cmp	r6, #0
 8000d96:	d0e2      	beq.n	8000d5e <__udivmoddi4+0xa2>
 8000d98:	e9c6 4700 	strd	r4, r7, [r6]
 8000d9c:	e7df      	b.n	8000d5e <__udivmoddi4+0xa2>
 8000d9e:	b902      	cbnz	r2, 8000da2 <__udivmoddi4+0xe6>
 8000da0:	deff      	udf	#255	; 0xff
 8000da2:	fab2 f382 	clz	r3, r2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x210>
 8000dac:	1a8a      	subs	r2, r1, r2
 8000dae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db2:	fa1f fe8c 	uxth.w	lr, ip
 8000db6:	2101      	movs	r1, #1
 8000db8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dbc:	fb07 2015 	mls	r0, r7, r5, r2
 8000dc0:	0c22      	lsrs	r2, r4, #16
 8000dc2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc6:	fb0e f005 	mul.w	r0, lr, r5
 8000dca:	4290      	cmp	r0, r2
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x124>
 8000dce:	eb1c 0202 	adds.w	r2, ip, r2
 8000dd2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x122>
 8000dd8:	4290      	cmp	r0, r2
 8000dda:	f200 80cb 	bhi.w	8000f74 <__udivmoddi4+0x2b8>
 8000dde:	4645      	mov	r5, r8
 8000de0:	1a12      	subs	r2, r2, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de8:	fb07 2210 	mls	r2, r7, r0, r2
 8000dec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000df0:	fb0e fe00 	mul.w	lr, lr, r0
 8000df4:	45a6      	cmp	lr, r4
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x14e>
 8000df8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dfc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e00:	d202      	bcs.n	8000e08 <__udivmoddi4+0x14c>
 8000e02:	45a6      	cmp	lr, r4
 8000e04:	f200 80bb 	bhi.w	8000f7e <__udivmoddi4+0x2c2>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e12:	e79f      	b.n	8000d54 <__udivmoddi4+0x98>
 8000e14:	f1c1 0720 	rsb	r7, r1, #32
 8000e18:	408b      	lsls	r3, r1
 8000e1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e22:	fa05 f401 	lsl.w	r4, r5, r1
 8000e26:	fa20 f307 	lsr.w	r3, r0, r7
 8000e2a:	40fd      	lsrs	r5, r7
 8000e2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e30:	4323      	orrs	r3, r4
 8000e32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e36:	fa1f fe8c 	uxth.w	lr, ip
 8000e3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3e:	0c1c      	lsrs	r4, r3, #16
 8000e40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e44:	fb08 f50e 	mul.w	r5, r8, lr
 8000e48:	42a5      	cmp	r5, r4
 8000e4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000e52:	d90b      	bls.n	8000e6c <__udivmoddi4+0x1b0>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e5c:	f080 8088 	bcs.w	8000f70 <__udivmoddi4+0x2b4>
 8000e60:	42a5      	cmp	r5, r4
 8000e62:	f240 8085 	bls.w	8000f70 <__udivmoddi4+0x2b4>
 8000e66:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6a:	4464      	add	r4, ip
 8000e6c:	1b64      	subs	r4, r4, r5
 8000e6e:	b29d      	uxth	r5, r3
 8000e70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e74:	fb09 4413 	mls	r4, r9, r3, r4
 8000e78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e80:	45a6      	cmp	lr, r4
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x1da>
 8000e84:	eb1c 0404 	adds.w	r4, ip, r4
 8000e88:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e8c:	d26c      	bcs.n	8000f68 <__udivmoddi4+0x2ac>
 8000e8e:	45a6      	cmp	lr, r4
 8000e90:	d96a      	bls.n	8000f68 <__udivmoddi4+0x2ac>
 8000e92:	3b02      	subs	r3, #2
 8000e94:	4464      	add	r4, ip
 8000e96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9e:	eba4 040e 	sub.w	r4, r4, lr
 8000ea2:	42ac      	cmp	r4, r5
 8000ea4:	46c8      	mov	r8, r9
 8000ea6:	46ae      	mov	lr, r5
 8000ea8:	d356      	bcc.n	8000f58 <__udivmoddi4+0x29c>
 8000eaa:	d053      	beq.n	8000f54 <__udivmoddi4+0x298>
 8000eac:	b156      	cbz	r6, 8000ec4 <__udivmoddi4+0x208>
 8000eae:	ebb0 0208 	subs.w	r2, r0, r8
 8000eb2:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb6:	fa04 f707 	lsl.w	r7, r4, r7
 8000eba:	40ca      	lsrs	r2, r1
 8000ebc:	40cc      	lsrs	r4, r1
 8000ebe:	4317      	orrs	r7, r2
 8000ec0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ecc:	f1c3 0120 	rsb	r1, r3, #32
 8000ed0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed8:	fa25 f101 	lsr.w	r1, r5, r1
 8000edc:	409d      	lsls	r5, r3
 8000ede:	432a      	orrs	r2, r5
 8000ee0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee4:	fa1f fe8c 	uxth.w	lr, ip
 8000ee8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eec:	fb07 1510 	mls	r5, r7, r0, r1
 8000ef0:	0c11      	lsrs	r1, r2, #16
 8000ef2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef6:	fb00 f50e 	mul.w	r5, r0, lr
 8000efa:	428d      	cmp	r5, r1
 8000efc:	fa04 f403 	lsl.w	r4, r4, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x258>
 8000f02:	eb1c 0101 	adds.w	r1, ip, r1
 8000f06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0a:	d22f      	bcs.n	8000f6c <__udivmoddi4+0x2b0>
 8000f0c:	428d      	cmp	r5, r1
 8000f0e:	d92d      	bls.n	8000f6c <__udivmoddi4+0x2b0>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4461      	add	r1, ip
 8000f14:	1b49      	subs	r1, r1, r5
 8000f16:	b292      	uxth	r2, r2
 8000f18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000f20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f24:	fb05 f10e 	mul.w	r1, r5, lr
 8000f28:	4291      	cmp	r1, r2
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x282>
 8000f2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000f30:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f34:	d216      	bcs.n	8000f64 <__udivmoddi4+0x2a8>
 8000f36:	4291      	cmp	r1, r2
 8000f38:	d914      	bls.n	8000f64 <__udivmoddi4+0x2a8>
 8000f3a:	3d02      	subs	r5, #2
 8000f3c:	4462      	add	r2, ip
 8000f3e:	1a52      	subs	r2, r2, r1
 8000f40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f44:	e738      	b.n	8000db8 <__udivmoddi4+0xfc>
 8000f46:	4631      	mov	r1, r6
 8000f48:	4630      	mov	r0, r6
 8000f4a:	e708      	b.n	8000d5e <__udivmoddi4+0xa2>
 8000f4c:	4639      	mov	r1, r7
 8000f4e:	e6e6      	b.n	8000d1e <__udivmoddi4+0x62>
 8000f50:	4610      	mov	r0, r2
 8000f52:	e6fb      	b.n	8000d4c <__udivmoddi4+0x90>
 8000f54:	4548      	cmp	r0, r9
 8000f56:	d2a9      	bcs.n	8000eac <__udivmoddi4+0x1f0>
 8000f58:	ebb9 0802 	subs.w	r8, r9, r2
 8000f5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f60:	3b01      	subs	r3, #1
 8000f62:	e7a3      	b.n	8000eac <__udivmoddi4+0x1f0>
 8000f64:	4645      	mov	r5, r8
 8000f66:	e7ea      	b.n	8000f3e <__udivmoddi4+0x282>
 8000f68:	462b      	mov	r3, r5
 8000f6a:	e794      	b.n	8000e96 <__udivmoddi4+0x1da>
 8000f6c:	4640      	mov	r0, r8
 8000f6e:	e7d1      	b.n	8000f14 <__udivmoddi4+0x258>
 8000f70:	46d0      	mov	r8, sl
 8000f72:	e77b      	b.n	8000e6c <__udivmoddi4+0x1b0>
 8000f74:	3d02      	subs	r5, #2
 8000f76:	4462      	add	r2, ip
 8000f78:	e732      	b.n	8000de0 <__udivmoddi4+0x124>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e70a      	b.n	8000d94 <__udivmoddi4+0xd8>
 8000f7e:	4464      	add	r4, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e742      	b.n	8000e0a <__udivmoddi4+0x14e>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f000 fa47 	bl	8001424 <null_ptr_check>
 8000f96:	4603      	mov	r3, r0
 8000f98:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 8000f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d117      	bne.n	8000fd2 <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	20d0      	movs	r0, #208	; 0xd0
 8000faa:	f000 f818 	bl	8000fde <bmp2_get_regs>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 8000fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10b      	bne.n	8000fd2 <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b58      	cmp	r3, #88	; 0x58
 8000fc0:	d105      	bne.n	8000fce <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 fa79 	bl	80014ba <get_calib_param>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	73fb      	strb	r3, [r7, #15]
 8000fcc:	e001      	b.n	8000fd2 <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 8000fce:	23fc      	movs	r3, #252	; 0xfc
 8000fd0:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8000fde:	b590      	push	{r4, r7, lr}
 8000fe0:	b087      	sub	sp, #28
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	603b      	str	r3, [r7, #0]
 8000fea:	4603      	mov	r3, r0
 8000fec:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000fee:	6838      	ldr	r0, [r7, #0]
 8000ff0:	f000 fa18 	bl	8001424 <null_ptr_check>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 8000ff8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d11e      	bne.n	800103e <bmp2_get_regs+0x60>
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d01b      	beq.n	800103e <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	785b      	ldrb	r3, [r3, #1]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d103      	bne.n	8001016 <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001014:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	68dc      	ldr	r4, [r3, #12]
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	7bf8      	ldrb	r0, [r7, #15]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	68b9      	ldr	r1, [r7, #8]
 8001024:	47a0      	blx	r4
 8001026:	4603      	mov	r3, r0
 8001028:	461a      	mov	r2, r3
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d004      	beq.n	8001042 <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 8001038:	23fe      	movs	r3, #254	; 0xfe
 800103a:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 800103c:	e001      	b.n	8001042 <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800103e:	23ff      	movs	r3, #255	; 0xff
 8001040:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001042:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001046:	4618      	mov	r0, r3
 8001048:	371c      	adds	r7, #28
 800104a:	46bd      	mov	sp, r7
 800104c:	bd90      	pop	{r4, r7, pc}

0800104e <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 800104e:	b590      	push	{r4, r7, lr}
 8001050:	b08b      	sub	sp, #44	; 0x2c
 8001052:	af00      	add	r7, sp, #0
 8001054:	60f8      	str	r0, [r7, #12]
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
 800105a:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b04      	cmp	r3, #4
 8001060:	d901      	bls.n	8001066 <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 8001062:	2304      	movs	r3, #4
 8001064:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 8001066:	6838      	ldr	r0, [r7, #0]
 8001068:	f000 f9dc 	bl	8001424 <null_ptr_check>
 800106c:	4603      	mov	r3, r0
 800106e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001072:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001076:	2b00      	cmp	r3, #0
 8001078:	d150      	bne.n	800111c <bmp2_set_regs+0xce>
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d04d      	beq.n	800111c <bmp2_set_regs+0xce>
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d04a      	beq.n	800111c <bmp2_set_regs+0xce>
    {
        if (len > 0)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d043      	beq.n	8001114 <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	785b      	ldrb	r3, [r3, #1]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d114      	bne.n	80010c4 <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800109a:	2300      	movs	r3, #0
 800109c:	77fb      	strb	r3, [r7, #31]
 800109e:	e00d      	b.n	80010bc <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 80010a0:	7ffb      	ldrb	r3, [r7, #31]
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	4413      	add	r3, r2
 80010a6:	781a      	ldrb	r2, [r3, #0]
 80010a8:	7ffb      	ldrb	r3, [r7, #31]
 80010aa:	68f9      	ldr	r1, [r7, #12]
 80010ac:	440b      	add	r3, r1
 80010ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80010b6:	7ffb      	ldrb	r3, [r7, #31]
 80010b8:	3301      	adds	r3, #1
 80010ba:	77fb      	strb	r3, [r7, #31]
 80010bc:	7ffb      	ldrb	r3, [r7, #31]
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d8ed      	bhi.n	80010a0 <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d90b      	bls.n	80010e2 <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 80010ca:	f107 0114 	add.w	r1, r7, #20
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68ba      	ldr	r2, [r7, #8]
 80010d2:	68f8      	ldr	r0, [r7, #12]
 80010d4:	f000 f9c6 	bl	8001464 <interleave_data>
                temp_len = ((len * 2) - 1);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	3b01      	subs	r3, #1
 80010de:	623b      	str	r3, [r7, #32]
 80010e0:	e001      	b.n	80010e6 <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	691c      	ldr	r4, [r3, #16]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	7818      	ldrb	r0, [r3, #0]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f107 0114 	add.w	r1, r7, #20
 80010f6:	6a3a      	ldr	r2, [r7, #32]
 80010f8:	47a0      	blx	r4
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d00b      	beq.n	8001124 <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 800110c:	23fe      	movs	r3, #254	; 0xfe
 800110e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 8001112:	e007      	b.n	8001124 <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 8001114:	23fd      	movs	r3, #253	; 0xfd
 8001116:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 800111a:	e003      	b.n	8001124 <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800111c:	23ff      	movs	r3, #255	; 0xff
 800111e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001122:	e000      	b.n	8001126 <bmp2_set_regs+0xd8>
        if (len > 0)
 8001124:	bf00      	nop
    }

    return rslt;
 8001126:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800112a:	4618      	mov	r0, r3
 800112c:	372c      	adds	r7, #44	; 0x2c
 800112e:	46bd      	mov	sp, r7
 8001130:	bd90      	pop	{r4, r7, pc}

08001132 <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b084      	sub	sp, #16
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 800113a:	23e0      	movs	r3, #224	; 0xe0
 800113c:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 800113e:	23b6      	movs	r3, #182	; 0xb6
 8001140:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001142:	f107 010d 	add.w	r1, r7, #13
 8001146:	f107 000e 	add.w	r0, r7, #14
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2201      	movs	r2, #1
 800114e:	f7ff ff7e 	bl	800104e <bmp2_set_regs>
 8001152:	4603      	mov	r3, r0
 8001154:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8001156:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b084      	sub	sp, #16
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800116c:	2300      	movs	r3, #0
 800116e:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d02d      	beq.n	80011d2 <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8001176:	f107 010c 	add.w	r1, r7, #12
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	2202      	movs	r2, #2
 800117e:	20f4      	movs	r0, #244	; 0xf4
 8001180:	f7ff ff2d 	bl	8000fde <bmp2_get_regs>
 8001184:	4603      	mov	r3, r0
 8001186:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001188:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d122      	bne.n	80011d6 <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 8001190:	7b3b      	ldrb	r3, [r7, #12]
 8001192:	095b      	lsrs	r3, r3, #5
 8001194:	b2da      	uxtb	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 800119a:	7b3b      	ldrb	r3, [r7, #12]
 800119c:	109b      	asrs	r3, r3, #2
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	f003 0307 	and.w	r3, r3, #7
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 80011aa:	7b7b      	ldrb	r3, [r7, #13]
 80011ac:	095b      	lsrs	r3, r3, #5
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 80011b4:	7b7b      	ldrb	r3, [r7, #13]
 80011b6:	109b      	asrs	r3, r3, #2
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 80011c4:	7b7b      	ldrb	r3, [r7, #13]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	715a      	strb	r2, [r3, #5]
 80011d0:	e001      	b.n	80011d6 <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80011d2:	23ff      	movs	r3, #255	; 0xff
 80011d4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80011d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	2000      	movs	r0, #0
 80011f2:	f000 f9fd 	bl	80015f0 <conf_sensor>
 80011f6:	4603      	mov	r3, r0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d01b      	beq.n	8001248 <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 8001210:	f107 010e 	add.w	r1, r7, #14
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	2201      	movs	r2, #1
 8001218:	20f3      	movs	r0, #243	; 0xf3
 800121a:	f7ff fee0 	bl	8000fde <bmp2_get_regs>
 800121e:	4603      	mov	r3, r0
 8001220:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d110      	bne.n	800124c <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 800122a:	7bbb      	ldrb	r3, [r7, #14]
 800122c:	10db      	asrs	r3, r3, #3
 800122e:	b2db      	uxtb	r3, r3
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	b2da      	uxtb	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 800123a:	7bbb      	ldrb	r3, [r7, #14]
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	b2da      	uxtb	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	705a      	strb	r2, [r3, #1]
 8001246:	e001      	b.n	800124c <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001248:	23ff      	movs	r3, #255	; 0xff
 800124a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800124c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
 8001264:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 8001266:	7bfb      	ldrb	r3, [r7, #15]
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	68b9      	ldr	r1, [r7, #8]
 800126c:	4618      	mov	r0, r3
 800126e:	f000 f9bf 	bl	80015f0 <conf_sensor>
 8001272:	4603      	mov	r3, r0
 8001274:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8001276:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	2300      	movs	r3, #0
 8001292:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 8001294:	f107 0308 	add.w	r3, r7, #8
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d024      	beq.n	80012ee <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 80012a4:	f107 0110 	add.w	r1, r7, #16
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	2206      	movs	r2, #6
 80012ac:	20f7      	movs	r0, #247	; 0xf7
 80012ae:	f7ff fe96 	bl	8000fde <bmp2_get_regs>
 80012b2:	4603      	mov	r3, r0
 80012b4:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80012b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d119      	bne.n	80012f2 <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 80012be:	f107 0208 	add.w	r2, r7, #8
 80012c2:	f107 0310 	add.w	r3, r7, #16
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 fab9 	bl	8001840 <parse_sensor_data>
 80012ce:	4603      	mov	r3, r0
 80012d0:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 80012d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d10b      	bne.n	80012f2 <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 80012da:	f107 0308 	add.w	r3, r7, #8
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	6879      	ldr	r1, [r7, #4]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 f80b 	bl	80012fe <bmp2_compensate_data>
 80012e8:	4603      	mov	r3, r0
 80012ea:	75fb      	strb	r3, [r7, #23]
 80012ec:	e001      	b.n	80012f2 <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80012ee:	23ff      	movs	r3, #255	; 0xff
 80012f0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80012f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af00      	add	r7, sp, #0
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 f88a 	bl	8001424 <null_ptr_check>
 8001310:	4603      	mov	r3, r0
 8001312:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 8001314:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d129      	bne.n	8001370 <bmp2_compensate_data+0x72>
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d026      	beq.n	8001370 <bmp2_compensate_data+0x72>
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d023      	beq.n	8001370 <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8001328:	68b9      	ldr	r1, [r7, #8]
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	f04f 0300 	mov.w	r3, #0
 8001332:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 8001336:	68b9      	ldr	r1, [r7, #8]
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	f04f 0300 	mov.w	r3, #0
 8001340:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	3308      	adds	r3, #8
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	68f9      	ldr	r1, [r7, #12]
 800134c:	4618      	mov	r0, r3
 800134e:	f000 fabb 	bl	80018c8 <compensate_temperature>
 8001352:	4603      	mov	r3, r0
 8001354:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001356:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10a      	bne.n	8001374 <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	68f9      	ldr	r1, [r7, #12]
 8001364:	4618      	mov	r0, r3
 8001366:	f000 fba7 	bl	8001ab8 <compensate_pressure>
 800136a:	4603      	mov	r3, r0
 800136c:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 800136e:	e001      	b.n	8001374 <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001370:	23ff      	movs	r3, #255	; 0xff
 8001372:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001374:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 8001380:	b5b0      	push	{r4, r5, r7, lr}
 8001382:	b092      	sub	sp, #72	; 0x48
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 800138c:	4b23      	ldr	r3, [pc, #140]	; (800141c <bmp2_compute_meas_time+0x9c>)
 800138e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001392:	461d      	mov	r5, r3
 8001394:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001398:	682b      	ldr	r3, [r5, #0]
 800139a:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 800139c:	4b20      	ldr	r3, [pc, #128]	; (8001420 <bmp2_compute_meas_time+0xa0>)
 800139e:	f107 0410 	add.w	r4, r7, #16
 80013a2:	461d      	mov	r5, r3
 80013a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80013ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 f837 	bl	8001424 <null_ptr_check>
 80013b6:	4603      	mov	r3, r0
 80013b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 80013bc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d122      	bne.n	800140a <bmp2_compute_meas_time+0x8a>
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d01f      	beq.n	800140a <bmp2_compute_meas_time+0x8a>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	7e1b      	ldrb	r3, [r3, #24]
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d111      	bne.n	80013f6 <bmp2_compute_meas_time+0x76>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	78db      	ldrb	r3, [r3, #3]
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	3348      	adds	r3, #72	; 0x48
 80013da:	443b      	add	r3, r7
 80013dc:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	789b      	ldrb	r3, [r3, #2]
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	3348      	adds	r3, #72	; 0x48
 80013e8:	443b      	add	r3, r7
 80013ea:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80013ee:	441a      	add	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80013f4:	e00c      	b.n	8001410 <bmp2_compute_meas_time+0x90>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	78db      	ldrb	r3, [r3, #3]
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	3348      	adds	r3, #72	; 0x48
 80013fe:	443b      	add	r3, r7
 8001400:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8001408:	e002      	b.n	8001410 <bmp2_compute_meas_time+0x90>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800140a:	23ff      	movs	r3, #255	; 0xff
 800140c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return rslt;
 8001410:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8001414:	4618      	mov	r0, r3
 8001416:	3748      	adds	r7, #72	; 0x48
 8001418:	46bd      	mov	sp, r7
 800141a:	bdb0      	pop	{r4, r5, r7, pc}
 800141c:	0800e950 	.word	0x0800e950
 8001420:	0800e964 	.word	0x0800e964

08001424 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d00b      	beq.n	800144a <null_ptr_check+0x26>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d007      	beq.n	800144a <null_ptr_check+0x26>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <null_ptr_check+0x26>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d102      	bne.n	8001450 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 800144a:	23ff      	movs	r3, #255	; 0xff
 800144c:	73fb      	strb	r3, [r7, #15]
 800144e:	e001      	b.n	8001454 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 8001450:	2300      	movs	r3, #0
 8001452:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001454:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8001464:	b480      	push	{r7}
 8001466:	b087      	sub	sp, #28
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8001472:	2301      	movs	r3, #1
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	e015      	b.n	80014a4 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	441a      	add	r2, r3
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	3b01      	subs	r3, #1
 8001484:	68b9      	ldr	r1, [r7, #8]
 8001486:	440b      	add	r3, r1
 8001488:	7812      	ldrb	r2, [r2, #0]
 800148a:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	441a      	add	r2, r3
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	68b9      	ldr	r1, [r7, #8]
 8001498:	440b      	add	r3, r1
 800149a:	7812      	ldrb	r2, [r2, #0]
 800149c:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	3301      	adds	r3, #1
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	697a      	ldr	r2, [r7, #20]
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d3e5      	bcc.n	8001478 <interleave_data+0x14>
    }
}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	371c      	adds	r7, #28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b08a      	sub	sp, #40	; 0x28
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	f107 0310 	add.w	r3, r7, #16
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
 80014d4:	611a      	str	r2, [r3, #16]
 80014d6:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 80014d8:	f107 010c 	add.w	r1, r7, #12
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2219      	movs	r2, #25
 80014e0:	2088      	movs	r0, #136	; 0x88
 80014e2:	f7ff fd7c 	bl	8000fde <bmp2_get_regs>
 80014e6:	4603      	mov	r3, r0
 80014e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BMP2_OK)
 80014ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d177      	bne.n	80015e4 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 80014f4:	7b7b      	ldrb	r3, [r7, #13]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	b21a      	sxth	r2, r3
 80014fa:	7b3b      	ldrb	r3, [r7, #12]
 80014fc:	b21b      	sxth	r3, r3
 80014fe:	4313      	orrs	r3, r2
 8001500:	b21b      	sxth	r3, r3
 8001502:	b29a      	uxth	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	b21a      	sxth	r2, r3
 800150e:	7bbb      	ldrb	r3, [r7, #14]
 8001510:	b21b      	sxth	r3, r3
 8001512:	4313      	orrs	r3, r2
 8001514:	b21a      	sxth	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 800151a:	7c7b      	ldrb	r3, [r7, #17]
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	b21a      	sxth	r2, r3
 8001520:	7c3b      	ldrb	r3, [r7, #16]
 8001522:	b21b      	sxth	r3, r3
 8001524:	4313      	orrs	r3, r2
 8001526:	b21a      	sxth	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 800152c:	7cfb      	ldrb	r3, [r7, #19]
 800152e:	021b      	lsls	r3, r3, #8
 8001530:	b21a      	sxth	r2, r3
 8001532:	7cbb      	ldrb	r3, [r7, #18]
 8001534:	b21b      	sxth	r3, r3
 8001536:	4313      	orrs	r3, r2
 8001538:	b21b      	sxth	r3, r3
 800153a:	b29a      	uxth	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	845a      	strh	r2, [r3, #34]	; 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 8001540:	7d7b      	ldrb	r3, [r7, #21]
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	b21a      	sxth	r2, r3
 8001546:	7d3b      	ldrb	r3, [r7, #20]
 8001548:	b21b      	sxth	r3, r3
 800154a:	4313      	orrs	r3, r2
 800154c:	b21a      	sxth	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	849a      	strh	r2, [r3, #36]	; 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 8001552:	7dfb      	ldrb	r3, [r7, #23]
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	b21a      	sxth	r2, r3
 8001558:	7dbb      	ldrb	r3, [r7, #22]
 800155a:	b21b      	sxth	r3, r3
 800155c:	4313      	orrs	r3, r2
 800155e:	b21a      	sxth	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	84da      	strh	r2, [r3, #38]	; 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 8001564:	7e7b      	ldrb	r3, [r7, #25]
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b21a      	sxth	r2, r3
 800156a:	7e3b      	ldrb	r3, [r7, #24]
 800156c:	b21b      	sxth	r3, r3
 800156e:	4313      	orrs	r3, r2
 8001570:	b21a      	sxth	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	851a      	strh	r2, [r3, #40]	; 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 8001576:	7efb      	ldrb	r3, [r7, #27]
 8001578:	021b      	lsls	r3, r3, #8
 800157a:	b21a      	sxth	r2, r3
 800157c:	7ebb      	ldrb	r3, [r7, #26]
 800157e:	b21b      	sxth	r3, r3
 8001580:	4313      	orrs	r3, r2
 8001582:	b21a      	sxth	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	855a      	strh	r2, [r3, #42]	; 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 8001588:	7f7b      	ldrb	r3, [r7, #29]
 800158a:	021b      	lsls	r3, r3, #8
 800158c:	b21a      	sxth	r2, r3
 800158e:	7f3b      	ldrb	r3, [r7, #28]
 8001590:	b21b      	sxth	r3, r3
 8001592:	4313      	orrs	r3, r2
 8001594:	b21a      	sxth	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	859a      	strh	r2, [r3, #44]	; 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 800159a:	7ffb      	ldrb	r3, [r7, #31]
 800159c:	021b      	lsls	r3, r3, #8
 800159e:	b21a      	sxth	r2, r3
 80015a0:	7fbb      	ldrb	r3, [r7, #30]
 80015a2:	b21b      	sxth	r3, r3
 80015a4:	4313      	orrs	r3, r2
 80015a6:	b21a      	sxth	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	85da      	strh	r2, [r3, #46]	; 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 80015ac:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	b21a      	sxth	r2, r3
 80015b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	4313      	orrs	r3, r2
 80015bc:	b21a      	sxth	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	861a      	strh	r2, [r3, #48]	; 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 80015c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015c6:	021b      	lsls	r3, r3, #8
 80015c8:	b21a      	sxth	r2, r3
 80015ca:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80015ce:	b21b      	sxth	r3, r3
 80015d0:	4313      	orrs	r3, r2
 80015d2:	b21a      	sxth	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	865a      	strh	r2, [r3, #50]	; 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 80015d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015dc:	b25a      	sxtb	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    return rslt;
 80015e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3728      	adds	r7, #40	; 0x28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
 80015fc:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 80015fe:	2300      	movs	r3, #0
 8001600:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 8001602:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 8001606:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d074      	beq.n	80016f8 <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 800160e:	f107 0114 	add.w	r1, r7, #20
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2202      	movs	r2, #2
 8001616:	20f4      	movs	r0, #244	; 0xf4
 8001618:	f7ff fce1 	bl	8000fde <bmp2_get_regs>
 800161c:	4603      	mov	r3, r0
 800161e:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001620:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d169      	bne.n	80016fc <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff fd82 	bl	8001132 <bmp2_soft_reset>
 800162e:	4603      	mov	r3, r0
 8001630:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8001632:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d160      	bne.n	80016fc <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	68b9      	ldr	r1, [r7, #8]
 8001640:	4618      	mov	r0, r3
 8001642:	f000 f861 	bl	8001708 <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 8001646:	7d7b      	ldrb	r3, [r7, #21]
 8001648:	b25b      	sxtb	r3, r3
 800164a:	f003 031f 	and.w	r3, r3, #31
 800164e:	b25a      	sxtb	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	789b      	ldrb	r3, [r3, #2]
 8001654:	015b      	lsls	r3, r3, #5
 8001656:	b25b      	sxtb	r3, r3
 8001658:	4313      	orrs	r3, r2
 800165a:	b25b      	sxtb	r3, r3
 800165c:	b2db      	uxtb	r3, r3
 800165e:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 8001660:	7d7b      	ldrb	r3, [r7, #21]
 8001662:	b25b      	sxtb	r3, r3
 8001664:	f023 031c 	bic.w	r3, r3, #28
 8001668:	b25a      	sxtb	r2, r3
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	791b      	ldrb	r3, [r3, #4]
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	b25b      	sxtb	r3, r3
 8001672:	f003 031c 	and.w	r3, r3, #28
 8001676:	b25b      	sxtb	r3, r3
 8001678:	4313      	orrs	r3, r2
 800167a:	b25b      	sxtb	r3, r3
 800167c:	b2db      	uxtb	r3, r3
 800167e:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 8001680:	7d7b      	ldrb	r3, [r7, #21]
 8001682:	b25b      	sxtb	r3, r3
 8001684:	f023 0301 	bic.w	r3, r3, #1
 8001688:	b25a      	sxtb	r2, r3
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	795b      	ldrb	r3, [r3, #5]
 800168e:	b25b      	sxtb	r3, r3
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	b25b      	sxtb	r3, r3
 8001696:	4313      	orrs	r3, r2
 8001698:	b25b      	sxtb	r3, r3
 800169a:	b2db      	uxtb	r3, r3
 800169c:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 800169e:	f107 0114 	add.w	r1, r7, #20
 80016a2:	f107 0010 	add.w	r0, r7, #16
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2202      	movs	r2, #2
 80016aa:	f7ff fcd0 	bl	800104e <bmp2_set_regs>
 80016ae:	4603      	mov	r3, r0
 80016b0:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 80016b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d120      	bne.n	80016fc <conf_sensor+0x10c>
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d01d      	beq.n	80016fc <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	7bfa      	ldrb	r2, [r7, #15]
 80016c4:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 80016c6:	7d3b      	ldrb	r3, [r7, #20]
 80016c8:	b25b      	sxtb	r3, r3
 80016ca:	f023 0303 	bic.w	r3, r3, #3
 80016ce:	b25a      	sxtb	r2, r3
 80016d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	b25b      	sxtb	r3, r3
 80016da:	4313      	orrs	r3, r2
 80016dc:	b25b      	sxtb	r3, r3
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 80016e2:	f107 0114 	add.w	r1, r7, #20
 80016e6:	f107 0010 	add.w	r0, r7, #16
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f7ff fcae 	bl	800104e <bmp2_set_regs>
 80016f2:	4603      	mov	r3, r0
 80016f4:	75fb      	strb	r3, [r7, #23]
 80016f6:	e001      	b.n	80016fc <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80016f8:	23ff      	movs	r3, #255	; 0xff
 80016fa:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80016fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	78db      	ldrb	r3, [r3, #3]
 8001716:	2b04      	cmp	r3, #4
 8001718:	f200 808b 	bhi.w	8001832 <set_os_mode+0x12a>
 800171c:	a201      	add	r2, pc, #4	; (adr r2, 8001724 <set_os_mode+0x1c>)
 800171e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001722:	bf00      	nop
 8001724:	08001739 	.word	0x08001739
 8001728:	0800176b 	.word	0x0800176b
 800172c:	0800179d 	.word	0x0800179d
 8001730:	080017cf 	.word	0x080017cf
 8001734:	08001801 	.word	0x08001801
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	b25b      	sxtb	r3, r3
 800173e:	f003 031f 	and.w	r3, r3, #31
 8001742:	b25b      	sxtb	r3, r3
 8001744:	f043 0320 	orr.w	r3, r3, #32
 8001748:	b25b      	sxtb	r3, r3
 800174a:	b2da      	uxtb	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	b25b      	sxtb	r3, r3
 8001756:	f023 031c 	bic.w	r3, r3, #28
 800175a:	b25b      	sxtb	r3, r3
 800175c:	f043 0304 	orr.w	r3, r3, #4
 8001760:	b25b      	sxtb	r3, r3
 8001762:	b2da      	uxtb	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	701a      	strb	r2, [r3, #0]
            break;
 8001768:	e064      	b.n	8001834 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	b25b      	sxtb	r3, r3
 8001770:	f003 031f 	and.w	r3, r3, #31
 8001774:	b25b      	sxtb	r3, r3
 8001776:	f043 0320 	orr.w	r3, r3, #32
 800177a:	b25b      	sxtb	r3, r3
 800177c:	b2da      	uxtb	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	b25b      	sxtb	r3, r3
 8001788:	f023 031c 	bic.w	r3, r3, #28
 800178c:	b25b      	sxtb	r3, r3
 800178e:	f043 0308 	orr.w	r3, r3, #8
 8001792:	b25b      	sxtb	r3, r3
 8001794:	b2da      	uxtb	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	701a      	strb	r2, [r3, #0]
            break;
 800179a:	e04b      	b.n	8001834 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	b25b      	sxtb	r3, r3
 80017a2:	f003 031f 	and.w	r3, r3, #31
 80017a6:	b25b      	sxtb	r3, r3
 80017a8:	f043 0320 	orr.w	r3, r3, #32
 80017ac:	b25b      	sxtb	r3, r3
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	b25b      	sxtb	r3, r3
 80017ba:	f023 031c 	bic.w	r3, r3, #28
 80017be:	b25b      	sxtb	r3, r3
 80017c0:	f043 030c 	orr.w	r3, r3, #12
 80017c4:	b25b      	sxtb	r3, r3
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	701a      	strb	r2, [r3, #0]
            break;
 80017cc:	e032      	b.n	8001834 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	b25b      	sxtb	r3, r3
 80017d4:	f003 031f 	and.w	r3, r3, #31
 80017d8:	b25b      	sxtb	r3, r3
 80017da:	f043 0320 	orr.w	r3, r3, #32
 80017de:	b25b      	sxtb	r3, r3
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	b25b      	sxtb	r3, r3
 80017ec:	f023 031c 	bic.w	r3, r3, #28
 80017f0:	b25b      	sxtb	r3, r3
 80017f2:	f043 0310 	orr.w	r3, r3, #16
 80017f6:	b25b      	sxtb	r3, r3
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	701a      	strb	r2, [r3, #0]
            break;
 80017fe:	e019      	b.n	8001834 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	b25b      	sxtb	r3, r3
 8001806:	f003 031f 	and.w	r3, r3, #31
 800180a:	b25b      	sxtb	r3, r3
 800180c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001810:	b25b      	sxtb	r3, r3
 8001812:	b2da      	uxtb	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b25b      	sxtb	r3, r3
 800181e:	f023 031c 	bic.w	r3, r3, #28
 8001822:	b25b      	sxtb	r3, r3
 8001824:	f043 0314 	orr.w	r3, r3, #20
 8001828:	b25b      	sxtb	r3, r3
 800182a:	b2da      	uxtb	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	701a      	strb	r2, [r3, #0]
            break;
 8001830:	e000      	b.n	8001834 <set_os_mode+0x12c>
        default:
            break;
 8001832:	bf00      	nop
    }
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	031b      	lsls	r3, r3, #12
 8001850:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3301      	adds	r3, #1
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	011b      	lsls	r3, r3, #4
 800185a:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3302      	adds	r3, #2
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	091b      	lsrs	r3, r3, #4
 8001864:	b2db      	uxtb	r3, r3
 8001866:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	431a      	orrs	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	431a      	orrs	r2, r3
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	3303      	adds	r3, #3
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	031b      	lsls	r3, r3, #12
 800187e:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3304      	adds	r3, #4
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	011b      	lsls	r3, r3, #4
 8001888:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3305      	adds	r3, #5
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	091b      	lsrs	r3, r3, #4
 8001892:	b2db      	uxtb	r3, r3
 8001894:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	431a      	orrs	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4313      	orrs	r3, r2
 80018a0:	461a      	mov	r2, r3
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	4619      	mov	r1, r3
 80018b0:	4610      	mov	r0, r2
 80018b2:	f000 fae5 	bl	8001e80 <st_check_boundaries>
 80018b6:	4603      	mov	r3, r0
 80018b8:	72fb      	strb	r3, [r7, #11]

    return rslt;
 80018ba:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 80018c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018cc:	b08c      	sub	sp, #48	; 0x30
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7fe fe37 	bl	8000554 <__aeabi_i2d>
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	4b6c      	ldr	r3, [pc, #432]	; (8001a9c <compensate_temperature+0x1d4>)
 80018ec:	f7fe ffc6 	bl	800087c <__aeabi_ddiv>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4614      	mov	r4, r2
 80018f6:	461d      	mov	r5, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	8b9b      	ldrh	r3, [r3, #28]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe fe19 	bl	8000534 <__aeabi_ui2d>
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	4b66      	ldr	r3, [pc, #408]	; (8001aa0 <compensate_temperature+0x1d8>)
 8001908:	f7fe ffb8 	bl	800087c <__aeabi_ddiv>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4620      	mov	r0, r4
 8001912:	4629      	mov	r1, r5
 8001914:	f7fe fcd0 	bl	80002b8 <__aeabi_dsub>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4614      	mov	r4, r2
 800191e:	461d      	mov	r5, r3
           ((double) dev->calib_param.dig_t2);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fe14 	bl	8000554 <__aeabi_i2d>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001930:	4620      	mov	r0, r4
 8001932:	4629      	mov	r1, r5
 8001934:	f7fe fe78 	bl	8000628 <__aeabi_dmul>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fe05 	bl	8000554 <__aeabi_i2d>
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001952:	f7fe ff93 	bl	800087c <__aeabi_ddiv>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4614      	mov	r4, r2
 800195c:	461d      	mov	r5, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	8b9b      	ldrh	r3, [r3, #28]
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe fde6 	bl	8000534 <__aeabi_ui2d>
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	4b4d      	ldr	r3, [pc, #308]	; (8001aa4 <compensate_temperature+0x1dc>)
 800196e:	f7fe ff85 	bl	800087c <__aeabi_ddiv>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4620      	mov	r0, r4
 8001978:	4629      	mov	r1, r5
 800197a:	f7fe fc9d 	bl	80002b8 <__aeabi_dsub>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4614      	mov	r4, r2
 8001984:	461d      	mov	r5, r3
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe fde2 	bl	8000554 <__aeabi_i2d>
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001998:	f7fe ff70 	bl	800087c <__aeabi_ddiv>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4690      	mov	r8, r2
 80019a2:	4699      	mov	r9, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	8b9b      	ldrh	r3, [r3, #28]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7fe fdc3 	bl	8000534 <__aeabi_ui2d>
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	4b3c      	ldr	r3, [pc, #240]	; (8001aa4 <compensate_temperature+0x1dc>)
 80019b4:	f7fe ff62 	bl	800087c <__aeabi_ddiv>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4640      	mov	r0, r8
 80019be:	4649      	mov	r1, r9
 80019c0:	f7fe fc7a 	bl	80002b8 <__aeabi_dsub>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80019c8:	4620      	mov	r0, r4
 80019ca:	4629      	mov	r1, r5
 80019cc:	f7fe fe2c 	bl	8000628 <__aeabi_dmul>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4614      	mov	r4, r2
 80019d6:	461d      	mov	r5, r3
        ((double) dev->calib_param.dig_t3);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe fdb8 	bl	8000554 <__aeabi_i2d>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
    var2 =
 80019e8:	4620      	mov	r0, r4
 80019ea:	4629      	mov	r1, r5
 80019ec:	f7fe fe1c 	bl	8000628 <__aeabi_dmul>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 80019f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a00:	f7fe fc5c 	bl	80002bc <__adddf3>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f7ff f8a6 	bl	8000b5c <__aeabi_d2iz>
 8001a10:	4602      	mov	r2, r0
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	639a      	str	r2, [r3, #56]	; 0x38
    temperature = (var1 + var2) / 5120.0;
 8001a16:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a1a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a1e:	f7fe fc4d 	bl	80002bc <__adddf3>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4610      	mov	r0, r2
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	4b1e      	ldr	r3, [pc, #120]	; (8001aa8 <compensate_temperature+0x1e0>)
 8001a30:	f7fe ff24 	bl	800087c <__aeabi_ddiv>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <compensate_temperature+0x1e4>)
 8001a42:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a46:	f7ff f861 	bl	8000b0c <__aeabi_dcmplt>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d007      	beq.n	8001a60 <compensate_temperature+0x198>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	4b15      	ldr	r3, [pc, #84]	; (8001aac <compensate_temperature+0x1e4>)
 8001a56:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <compensate_temperature+0x1e8>)
 8001a66:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a6a:	f7ff f86d 	bl	8000b48 <__aeabi_dcmpgt>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d007      	beq.n	8001a84 <compensate_temperature+0x1bc>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <compensate_temperature+0x1e8>)
 8001a7a:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*comp_temperature) = temperature;
 8001a84:	68f9      	ldr	r1, [r7, #12]
 8001a86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a8a:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8001a8e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3730      	adds	r7, #48	; 0x30
 8001a96:	46bd      	mov	sp, r7
 8001a98:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a9c:	40d00000 	.word	0x40d00000
 8001aa0:	40900000 	.word	0x40900000
 8001aa4:	40c00000 	.word	0x40c00000
 8001aa8:	40b40000 	.word	0x40b40000
 8001aac:	c0440000 	.word	0xc0440000
 8001ab0:	40554000 	.word	0x40554000
 8001ab4:	00000000 	.word	0x00000000

08001ab8 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001ab8:	b5b0      	push	{r4, r5, r7, lr}
 8001aba:	b08c      	sub	sp, #48	; 0x30
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double pressure = 0.0;
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fd3a 	bl	8000554 <__aeabi_i2d>
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ae8:	f7fe fec8 	bl	800087c <__aeabi_ddiv>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	4bcb      	ldr	r3, [pc, #812]	; (8001e28 <compensate_pressure+0x370>)
 8001afa:	f7fe fbdd 	bl	80002b8 <__aeabi_dsub>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001b06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b0e:	f7fe fd8b 	bl	8000628 <__aeabi_dmul>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4614      	mov	r4, r2
 8001b18:	461d      	mov	r5, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fd17 	bl	8000554 <__aeabi_i2d>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	4629      	mov	r1, r5
 8001b2e:	f7fe fd7b 	bl	8000628 <__aeabi_dmul>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4610      	mov	r0, r2
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	4bbb      	ldr	r3, [pc, #748]	; (8001e2c <compensate_pressure+0x374>)
 8001b40:	f7fe fe9c 	bl	800087c <__aeabi_ddiv>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fcfe 	bl	8000554 <__aeabi_i2d>
 8001b58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b5c:	f7fe fd64 	bl	8000628 <__aeabi_dmul>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	f7fe fba6 	bl	80002bc <__adddf3>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b78:	f7fe fba0 	bl	80002bc <__adddf3>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	4ba9      	ldr	r3, [pc, #676]	; (8001e30 <compensate_pressure+0x378>)
 8001b8a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b8e:	f7fe fe75 	bl	800087c <__aeabi_ddiv>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4614      	mov	r4, r2
 8001b98:	461d      	mov	r5, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fcd7 	bl	8000554 <__aeabi_i2d>
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	4ba2      	ldr	r3, [pc, #648]	; (8001e34 <compensate_pressure+0x37c>)
 8001bac:	f7fe fd3c 	bl	8000628 <__aeabi_dmul>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	4629      	mov	r1, r5
 8001bb8:	f7fe fb80 	bl	80002bc <__adddf3>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fcc2 	bl	8000554 <__aeabi_i2d>
 8001bd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bd4:	f7fe fd28 	bl	8000628 <__aeabi_dmul>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001be4:	f7fe fd20 	bl	8000628 <__aeabi_dmul>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	4b90      	ldr	r3, [pc, #576]	; (8001e38 <compensate_pressure+0x380>)
 8001bf6:	f7fe fe41 	bl	800087c <__aeabi_ddiv>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4614      	mov	r4, r2
 8001c00:	461d      	mov	r5, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe fca3 	bl	8000554 <__aeabi_i2d>
 8001c0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c12:	f7fe fd09 	bl	8000628 <__aeabi_dmul>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	4629      	mov	r1, r5
 8001c1e:	f7fe fb4d 	bl	80002bc <__adddf3>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	4610      	mov	r0, r2
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	4b82      	ldr	r3, [pc, #520]	; (8001e38 <compensate_pressure+0x380>)
 8001c30:	f7fe fe24 	bl	800087c <__aeabi_ddiv>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	e9c7 2306 	strd	r2, r3, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001c3c:	f04f 0200 	mov.w	r2, #0
 8001c40:	4b7a      	ldr	r3, [pc, #488]	; (8001e2c <compensate_pressure+0x374>)
 8001c42:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c46:	f7fe fe19 	bl	800087c <__aeabi_ddiv>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	4b79      	ldr	r3, [pc, #484]	; (8001e3c <compensate_pressure+0x384>)
 8001c58:	f7fe fb30 	bl	80002bc <__adddf3>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4614      	mov	r4, r2
 8001c62:	461d      	mov	r5, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fc63 	bl	8000534 <__aeabi_ui2d>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4620      	mov	r0, r4
 8001c74:	4629      	mov	r1, r5
 8001c76:	f7fe fcd7 	bl	8000628 <__aeabi_dmul>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c8e:	f7fe ff3d 	bl	8000b0c <__aeabi_dcmplt>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10b      	bne.n	8001cb0 <compensate_pressure+0x1f8>
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	f04f 0300 	mov.w	r3, #0
 8001ca0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ca4:	f7fe ff50 	bl	8000b48 <__aeabi_dcmpgt>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 80de 	beq.w	8001e6c <compensate_pressure+0x3b4>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe fc3d 	bl	8000534 <__aeabi_ui2d>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	f04f 0000 	mov.w	r0, #0
 8001cc2:	495f      	ldr	r1, [pc, #380]	; (8001e40 <compensate_pressure+0x388>)
 8001cc4:	f7fe faf8 	bl	80002b8 <__aeabi_dsub>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	e9c7 2308 	strd	r2, r3, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	4b5b      	ldr	r3, [pc, #364]	; (8001e44 <compensate_pressure+0x38c>)
 8001cd6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cda:	f7fe fdcf 	bl	800087c <__aeabi_ddiv>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ce6:	f7fe fae7 	bl	80002b8 <__aeabi_dsub>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4610      	mov	r0, r2
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	a347      	add	r3, pc, #284	; (adr r3, 8001e10 <compensate_pressure+0x358>)
 8001cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf8:	f7fe fc96 	bl	8000628 <__aeabi_dmul>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d08:	f7fe fdb8 	bl	800087c <__aeabi_ddiv>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	e9c7 2308 	strd	r2, r3, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe fc1a 	bl	8000554 <__aeabi_i2d>
 8001d20:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d24:	f7fe fc80 	bl	8000628 <__aeabi_dmul>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	4619      	mov	r1, r3
 8001d30:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d34:	f7fe fc78 	bl	8000628 <__aeabi_dmul>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	4b40      	ldr	r3, [pc, #256]	; (8001e48 <compensate_pressure+0x390>)
 8001d46:	f7fe fd99 	bl	800087c <__aeabi_ddiv>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe fbfb 	bl	8000554 <__aeabi_i2d>
 8001d5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d62:	f7fe fc61 	bl	8000628 <__aeabi_dmul>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	4b2e      	ldr	r3, [pc, #184]	; (8001e2c <compensate_pressure+0x374>)
 8001d74:	f7fe fd82 	bl	800087c <__aeabi_ddiv>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	e9c7 2304 	strd	r2, r3, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8001d80:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d84:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d88:	f7fe fa98 	bl	80002bc <__adddf3>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4614      	mov	r4, r2
 8001d92:	461d      	mov	r5, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fbda 	bl	8000554 <__aeabi_i2d>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4620      	mov	r0, r4
 8001da6:	4629      	mov	r1, r5
 8001da8:	f7fe fa88 	bl	80002bc <__adddf3>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <compensate_pressure+0x394>)
 8001dba:	f7fe fd5f 	bl	800087c <__aeabi_ddiv>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001dc6:	f7fe fa79 	bl	80002bc <__adddf3>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 8001dd2:	a311      	add	r3, pc, #68	; (adr r3, 8001e18 <compensate_pressure+0x360>)
 8001dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ddc:	f7fe fe96 	bl	8000b0c <__aeabi_dcmplt>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d007      	beq.n	8001df6 <compensate_pressure+0x33e>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 8001de6:	a30c      	add	r3, pc, #48	; (adr r3, 8001e18 <compensate_pressure+0x360>)
 8001de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dec:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 8001df0:	2303      	movs	r3, #3
 8001df2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 8001df6:	a30a      	add	r3, pc, #40	; (adr r3, 8001e20 <compensate_pressure+0x368>)
 8001df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e00:	f7fe fea2 	bl	8000b48 <__aeabi_dcmpgt>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	e022      	b.n	8001e50 <compensate_pressure+0x398>
 8001e0a:	bf00      	nop
 8001e0c:	f3af 8000 	nop.w
 8001e10:	00000000 	.word	0x00000000
 8001e14:	40b86a00 	.word	0x40b86a00
 8001e18:	00000000 	.word	0x00000000
 8001e1c:	40dd4c00 	.word	0x40dd4c00
 8001e20:	00000000 	.word	0x00000000
 8001e24:	40fadb00 	.word	0x40fadb00
 8001e28:	40ef4000 	.word	0x40ef4000
 8001e2c:	40e00000 	.word	0x40e00000
 8001e30:	40100000 	.word	0x40100000
 8001e34:	40f00000 	.word	0x40f00000
 8001e38:	41200000 	.word	0x41200000
 8001e3c:	3ff00000 	.word	0x3ff00000
 8001e40:	41300000 	.word	0x41300000
 8001e44:	40b00000 	.word	0x40b00000
 8001e48:	41e00000 	.word	0x41e00000
 8001e4c:	40300000 	.word	0x40300000
 8001e50:	d007      	beq.n	8001e62 <compensate_pressure+0x3aa>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 8001e52:	a309      	add	r3, pc, #36	; (adr r3, 8001e78 <compensate_pressure+0x3c0>)
 8001e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e58:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        (*comp_pressure) = pressure;
 8001e62:	68f9      	ldr	r1, [r7, #12]
 8001e64:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e68:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 8001e6c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3730      	adds	r7, #48	; 0x30
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bdb0      	pop	{r4, r5, r7, pc}
 8001e78:	00000000 	.word	0x00000000
 8001e7c:	40fadb00 	.word	0x40fadb00

08001e80 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	db03      	blt.n	8001e9c <st_check_boundaries+0x1c>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	4a1c      	ldr	r2, [pc, #112]	; (8001f08 <st_check_boundaries+0x88>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	dd09      	ble.n	8001eb0 <st_check_boundaries+0x30>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	db06      	blt.n	8001eb0 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a18      	ldr	r2, [pc, #96]	; (8001f08 <st_check_boundaries+0x88>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	dc02      	bgt.n	8001eb0 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 8001eaa:	23fa      	movs	r3, #250	; 0xfa
 8001eac:	73fb      	strb	r3, [r7, #15]
 8001eae:	e023      	b.n	8001ef8 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	db03      	blt.n	8001ebe <st_check_boundaries+0x3e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a13      	ldr	r2, [pc, #76]	; (8001f08 <st_check_boundaries+0x88>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	dd09      	ble.n	8001ed2 <st_check_boundaries+0x52>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	db06      	blt.n	8001ed2 <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	4a10      	ldr	r2, [pc, #64]	; (8001f08 <st_check_boundaries+0x88>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	dc02      	bgt.n	8001ed2 <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 8001ecc:	23fb      	movs	r3, #251	; 0xfb
 8001ece:	73fb      	strb	r3, [r7, #15]
 8001ed0:	e012      	b.n	8001ef8 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	db03      	blt.n	8001ee0 <st_check_boundaries+0x60>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	4a0b      	ldr	r2, [pc, #44]	; (8001f08 <st_check_boundaries+0x88>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	dd09      	ble.n	8001ef4 <st_check_boundaries+0x74>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	db03      	blt.n	8001eee <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a07      	ldr	r2, [pc, #28]	; (8001f08 <st_check_boundaries+0x88>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	dd02      	ble.n	8001ef4 <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001eee:	23f9      	movs	r3, #249	; 0xf9
 8001ef0:	73fb      	strb	r3, [r7, #15]
 8001ef2:	e001      	b.n	8001ef8 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	000ffff0 	.word	0x000ffff0

08001f0c <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff f837 	bl	8000f88 <bmp2_init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 8001f1e:	f107 0308 	add.w	r3, r7, #8
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff f91c 	bl	8001162 <bmp2_get_config>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_COEFF_8;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 8001f32:	2300      	movs	r3, #0
 8001f34:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 8001f36:	2303      	movs	r3, #3
 8001f38:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 8001f3a:	f107 0308 	add.w	r3, r7, #8
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff f94e 	bl	80011e2 <bmp2_set_config>
 8001f46:	4603      	mov	r3, r0
 8001f48:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 8001f4a:	f107 0308 	add.w	r3, r7, #8
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	4619      	mov	r1, r3
 8001f52:	2003      	movs	r0, #3
 8001f54:	f7ff f980 	bl	8001258 <bmp2_set_power_mode>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 8001f5c:	f107 0108 	add.w	r1, r7, #8
 8001f60:	f107 0310 	add.w	r3, r7, #16
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fa0a 	bl	8001380 <bmp2_compute_meas_time>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8001f70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	607a      	str	r2, [r7, #4]
 8001f86:	603b      	str	r3, [r7, #0]
 8001f88:	4603      	mov	r3, r0
 8001f8a:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001f90:	2300      	movs	r3, #0
 8001f92:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	6858      	ldr	r0, [r3, #4]
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	891b      	ldrh	r3, [r3, #8]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f003 ff32 	bl	8005e0c <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI , &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	6818      	ldr	r0, [r3, #0]
 8001fac:	f107 010f 	add.w	r1, r7, #15
 8001fb0:	2305      	movs	r3, #5
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f005 fd17 	bl	80079e6 <HAL_SPI_Transmit>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Receive( hbmp2->SPI,  reg_data, length,            BMP2_TIMEOUT);
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	6818      	ldr	r0, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	2305      	movs	r3, #5
 8001fc6:	68b9      	ldr	r1, [r7, #8]
 8001fc8:	f005 fe7b 	bl	8007cc2 <HAL_SPI_Receive>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	461a      	mov	r2, r3
 8001fd0:	7dbb      	ldrb	r3, [r7, #22]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	6858      	ldr	r0, [r3, #4]
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	891b      	ldrh	r3, [r3, #8]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f003 ff13 	bl	8005e0c <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8001fe6:	7dbb      	ldrb	r3, [r7, #22]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <bmp2_spi_read+0x74>
    iError = -1;
 8001fec:	23ff      	movs	r3, #255	; 0xff
 8001fee:	75fb      	strb	r3, [r7, #23]

  return iError;
 8001ff0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	603b      	str	r3, [r7, #0]
 8002008:	4603      	mov	r3, r0
 800200a:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 800200c:	2300      	movs	r3, #0
 800200e:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8002010:	2300      	movs	r3, #0
 8002012:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	6858      	ldr	r0, [r3, #4]
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	891b      	ldrh	r3, [r3, #8]
 8002020:	2200      	movs	r2, #0
 8002022:	4619      	mov	r1, r3
 8002024:	f003 fef2 	bl	8005e0c <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI, &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	6818      	ldr	r0, [r3, #0]
 800202c:	f107 010f 	add.w	r1, r7, #15
 8002030:	2305      	movs	r3, #5
 8002032:	2201      	movs	r2, #1
 8002034:	f005 fcd7 	bl	80079e6 <HAL_SPI_Transmit>
 8002038:	4603      	mov	r3, r0
 800203a:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Transmit(hbmp2->SPI, (uint8_t*)reg_data, length,   BMP2_TIMEOUT);
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	6818      	ldr	r0, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	b29a      	uxth	r2, r3
 8002044:	2305      	movs	r3, #5
 8002046:	68b9      	ldr	r1, [r7, #8]
 8002048:	f005 fccd 	bl	80079e6 <HAL_SPI_Transmit>
 800204c:	4603      	mov	r3, r0
 800204e:	461a      	mov	r2, r3
 8002050:	7dbb      	ldrb	r3, [r7, #22]
 8002052:	4413      	add	r3, r2
 8002054:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	6858      	ldr	r0, [r3, #4]
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	891b      	ldrh	r3, [r3, #8]
 800205e:	2201      	movs	r2, #1
 8002060:	4619      	mov	r1, r3
 8002062:	f003 fed3 	bl	8005e0c <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8002066:	7dbb      	ldrb	r3, [r7, #22]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <bmp2_spi_write+0x74>
    iError = -1;
 800206c:	23ff      	movs	r3, #255	; 0xff
 800206e:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002070:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a05      	ldr	r2, [pc, #20]	; (80020a0 <bmp2_delay_us+0x24>)
 800208a:	fba2 2303 	umull	r2, r3, r2, r3
 800208e:	099b      	lsrs	r3, r3, #6
 8002090:	4618      	mov	r0, r3
 8002092:	f002 fb1f 	bl	80046d4 <HAL_Delay>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	10624dd3 	.word	0x10624dd3

080020a4 <BMP2_ReadData>:
 *  @retval 0 -> Success.
 *  @retval <0 -> Failure.
 *
 */
int8_t BMP2_ReadData(struct bmp2_dev *dev, double* press, double* temp)
{
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b08b      	sub	sp, #44	; 0x2c
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
  int8_t rslt = BMP2_E_NULL_PTR;
 80020b0:	23ff      	movs	r3, #255	; 0xff
 80020b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  struct bmp2_status status;
  struct bmp2_data comp_data;
  int8_t try = BMP2_GET_MAX_RETRY(dev);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	899b      	ldrh	r3, [r3, #12]
 80020bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  do {
    /* Read sensor status */
    rslt = bmp2_get_status(&status, dev);
 80020c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c4:	68f9      	ldr	r1, [r7, #12]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff f89a 	bl	8001200 <bmp2_get_status>
 80020cc:	4603      	mov	r3, r0
 80020ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* Read compensated data */
    rslt = bmp2_get_sensor_data(&comp_data, dev);
 80020d2:	f107 0310 	add.w	r3, r7, #16
 80020d6:	68f9      	ldr	r1, [r7, #12]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff f8d2 	bl	8001282 <bmp2_get_sensor_data>
 80020de:	4603      	mov	r3, r0
 80020e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    *temp = comp_data.temperature;
 80020e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	e9c1 2300 	strd	r2, r3, [r1]
    *press = comp_data.pressure / 100.0;
 80020ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	4b1c      	ldr	r3, [pc, #112]	; (8002168 <BMP2_ReadData+0xc4>)
 80020f8:	f7fe fbc0 	bl	800087c <__aeabi_ddiv>
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	68b9      	ldr	r1, [r7, #8]
 8002102:	e9c1 2300 	strd	r2, r3, [r1]
    try--;
 8002106:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800210a:	b2db      	uxtb	r3, r3
 800210c:	3b01      	subs	r3, #1
 800210e:	b2db      	uxtb	r3, r3
 8002110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 8002114:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <BMP2_ReadData+0x80>
 800211c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002120:	2b00      	cmp	r3, #0
 8002122:	dccd      	bgt.n	80020c0 <BMP2_ReadData+0x1c>

  /* Save reading result in sensor handler */
  BMP2_GET_PRESS(dev) = *press;
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212a:	68f9      	ldr	r1, [r7, #12]
 800212c:	684c      	ldr	r4, [r1, #4]
 800212e:	4610      	mov	r0, r2
 8002130:	4619      	mov	r1, r3
 8002132:	f7fe fd5b 	bl	8000bec <__aeabi_d2f>
 8002136:	4603      	mov	r3, r0
 8002138:	6163      	str	r3, [r4, #20]
  BMP2_GET_TEMP(dev) = *temp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002140:	68f9      	ldr	r1, [r7, #12]
 8002142:	684c      	ldr	r4, [r1, #4]
 8002144:	4610      	mov	r0, r2
 8002146:	4619      	mov	r1, r3
 8002148:	f7fe fd50 	bl	8000bec <__aeabi_d2f>
 800214c:	4603      	mov	r3, r0
 800214e:	6123      	str	r3, [r4, #16]
  BMP2_GET_STATUS(dev) = rslt;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002158:	729a      	strb	r2, [r3, #10]

  return rslt;
 800215a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 800215e:	4618      	mov	r0, r3
 8002160:	372c      	adds	r7, #44	; 0x2c
 8002162:	46bd      	mov	sp, r7
 8002164:	bd90      	pop	{r4, r7, pc}
 8002166:	bf00      	nop
 8002168:	40590000 	.word	0x40590000

0800216c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002172:	463b      	mov	r3, r7
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800217e:	4b21      	ldr	r3, [pc, #132]	; (8002204 <MX_ADC1_Init+0x98>)
 8002180:	4a21      	ldr	r2, [pc, #132]	; (8002208 <MX_ADC1_Init+0x9c>)
 8002182:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002184:	4b1f      	ldr	r3, [pc, #124]	; (8002204 <MX_ADC1_Init+0x98>)
 8002186:	2200      	movs	r2, #0
 8002188:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800218a:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <MX_ADC1_Init+0x98>)
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002190:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <MX_ADC1_Init+0x98>)
 8002192:	2200      	movs	r2, #0
 8002194:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002196:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <MX_ADC1_Init+0x98>)
 8002198:	2200      	movs	r2, #0
 800219a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800219c:	4b19      	ldr	r3, [pc, #100]	; (8002204 <MX_ADC1_Init+0x98>)
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021a4:	4b17      	ldr	r3, [pc, #92]	; (8002204 <MX_ADC1_Init+0x98>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021aa:	4b16      	ldr	r3, [pc, #88]	; (8002204 <MX_ADC1_Init+0x98>)
 80021ac:	4a17      	ldr	r2, [pc, #92]	; (800220c <MX_ADC1_Init+0xa0>)
 80021ae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021b0:	4b14      	ldr	r3, [pc, #80]	; (8002204 <MX_ADC1_Init+0x98>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80021b6:	4b13      	ldr	r3, [pc, #76]	; (8002204 <MX_ADC1_Init+0x98>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80021bc:	4b11      	ldr	r3, [pc, #68]	; (8002204 <MX_ADC1_Init+0x98>)
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021c4:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <MX_ADC1_Init+0x98>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80021ca:	480e      	ldr	r0, [pc, #56]	; (8002204 <MX_ADC1_Init+0x98>)
 80021cc:	f002 faa6 	bl	800471c <HAL_ADC_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80021d6:	f001 fc77 	bl	8003ac8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80021da:	2309      	movs	r3, #9
 80021dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80021de:	2301      	movs	r3, #1
 80021e0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80021e2:	2300      	movs	r3, #0
 80021e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021e6:	463b      	mov	r3, r7
 80021e8:	4619      	mov	r1, r3
 80021ea:	4806      	ldr	r0, [pc, #24]	; (8002204 <MX_ADC1_Init+0x98>)
 80021ec:	f002 fd6e 	bl	8004ccc <HAL_ADC_ConfigChannel>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80021f6:	f001 fc67 	bl	8003ac8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021fa:	bf00      	nop
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000154 	.word	0x20000154
 8002208:	40012000 	.word	0x40012000
 800220c:	0f000001 	.word	0x0f000001

08002210 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08a      	sub	sp, #40	; 0x28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 0314 	add.w	r3, r7, #20
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a31      	ldr	r2, [pc, #196]	; (80022f4 <HAL_ADC_MspInit+0xe4>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d15b      	bne.n	80022ea <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002232:	4b31      	ldr	r3, [pc, #196]	; (80022f8 <HAL_ADC_MspInit+0xe8>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	4a30      	ldr	r2, [pc, #192]	; (80022f8 <HAL_ADC_MspInit+0xe8>)
 8002238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223c:	6453      	str	r3, [r2, #68]	; 0x44
 800223e:	4b2e      	ldr	r3, [pc, #184]	; (80022f8 <HAL_ADC_MspInit+0xe8>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800224a:	4b2b      	ldr	r3, [pc, #172]	; (80022f8 <HAL_ADC_MspInit+0xe8>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	4a2a      	ldr	r2, [pc, #168]	; (80022f8 <HAL_ADC_MspInit+0xe8>)
 8002250:	f043 0302 	orr.w	r3, r3, #2
 8002254:	6313      	str	r3, [r2, #48]	; 0x30
 8002256:	4b28      	ldr	r3, [pc, #160]	; (80022f8 <HAL_ADC_MspInit+0xe8>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002262:	2302      	movs	r3, #2
 8002264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002266:	2303      	movs	r3, #3
 8002268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800226e:	f107 0314 	add.w	r3, r7, #20
 8002272:	4619      	mov	r1, r3
 8002274:	4821      	ldr	r0, [pc, #132]	; (80022fc <HAL_ADC_MspInit+0xec>)
 8002276:	f003 fc1d 	bl	8005ab4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800227a:	4b21      	ldr	r3, [pc, #132]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 800227c:	4a21      	ldr	r2, [pc, #132]	; (8002304 <HAL_ADC_MspInit+0xf4>)
 800227e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002280:	4b1f      	ldr	r3, [pc, #124]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 8002282:	2200      	movs	r2, #0
 8002284:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002286:	4b1e      	ldr	r3, [pc, #120]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 8002288:	2200      	movs	r2, #0
 800228a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800228c:	4b1c      	ldr	r3, [pc, #112]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 800228e:	2200      	movs	r2, #0
 8002290:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002292:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 8002294:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002298:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800229a:	4b19      	ldr	r3, [pc, #100]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 800229c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022a0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022a2:	4b17      	ldr	r3, [pc, #92]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 80022a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80022aa:	4b15      	ldr	r3, [pc, #84]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 80022ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022b0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80022b2:	4b13      	ldr	r3, [pc, #76]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022b8:	4b11      	ldr	r3, [pc, #68]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80022be:	4810      	ldr	r0, [pc, #64]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 80022c0:	f003 f87c 	bl	80053bc <HAL_DMA_Init>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80022ca:	f001 fbfd 	bl	8003ac8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a0b      	ldr	r2, [pc, #44]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 80022d2:	639a      	str	r2, [r3, #56]	; 0x38
 80022d4:	4a0a      	ldr	r2, [pc, #40]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80022da:	2200      	movs	r2, #0
 80022dc:	2100      	movs	r1, #0
 80022de:	2012      	movs	r0, #18
 80022e0:	f003 f829 	bl	8005336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80022e4:	2012      	movs	r0, #18
 80022e6:	f003 f842 	bl	800536e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80022ea:	bf00      	nop
 80022ec:	3728      	adds	r7, #40	; 0x28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40012000 	.word	0x40012000
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40020400 	.word	0x40020400
 8002300:	2000019c 	.word	0x2000019c
 8002304:	40026410 	.word	0x40026410

08002308 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800230e:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <MX_DMA_Init+0x38>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	4a0b      	ldr	r2, [pc, #44]	; (8002340 <MX_DMA_Init+0x38>)
 8002314:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002318:	6313      	str	r3, [r2, #48]	; 0x30
 800231a:	4b09      	ldr	r3, [pc, #36]	; (8002340 <MX_DMA_Init+0x38>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002322:	607b      	str	r3, [r7, #4]
 8002324:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002326:	2200      	movs	r2, #0
 8002328:	2100      	movs	r1, #0
 800232a:	2038      	movs	r0, #56	; 0x38
 800232c:	f003 f803 	bl	8005336 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002330:	2038      	movs	r0, #56	; 0x38
 8002332:	f003 f81c 	bl	800536e <HAL_NVIC_EnableIRQ>

}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800

08002344 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8002348:	2200      	movs	r2, #0
 800234a:	2110      	movs	r1, #16
 800234c:	4803      	ldr	r0, [pc, #12]	; (800235c <SELECT+0x18>)
 800234e:	f003 fd5d 	bl	8005e0c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002352:	2001      	movs	r0, #1
 8002354:	f002 f9be 	bl	80046d4 <HAL_Delay>
}
 8002358:	bf00      	nop
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40020000 	.word	0x40020000

08002360 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8002364:	2201      	movs	r2, #1
 8002366:	2110      	movs	r1, #16
 8002368:	4803      	ldr	r0, [pc, #12]	; (8002378 <DESELECT+0x18>)
 800236a:	f003 fd4f 	bl	8005e0c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800236e:	2001      	movs	r0, #1
 8002370:	f002 f9b0 	bl	80046d4 <HAL_Delay>
}
 8002374:	bf00      	nop
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40020000 	.word	0x40020000

0800237c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002386:	bf00      	nop
 8002388:	4b08      	ldr	r3, [pc, #32]	; (80023ac <SPI_TxByte+0x30>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b02      	cmp	r3, #2
 8002394:	d1f8      	bne.n	8002388 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8002396:	1df9      	adds	r1, r7, #7
 8002398:	2364      	movs	r3, #100	; 0x64
 800239a:	2201      	movs	r2, #1
 800239c:	4803      	ldr	r0, [pc, #12]	; (80023ac <SPI_TxByte+0x30>)
 800239e:	f005 fb22 	bl	80079e6 <HAL_SPI_Transmit>
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	2000231c 	.word	0x2000231c

080023b0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80023bc:	bf00      	nop
 80023be:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <SPI_TxBuffer+0x30>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d1f8      	bne.n	80023be <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80023cc:	887a      	ldrh	r2, [r7, #2]
 80023ce:	2364      	movs	r3, #100	; 0x64
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4803      	ldr	r0, [pc, #12]	; (80023e0 <SPI_TxBuffer+0x30>)
 80023d4:	f005 fb07 	bl	80079e6 <HAL_SPI_Transmit>
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	2000231c 	.word	0x2000231c

080023e4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80023ea:	23ff      	movs	r3, #255	; 0xff
 80023ec:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80023ee:	bf00      	nop
 80023f0:	4b09      	ldr	r3, [pc, #36]	; (8002418 <SPI_RxByte+0x34>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d1f8      	bne.n	80023f0 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80023fe:	1dba      	adds	r2, r7, #6
 8002400:	1df9      	adds	r1, r7, #7
 8002402:	2364      	movs	r3, #100	; 0x64
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	2301      	movs	r3, #1
 8002408:	4803      	ldr	r0, [pc, #12]	; (8002418 <SPI_RxByte+0x34>)
 800240a:	f005 fd8a 	bl	8007f22 <HAL_SPI_TransmitReceive>

	return data;
 800240e:	79bb      	ldrb	r3, [r7, #6]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	2000231c 	.word	0x2000231c

0800241c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8002424:	f7ff ffde 	bl	80023e4 <SPI_RxByte>
 8002428:	4603      	mov	r3, r0
 800242a:	461a      	mov	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	701a      	strb	r2, [r3, #0]
}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800243e:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <SD_ReadyWait+0x30>)
 8002440:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002444:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8002446:	f7ff ffcd 	bl	80023e4 <SPI_RxByte>
 800244a:	4603      	mov	r3, r0
 800244c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	2bff      	cmp	r3, #255	; 0xff
 8002452:	d003      	beq.n	800245c <SD_ReadyWait+0x24>
 8002454:	4b04      	ldr	r3, [pc, #16]	; (8002468 <SD_ReadyWait+0x30>)
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1f4      	bne.n	8002446 <SD_ReadyWait+0xe>

	return res;
 800245c:	79fb      	ldrb	r3, [r7, #7]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	200001fe 	.word	0x200001fe

0800246c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8002472:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8002476:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8002478:	f7ff ff72 	bl	8002360 <DESELECT>
	for(int i = 0; i < 10; i++)
 800247c:	2300      	movs	r3, #0
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	e005      	b.n	800248e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8002482:	20ff      	movs	r0, #255	; 0xff
 8002484:	f7ff ff7a 	bl	800237c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	3301      	adds	r3, #1
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2b09      	cmp	r3, #9
 8002492:	ddf6      	ble.n	8002482 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8002494:	f7ff ff56 	bl	8002344 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8002498:	2340      	movs	r3, #64	; 0x40
 800249a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80024ac:	2395      	movs	r3, #149	; 0x95
 80024ae:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80024b0:	463b      	mov	r3, r7
 80024b2:	2106      	movs	r1, #6
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff7b 	bl	80023b0 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80024ba:	e002      	b.n	80024c2 <SD_PowerOn+0x56>
	{
		cnt--;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	3b01      	subs	r3, #1
 80024c0:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80024c2:	f7ff ff8f 	bl	80023e4 <SPI_RxByte>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d002      	beq.n	80024d2 <SD_PowerOn+0x66>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f4      	bne.n	80024bc <SD_PowerOn+0x50>
	}

	DESELECT();
 80024d2:	f7ff ff45 	bl	8002360 <DESELECT>
	SPI_TxByte(0XFF);
 80024d6:	20ff      	movs	r0, #255	; 0xff
 80024d8:	f7ff ff50 	bl	800237c <SPI_TxByte>

	PowerFlag = 1;
 80024dc:	4b03      	ldr	r3, [pc, #12]	; (80024ec <SD_PowerOn+0x80>)
 80024de:	2201      	movs	r2, #1
 80024e0:	701a      	strb	r2, [r3, #0]
}
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20000201 	.word	0x20000201

080024f0 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80024f4:	4b03      	ldr	r3, [pc, #12]	; (8002504 <SD_PowerOff+0x14>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	701a      	strb	r2, [r3, #0]
}
 80024fa:	bf00      	nop
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	20000201 	.word	0x20000201

08002508 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800250c:	4b03      	ldr	r3, [pc, #12]	; (800251c <SD_CheckPower+0x14>)
 800250e:	781b      	ldrb	r3, [r3, #0]
}
 8002510:	4618      	mov	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	20000201 	.word	0x20000201

08002520 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800252a:	4b13      	ldr	r3, [pc, #76]	; (8002578 <SD_RxDataBlock+0x58>)
 800252c:	22c8      	movs	r2, #200	; 0xc8
 800252e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8002530:	f7ff ff58 	bl	80023e4 <SPI_RxByte>
 8002534:	4603      	mov	r3, r0
 8002536:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	2bff      	cmp	r3, #255	; 0xff
 800253c:	d103      	bne.n	8002546 <SD_RxDataBlock+0x26>
 800253e:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <SD_RxDataBlock+0x58>)
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f4      	bne.n	8002530 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	2bfe      	cmp	r3, #254	; 0xfe
 800254a:	d001      	beq.n	8002550 <SD_RxDataBlock+0x30>
 800254c:	2300      	movs	r3, #0
 800254e:	e00f      	b.n	8002570 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	607a      	str	r2, [r7, #4]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff ff60 	bl	800241c <SPI_RxBytePtr>
	} while(len--);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	1e5a      	subs	r2, r3, #1
 8002560:	603a      	str	r2, [r7, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f4      	bne.n	8002550 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8002566:	f7ff ff3d 	bl	80023e4 <SPI_RxByte>
	SPI_RxByte();
 800256a:	f7ff ff3b 	bl	80023e4 <SPI_RxByte>

	return TRUE;
 800256e:	2301      	movs	r3, #1
}
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	200001fc 	.word	0x200001fc

0800257c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	460b      	mov	r3, r1
 8002586:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800258c:	f7ff ff54 	bl	8002438 <SD_ReadyWait>
 8002590:	4603      	mov	r3, r0
 8002592:	2bff      	cmp	r3, #255	; 0xff
 8002594:	d001      	beq.n	800259a <SD_TxDataBlock+0x1e>
 8002596:	2300      	movs	r3, #0
 8002598:	e02f      	b.n	80025fa <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800259a:	78fb      	ldrb	r3, [r7, #3]
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff feed 	bl	800237c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80025a2:	78fb      	ldrb	r3, [r7, #3]
 80025a4:	2bfd      	cmp	r3, #253	; 0xfd
 80025a6:	d020      	beq.n	80025ea <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80025a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7ff feff 	bl	80023b0 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80025b2:	f7ff ff17 	bl	80023e4 <SPI_RxByte>
		SPI_RxByte();
 80025b6:	f7ff ff15 	bl	80023e4 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80025ba:	e00b      	b.n	80025d4 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80025bc:	f7ff ff12 	bl	80023e4 <SPI_RxByte>
 80025c0:	4603      	mov	r3, r0
 80025c2:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	f003 031f 	and.w	r3, r3, #31
 80025ca:	2b05      	cmp	r3, #5
 80025cc:	d006      	beq.n	80025dc <SD_TxDataBlock+0x60>
			i++;
 80025ce:	7bbb      	ldrb	r3, [r7, #14]
 80025d0:	3301      	adds	r3, #1
 80025d2:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80025d4:	7bbb      	ldrb	r3, [r7, #14]
 80025d6:	2b40      	cmp	r3, #64	; 0x40
 80025d8:	d9f0      	bls.n	80025bc <SD_TxDataBlock+0x40>
 80025da:	e000      	b.n	80025de <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80025dc:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80025de:	bf00      	nop
 80025e0:	f7ff ff00 	bl	80023e4 <SPI_RxByte>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0fa      	beq.n	80025e0 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	f003 031f 	and.w	r3, r3, #31
 80025f0:	2b05      	cmp	r3, #5
 80025f2:	d101      	bne.n	80025f8 <SD_TxDataBlock+0x7c>
 80025f4:	2301      	movs	r3, #1
 80025f6:	e000      	b.n	80025fa <SD_TxDataBlock+0x7e>

	return FALSE;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b084      	sub	sp, #16
 8002606:	af00      	add	r7, sp, #0
 8002608:	4603      	mov	r3, r0
 800260a:	6039      	str	r1, [r7, #0]
 800260c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800260e:	f7ff ff13 	bl	8002438 <SD_ReadyWait>
 8002612:	4603      	mov	r3, r0
 8002614:	2bff      	cmp	r3, #255	; 0xff
 8002616:	d001      	beq.n	800261c <SD_SendCmd+0x1a>
 8002618:	23ff      	movs	r3, #255	; 0xff
 800261a:	e042      	b.n	80026a2 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff feac 	bl	800237c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	0e1b      	lsrs	r3, r3, #24
 8002628:	b2db      	uxtb	r3, r3
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff fea6 	bl	800237c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	0c1b      	lsrs	r3, r3, #16
 8002634:	b2db      	uxtb	r3, r3
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff fea0 	bl	800237c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	0a1b      	lsrs	r3, r3, #8
 8002640:	b2db      	uxtb	r3, r3
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff fe9a 	bl	800237c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	b2db      	uxtb	r3, r3
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fe95 	bl	800237c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	2b40      	cmp	r3, #64	; 0x40
 8002656:	d102      	bne.n	800265e <SD_SendCmd+0x5c>
 8002658:	2395      	movs	r3, #149	; 0x95
 800265a:	73fb      	strb	r3, [r7, #15]
 800265c:	e007      	b.n	800266e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	2b48      	cmp	r3, #72	; 0x48
 8002662:	d102      	bne.n	800266a <SD_SendCmd+0x68>
 8002664:	2387      	movs	r3, #135	; 0x87
 8002666:	73fb      	strb	r3, [r7, #15]
 8002668:	e001      	b.n	800266e <SD_SendCmd+0x6c>
	else crc = 1;
 800266a:	2301      	movs	r3, #1
 800266c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800266e:	7bfb      	ldrb	r3, [r7, #15]
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff fe83 	bl	800237c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	2b4c      	cmp	r3, #76	; 0x4c
 800267a:	d101      	bne.n	8002680 <SD_SendCmd+0x7e>
 800267c:	f7ff feb2 	bl	80023e4 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8002680:	230a      	movs	r3, #10
 8002682:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8002684:	f7ff feae 	bl	80023e4 <SPI_RxByte>
 8002688:	4603      	mov	r3, r0
 800268a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800268c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002690:	2b00      	cmp	r3, #0
 8002692:	da05      	bge.n	80026a0 <SD_SendCmd+0x9e>
 8002694:	7bbb      	ldrb	r3, [r7, #14]
 8002696:	3b01      	subs	r3, #1
 8002698:	73bb      	strb	r3, [r7, #14]
 800269a:	7bbb      	ldrb	r3, [r7, #14]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1f1      	bne.n	8002684 <SD_SendCmd+0x82>

	return res;
 80026a0:	7b7b      	ldrb	r3, [r7, #13]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80026ac:	b590      	push	{r4, r7, lr}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <SD_disk_initialize+0x14>
 80026bc:	2301      	movs	r3, #1
 80026be:	e0d1      	b.n	8002864 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80026c0:	4b6a      	ldr	r3, [pc, #424]	; (800286c <SD_disk_initialize+0x1c0>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <SD_disk_initialize+0x2a>
 80026ce:	4b67      	ldr	r3, [pc, #412]	; (800286c <SD_disk_initialize+0x1c0>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	e0c6      	b.n	8002864 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80026d6:	f7ff fec9 	bl	800246c <SD_PowerOn>

	/* slave select */
	SELECT();
 80026da:	f7ff fe33 	bl	8002344 <SELECT>

	/* check disk type */
	type = 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80026e2:	2100      	movs	r1, #0
 80026e4:	2040      	movs	r0, #64	; 0x40
 80026e6:	f7ff ff8c 	bl	8002602 <SD_SendCmd>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	f040 80a1 	bne.w	8002834 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80026f2:	4b5f      	ldr	r3, [pc, #380]	; (8002870 <SD_disk_initialize+0x1c4>)
 80026f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026f8:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80026fa:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80026fe:	2048      	movs	r0, #72	; 0x48
 8002700:	f7ff ff7f 	bl	8002602 <SD_SendCmd>
 8002704:	4603      	mov	r3, r0
 8002706:	2b01      	cmp	r3, #1
 8002708:	d155      	bne.n	80027b6 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800270a:	2300      	movs	r3, #0
 800270c:	73fb      	strb	r3, [r7, #15]
 800270e:	e00c      	b.n	800272a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8002710:	7bfc      	ldrb	r4, [r7, #15]
 8002712:	f7ff fe67 	bl	80023e4 <SPI_RxByte>
 8002716:	4603      	mov	r3, r0
 8002718:	461a      	mov	r2, r3
 800271a:	f104 0310 	add.w	r3, r4, #16
 800271e:	443b      	add	r3, r7
 8002720:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8002724:	7bfb      	ldrb	r3, [r7, #15]
 8002726:	3301      	adds	r3, #1
 8002728:	73fb      	strb	r3, [r7, #15]
 800272a:	7bfb      	ldrb	r3, [r7, #15]
 800272c:	2b03      	cmp	r3, #3
 800272e:	d9ef      	bls.n	8002710 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8002730:	7abb      	ldrb	r3, [r7, #10]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d17e      	bne.n	8002834 <SD_disk_initialize+0x188>
 8002736:	7afb      	ldrb	r3, [r7, #11]
 8002738:	2baa      	cmp	r3, #170	; 0xaa
 800273a:	d17b      	bne.n	8002834 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800273c:	2100      	movs	r1, #0
 800273e:	2077      	movs	r0, #119	; 0x77
 8002740:	f7ff ff5f 	bl	8002602 <SD_SendCmd>
 8002744:	4603      	mov	r3, r0
 8002746:	2b01      	cmp	r3, #1
 8002748:	d807      	bhi.n	800275a <SD_disk_initialize+0xae>
 800274a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800274e:	2069      	movs	r0, #105	; 0x69
 8002750:	f7ff ff57 	bl	8002602 <SD_SendCmd>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d004      	beq.n	8002764 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800275a:	4b45      	ldr	r3, [pc, #276]	; (8002870 <SD_disk_initialize+0x1c4>)
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1ec      	bne.n	800273c <SD_disk_initialize+0x90>
 8002762:	e000      	b.n	8002766 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002764:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8002766:	4b42      	ldr	r3, [pc, #264]	; (8002870 <SD_disk_initialize+0x1c4>)
 8002768:	881b      	ldrh	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d062      	beq.n	8002834 <SD_disk_initialize+0x188>
 800276e:	2100      	movs	r1, #0
 8002770:	207a      	movs	r0, #122	; 0x7a
 8002772:	f7ff ff46 	bl	8002602 <SD_SendCmd>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d15b      	bne.n	8002834 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800277c:	2300      	movs	r3, #0
 800277e:	73fb      	strb	r3, [r7, #15]
 8002780:	e00c      	b.n	800279c <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8002782:	7bfc      	ldrb	r4, [r7, #15]
 8002784:	f7ff fe2e 	bl	80023e4 <SPI_RxByte>
 8002788:	4603      	mov	r3, r0
 800278a:	461a      	mov	r2, r3
 800278c:	f104 0310 	add.w	r3, r4, #16
 8002790:	443b      	add	r3, r7
 8002792:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8002796:	7bfb      	ldrb	r3, [r7, #15]
 8002798:	3301      	adds	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	2b03      	cmp	r3, #3
 80027a0:	d9ef      	bls.n	8002782 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80027a2:	7a3b      	ldrb	r3, [r7, #8]
 80027a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <SD_disk_initialize+0x104>
 80027ac:	230c      	movs	r3, #12
 80027ae:	e000      	b.n	80027b2 <SD_disk_initialize+0x106>
 80027b0:	2304      	movs	r3, #4
 80027b2:	73bb      	strb	r3, [r7, #14]
 80027b4:	e03e      	b.n	8002834 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80027b6:	2100      	movs	r1, #0
 80027b8:	2077      	movs	r0, #119	; 0x77
 80027ba:	f7ff ff22 	bl	8002602 <SD_SendCmd>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d808      	bhi.n	80027d6 <SD_disk_initialize+0x12a>
 80027c4:	2100      	movs	r1, #0
 80027c6:	2069      	movs	r0, #105	; 0x69
 80027c8:	f7ff ff1b 	bl	8002602 <SD_SendCmd>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d801      	bhi.n	80027d6 <SD_disk_initialize+0x12a>
 80027d2:	2302      	movs	r3, #2
 80027d4:	e000      	b.n	80027d8 <SD_disk_initialize+0x12c>
 80027d6:	2301      	movs	r3, #1
 80027d8:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80027da:	7bbb      	ldrb	r3, [r7, #14]
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d10e      	bne.n	80027fe <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80027e0:	2100      	movs	r1, #0
 80027e2:	2077      	movs	r0, #119	; 0x77
 80027e4:	f7ff ff0d 	bl	8002602 <SD_SendCmd>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d80e      	bhi.n	800280c <SD_disk_initialize+0x160>
 80027ee:	2100      	movs	r1, #0
 80027f0:	2069      	movs	r0, #105	; 0x69
 80027f2:	f7ff ff06 	bl	8002602 <SD_SendCmd>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d107      	bne.n	800280c <SD_disk_initialize+0x160>
 80027fc:	e00c      	b.n	8002818 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80027fe:	2100      	movs	r1, #0
 8002800:	2041      	movs	r0, #65	; 0x41
 8002802:	f7ff fefe 	bl	8002602 <SD_SendCmd>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d004      	beq.n	8002816 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 800280c:	4b18      	ldr	r3, [pc, #96]	; (8002870 <SD_disk_initialize+0x1c4>)
 800280e:	881b      	ldrh	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1e2      	bne.n	80027da <SD_disk_initialize+0x12e>
 8002814:	e000      	b.n	8002818 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8002816:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8002818:	4b15      	ldr	r3, [pc, #84]	; (8002870 <SD_disk_initialize+0x1c4>)
 800281a:	881b      	ldrh	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d007      	beq.n	8002830 <SD_disk_initialize+0x184>
 8002820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002824:	2050      	movs	r0, #80	; 0x50
 8002826:	f7ff feec 	bl	8002602 <SD_SendCmd>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <SD_disk_initialize+0x188>
 8002830:	2300      	movs	r3, #0
 8002832:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8002834:	4a0f      	ldr	r2, [pc, #60]	; (8002874 <SD_disk_initialize+0x1c8>)
 8002836:	7bbb      	ldrb	r3, [r7, #14]
 8002838:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800283a:	f7ff fd91 	bl	8002360 <DESELECT>
	SPI_RxByte();
 800283e:	f7ff fdd1 	bl	80023e4 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8002842:	7bbb      	ldrb	r3, [r7, #14]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d008      	beq.n	800285a <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8002848:	4b08      	ldr	r3, [pc, #32]	; (800286c <SD_disk_initialize+0x1c0>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	f023 0301 	bic.w	r3, r3, #1
 8002852:	b2da      	uxtb	r2, r3
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <SD_disk_initialize+0x1c0>)
 8002856:	701a      	strb	r2, [r3, #0]
 8002858:	e001      	b.n	800285e <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800285a:	f7ff fe49 	bl	80024f0 <SD_PowerOff>
	}

	return Stat;
 800285e:	4b03      	ldr	r3, [pc, #12]	; (800286c <SD_disk_initialize+0x1c0>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	b2db      	uxtb	r3, r3
}
 8002864:	4618      	mov	r0, r3
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	bd90      	pop	{r4, r7, pc}
 800286c:	20000054 	.word	0x20000054
 8002870:	200001fc 	.word	0x200001fc
 8002874:	20000200 	.word	0x20000200

08002878 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <SD_disk_status+0x14>
 8002888:	2301      	movs	r3, #1
 800288a:	e002      	b.n	8002892 <SD_disk_status+0x1a>
	return Stat;
 800288c:	4b04      	ldr	r3, [pc, #16]	; (80028a0 <SD_disk_status+0x28>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	b2db      	uxtb	r3, r3
}
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	20000054 	.word	0x20000054

080028a4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	603b      	str	r3, [r7, #0]
 80028b0:	4603      	mov	r3, r0
 80028b2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d102      	bne.n	80028c0 <SD_disk_read+0x1c>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <SD_disk_read+0x20>
 80028c0:	2304      	movs	r3, #4
 80028c2:	e051      	b.n	8002968 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80028c4:	4b2a      	ldr	r3, [pc, #168]	; (8002970 <SD_disk_read+0xcc>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <SD_disk_read+0x32>
 80028d2:	2303      	movs	r3, #3
 80028d4:	e048      	b.n	8002968 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80028d6:	4b27      	ldr	r3, [pc, #156]	; (8002974 <SD_disk_read+0xd0>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d102      	bne.n	80028e8 <SD_disk_read+0x44>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	025b      	lsls	r3, r3, #9
 80028e6:	607b      	str	r3, [r7, #4]

	SELECT();
 80028e8:	f7ff fd2c 	bl	8002344 <SELECT>

	if (count == 1)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d111      	bne.n	8002916 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	2051      	movs	r0, #81	; 0x51
 80028f6:	f7ff fe84 	bl	8002602 <SD_SendCmd>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d129      	bne.n	8002954 <SD_disk_read+0xb0>
 8002900:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002904:	68b8      	ldr	r0, [r7, #8]
 8002906:	f7ff fe0b 	bl	8002520 <SD_RxDataBlock>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d021      	beq.n	8002954 <SD_disk_read+0xb0>
 8002910:	2300      	movs	r3, #0
 8002912:	603b      	str	r3, [r7, #0]
 8002914:	e01e      	b.n	8002954 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	2052      	movs	r0, #82	; 0x52
 800291a:	f7ff fe72 	bl	8002602 <SD_SendCmd>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d117      	bne.n	8002954 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8002924:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002928:	68b8      	ldr	r0, [r7, #8]
 800292a:	f7ff fdf9 	bl	8002520 <SD_RxDataBlock>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00a      	beq.n	800294a <SD_disk_read+0xa6>
				buff += 512;
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800293a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	3b01      	subs	r3, #1
 8002940:	603b      	str	r3, [r7, #0]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1ed      	bne.n	8002924 <SD_disk_read+0x80>
 8002948:	e000      	b.n	800294c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800294a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800294c:	2100      	movs	r1, #0
 800294e:	204c      	movs	r0, #76	; 0x4c
 8002950:	f7ff fe57 	bl	8002602 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8002954:	f7ff fd04 	bl	8002360 <DESELECT>
	SPI_RxByte();
 8002958:	f7ff fd44 	bl	80023e4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	bf14      	ite	ne
 8002962:	2301      	movne	r3, #1
 8002964:	2300      	moveq	r3, #0
 8002966:	b2db      	uxtb	r3, r3
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	20000054 	.word	0x20000054
 8002974:	20000200 	.word	0x20000200

08002978 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	60b9      	str	r1, [r7, #8]
 8002980:	607a      	str	r2, [r7, #4]
 8002982:	603b      	str	r3, [r7, #0]
 8002984:	4603      	mov	r3, r0
 8002986:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8002988:	7bfb      	ldrb	r3, [r7, #15]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d102      	bne.n	8002994 <SD_disk_write+0x1c>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <SD_disk_write+0x20>
 8002994:	2304      	movs	r3, #4
 8002996:	e06b      	b.n	8002a70 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002998:	4b37      	ldr	r3, [pc, #220]	; (8002a78 <SD_disk_write+0x100>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	b2db      	uxtb	r3, r3
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <SD_disk_write+0x32>
 80029a6:	2303      	movs	r3, #3
 80029a8:	e062      	b.n	8002a70 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80029aa:	4b33      	ldr	r3, [pc, #204]	; (8002a78 <SD_disk_write+0x100>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <SD_disk_write+0x44>
 80029b8:	2302      	movs	r3, #2
 80029ba:	e059      	b.n	8002a70 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80029bc:	4b2f      	ldr	r3, [pc, #188]	; (8002a7c <SD_disk_write+0x104>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d102      	bne.n	80029ce <SD_disk_write+0x56>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	025b      	lsls	r3, r3, #9
 80029cc:	607b      	str	r3, [r7, #4]

	SELECT();
 80029ce:	f7ff fcb9 	bl	8002344 <SELECT>

	if (count == 1)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d110      	bne.n	80029fa <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	2058      	movs	r0, #88	; 0x58
 80029dc:	f7ff fe11 	bl	8002602 <SD_SendCmd>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d13a      	bne.n	8002a5c <SD_disk_write+0xe4>
 80029e6:	21fe      	movs	r1, #254	; 0xfe
 80029e8:	68b8      	ldr	r0, [r7, #8]
 80029ea:	f7ff fdc7 	bl	800257c <SD_TxDataBlock>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d033      	beq.n	8002a5c <SD_disk_write+0xe4>
			count = 0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	e030      	b.n	8002a5c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80029fa:	4b20      	ldr	r3, [pc, #128]	; (8002a7c <SD_disk_write+0x104>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d007      	beq.n	8002a16 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8002a06:	2100      	movs	r1, #0
 8002a08:	2077      	movs	r0, #119	; 0x77
 8002a0a:	f7ff fdfa 	bl	8002602 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8002a0e:	6839      	ldr	r1, [r7, #0]
 8002a10:	2057      	movs	r0, #87	; 0x57
 8002a12:	f7ff fdf6 	bl	8002602 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	2059      	movs	r0, #89	; 0x59
 8002a1a:	f7ff fdf2 	bl	8002602 <SD_SendCmd>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d11b      	bne.n	8002a5c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002a24:	21fc      	movs	r1, #252	; 0xfc
 8002a26:	68b8      	ldr	r0, [r7, #8]
 8002a28:	f7ff fda8 	bl	800257c <SD_TxDataBlock>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00a      	beq.n	8002a48 <SD_disk_write+0xd0>
				buff += 512;
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002a38:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1ee      	bne.n	8002a24 <SD_disk_write+0xac>
 8002a46:	e000      	b.n	8002a4a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002a48:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8002a4a:	21fd      	movs	r1, #253	; 0xfd
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	f7ff fd95 	bl	800257c <SD_TxDataBlock>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <SD_disk_write+0xe4>
			{
				count = 1;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8002a5c:	f7ff fc80 	bl	8002360 <DESELECT>
	SPI_RxByte();
 8002a60:	f7ff fcc0 	bl	80023e4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	bf14      	ite	ne
 8002a6a:	2301      	movne	r3, #1
 8002a6c:	2300      	moveq	r3, #0
 8002a6e:	b2db      	uxtb	r3, r3
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	20000054 	.word	0x20000054
 8002a7c:	20000200 	.word	0x20000200

08002a80 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8002a80:	b590      	push	{r4, r7, lr}
 8002a82:	b08b      	sub	sp, #44	; 0x2c
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	603a      	str	r2, [r7, #0]
 8002a8a:	71fb      	strb	r3, [r7, #7]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8002a94:	79fb      	ldrb	r3, [r7, #7]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <SD_disk_ioctl+0x1e>
 8002a9a:	2304      	movs	r3, #4
 8002a9c:	e115      	b.n	8002cca <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8002aa4:	79bb      	ldrb	r3, [r7, #6]
 8002aa6:	2b05      	cmp	r3, #5
 8002aa8:	d124      	bne.n	8002af4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d012      	beq.n	8002ad8 <SD_disk_ioctl+0x58>
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	dc1a      	bgt.n	8002aec <SD_disk_ioctl+0x6c>
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d002      	beq.n	8002ac0 <SD_disk_ioctl+0x40>
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d006      	beq.n	8002acc <SD_disk_ioctl+0x4c>
 8002abe:	e015      	b.n	8002aec <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8002ac0:	f7ff fd16 	bl	80024f0 <SD_PowerOff>
			res = RES_OK;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002aca:	e0fc      	b.n	8002cc6 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8002acc:	f7ff fcce 	bl	800246c <SD_PowerOn>
			res = RES_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002ad6:	e0f6      	b.n	8002cc6 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
 8002ada:	1c5c      	adds	r4, r3, #1
 8002adc:	f7ff fd14 	bl	8002508 <SD_CheckPower>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002aea:	e0ec      	b.n	8002cc6 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8002aec:	2304      	movs	r3, #4
 8002aee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002af2:	e0e8      	b.n	8002cc6 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002af4:	4b77      	ldr	r3, [pc, #476]	; (8002cd4 <SD_disk_ioctl+0x254>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <SD_disk_ioctl+0x86>
 8002b02:	2303      	movs	r3, #3
 8002b04:	e0e1      	b.n	8002cca <SD_disk_ioctl+0x24a>

		SELECT();
 8002b06:	f7ff fc1d 	bl	8002344 <SELECT>

		switch (ctrl)
 8002b0a:	79bb      	ldrb	r3, [r7, #6]
 8002b0c:	2b0d      	cmp	r3, #13
 8002b0e:	f200 80cb 	bhi.w	8002ca8 <SD_disk_ioctl+0x228>
 8002b12:	a201      	add	r2, pc, #4	; (adr r2, 8002b18 <SD_disk_ioctl+0x98>)
 8002b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b18:	08002c13 	.word	0x08002c13
 8002b1c:	08002b51 	.word	0x08002b51
 8002b20:	08002c03 	.word	0x08002c03
 8002b24:	08002ca9 	.word	0x08002ca9
 8002b28:	08002ca9 	.word	0x08002ca9
 8002b2c:	08002ca9 	.word	0x08002ca9
 8002b30:	08002ca9 	.word	0x08002ca9
 8002b34:	08002ca9 	.word	0x08002ca9
 8002b38:	08002ca9 	.word	0x08002ca9
 8002b3c:	08002ca9 	.word	0x08002ca9
 8002b40:	08002ca9 	.word	0x08002ca9
 8002b44:	08002c25 	.word	0x08002c25
 8002b48:	08002c49 	.word	0x08002c49
 8002b4c:	08002c6d 	.word	0x08002c6d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002b50:	2100      	movs	r1, #0
 8002b52:	2049      	movs	r0, #73	; 0x49
 8002b54:	f7ff fd55 	bl	8002602 <SD_SendCmd>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f040 80a8 	bne.w	8002cb0 <SD_disk_ioctl+0x230>
 8002b60:	f107 030c 	add.w	r3, r7, #12
 8002b64:	2110      	movs	r1, #16
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff fcda 	bl	8002520 <SD_RxDataBlock>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 809e 	beq.w	8002cb0 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8002b74:	7b3b      	ldrb	r3, [r7, #12]
 8002b76:	099b      	lsrs	r3, r3, #6
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d10e      	bne.n	8002b9c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002b7e:	7d7b      	ldrb	r3, [r7, #21]
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	7d3b      	ldrb	r3, [r7, #20]
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	021b      	lsls	r3, r3, #8
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	3301      	adds	r3, #1
 8002b90:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8002b92:	8bfb      	ldrh	r3, [r7, #30]
 8002b94:	029a      	lsls	r2, r3, #10
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	e02e      	b.n	8002bfa <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002b9c:	7c7b      	ldrb	r3, [r7, #17]
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	7dbb      	ldrb	r3, [r7, #22]
 8002ba6:	09db      	lsrs	r3, r3, #7
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	4413      	add	r3, r2
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	7d7b      	ldrb	r3, [r7, #21]
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	f003 0306 	and.w	r3, r3, #6
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	4413      	add	r3, r2
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	3302      	adds	r3, #2
 8002bc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002bc4:	7d3b      	ldrb	r3, [r7, #20]
 8002bc6:	099b      	lsrs	r3, r3, #6
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	7cfb      	ldrb	r3, [r7, #19]
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	4413      	add	r3, r2
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	7cbb      	ldrb	r3, [r7, #18]
 8002bda:	029b      	lsls	r3, r3, #10
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	4413      	add	r3, r2
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	3301      	adds	r3, #1
 8002bea:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8002bec:	8bfa      	ldrh	r2, [r7, #30]
 8002bee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002bf2:	3b09      	subs	r3, #9
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8002c00:	e056      	b.n	8002cb0 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c08:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002c10:	e055      	b.n	8002cbe <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8002c12:	f7ff fc11 	bl	8002438 <SD_ReadyWait>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2bff      	cmp	r3, #255	; 0xff
 8002c1a:	d14b      	bne.n	8002cb4 <SD_disk_ioctl+0x234>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002c22:	e047      	b.n	8002cb4 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002c24:	2100      	movs	r1, #0
 8002c26:	2049      	movs	r0, #73	; 0x49
 8002c28:	f7ff fceb 	bl	8002602 <SD_SendCmd>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d142      	bne.n	8002cb8 <SD_disk_ioctl+0x238>
 8002c32:	2110      	movs	r1, #16
 8002c34:	6a38      	ldr	r0, [r7, #32]
 8002c36:	f7ff fc73 	bl	8002520 <SD_RxDataBlock>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d03b      	beq.n	8002cb8 <SD_disk_ioctl+0x238>
 8002c40:	2300      	movs	r3, #0
 8002c42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002c46:	e037      	b.n	8002cb8 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002c48:	2100      	movs	r1, #0
 8002c4a:	204a      	movs	r0, #74	; 0x4a
 8002c4c:	f7ff fcd9 	bl	8002602 <SD_SendCmd>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d132      	bne.n	8002cbc <SD_disk_ioctl+0x23c>
 8002c56:	2110      	movs	r1, #16
 8002c58:	6a38      	ldr	r0, [r7, #32]
 8002c5a:	f7ff fc61 	bl	8002520 <SD_RxDataBlock>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d02b      	beq.n	8002cbc <SD_disk_ioctl+0x23c>
 8002c64:	2300      	movs	r3, #0
 8002c66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002c6a:	e027      	b.n	8002cbc <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	207a      	movs	r0, #122	; 0x7a
 8002c70:	f7ff fcc7 	bl	8002602 <SD_SendCmd>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d116      	bne.n	8002ca8 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002c80:	e00b      	b.n	8002c9a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8002c82:	6a3c      	ldr	r4, [r7, #32]
 8002c84:	1c63      	adds	r3, r4, #1
 8002c86:	623b      	str	r3, [r7, #32]
 8002c88:	f7ff fbac 	bl	80023e4 <SPI_RxByte>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8002c90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002c94:	3301      	adds	r3, #1
 8002c96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002c9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002c9e:	2b03      	cmp	r3, #3
 8002ca0:	d9ef      	bls.n	8002c82 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8002ca8:	2304      	movs	r3, #4
 8002caa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002cae:	e006      	b.n	8002cbe <SD_disk_ioctl+0x23e>
			break;
 8002cb0:	bf00      	nop
 8002cb2:	e004      	b.n	8002cbe <SD_disk_ioctl+0x23e>
			break;
 8002cb4:	bf00      	nop
 8002cb6:	e002      	b.n	8002cbe <SD_disk_ioctl+0x23e>
			break;
 8002cb8:	bf00      	nop
 8002cba:	e000      	b.n	8002cbe <SD_disk_ioctl+0x23e>
			break;
 8002cbc:	bf00      	nop
		}

		DESELECT();
 8002cbe:	f7ff fb4f 	bl	8002360 <DESELECT>
		SPI_RxByte();
 8002cc2:	f7ff fb8f 	bl	80023e4 <SPI_RxByte>
	}

	return res;
 8002cc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	372c      	adds	r7, #44	; 0x2c
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd90      	pop	{r4, r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20000054 	.word	0x20000054

08002cd8 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08e      	sub	sp, #56	; 0x38
 8002cdc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	605a      	str	r2, [r3, #4]
 8002ce8:	609a      	str	r2, [r3, #8]
 8002cea:	60da      	str	r2, [r3, #12]
 8002cec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cee:	4bb4      	ldr	r3, [pc, #720]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	4ab3      	ldr	r2, [pc, #716]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002cf4:	f043 0310 	orr.w	r3, r3, #16
 8002cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfa:	4bb1      	ldr	r3, [pc, #708]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	f003 0310 	and.w	r3, r3, #16
 8002d02:	623b      	str	r3, [r7, #32]
 8002d04:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d06:	4bae      	ldr	r3, [pc, #696]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	4aad      	ldr	r2, [pc, #692]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d0c:	f043 0304 	orr.w	r3, r3, #4
 8002d10:	6313      	str	r3, [r2, #48]	; 0x30
 8002d12:	4bab      	ldr	r3, [pc, #684]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	f003 0304 	and.w	r3, r3, #4
 8002d1a:	61fb      	str	r3, [r7, #28]
 8002d1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d1e:	4ba8      	ldr	r3, [pc, #672]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	4aa7      	ldr	r2, [pc, #668]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d24:	f043 0320 	orr.w	r3, r3, #32
 8002d28:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2a:	4ba5      	ldr	r3, [pc, #660]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	f003 0320 	and.w	r3, r3, #32
 8002d32:	61bb      	str	r3, [r7, #24]
 8002d34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d36:	4ba2      	ldr	r3, [pc, #648]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	4aa1      	ldr	r2, [pc, #644]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d40:	6313      	str	r3, [r2, #48]	; 0x30
 8002d42:	4b9f      	ldr	r3, [pc, #636]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4e:	4b9c      	ldr	r3, [pc, #624]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	4a9b      	ldr	r2, [pc, #620]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5a:	4b99      	ldr	r3, [pc, #612]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	613b      	str	r3, [r7, #16]
 8002d64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d66:	4b96      	ldr	r3, [pc, #600]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	4a95      	ldr	r2, [pc, #596]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d6c:	f043 0302 	orr.w	r3, r3, #2
 8002d70:	6313      	str	r3, [r2, #48]	; 0x30
 8002d72:	4b93      	ldr	r3, [pc, #588]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d7e:	4b90      	ldr	r3, [pc, #576]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	4a8f      	ldr	r2, [pc, #572]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d84:	f043 0308 	orr.w	r3, r3, #8
 8002d88:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8a:	4b8d      	ldr	r3, [pc, #564]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	60bb      	str	r3, [r7, #8]
 8002d94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d96:	4b8a      	ldr	r3, [pc, #552]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	4a89      	ldr	r2, [pc, #548]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002da0:	6313      	str	r3, [r2, #48]	; 0x30
 8002da2:	4b87      	ldr	r3, [pc, #540]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002daa:	607b      	str	r3, [r7, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMP2_CSB_GPIO_Port, BMP2_CSB_Pin, GPIO_PIN_RESET);
 8002dae:	2200      	movs	r2, #0
 8002db0:	2110      	movs	r1, #16
 8002db2:	4884      	ldr	r0, [pc, #528]	; (8002fc4 <MX_GPIO_Init+0x2ec>)
 8002db4:	f003 f82a 	bl	8005e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CARD_GPIO_Port, SD_CARD_Pin, GPIO_PIN_SET);
 8002db8:	2201      	movs	r2, #1
 8002dba:	2110      	movs	r1, #16
 8002dbc:	4882      	ldr	r0, [pc, #520]	; (8002fc8 <MX_GPIO_Init+0x2f0>)
 8002dbe:	f003 f825 	bl	8005e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f244 0181 	movw	r1, #16513	; 0x4081
 8002dc8:	4880      	ldr	r0, [pc, #512]	; (8002fcc <MX_GPIO_Init+0x2f4>)
 8002dca:	f003 f81f 	bl	8005e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dd4:	487e      	ldr	r0, [pc, #504]	; (8002fd0 <MX_GPIO_Init+0x2f8>)
 8002dd6:	f003 f819 	bl	8005e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|LD4_Pin|LD5_Pin, GPIO_PIN_RESET);
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f244 2140 	movw	r1, #16960	; 0x4240
 8002de0:	487c      	ldr	r0, [pc, #496]	; (8002fd4 <MX_GPIO_Init+0x2fc>)
 8002de2:	f003 f813 	bl	8005e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMP2_CSB_Pin;
 8002de6:	2310      	movs	r3, #16
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dea:	2301      	movs	r3, #1
 8002dec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df2:	2303      	movs	r3, #3
 8002df4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BMP2_CSB_GPIO_Port, &GPIO_InitStruct);
 8002df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4871      	ldr	r0, [pc, #452]	; (8002fc4 <MX_GPIO_Init+0x2ec>)
 8002dfe:	f002 fe59 	bl	8005ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002e02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e08:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e16:	4619      	mov	r1, r3
 8002e18:	486f      	ldr	r0, [pc, #444]	; (8002fd8 <MX_GPIO_Init+0x300>)
 8002e1a:	f002 fe4b 	bl	8005ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = test_Pin;
 8002e1e:	2304      	movs	r3, #4
 8002e20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e22:	2300      	movs	r3, #0
 8002e24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(test_GPIO_Port, &GPIO_InitStruct);
 8002e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4867      	ldr	r0, [pc, #412]	; (8002fd0 <MX_GPIO_Init+0x2f8>)
 8002e32:	f002 fe3f 	bl	8005ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002e36:	2332      	movs	r3, #50	; 0x32
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e42:	2303      	movs	r3, #3
 8002e44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002e46:	230b      	movs	r3, #11
 8002e48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4861      	ldr	r0, [pc, #388]	; (8002fd8 <MX_GPIO_Init+0x300>)
 8002e52:	f002 fe2f 	bl	8005ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002e56:	2386      	movs	r3, #134	; 0x86
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e62:	2303      	movs	r3, #3
 8002e64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002e66:	230b      	movs	r3, #11
 8002e68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4855      	ldr	r0, [pc, #340]	; (8002fc8 <MX_GPIO_Init+0x2f0>)
 8002e72:	f002 fe1f 	bl	8005ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CARD_Pin;
 8002e76:	2310      	movs	r3, #16
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002e82:	2301      	movs	r3, #1
 8002e84:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CARD_GPIO_Port, &GPIO_InitStruct);
 8002e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	484e      	ldr	r0, [pc, #312]	; (8002fc8 <MX_GPIO_Init+0x2f0>)
 8002e8e:	f002 fe11 	bl	8005ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002e92:	f244 0381 	movw	r3, #16513	; 0x4081
 8002e96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4848      	ldr	r0, [pc, #288]	; (8002fcc <MX_GPIO_Init+0x2f4>)
 8002eac:	f002 fe02 	bl	8005ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ON_Btn_Pin;
 8002eb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002eb6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002eba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ON_Btn_GPIO_Port, &GPIO_InitStruct);
 8002ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4842      	ldr	r0, [pc, #264]	; (8002fd0 <MX_GPIO_Init+0x2f8>)
 8002ec8:	f002 fdf4 	bl	8005ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002ecc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eda:	2300      	movs	r3, #0
 8002edc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	483a      	ldr	r0, [pc, #232]	; (8002fd0 <MX_GPIO_Init+0x2f8>)
 8002ee6:	f002 fde5 	bl	8005ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OFF_Btn_Pin;
 8002eea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ef0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OFF_Btn_GPIO_Port, &GPIO_InitStruct);
 8002efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002efe:	4619      	mov	r1, r3
 8002f00:	4830      	ldr	r0, [pc, #192]	; (8002fc4 <MX_GPIO_Init+0x2ec>)
 8002f02:	f002 fdd7 	bl	8005ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002f06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f10:	2300      	movs	r3, #0
 8002f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f14:	2303      	movs	r3, #3
 8002f16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002f18:	230b      	movs	r3, #11
 8002f1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f20:	4619      	mov	r1, r3
 8002f22:	482a      	ldr	r0, [pc, #168]	; (8002fcc <MX_GPIO_Init+0x2f4>)
 8002f24:	f002 fdc6 	bl	8005ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|LD4_Pin|LD5_Pin;
 8002f28:	f244 2340 	movw	r3, #16960	; 0x4240
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f36:	2300      	movs	r3, #0
 8002f38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4824      	ldr	r0, [pc, #144]	; (8002fd4 <MX_GPIO_Init+0x2fc>)
 8002f42:	f002 fdb7 	bl	8005ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002f46:	2380      	movs	r3, #128	; 0x80
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f56:	4619      	mov	r1, r3
 8002f58:	481e      	ldr	r0, [pc, #120]	; (8002fd4 <MX_GPIO_Init+0x2fc>)
 8002f5a:	f002 fdab 	bl	8005ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002f5e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002f62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f64:	2302      	movs	r3, #2
 8002f66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002f70:	230a      	movs	r3, #10
 8002f72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4813      	ldr	r0, [pc, #76]	; (8002fc8 <MX_GPIO_Init+0x2f0>)
 8002f7c:	f002 fd9a 	bl	8005ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002f80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f86:	2300      	movs	r3, #0
 8002f88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f92:	4619      	mov	r1, r3
 8002f94:	480c      	ldr	r0, [pc, #48]	; (8002fc8 <MX_GPIO_Init+0x2f0>)
 8002f96:	f002 fd8d 	bl	8005ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002f9a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002f9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002fac:	230b      	movs	r3, #11
 8002fae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4807      	ldr	r0, [pc, #28]	; (8002fd4 <MX_GPIO_Init+0x2fc>)
 8002fb8:	f002 fd7c 	bl	8005ab4 <HAL_GPIO_Init>

}
 8002fbc:	bf00      	nop
 8002fbe:	e00d      	b.n	8002fdc <MX_GPIO_Init+0x304>
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40020000 	.word	0x40020000
 8002fcc:	40020400 	.word	0x40020400
 8002fd0:	40021400 	.word	0x40021400
 8002fd4:	40021800 	.word	0x40021800
 8002fd8:	40020800 	.word	0x40020800
 8002fdc:	3738      	adds	r7, #56	; 0x38
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop

08002fe4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002fe8:	4b1b      	ldr	r3, [pc, #108]	; (8003058 <MX_I2C1_Init+0x74>)
 8002fea:	4a1c      	ldr	r2, [pc, #112]	; (800305c <MX_I2C1_Init+0x78>)
 8002fec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8002fee:	4b1a      	ldr	r3, [pc, #104]	; (8003058 <MX_I2C1_Init+0x74>)
 8002ff0:	4a1b      	ldr	r2, [pc, #108]	; (8003060 <MX_I2C1_Init+0x7c>)
 8002ff2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002ff4:	4b18      	ldr	r3, [pc, #96]	; (8003058 <MX_I2C1_Init+0x74>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ffa:	4b17      	ldr	r3, [pc, #92]	; (8003058 <MX_I2C1_Init+0x74>)
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003000:	4b15      	ldr	r3, [pc, #84]	; (8003058 <MX_I2C1_Init+0x74>)
 8003002:	2200      	movs	r2, #0
 8003004:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003006:	4b14      	ldr	r3, [pc, #80]	; (8003058 <MX_I2C1_Init+0x74>)
 8003008:	2200      	movs	r2, #0
 800300a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800300c:	4b12      	ldr	r3, [pc, #72]	; (8003058 <MX_I2C1_Init+0x74>)
 800300e:	2200      	movs	r2, #0
 8003010:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003012:	4b11      	ldr	r3, [pc, #68]	; (8003058 <MX_I2C1_Init+0x74>)
 8003014:	2200      	movs	r2, #0
 8003016:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003018:	4b0f      	ldr	r3, [pc, #60]	; (8003058 <MX_I2C1_Init+0x74>)
 800301a:	2200      	movs	r2, #0
 800301c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800301e:	480e      	ldr	r0, [pc, #56]	; (8003058 <MX_I2C1_Init+0x74>)
 8003020:	f002 ff0e 	bl	8005e40 <HAL_I2C_Init>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800302a:	f000 fd4d 	bl	8003ac8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800302e:	2100      	movs	r1, #0
 8003030:	4809      	ldr	r0, [pc, #36]	; (8003058 <MX_I2C1_Init+0x74>)
 8003032:	f003 fa7b 	bl	800652c <HAL_I2CEx_ConfigAnalogFilter>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800303c:	f000 fd44 	bl	8003ac8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003040:	2100      	movs	r1, #0
 8003042:	4805      	ldr	r0, [pc, #20]	; (8003058 <MX_I2C1_Init+0x74>)
 8003044:	f003 fabd 	bl	80065c2 <HAL_I2CEx_ConfigDigitalFilter>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800304e:	f000 fd3b 	bl	8003ac8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003052:	bf00      	nop
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	20000204 	.word	0x20000204
 800305c:	40005400 	.word	0x40005400
 8003060:	20404768 	.word	0x20404768

08003064 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b0aa      	sub	sp, #168	; 0xa8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800306c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	605a      	str	r2, [r3, #4]
 8003076:	609a      	str	r2, [r3, #8]
 8003078:	60da      	str	r2, [r3, #12]
 800307a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800307c:	f107 0310 	add.w	r3, r7, #16
 8003080:	2284      	movs	r2, #132	; 0x84
 8003082:	2100      	movs	r1, #0
 8003084:	4618      	mov	r0, r3
 8003086:	f00a ffd3 	bl	800e030 <memset>
  if(i2cHandle->Instance==I2C1)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a22      	ldr	r2, [pc, #136]	; (8003118 <HAL_I2C_MspInit+0xb4>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d13c      	bne.n	800310e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003094:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003098:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800309a:	2300      	movs	r3, #0
 800309c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800309e:	f107 0310 	add.w	r3, r7, #16
 80030a2:	4618      	mov	r0, r3
 80030a4:	f004 f804 	bl	80070b0 <HAL_RCCEx_PeriphCLKConfig>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80030ae:	f000 fd0b 	bl	8003ac8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b2:	4b1a      	ldr	r3, [pc, #104]	; (800311c <HAL_I2C_MspInit+0xb8>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	4a19      	ldr	r2, [pc, #100]	; (800311c <HAL_I2C_MspInit+0xb8>)
 80030b8:	f043 0302 	orr.w	r3, r3, #2
 80030bc:	6313      	str	r3, [r2, #48]	; 0x30
 80030be:	4b17      	ldr	r3, [pc, #92]	; (800311c <HAL_I2C_MspInit+0xb8>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80030ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80030ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030d2:	2312      	movs	r3, #18
 80030d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d8:	2300      	movs	r3, #0
 80030da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030de:	2303      	movs	r3, #3
 80030e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80030e4:	2304      	movs	r3, #4
 80030e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80030ee:	4619      	mov	r1, r3
 80030f0:	480b      	ldr	r0, [pc, #44]	; (8003120 <HAL_I2C_MspInit+0xbc>)
 80030f2:	f002 fcdf 	bl	8005ab4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80030f6:	4b09      	ldr	r3, [pc, #36]	; (800311c <HAL_I2C_MspInit+0xb8>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	4a08      	ldr	r2, [pc, #32]	; (800311c <HAL_I2C_MspInit+0xb8>)
 80030fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003100:	6413      	str	r3, [r2, #64]	; 0x40
 8003102:	4b06      	ldr	r3, [pc, #24]	; (800311c <HAL_I2C_MspInit+0xb8>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800310a:	60bb      	str	r3, [r7, #8]
 800310c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800310e:	bf00      	nop
 8003110:	37a8      	adds	r7, #168	; 0xa8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40005400 	.word	0x40005400
 800311c:	40023800 	.word	0x40023800
 8003120:	40020400 	.word	0x40020400

08003124 <lcd_init>:
#include "lcd_chars.h"
#include "stm32f7xx_hal.h"
#include "i2c.h"

void lcd_init(struct lcd_disp * lcd)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 800312c:	2300      	movs	r3, #0
 800312e:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 800313a:	2308      	movs	r3, #8
 800313c:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 800313e:	2028      	movs	r0, #40	; 0x28
 8003140:	f001 fac8 	bl	80046d4 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	7bfa      	ldrb	r2, [r7, #15]
 800314a:	2130      	movs	r1, #48	; 0x30
 800314c:	4618      	mov	r0, r3
 800314e:	f000 f82f 	bl	80031b0 <lcd_write>
	HAL_Delay(5);
 8003152:	2005      	movs	r0, #5
 8003154:	f001 fabe 	bl	80046d4 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	7bfa      	ldrb	r2, [r7, #15]
 800315e:	2130      	movs	r1, #48	; 0x30
 8003160:	4618      	mov	r0, r3
 8003162:	f000 f825 	bl	80031b0 <lcd_write>
	HAL_Delay(1);
 8003166:	2001      	movs	r0, #1
 8003168:	f001 fab4 	bl	80046d4 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	7bfa      	ldrb	r2, [r7, #15]
 8003172:	2130      	movs	r1, #48	; 0x30
 8003174:	4618      	mov	r0, r3
 8003176:	f000 f81b 	bl	80031b0 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	7bfa      	ldrb	r2, [r7, #15]
 8003180:	2102      	movs	r1, #2
 8003182:	4618      	mov	r0, r3
 8003184:	f000 f814 	bl	80031b0 <lcd_write>
	HAL_Delay(5);
 8003188:	2005      	movs	r0, #5
 800318a:	f001 faa3 	bl	80046d4 <HAL_Delay>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	7bfa      	ldrb	r2, [r7, #15]
 8003194:	210c      	movs	r1, #12
 8003196:	4618      	mov	r0, r3
 8003198:	f000 f80a 	bl	80031b0 <lcd_write>
	HAL_Delay(5);
 800319c:	2005      	movs	r0, #5
 800319e:	f001 fa99 	bl	80046d4 <HAL_Delay>

	/* clear */
	lcd_clear(lcd);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f8a8 	bl	80032f8 <lcd_clear>


}
 80031a8:	bf00      	nop
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af02      	add	r7, sp, #8
 80031b6:	4603      	mov	r3, r0
 80031b8:	71fb      	strb	r3, [r7, #7]
 80031ba:	460b      	mov	r3, r1
 80031bc:	71bb      	strb	r3, [r7, #6]
 80031be:	4613      	mov	r3, r2
 80031c0:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 80031c2:	79bb      	ldrb	r3, [r7, #6]
 80031c4:	f023 030f 	bic.w	r3, r3, #15
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	797b      	ldrb	r3, [r7, #5]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	f043 0304 	orr.w	r3, r3, #4
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 80031d8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80031dc:	f023 030f 	bic.w	r3, r3, #15
 80031e0:	b25a      	sxtb	r2, r3
 80031e2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	b25b      	sxtb	r3, r3
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 80031ee:	79bb      	ldrb	r3, [r7, #6]
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	797b      	ldrb	r3, [r7, #5]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	f043 0304 	orr.w	r3, r3, #4
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 8003202:	79bb      	ldrb	r3, [r7, #6]
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	b25a      	sxtb	r2, r3
 8003208:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800320c:	4313      	orrs	r3, r2
 800320e:	b25b      	sxtb	r3, r3
 8003210:	b2db      	uxtb	r3, r3
 8003212:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	b299      	uxth	r1, r3
 8003218:	f107 020c 	add.w	r2, r7, #12
 800321c:	2364      	movs	r3, #100	; 0x64
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	2304      	movs	r3, #4
 8003222:	4803      	ldr	r0, [pc, #12]	; (8003230 <lcd_write+0x80>)
 8003224:	f002 fe9c 	bl	8005f60 <HAL_I2C_Master_Transmit>
}
 8003228:	bf00      	nop
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20000204 	.word	0x20000204

08003234 <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 800323c:	2300      	movs	r3, #0
 800323e:	73fb      	strb	r3, [r7, #15]
 8003240:	2300      	movs	r3, #0
 8003242:	73bb      	strb	r3, [r7, #14]
	char ch;

	/* set backlight */
	if(lcd->bl)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 800324e:	2308      	movs	r3, #8
 8003250:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f850 	bl	80032f8 <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	7bfa      	ldrb	r2, [r7, #15]
 800325e:	2180      	movs	r1, #128	; 0x80
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff ffa5 	bl	80031b0 <lcd_write>
	while(ch = lcd->f_line[i])
 8003266:	e015      	b.n	8003294 <lcd_display+0x60>
	{
		if (ch < 9)
 8003268:	7b7b      	ldrb	r3, [r7, #13]
 800326a:	2b08      	cmp	r3, #8
 800326c:	d802      	bhi.n	8003274 <lcd_display+0x40>
		{
			ch--;
 800326e:	7b7b      	ldrb	r3, [r7, #13]
 8003270:	3b01      	subs	r3, #1
 8003272:	737b      	strb	r3, [r7, #13]
		}
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	7818      	ldrb	r0, [r3, #0]
 8003278:	7bbb      	ldrb	r3, [r7, #14]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	4413      	add	r3, r2
 800327e:	7859      	ldrb	r1, [r3, #1]
 8003280:	7bfb      	ldrb	r3, [r7, #15]
 8003282:	f043 0301 	orr.w	r3, r3, #1
 8003286:	b2db      	uxtb	r3, r3
 8003288:	461a      	mov	r2, r3
 800328a:	f7ff ff91 	bl	80031b0 <lcd_write>
		i++;
 800328e:	7bbb      	ldrb	r3, [r7, #14]
 8003290:	3301      	adds	r3, #1
 8003292:	73bb      	strb	r3, [r7, #14]
	while(ch = lcd->f_line[i])
 8003294:	7bbb      	ldrb	r3, [r7, #14]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	4413      	add	r3, r2
 800329a:	785b      	ldrb	r3, [r3, #1]
 800329c:	737b      	strb	r3, [r7, #13]
 800329e:	7b7b      	ldrb	r3, [r7, #13]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1e1      	bne.n	8003268 <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 80032a4:	2300      	movs	r3, #0
 80032a6:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	7bfa      	ldrb	r2, [r7, #15]
 80032ae:	21c0      	movs	r1, #192	; 0xc0
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff ff7d 	bl	80031b0 <lcd_write>
	while(ch = lcd->s_line[i])
 80032b6:	e012      	b.n	80032de <lcd_display+0xaa>
	{
		if (ch < 9)
 80032b8:	7b7b      	ldrb	r3, [r7, #13]
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d802      	bhi.n	80032c4 <lcd_display+0x90>
		{
			ch--;
 80032be:	7b7b      	ldrb	r3, [r7, #13]
 80032c0:	3b01      	subs	r3, #1
 80032c2:	737b      	strb	r3, [r7, #13]
		}
		lcd_write(lcd->addr, ch, (xpin | RS_PIN));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	7818      	ldrb	r0, [r3, #0]
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
 80032ca:	f043 0301 	orr.w	r3, r3, #1
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	7b7b      	ldrb	r3, [r7, #13]
 80032d2:	4619      	mov	r1, r3
 80032d4:	f7ff ff6c 	bl	80031b0 <lcd_write>
		i++;
 80032d8:	7bbb      	ldrb	r3, [r7, #14]
 80032da:	3301      	adds	r3, #1
 80032dc:	73bb      	strb	r3, [r7, #14]
	while(ch = lcd->s_line[i])
 80032de:	7bbb      	ldrb	r3, [r7, #14]
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	4413      	add	r3, r2
 80032e4:	7c9b      	ldrb	r3, [r3, #18]
 80032e6:	737b      	strb	r3, [r7, #13]
 80032e8:	7b7b      	ldrb	r3, [r7, #13]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1e4      	bne.n	80032b8 <lcd_display+0x84>
	}
}
 80032ee:	bf00      	nop
 80032f0:	bf00      	nop
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8003300:	2300      	movs	r3, #0
 8003302:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 800330e:	2308      	movs	r3, #8
 8003310:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	7bfa      	ldrb	r2, [r7, #15]
 8003318:	2101      	movs	r1, #1
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff ff48 	bl	80031b0 <lcd_write>
	HAL_Delay(2);
 8003320:	2002      	movs	r0, #2
 8003322:	f001 f9d7 	bl	80046d4 <HAL_Delay>
}
 8003326:	bf00      	nop
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
	...

08003330 <lcd_prog>:


void lcd_prog(struct lcd_disp * lcd)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i, j;
 8003338:	2300      	movs	r3, #0
 800333a:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <lcd_prog+0x1a>
	{
		xpin = BL_PIN;
 8003346:	2308      	movs	r3, #8
 8003348:	73fb      	strb	r3, [r7, #15]
	}

	/* send 8 custom chars */
	lcd_write(lcd->addr, (CG_FIRST_CHAR), xpin);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	7bfa      	ldrb	r2, [r7, #15]
 8003350:	2140      	movs	r1, #64	; 0x40
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff ff2c 	bl	80031b0 <lcd_write>
	for(i = 0; i <= 7; i++)
 8003358:	2300      	movs	r3, #0
 800335a:	73bb      	strb	r3, [r7, #14]
 800335c:	e01b      	b.n	8003396 <lcd_prog+0x66>
	{
		for(j = 0; j <= 7; j ++)
 800335e:	2300      	movs	r3, #0
 8003360:	737b      	strb	r3, [r7, #13]
 8003362:	e012      	b.n	800338a <lcd_prog+0x5a>
		{
			lcd_write(lcd->addr, (user_chars[i][j]), (xpin | RS_PIN));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	7818      	ldrb	r0, [r3, #0]
 8003368:	7bba      	ldrb	r2, [r7, #14]
 800336a:	7b7b      	ldrb	r3, [r7, #13]
 800336c:	490e      	ldr	r1, [pc, #56]	; (80033a8 <lcd_prog+0x78>)
 800336e:	00d2      	lsls	r2, r2, #3
 8003370:	440a      	add	r2, r1
 8003372:	4413      	add	r3, r2
 8003374:	7819      	ldrb	r1, [r3, #0]
 8003376:	7bfb      	ldrb	r3, [r7, #15]
 8003378:	f043 0301 	orr.w	r3, r3, #1
 800337c:	b2db      	uxtb	r3, r3
 800337e:	461a      	mov	r2, r3
 8003380:	f7ff ff16 	bl	80031b0 <lcd_write>
		for(j = 0; j <= 7; j ++)
 8003384:	7b7b      	ldrb	r3, [r7, #13]
 8003386:	3301      	adds	r3, #1
 8003388:	737b      	strb	r3, [r7, #13]
 800338a:	7b7b      	ldrb	r3, [r7, #13]
 800338c:	2b07      	cmp	r3, #7
 800338e:	d9e9      	bls.n	8003364 <lcd_prog+0x34>
	for(i = 0; i <= 7; i++)
 8003390:	7bbb      	ldrb	r3, [r7, #14]
 8003392:	3301      	adds	r3, #1
 8003394:	73bb      	strb	r3, [r7, #14]
 8003396:	7bbb      	ldrb	r3, [r7, #14]
 8003398:	2b07      	cmp	r3, #7
 800339a:	d9e0      	bls.n	800335e <lcd_prog+0x2e>
		}
	}
}
 800339c:	bf00      	nop
 800339e:	bf00      	nop
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	20000058 	.word	0x20000058
 80033ac:	00000000 	.word	0x00000000

080033b0 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim TIM handle
  * @retval None
  */
pid_t2 pid1={.param.Kp=1.2,.param.Ki=0.002, .param.Kd=0,.param.dt=1.0, .previous_error=0, .previous_integral=0};
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033b0:	b5b0      	push	{r4, r5, r7, lr}
 80033b2:	b0a8      	sub	sp, #160	; 0xa0
 80033b4:	af02      	add	r7, sp, #8
 80033b6:	6078      	str	r0, [r7, #4]
	static unsigned int cnt = 0;
//	    static unsigned int sd_timer = 0;

	    if(htim == &htim2)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a7b      	ldr	r2, [pc, #492]	; (80035a8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d16b      	bne.n	8003498 <HAL_TIM_PeriodElapsedCallback+0xe8>
	    {
	        cnt++;
 80033c0:	4b7a      	ldr	r3, [pc, #488]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3301      	adds	r3, #1
 80033c6:	4a79      	ldr	r2, [pc, #484]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80033c8:	6013      	str	r3, [r2, #0]
	        BMP2_ReadData(&bmp2dev, &press, &temp);
 80033ca:	4a79      	ldr	r2, [pc, #484]	; (80035b0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80033cc:	4979      	ldr	r1, [pc, #484]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80033ce:	487a      	ldr	r0, [pc, #488]	; (80035b8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80033d0:	f7fe fe68 	bl	80020a4 <BMP2_ReadData>

	        temp_int = 1000*temp;
 80033d4:	4b76      	ldr	r3, [pc, #472]	; (80035b0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80033d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	4b77      	ldr	r3, [pc, #476]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80033e0:	f7fd f922 	bl	8000628 <__aeabi_dmul>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4610      	mov	r0, r2
 80033ea:	4619      	mov	r1, r3
 80033ec:	f7fd fbde 	bl	8000bac <__aeabi_d2uiz>
 80033f0:	4603      	mov	r3, r0
 80033f2:	4a73      	ldr	r2, [pc, #460]	; (80035c0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80033f4:	6013      	str	r3, [r2, #0]
	        press_int = 100*press;
 80033f6:	4b6f      	ldr	r3, [pc, #444]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80033f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	4b70      	ldr	r3, [pc, #448]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8003402:	f7fd f911 	bl	8000628 <__aeabi_dmul>
 8003406:	4602      	mov	r2, r0
 8003408:	460b      	mov	r3, r1
 800340a:	4610      	mov	r0, r2
 800340c:	4619      	mov	r1, r3
 800340e:	f7fd fbcd 	bl	8000bac <__aeabi_d2uiz>
 8003412:	4603      	mov	r3, r0
 8003414:	4a6c      	ldr	r2, [pc, #432]	; (80035c8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8003416:	6013      	str	r3, [r2, #0]

	        if(cnt == 4)
 8003418:	4b64      	ldr	r3, [pc, #400]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b04      	cmp	r3, #4
 800341e:	d13b      	bne.n	8003498 <HAL_TIM_PeriodElapsedCallback+0xe8>
	        {
	            cnt = 0;
 8003420:	4b62      	ldr	r3, [pc, #392]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8003422:	2200      	movs	r2, #0
 8003424:	601a      	str	r2, [r3, #0]
	            uint8_t tx_buffer[128];
	            int tx_msg_len = sprintf((char*)tx_buffer,
 8003426:	4b66      	ldr	r3, [pc, #408]	; (80035c0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a68      	ldr	r2, [pc, #416]	; (80035cc <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800342c:	fba2 2303 	umull	r2, r3, r2, r3
 8003430:	099d      	lsrs	r5, r3, #6
 8003432:	4b63      	ldr	r3, [pc, #396]	; (80035c0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a65      	ldr	r2, [pc, #404]	; (80035cc <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8003438:	fba2 1203 	umull	r1, r2, r2, r3
 800343c:	0992      	lsrs	r2, r2, #6
 800343e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003442:	fb01 f202 	mul.w	r2, r1, r2
 8003446:	1a9a      	subs	r2, r3, r2
 8003448:	4b5f      	ldr	r3, [pc, #380]	; (80035c8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4960      	ldr	r1, [pc, #384]	; (80035d0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800344e:	fba1 1303 	umull	r1, r3, r1, r3
 8003452:	0958      	lsrs	r0, r3, #5
 8003454:	4b5c      	ldr	r3, [pc, #368]	; (80035c8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8003456:	6819      	ldr	r1, [r3, #0]
 8003458:	4b5d      	ldr	r3, [pc, #372]	; (80035d0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800345a:	fba3 4301 	umull	r4, r3, r3, r1
 800345e:	095b      	lsrs	r3, r3, #5
 8003460:	2464      	movs	r4, #100	; 0x64
 8003462:	fb04 f303 	mul.w	r3, r4, r3
 8003466:	1acb      	subs	r3, r1, r3
 8003468:	f107 040c 	add.w	r4, r7, #12
 800346c:	9301      	str	r3, [sp, #4]
 800346e:	9000      	str	r0, [sp, #0]
 8003470:	4613      	mov	r3, r2
 8003472:	462a      	mov	r2, r5
 8003474:	4957      	ldr	r1, [pc, #348]	; (80035d4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8003476:	4620      	mov	r0, r4
 8003478:	f00a fdba 	bl	800dff0 <siprintf>
 800347c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	                    "Temperature: %2u.%03u degC; Pressure: %5u.%02u hPa\r",
	                    temp_int / 1000, temp_int % 1000,
	                    press_int / 100, press_int % 100);
	            HAL_UART_Transmit(&huart3, tx_buffer, tx_msg_len, 100);
 8003480:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003484:	b29a      	uxth	r2, r3
 8003486:	f107 010c 	add.w	r1, r7, #12
 800348a:	2364      	movs	r3, #100	; 0x64
 800348c:	4852      	ldr	r0, [pc, #328]	; (80035d8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800348e:	f006 fb69 	bl	8009b64 <HAL_UART_Transmit>

	            sd_card_operation_flag = 1;
 8003492:	4b52      	ldr	r3, [pc, #328]	; (80035dc <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8003494:	2201      	movs	r2, #1
 8003496:	701a      	strb	r2, [r3, #0]

	            // ... reszta kodu ... 
	        }
  }
  //pid
  if(htim == &htim7){
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a51      	ldr	r2, [pc, #324]	; (80035e0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d109      	bne.n	80034b4 <HAL_TIM_PeriodElapsedCallback+0x104>

  		 current_temp = temp_int;
 80034a0:	4b47      	ldr	r3, [pc, #284]	; (80035c0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	ee07 3a90 	vmov	s15, r3
 80034a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ac:	4b4d      	ldr	r3, [pc, #308]	; (80035e4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80034ae:	edc3 7a00 	vstr	s15, [r3]


  		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,pwm_duty);

  	}
}
 80034b2:	e071      	b.n	8003598 <HAL_TIM_PeriodElapsedCallback+0x1e8>
  		float pwm_duty_f= (999.0*calculate_discrete_pid(&pid1,zadane_obiektu,current_temp));
 80034b4:	4b4c      	ldr	r3, [pc, #304]	; (80035e8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	ee07 3a90 	vmov	s15, r3
 80034bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034c0:	4b48      	ldr	r3, [pc, #288]	; (80035e4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80034c2:	ed93 7a00 	vldr	s14, [r3]
 80034c6:	eef0 0a47 	vmov.f32	s1, s14
 80034ca:	eeb0 0a67 	vmov.f32	s0, s15
 80034ce:	4847      	ldr	r0, [pc, #284]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80034d0:	f000 faff 	bl	8003ad2 <calculate_discrete_pid>
 80034d4:	ee10 3a10 	vmov	r3, s0
 80034d8:	4618      	mov	r0, r3
 80034da:	f7fd f84d 	bl	8000578 <__aeabi_f2d>
 80034de:	a330      	add	r3, pc, #192	; (adr r3, 80035a0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80034e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e4:	f7fd f8a0 	bl	8000628 <__aeabi_dmul>
 80034e8:	4602      	mov	r2, r0
 80034ea:	460b      	mov	r3, r1
 80034ec:	4610      	mov	r0, r2
 80034ee:	4619      	mov	r1, r3
 80034f0:	f7fd fb7c 	bl	8000bec <__aeabi_d2f>
 80034f4:	4603      	mov	r3, r0
 80034f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  		fanControlTest=pwm_duty_f;
 80034fa:	4a3d      	ldr	r2, [pc, #244]	; (80035f0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80034fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003500:	6013      	str	r3, [r2, #0]
  		uint16_t pwm_duty=0;
 8003502:	2300      	movs	r3, #0
 8003504:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
  		if(pwm_duty_f<0)pwm_duty=0;else
 8003508:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800350c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003514:	d503      	bpl.n	800351e <HAL_TIM_PeriodElapsedCallback+0x16e>
 8003516:	2300      	movs	r3, #0
 8003518:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800351c:	e015      	b.n	800354a <HAL_TIM_PeriodElapsedCallback+0x19a>
  		if(pwm_duty_f>999.0)pwm_duty=999;else
 800351e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003522:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80035f4 <HAL_TIM_PeriodElapsedCallback+0x244>
 8003526:	eef4 7ac7 	vcmpe.f32	s15, s14
 800352a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800352e:	dd04      	ble.n	800353a <HAL_TIM_PeriodElapsedCallback+0x18a>
 8003530:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003534:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8003538:	e007      	b.n	800354a <HAL_TIM_PeriodElapsedCallback+0x19a>
  			pwm_duty=(uint16_t)pwm_duty_f;
 800353a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800353e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003542:	ee17 3a90 	vmov	r3, s15
 8003546:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
  		fanControlTestDriven = pwm_duty;
 800354a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800354e:	ee07 3a90 	vmov	s15, r3
 8003552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003556:	4b28      	ldr	r3, [pc, #160]	; (80035f8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003558:	edc3 7a00 	vstr	s15, [r3]
  		if(temp_int -600 > zadane_obiektu) __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 700);
 800355c:	4b18      	ldr	r3, [pc, #96]	; (80035c0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8003564:	4b20      	ldr	r3, [pc, #128]	; (80035e8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	429a      	cmp	r2, r3
 800356a:	d904      	bls.n	8003576 <HAL_TIM_PeriodElapsedCallback+0x1c6>
 800356c:	4b23      	ldr	r3, [pc, #140]	; (80035fc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8003574:	639a      	str	r2, [r3, #56]	; 0x38
  		if(temp_int -200 < zadane_obiektu)__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0);
 8003576:	4b12      	ldr	r3, [pc, #72]	; (80035c0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f1a3 02c8 	sub.w	r2, r3, #200	; 0xc8
 800357e:	4b1a      	ldr	r3, [pc, #104]	; (80035e8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d203      	bcs.n	800358e <HAL_TIM_PeriodElapsedCallback+0x1de>
 8003586:	4b1d      	ldr	r3, [pc, #116]	; (80035fc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2200      	movs	r2, #0
 800358c:	639a      	str	r2, [r3, #56]	; 0x38
  		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,pwm_duty);
 800358e:	4b1b      	ldr	r3, [pc, #108]	; (80035fc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003596:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003598:	bf00      	nop
 800359a:	3798      	adds	r7, #152	; 0x98
 800359c:	46bd      	mov	sp, r7
 800359e:	bdb0      	pop	{r4, r5, r7, pc}
 80035a0:	00000000 	.word	0x00000000
 80035a4:	408f3800 	.word	0x408f3800
 80035a8:	200023e8 	.word	0x200023e8
 80035ac:	20002318 	.word	0x20002318
 80035b0:	200022c0 	.word	0x200022c0
 80035b4:	200022d0 	.word	0x200022d0
 80035b8:	20000018 	.word	0x20000018
 80035bc:	408f4000 	.word	0x408f4000
 80035c0:	200022c8 	.word	0x200022c8
 80035c4:	40590000 	.word	0x40590000
 80035c8:	200022d8 	.word	0x200022d8
 80035cc:	10624dd3 	.word	0x10624dd3
 80035d0:	51eb851f 	.word	0x51eb851f
 80035d4:	0800e984 	.word	0x0800e984
 80035d8:	20002518 	.word	0x20002518
 80035dc:	20002310 	.word	0x20002310
 80035e0:	200024cc 	.word	0x200024cc
 80035e4:	200022e4 	.word	0x200022e4
 80035e8:	200000a4 	.word	0x200000a4
 80035ec:	200000ac 	.word	0x200000ac
 80035f0:	2000009c 	.word	0x2000009c
 80035f4:	4479c000 	.word	0x4479c000
 80035f8:	200000a0 	.word	0x200000a0
 80035fc:	20002434 	.word	0x20002434

08003600 <wypelnienie1>:

void wypelnienie1(uint16_t duty)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	4603      	mov	r3, r0
 8003608:	80fb      	strh	r3, [r7, #6]
	duty = duty*10;
 800360a:	88fb      	ldrh	r3, [r7, #6]
 800360c:	461a      	mov	r2, r3
 800360e:	0092      	lsls	r2, r2, #2
 8003610:	4413      	add	r3, r2
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	80fb      	strh	r3, [r7, #6]
	zadane_rezystora=duty;
 8003616:	88fb      	ldrh	r3, [r7, #6]
 8003618:	4a03      	ldr	r2, [pc, #12]	; (8003628 <wypelnienie1+0x28>)
 800361a:	6013      	str	r3, [r2, #0]
	//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty);
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	200022dc 	.word	0x200022dc

0800362c <wypelnienie2>:

void wypelnienie2(uint16_t duty)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	4603      	mov	r3, r0
 8003634:	80fb      	strh	r3, [r7, #6]
	duty = duty*10;
 8003636:	88fb      	ldrh	r3, [r7, #6]
 8003638:	461a      	mov	r2, r3
 800363a:	0092      	lsls	r2, r2, #2
 800363c:	4413      	add	r3, r2
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	80fb      	strh	r3, [r7, #6]
	zadane_wiatraka=duty;
 8003642:	88fb      	ldrh	r3, [r7, #6]
 8003644:	4a03      	ldr	r2, [pc, #12]	; (8003654 <wypelnienie2+0x28>)
 8003646:	6013      	str	r3, [r2, #0]
	//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty);
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	200022e0 	.word	0x200022e0

08003658 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
	uint8_t fill=0;
 8003660:	2300      	movs	r3, #0
 8003662:	73fb      	strb	r3, [r7, #15]

	if(word[0] == 'r')
 8003664:	4b1c      	ldr	r3, [pc, #112]	; (80036d8 <HAL_UART_RxCpltCallback+0x80>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b72      	cmp	r3, #114	; 0x72
 800366a:	d113      	bne.n	8003694 <HAL_UART_RxCpltCallback+0x3c>
	{
		fill = ((word[1] - '0') * 10 + (word[2] - '0'));
 800366c:	4b1a      	ldr	r3, [pc, #104]	; (80036d8 <HAL_UART_RxCpltCallback+0x80>)
 800366e:	785b      	ldrb	r3, [r3, #1]
 8003670:	3b30      	subs	r3, #48	; 0x30
 8003672:	b2db      	uxtb	r3, r3
 8003674:	461a      	mov	r2, r3
 8003676:	0092      	lsls	r2, r2, #2
 8003678:	4413      	add	r3, r2
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	b2da      	uxtb	r2, r3
 800367e:	4b16      	ldr	r3, [pc, #88]	; (80036d8 <HAL_UART_RxCpltCallback+0x80>)
 8003680:	789b      	ldrb	r3, [r3, #2]
 8003682:	4413      	add	r3, r2
 8003684:	b2db      	uxtb	r3, r3
 8003686:	3b30      	subs	r3, #48	; 0x30
 8003688:	73fb      	strb	r3, [r7, #15]
		wypelnienie1(fill);
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	b29b      	uxth	r3, r3
 800368e:	4618      	mov	r0, r3
 8003690:	f7ff ffb6 	bl	8003600 <wypelnienie1>
	}

	if(word[0] == 'w')
 8003694:	4b10      	ldr	r3, [pc, #64]	; (80036d8 <HAL_UART_RxCpltCallback+0x80>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	2b77      	cmp	r3, #119	; 0x77
 800369a:	d113      	bne.n	80036c4 <HAL_UART_RxCpltCallback+0x6c>
	{
		fill = ((word[1] - '0') * 10 + (word[2] - '0'));
 800369c:	4b0e      	ldr	r3, [pc, #56]	; (80036d8 <HAL_UART_RxCpltCallback+0x80>)
 800369e:	785b      	ldrb	r3, [r3, #1]
 80036a0:	3b30      	subs	r3, #48	; 0x30
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	461a      	mov	r2, r3
 80036a6:	0092      	lsls	r2, r2, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	4b0a      	ldr	r3, [pc, #40]	; (80036d8 <HAL_UART_RxCpltCallback+0x80>)
 80036b0:	789b      	ldrb	r3, [r3, #2]
 80036b2:	4413      	add	r3, r2
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	3b30      	subs	r3, #48	; 0x30
 80036b8:	73fb      	strb	r3, [r7, #15]
		wypelnienie2(fill);
 80036ba:	7bfb      	ldrb	r3, [r7, #15]
 80036bc:	b29b      	uxth	r3, r3
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff ffb4 	bl	800362c <wypelnienie2>
	}
	HAL_UART_Receive_IT(&huart3, word, 3);
 80036c4:	2203      	movs	r2, #3
 80036c6:	4904      	ldr	r1, [pc, #16]	; (80036d8 <HAL_UART_RxCpltCallback+0x80>)
 80036c8:	4804      	ldr	r0, [pc, #16]	; (80036dc <HAL_UART_RxCpltCallback+0x84>)
 80036ca:	f006 face 	bl	8009c6a <HAL_UART_Receive_IT>
}
 80036ce:	bf00      	nop
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	20000098 	.word	0x20000098
 80036dc:	20002518 	.word	0x20002518

080036e0 <display_function>:

void display_function()
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af02      	add	r7, sp, #8
	if(powitanie)
 80036e6:	4b29      	ldr	r3, [pc, #164]	; (800378c <display_function+0xac>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d014      	beq.n	8003718 <display_function+0x38>
	{
		sprintf((char*)disp.f_line, "Dzie%c dobry %c", '\x4', '\x5');
 80036ee:	2305      	movs	r3, #5
 80036f0:	2204      	movs	r2, #4
 80036f2:	4927      	ldr	r1, [pc, #156]	; (8003790 <display_function+0xb0>)
 80036f4:	4827      	ldr	r0, [pc, #156]	; (8003794 <display_function+0xb4>)
 80036f6:	f00a fc7b 	bl	800dff0 <siprintf>
		sprintf((char*)disp.s_line, "smacznej kawusi");
 80036fa:	4927      	ldr	r1, [pc, #156]	; (8003798 <display_function+0xb8>)
 80036fc:	4827      	ldr	r0, [pc, #156]	; (800379c <display_function+0xbc>)
 80036fe:	f00a fc77 	bl	800dff0 <siprintf>
		lcd_display(&disp);
 8003702:	4827      	ldr	r0, [pc, #156]	; (80037a0 <display_function+0xc0>)
 8003704:	f7ff fd96 	bl	8003234 <lcd_display>
		HAL_Delay(1000);
 8003708:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800370c:	f000 ffe2 	bl	80046d4 <HAL_Delay>
		powitanie = 0;
 8003710:	4b1e      	ldr	r3, [pc, #120]	; (800378c <display_function+0xac>)
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	e032      	b.n	800377e <display_function+0x9e>
	}
	else
	{
		sprintf((char*)disp.f_line, "T. akt.:%d.%02d%cC", temp_int / 1000, temp_int % 1000, '\x7');
 8003718:	4b22      	ldr	r3, [pc, #136]	; (80037a4 <display_function+0xc4>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a22      	ldr	r2, [pc, #136]	; (80037a8 <display_function+0xc8>)
 800371e:	fba2 2303 	umull	r2, r3, r2, r3
 8003722:	0999      	lsrs	r1, r3, #6
 8003724:	4b1f      	ldr	r3, [pc, #124]	; (80037a4 <display_function+0xc4>)
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	4b1f      	ldr	r3, [pc, #124]	; (80037a8 <display_function+0xc8>)
 800372a:	fba3 0302 	umull	r0, r3, r3, r2
 800372e:	099b      	lsrs	r3, r3, #6
 8003730:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003734:	fb00 f303 	mul.w	r3, r0, r3
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2207      	movs	r2, #7
 800373c:	9200      	str	r2, [sp, #0]
 800373e:	460a      	mov	r2, r1
 8003740:	491a      	ldr	r1, [pc, #104]	; (80037ac <display_function+0xcc>)
 8003742:	4814      	ldr	r0, [pc, #80]	; (8003794 <display_function+0xb4>)
 8003744:	f00a fc54 	bl	800dff0 <siprintf>
		sprintf((char*)disp.s_line, "T. zad.:%d.%02d%cC", zadane_obiektu / 1000, zadane_obiektu % 1000, '\x8');
 8003748:	4b19      	ldr	r3, [pc, #100]	; (80037b0 <display_function+0xd0>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a16      	ldr	r2, [pc, #88]	; (80037a8 <display_function+0xc8>)
 800374e:	fba2 2303 	umull	r2, r3, r2, r3
 8003752:	0999      	lsrs	r1, r3, #6
 8003754:	4b16      	ldr	r3, [pc, #88]	; (80037b0 <display_function+0xd0>)
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	4b13      	ldr	r3, [pc, #76]	; (80037a8 <display_function+0xc8>)
 800375a:	fba3 0302 	umull	r0, r3, r3, r2
 800375e:	099b      	lsrs	r3, r3, #6
 8003760:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003764:	fb00 f303 	mul.w	r3, r0, r3
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2208      	movs	r2, #8
 800376c:	9200      	str	r2, [sp, #0]
 800376e:	460a      	mov	r2, r1
 8003770:	4910      	ldr	r1, [pc, #64]	; (80037b4 <display_function+0xd4>)
 8003772:	480a      	ldr	r0, [pc, #40]	; (800379c <display_function+0xbc>)
 8003774:	f00a fc3c 	bl	800dff0 <siprintf>
		lcd_display(&disp);
 8003778:	4809      	ldr	r0, [pc, #36]	; (80037a0 <display_function+0xc0>)
 800377a:	f7ff fd5b 	bl	8003234 <lcd_display>
	}

	HAL_Delay(2000);
 800377e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003782:	f000 ffa7 	bl	80046d4 <HAL_Delay>

}
 8003786:	bf00      	nop
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	200000a8 	.word	0x200000a8
 8003790:	0800e9b8 	.word	0x0800e9b8
 8003794:	200022ed 	.word	0x200022ed
 8003798:	0800e9c8 	.word	0x0800e9c8
 800379c:	200022fe 	.word	0x200022fe
 80037a0:	200022ec 	.word	0x200022ec
 80037a4:	200022c8 	.word	0x200022c8
 80037a8:	10624dd3 	.word	0x10624dd3
 80037ac:	0800e9d8 	.word	0x0800e9d8
 80037b0:	200000a4 	.word	0x200000a4
 80037b4:	0800e9ec 	.word	0x0800e9ec

080037b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037b8:	b5b0      	push	{r4, r5, r7, lr}
 80037ba:	b0a6      	sub	sp, #152	; 0x98
 80037bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037be:	f000 ff2c 	bl	800461a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037c2:	f000 f913 	bl	80039ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037c6:	f7ff fa87 	bl	8002cd8 <MX_GPIO_Init>
  MX_DMA_Init();
 80037ca:	f7fe fd9d 	bl	8002308 <MX_DMA_Init>
  MX_SPI4_Init();
 80037ce:	f000 fa3f 	bl	8003c50 <MX_SPI4_Init>
  MX_TIM2_Init();
 80037d2:	f000 fc05 	bl	8003fe0 <MX_TIM2_Init>
  MX_TIM4_Init();
 80037d6:	f000 fcd7 	bl	8004188 <MX_TIM4_Init>
  MX_TIM3_Init();
 80037da:	f000 fc4f 	bl	800407c <MX_TIM3_Init>
  MX_TIM7_Init();
 80037de:	f000 fd4b 	bl	8004278 <MX_TIM7_Init>
  MX_I2C1_Init();
 80037e2:	f7ff fbff 	bl	8002fe4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80037e6:	f000 fe57 	bl	8004498 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80037ea:	f7fe fcbf 	bl	800216c <MX_ADC1_Init>
  MX_SPI1_Init();
 80037ee:	f000 f9f1 	bl	8003bd4 <MX_SPI1_Init>
  MX_FATFS_Init();
 80037f2:	f007 fc45 	bl	800b080 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  BMP2_Init(&bmp2dev);// inicjalizacja czujnika
 80037f6:	4868      	ldr	r0, [pc, #416]	; (8003998 <main+0x1e0>)
 80037f8:	f7fe fb88 	bl	8001f0c <BMP2_Init>
  HAL_TIM_Base_Start_IT(&htim2);// uruchomienie timerow
 80037fc:	4867      	ldr	r0, [pc, #412]	; (800399c <main+0x1e4>)
 80037fe:	f004 ffff 	bl	8008800 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);// uruchomienie timerow
 8003802:	4867      	ldr	r0, [pc, #412]	; (80039a0 <main+0x1e8>)
 8003804:	f004 fffc 	bl	8008800 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8003808:	2108      	movs	r1, #8
 800380a:	4866      	ldr	r0, [pc, #408]	; (80039a4 <main+0x1ec>)
 800380c:	f005 f8d2 	bl	80089b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003810:	2104      	movs	r1, #4
 8003812:	4864      	ldr	r0, [pc, #400]	; (80039a4 <main+0x1ec>)
 8003814:	f005 f8ce 	bl	80089b4 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8003818:	4b62      	ldr	r3, [pc, #392]	; (80039a4 <main+0x1ec>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2200      	movs	r2, #0
 800381e:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8003820:	4b60      	ldr	r3, [pc, #384]	; (80039a4 <main+0x1ec>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2200      	movs	r2, #0
 8003826:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_UART_Receive_IT(&huart3, word, 3);
 8003828:	2203      	movs	r2, #3
 800382a:	495f      	ldr	r1, [pc, #380]	; (80039a8 <main+0x1f0>)
 800382c:	485f      	ldr	r0, [pc, #380]	; (80039ac <main+0x1f4>)
 800382e:	f006 fa1c 	bl	8009c6a <HAL_UART_Receive_IT>
//wyswietlacz
  disp.addr = (0x27 << 1);
 8003832:	4b5f      	ldr	r3, [pc, #380]	; (80039b0 <main+0x1f8>)
 8003834:	224e      	movs	r2, #78	; 0x4e
 8003836:	701a      	strb	r2, [r3, #0]
  disp.bl = true;
 8003838:	4b5d      	ldr	r3, [pc, #372]	; (80039b0 <main+0x1f8>)
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  lcd_init(&disp);
 8003840:	485b      	ldr	r0, [pc, #364]	; (80039b0 <main+0x1f8>)
 8003842:	f7ff fc6f 	bl	8003124 <lcd_init>
  lcd_prog(&disp);
 8003846:	485a      	ldr	r0, [pc, #360]	; (80039b0 <main+0x1f8>)
 8003848:	f7ff fd72 	bl	8003330 <lcd_prog>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 800384c:	4859      	ldr	r0, [pc, #356]	; (80039b4 <main+0x1fc>)
 800384e:	f000 ffa9 	bl	80047a4 <HAL_ADC_Start>
	  display_function();
 8003852:	f7ff ff45 	bl	80036e0 <display_function>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8003856:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800385a:	4856      	ldr	r0, [pc, #344]	; (80039b4 <main+0x1fc>)
 800385c:	f001 f870 	bl	8004940 <HAL_ADC_PollForConversion>
	  readValue_potencjometr = HAL_ADC_GetValue(&hadc1);
 8003860:	4854      	ldr	r0, [pc, #336]	; (80039b4 <main+0x1fc>)
 8003862:	f001 fa08 	bl	8004c76 <HAL_ADC_GetValue>
 8003866:	4603      	mov	r3, r0
 8003868:	b29a      	uxth	r2, r3
 800386a:	4b53      	ldr	r3, [pc, #332]	; (80039b8 <main+0x200>)
 800386c:	801a      	strh	r2, [r3, #0]
	  zadane_obiektu = readValue_potencjometr*5.36 +18000.0;
 800386e:	4b52      	ldr	r3, [pc, #328]	; (80039b8 <main+0x200>)
 8003870:	881b      	ldrh	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f7fc fe6e 	bl	8000554 <__aeabi_i2d>
 8003878:	a343      	add	r3, pc, #268	; (adr r3, 8003988 <main+0x1d0>)
 800387a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387e:	f7fc fed3 	bl	8000628 <__aeabi_dmul>
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	4610      	mov	r0, r2
 8003888:	4619      	mov	r1, r3
 800388a:	a341      	add	r3, pc, #260	; (adr r3, 8003990 <main+0x1d8>)
 800388c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003890:	f7fc fd14 	bl	80002bc <__adddf3>
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	4610      	mov	r0, r2
 800389a:	4619      	mov	r1, r3
 800389c:	f7fd f986 	bl	8000bac <__aeabi_d2uiz>
 80038a0:	4603      	mov	r3, r0
 80038a2:	4a46      	ldr	r2, [pc, #280]	; (80039bc <main+0x204>)
 80038a4:	6013      	str	r3, [r2, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (sd_card_operation_flag) {
 80038a6:	4b46      	ldr	r3, [pc, #280]	; (80039c0 <main+0x208>)
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0cd      	beq.n	800384c <main+0x94>
	         sd_card_operation_flag = 0; // Zeruj flagę
 80038b0:	4b43      	ldr	r3, [pc, #268]	; (80039c0 <main+0x208>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	701a      	strb	r2, [r3, #0]

	         if (f_mount(&fs, "", 0) == FR_OK) {
 80038b6:	2200      	movs	r2, #0
 80038b8:	4942      	ldr	r1, [pc, #264]	; (80039c4 <main+0x20c>)
 80038ba:	4843      	ldr	r0, [pc, #268]	; (80039c8 <main+0x210>)
 80038bc:	f009 fe28 	bl	800d510 <f_mount>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1c2      	bne.n	800384c <main+0x94>
	             if (f_open(&fil, "text.txt", FA_OPEN_APPEND | FA_WRITE) == FR_OK) {
 80038c6:	2232      	movs	r2, #50	; 0x32
 80038c8:	4940      	ldr	r1, [pc, #256]	; (80039cc <main+0x214>)
 80038ca:	4841      	ldr	r0, [pc, #260]	; (80039d0 <main+0x218>)
 80038cc:	f009 fe66 	bl	800d59c <f_open>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d152      	bne.n	800397c <main+0x1c4>
	                 char log_buffer[128];
	                 int log_length = sprintf(log_buffer, "Temperature: %2u.%03u degC; Pressure: %5u.%02u hPa\r\n",
 80038d6:	4b3f      	ldr	r3, [pc, #252]	; (80039d4 <main+0x21c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a3f      	ldr	r2, [pc, #252]	; (80039d8 <main+0x220>)
 80038dc:	fba2 2303 	umull	r2, r3, r2, r3
 80038e0:	099d      	lsrs	r5, r3, #6
 80038e2:	4b3c      	ldr	r3, [pc, #240]	; (80039d4 <main+0x21c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a3c      	ldr	r2, [pc, #240]	; (80039d8 <main+0x220>)
 80038e8:	fba2 1203 	umull	r1, r2, r2, r3
 80038ec:	0992      	lsrs	r2, r2, #6
 80038ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80038f2:	fb01 f202 	mul.w	r2, r1, r2
 80038f6:	1a9a      	subs	r2, r3, r2
 80038f8:	4b38      	ldr	r3, [pc, #224]	; (80039dc <main+0x224>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4938      	ldr	r1, [pc, #224]	; (80039e0 <main+0x228>)
 80038fe:	fba1 1303 	umull	r1, r3, r1, r3
 8003902:	0958      	lsrs	r0, r3, #5
 8003904:	4b35      	ldr	r3, [pc, #212]	; (80039dc <main+0x224>)
 8003906:	6819      	ldr	r1, [r3, #0]
 8003908:	4b35      	ldr	r3, [pc, #212]	; (80039e0 <main+0x228>)
 800390a:	fba3 4301 	umull	r4, r3, r3, r1
 800390e:	095b      	lsrs	r3, r3, #5
 8003910:	2464      	movs	r4, #100	; 0x64
 8003912:	fb04 f303 	mul.w	r3, r4, r3
 8003916:	1acb      	subs	r3, r1, r3
 8003918:	1d3c      	adds	r4, r7, #4
 800391a:	9301      	str	r3, [sp, #4]
 800391c:	9000      	str	r0, [sp, #0]
 800391e:	4613      	mov	r3, r2
 8003920:	462a      	mov	r2, r5
 8003922:	4930      	ldr	r1, [pc, #192]	; (80039e4 <main+0x22c>)
 8003924:	4620      	mov	r0, r4
 8003926:	f00a fb63 	bl	800dff0 <siprintf>
 800392a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	                                          temp_int / 1000, temp_int % 1000, press_int / 100, press_int % 100);

	                 UINT bytes_written;
	                 FRESULT write_result = f_write(&fil, log_buffer, log_length, &bytes_written);
 800392e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003932:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003936:	1d39      	adds	r1, r7, #4
 8003938:	4825      	ldr	r0, [pc, #148]	; (80039d0 <main+0x218>)
 800393a:	f009 fffb 	bl	800d934 <f_write>
 800393e:	4603      	mov	r3, r0
 8003940:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

	                 if (write_result == FR_OK && bytes_written == log_length) {
 8003944:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10b      	bne.n	8003964 <main+0x1ac>
 800394c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003950:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003954:	429a      	cmp	r2, r3
 8003956:	d105      	bne.n	8003964 <main+0x1ac>
	                     // Dane zostały pomyślnie zapisane do pliku
	                     // Opcjonalnie, możesz dodać tutaj dodatkowy kod, np. logowanie sukcesu
	                	 value ++;
 8003958:	4b23      	ldr	r3, [pc, #140]	; (80039e8 <main+0x230>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	3301      	adds	r3, #1
 800395e:	4a22      	ldr	r2, [pc, #136]	; (80039e8 <main+0x230>)
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	e008      	b.n	8003976 <main+0x1be>
	                 } else {
	                     // Wystąpił błąd podczas zapisu
	                     // Opcjonalnie, możesz dodać tutaj kod obsługi błędów
	                	value = value *10;
 8003964:	4b20      	ldr	r3, [pc, #128]	; (80039e8 <main+0x230>)
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	4613      	mov	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	461a      	mov	r2, r3
 8003972:	4b1d      	ldr	r3, [pc, #116]	; (80039e8 <main+0x230>)
 8003974:	601a      	str	r2, [r3, #0]
	                 }

	                 f_close(&fil);
 8003976:	4816      	ldr	r0, [pc, #88]	; (80039d0 <main+0x218>)
 8003978:	f00a f9ee 	bl	800dd58 <f_close>
	             }
	             f_mount(NULL, "", 0);
 800397c:	2200      	movs	r2, #0
 800397e:	4911      	ldr	r1, [pc, #68]	; (80039c4 <main+0x20c>)
 8003980:	2000      	movs	r0, #0
 8003982:	f009 fdc5 	bl	800d510 <f_mount>
	  HAL_ADC_Start(&hadc1);
 8003986:	e761      	b.n	800384c <main+0x94>
 8003988:	d70a3d71 	.word	0xd70a3d71
 800398c:	401570a3 	.word	0x401570a3
 8003990:	00000000 	.word	0x00000000
 8003994:	40d19400 	.word	0x40d19400
 8003998:	20000018 	.word	0x20000018
 800399c:	200023e8 	.word	0x200023e8
 80039a0:	200024cc 	.word	0x200024cc
 80039a4:	20002434 	.word	0x20002434
 80039a8:	20000098 	.word	0x20000098
 80039ac:	20002518 	.word	0x20002518
 80039b0:	200022ec 	.word	0x200022ec
 80039b4:	20000154 	.word	0x20000154
 80039b8:	200022e8 	.word	0x200022e8
 80039bc:	200000a4 	.word	0x200000a4
 80039c0:	20002310 	.word	0x20002310
 80039c4:	0800ea00 	.word	0x0800ea00
 80039c8:	20000258 	.word	0x20000258
 80039cc:	0800ea04 	.word	0x0800ea04
 80039d0:	20001290 	.word	0x20001290
 80039d4:	200022c8 	.word	0x200022c8
 80039d8:	10624dd3 	.word	0x10624dd3
 80039dc:	200022d8 	.word	0x200022d8
 80039e0:	51eb851f 	.word	0x51eb851f
 80039e4:	0800ea10 	.word	0x0800ea10
 80039e8:	20002314 	.word	0x20002314

080039ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b094      	sub	sp, #80	; 0x50
 80039f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039f2:	f107 0320 	add.w	r3, r7, #32
 80039f6:	2230      	movs	r2, #48	; 0x30
 80039f8:	2100      	movs	r1, #0
 80039fa:	4618      	mov	r0, r3
 80039fc:	f00a fb18 	bl	800e030 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a00:	f107 030c 	add.w	r3, r7, #12
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	605a      	str	r2, [r3, #4]
 8003a0a:	609a      	str	r2, [r3, #8]
 8003a0c:	60da      	str	r2, [r3, #12]
 8003a0e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003a10:	f002 fe24 	bl	800665c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a14:	4b2a      	ldr	r3, [pc, #168]	; (8003ac0 <SystemClock_Config+0xd4>)
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	4a29      	ldr	r2, [pc, #164]	; (8003ac0 <SystemClock_Config+0xd4>)
 8003a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a1e:	6413      	str	r3, [r2, #64]	; 0x40
 8003a20:	4b27      	ldr	r3, [pc, #156]	; (8003ac0 <SystemClock_Config+0xd4>)
 8003a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a28:	60bb      	str	r3, [r7, #8]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a2c:	4b25      	ldr	r3, [pc, #148]	; (8003ac4 <SystemClock_Config+0xd8>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a24      	ldr	r2, [pc, #144]	; (8003ac4 <SystemClock_Config+0xd8>)
 8003a32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	4b22      	ldr	r3, [pc, #136]	; (8003ac4 <SystemClock_Config+0xd8>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a40:	607b      	str	r3, [r7, #4]
 8003a42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003a44:	2301      	movs	r3, #1
 8003a46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003a48:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a4e:	2302      	movs	r3, #2
 8003a50:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003a52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003a58:	2304      	movs	r3, #4
 8003a5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8003a5c:	23d8      	movs	r3, #216	; 0xd8
 8003a5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a60:	2302      	movs	r3, #2
 8003a62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003a64:	2303      	movs	r3, #3
 8003a66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a68:	f107 0320 	add.w	r3, r7, #32
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f002 fe55 	bl	800671c <HAL_RCC_OscConfig>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8003a78:	f000 f826 	bl	8003ac8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003a7c:	f002 fdfe 	bl	800667c <HAL_PWREx_EnableOverDrive>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8003a86:	f000 f81f 	bl	8003ac8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a8a:	230f      	movs	r3, #15
 8003a8c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a8e:	2302      	movs	r3, #2
 8003a90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003a96:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003a9a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003a9c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003aa0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8003aa2:	f107 030c 	add.w	r3, r7, #12
 8003aa6:	2107      	movs	r1, #7
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f003 f8db 	bl	8006c64 <HAL_RCC_ClockConfig>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8003ab4:	f000 f808 	bl	8003ac8 <Error_Handler>
  }
}
 8003ab8:	bf00      	nop
 8003aba:	3750      	adds	r7, #80	; 0x50
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	40007000 	.word	0x40007000

08003ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003acc:	b672      	cpsid	i
}
 8003ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ad0:	e7fe      	b.n	8003ad0 <Error_Handler+0x8>

08003ad2 <calculate_discrete_pid>:

#include "pid_regulator.h"

float32_t calculate_discrete_pid(pid_t2* pid, float32_t setpoint, float32_t measured){
 8003ad2:	b5b0      	push	{r4, r5, r7, lr}
 8003ad4:	b08c      	sub	sp, #48	; 0x30
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	60f8      	str	r0, [r7, #12]
 8003ada:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ade:	edc7 0a01 	vstr	s1, [r7, #4]
	float32_t u=0, P, I, D, error, integral, derivative;
 8003ae2:	f04f 0300 	mov.w	r3, #0
 8003ae6:	62fb      	str	r3, [r7, #44]	; 0x2c

	error = setpoint-measured;
 8003ae8:	ed97 7a02 	vldr	s14, [r7, #8]
 8003aec:	edd7 7a01 	vldr	s15, [r7, #4]
 8003af0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003af4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	//proportional part
	P = pid->param.Kp * error;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	edd3 7a00 	vldr	s15, [r3]
 8003afe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b06:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	//integral part
	integral = pid->previous_integral + (error+pid->previous_error) ; //numerical integrator without anti-windup
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	ed93 7a05 	vldr	s14, [r3, #20]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	edd3 6a04 	vldr	s13, [r3, #16]
 8003b16:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b22:	edc7 7a08 	vstr	s15, [r7, #32]
	pid->previous_integral = integral;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6a3a      	ldr	r2, [r7, #32]
 8003b2a:	615a      	str	r2, [r3, #20]
	I = pid->param.Ki*integral*(pid->param.dt/2.0);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003b32:	edd7 7a08 	vldr	s15, [r7, #32]
 8003b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b3a:	ee17 0a90 	vmov	r0, s15
 8003b3e:	f7fc fd1b 	bl	8000578 <__aeabi_f2d>
 8003b42:	4604      	mov	r4, r0
 8003b44:	460d      	mov	r5, r1
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fc fd14 	bl	8000578 <__aeabi_f2d>
 8003b50:	f04f 0200 	mov.w	r2, #0
 8003b54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b58:	f7fc fe90 	bl	800087c <__aeabi_ddiv>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4620      	mov	r0, r4
 8003b62:	4629      	mov	r1, r5
 8003b64:	f7fc fd60 	bl	8000628 <__aeabi_dmul>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4610      	mov	r0, r2
 8003b6e:	4619      	mov	r1, r3
 8003b70:	f7fd f83c 	bl	8000bec <__aeabi_d2f>
 8003b74:	4603      	mov	r3, r0
 8003b76:	61fb      	str	r3, [r7, #28]

	//derivative part
	derivative = (error - pid->previous_error)/pid->param.dt; //numerical derivative without filter
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	edd3 7a04 	vldr	s15, [r3, #16]
 8003b7e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003b82:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	ed93 7a03 	vldr	s14, [r3, #12]
 8003b8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b90:	edc7 7a06 	vstr	s15, [r7, #24]
	pid->previous_error = error;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b98:	611a      	str	r2, [r3, #16]
	D = pid->param.Kd*derivative;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003ba0:	ed97 7a06 	vldr	s14, [r7, #24]
 8003ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba8:	edc7 7a05 	vstr	s15, [r7, #20]

	//sum of all parts
	u = P  + I + D; //without saturation
 8003bac:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003bb0:	edd7 7a07 	vldr	s15, [r7, #28]
 8003bb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bb8:	ed97 7a05 	vldr	s14, [r7, #20]
 8003bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bc0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c


	return u;
 8003bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc6:	ee07 3a90 	vmov	s15, r3
}
 8003bca:	eeb0 0a67 	vmov.f32	s0, s15
 8003bce:	3730      	adds	r7, #48	; 0x30
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bdb0      	pop	{r4, r5, r7, pc}

08003bd4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003bd8:	4b1b      	ldr	r3, [pc, #108]	; (8003c48 <MX_SPI1_Init+0x74>)
 8003bda:	4a1c      	ldr	r2, [pc, #112]	; (8003c4c <MX_SPI1_Init+0x78>)
 8003bdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003bde:	4b1a      	ldr	r3, [pc, #104]	; (8003c48 <MX_SPI1_Init+0x74>)
 8003be0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003be4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003be6:	4b18      	ldr	r3, [pc, #96]	; (8003c48 <MX_SPI1_Init+0x74>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003bec:	4b16      	ldr	r3, [pc, #88]	; (8003c48 <MX_SPI1_Init+0x74>)
 8003bee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003bf2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bf4:	4b14      	ldr	r3, [pc, #80]	; (8003c48 <MX_SPI1_Init+0x74>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003bfa:	4b13      	ldr	r3, [pc, #76]	; (8003c48 <MX_SPI1_Init+0x74>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003c00:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <MX_SPI1_Init+0x74>)
 8003c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c06:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c08:	4b0f      	ldr	r3, [pc, #60]	; (8003c48 <MX_SPI1_Init+0x74>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c0e:	4b0e      	ldr	r3, [pc, #56]	; (8003c48 <MX_SPI1_Init+0x74>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c14:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <MX_SPI1_Init+0x74>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c1a:	4b0b      	ldr	r3, [pc, #44]	; (8003c48 <MX_SPI1_Init+0x74>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003c20:	4b09      	ldr	r3, [pc, #36]	; (8003c48 <MX_SPI1_Init+0x74>)
 8003c22:	2207      	movs	r2, #7
 8003c24:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003c26:	4b08      	ldr	r3, [pc, #32]	; (8003c48 <MX_SPI1_Init+0x74>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003c2c:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <MX_SPI1_Init+0x74>)
 8003c2e:	2208      	movs	r2, #8
 8003c30:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003c32:	4805      	ldr	r0, [pc, #20]	; (8003c48 <MX_SPI1_Init+0x74>)
 8003c34:	f003 fe2c 	bl	8007890 <HAL_SPI_Init>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003c3e:	f7ff ff43 	bl	8003ac8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003c42:	bf00      	nop
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	2000231c 	.word	0x2000231c
 8003c4c:	40013000 	.word	0x40013000

08003c50 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8003c54:	4b1b      	ldr	r3, [pc, #108]	; (8003cc4 <MX_SPI4_Init+0x74>)
 8003c56:	4a1c      	ldr	r2, [pc, #112]	; (8003cc8 <MX_SPI4_Init+0x78>)
 8003c58:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8003c5a:	4b1a      	ldr	r3, [pc, #104]	; (8003cc4 <MX_SPI4_Init+0x74>)
 8003c5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c60:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003c62:	4b18      	ldr	r3, [pc, #96]	; (8003cc4 <MX_SPI4_Init+0x74>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c68:	4b16      	ldr	r3, [pc, #88]	; (8003cc4 <MX_SPI4_Init+0x74>)
 8003c6a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003c6e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003c70:	4b14      	ldr	r3, [pc, #80]	; (8003cc4 <MX_SPI4_Init+0x74>)
 8003c72:	2202      	movs	r2, #2
 8003c74:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003c76:	4b13      	ldr	r3, [pc, #76]	; (8003cc4 <MX_SPI4_Init+0x74>)
 8003c78:	2201      	movs	r2, #1
 8003c7a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003c7c:	4b11      	ldr	r3, [pc, #68]	; (8003cc4 <MX_SPI4_Init+0x74>)
 8003c7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c82:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003c84:	4b0f      	ldr	r3, [pc, #60]	; (8003cc4 <MX_SPI4_Init+0x74>)
 8003c86:	2218      	movs	r2, #24
 8003c88:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c8a:	4b0e      	ldr	r3, [pc, #56]	; (8003cc4 <MX_SPI4_Init+0x74>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c90:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <MX_SPI4_Init+0x74>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c96:	4b0b      	ldr	r3, [pc, #44]	; (8003cc4 <MX_SPI4_Init+0x74>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8003c9c:	4b09      	ldr	r3, [pc, #36]	; (8003cc4 <MX_SPI4_Init+0x74>)
 8003c9e:	2207      	movs	r2, #7
 8003ca0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003ca2:	4b08      	ldr	r3, [pc, #32]	; (8003cc4 <MX_SPI4_Init+0x74>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003ca8:	4b06      	ldr	r3, [pc, #24]	; (8003cc4 <MX_SPI4_Init+0x74>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003cae:	4805      	ldr	r0, [pc, #20]	; (8003cc4 <MX_SPI4_Init+0x74>)
 8003cb0:	f003 fdee 	bl	8007890 <HAL_SPI_Init>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8003cba:	f7ff ff05 	bl	8003ac8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8003cbe:	bf00      	nop
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	20002380 	.word	0x20002380
 8003cc8:	40013400 	.word	0x40013400

08003ccc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08c      	sub	sp, #48	; 0x30
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cd4:	f107 031c 	add.w	r3, r7, #28
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	605a      	str	r2, [r3, #4]
 8003cde:	609a      	str	r2, [r3, #8]
 8003ce0:	60da      	str	r2, [r3, #12]
 8003ce2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a3c      	ldr	r2, [pc, #240]	; (8003ddc <HAL_SPI_MspInit+0x110>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d144      	bne.n	8003d78 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003cee:	4b3c      	ldr	r3, [pc, #240]	; (8003de0 <HAL_SPI_MspInit+0x114>)
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf2:	4a3b      	ldr	r2, [pc, #236]	; (8003de0 <HAL_SPI_MspInit+0x114>)
 8003cf4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8003cfa:	4b39      	ldr	r3, [pc, #228]	; (8003de0 <HAL_SPI_MspInit+0x114>)
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d02:	61bb      	str	r3, [r7, #24]
 8003d04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d06:	4b36      	ldr	r3, [pc, #216]	; (8003de0 <HAL_SPI_MspInit+0x114>)
 8003d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0a:	4a35      	ldr	r2, [pc, #212]	; (8003de0 <HAL_SPI_MspInit+0x114>)
 8003d0c:	f043 0301 	orr.w	r3, r3, #1
 8003d10:	6313      	str	r3, [r2, #48]	; 0x30
 8003d12:	4b33      	ldr	r3, [pc, #204]	; (8003de0 <HAL_SPI_MspInit+0x114>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d1e:	4b30      	ldr	r3, [pc, #192]	; (8003de0 <HAL_SPI_MspInit+0x114>)
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	4a2f      	ldr	r2, [pc, #188]	; (8003de0 <HAL_SPI_MspInit+0x114>)
 8003d24:	f043 0302 	orr.w	r3, r3, #2
 8003d28:	6313      	str	r3, [r2, #48]	; 0x30
 8003d2a:	4b2d      	ldr	r3, [pc, #180]	; (8003de0 <HAL_SPI_MspInit+0x114>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	613b      	str	r3, [r7, #16]
 8003d34:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003d36:	2360      	movs	r3, #96	; 0x60
 8003d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d42:	2303      	movs	r3, #3
 8003d44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d46:	2305      	movs	r3, #5
 8003d48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d4a:	f107 031c 	add.w	r3, r7, #28
 8003d4e:	4619      	mov	r1, r3
 8003d50:	4824      	ldr	r0, [pc, #144]	; (8003de4 <HAL_SPI_MspInit+0x118>)
 8003d52:	f001 feaf 	bl	8005ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003d56:	2320      	movs	r3, #32
 8003d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d62:	2303      	movs	r3, #3
 8003d64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d66:	2305      	movs	r3, #5
 8003d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d6a:	f107 031c 	add.w	r3, r7, #28
 8003d6e:	4619      	mov	r1, r3
 8003d70:	481d      	ldr	r0, [pc, #116]	; (8003de8 <HAL_SPI_MspInit+0x11c>)
 8003d72:	f001 fe9f 	bl	8005ab4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8003d76:	e02c      	b.n	8003dd2 <HAL_SPI_MspInit+0x106>
  else if(spiHandle->Instance==SPI4)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a1b      	ldr	r2, [pc, #108]	; (8003dec <HAL_SPI_MspInit+0x120>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d127      	bne.n	8003dd2 <HAL_SPI_MspInit+0x106>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003d82:	4b17      	ldr	r3, [pc, #92]	; (8003de0 <HAL_SPI_MspInit+0x114>)
 8003d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d86:	4a16      	ldr	r2, [pc, #88]	; (8003de0 <HAL_SPI_MspInit+0x114>)
 8003d88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d8e:	4b14      	ldr	r3, [pc, #80]	; (8003de0 <HAL_SPI_MspInit+0x114>)
 8003d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d9a:	4b11      	ldr	r3, [pc, #68]	; (8003de0 <HAL_SPI_MspInit+0x114>)
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	4a10      	ldr	r2, [pc, #64]	; (8003de0 <HAL_SPI_MspInit+0x114>)
 8003da0:	f043 0310 	orr.w	r3, r3, #16
 8003da4:	6313      	str	r3, [r2, #48]	; 0x30
 8003da6:	4b0e      	ldr	r3, [pc, #56]	; (8003de0 <HAL_SPI_MspInit+0x114>)
 8003da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003daa:	f003 0310 	and.w	r3, r3, #16
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMP2_SCK_Pin|BMP2_SDO_Pin|BMP2_SDA_Pin;
 8003db2:	2364      	movs	r3, #100	; 0x64
 8003db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db6:	2302      	movs	r3, #2
 8003db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003dc2:	2305      	movs	r3, #5
 8003dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003dc6:	f107 031c 	add.w	r3, r7, #28
 8003dca:	4619      	mov	r1, r3
 8003dcc:	4808      	ldr	r0, [pc, #32]	; (8003df0 <HAL_SPI_MspInit+0x124>)
 8003dce:	f001 fe71 	bl	8005ab4 <HAL_GPIO_Init>
}
 8003dd2:	bf00      	nop
 8003dd4:	3730      	adds	r7, #48	; 0x30
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40013000 	.word	0x40013000
 8003de0:	40023800 	.word	0x40023800
 8003de4:	40020000 	.word	0x40020000
 8003de8:	40020400 	.word	0x40020400
 8003dec:	40013400 	.word	0x40013400
 8003df0:	40021000 	.word	0x40021000

08003df4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003dfa:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <HAL_MspInit+0x44>)
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	4a0e      	ldr	r2, [pc, #56]	; (8003e38 <HAL_MspInit+0x44>)
 8003e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e04:	6413      	str	r3, [r2, #64]	; 0x40
 8003e06:	4b0c      	ldr	r3, [pc, #48]	; (8003e38 <HAL_MspInit+0x44>)
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0e:	607b      	str	r3, [r7, #4]
 8003e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e12:	4b09      	ldr	r3, [pc, #36]	; (8003e38 <HAL_MspInit+0x44>)
 8003e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e16:	4a08      	ldr	r2, [pc, #32]	; (8003e38 <HAL_MspInit+0x44>)
 8003e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e1e:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <HAL_MspInit+0x44>)
 8003e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e26:	603b      	str	r3, [r7, #0]
 8003e28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40023800 	.word	0x40023800

08003e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e40:	e7fe      	b.n	8003e40 <NMI_Handler+0x4>

08003e42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e42:	b480      	push	{r7}
 8003e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e46:	e7fe      	b.n	8003e46 <HardFault_Handler+0x4>

08003e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e4c:	e7fe      	b.n	8003e4c <MemManage_Handler+0x4>

08003e4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e52:	e7fe      	b.n	8003e52 <BusFault_Handler+0x4>

08003e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e58:	e7fe      	b.n	8003e58 <UsageFault_Handler+0x4>

08003e5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e5e:	bf00      	nop
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e6c:	bf00      	nop
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e76:	b480      	push	{r7}
 8003e78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e7a:	bf00      	nop
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	if (Timer1 > 0)
 8003e88:	4b0c      	ldr	r3, [pc, #48]	; (8003ebc <SysTick_Handler+0x38>)
 8003e8a:	881b      	ldrh	r3, [r3, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d005      	beq.n	8003e9c <SysTick_Handler+0x18>
		Timer1--;
 8003e90:	4b0a      	ldr	r3, [pc, #40]	; (8003ebc <SysTick_Handler+0x38>)
 8003e92:	881b      	ldrh	r3, [r3, #0]
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	4b08      	ldr	r3, [pc, #32]	; (8003ebc <SysTick_Handler+0x38>)
 8003e9a:	801a      	strh	r2, [r3, #0]

	if (Timer2 >0)
 8003e9c:	4b08      	ldr	r3, [pc, #32]	; (8003ec0 <SysTick_Handler+0x3c>)
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d005      	beq.n	8003eb0 <SysTick_Handler+0x2c>
		Timer2--;
 8003ea4:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <SysTick_Handler+0x3c>)
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	4b04      	ldr	r3, [pc, #16]	; (8003ec0 <SysTick_Handler+0x3c>)
 8003eae:	801a      	strh	r2, [r3, #0]


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003eb0:	f000 fbf0 	bl	8004694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  HAL_SYSTICK_IRQHandler();
 8003eb4:	f001 fa75 	bl	80053a2 <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 8003eb8:	bf00      	nop
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	200001fc 	.word	0x200001fc
 8003ec0:	200001fe 	.word	0x200001fe

08003ec4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003ec8:	4802      	ldr	r0, [pc, #8]	; (8003ed4 <ADC_IRQHandler+0x10>)
 8003eca:	f000 fdc4 	bl	8004a56 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003ece:	bf00      	nop
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	20000154 	.word	0x20000154

08003ed8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003edc:	4802      	ldr	r0, [pc, #8]	; (8003ee8 <TIM2_IRQHandler+0x10>)
 8003ede:	f004 fe63 	bl	8008ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003ee2:	bf00      	nop
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	200023e8 	.word	0x200023e8

08003eec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003ef0:	4802      	ldr	r0, [pc, #8]	; (8003efc <TIM3_IRQHandler+0x10>)
 8003ef2:	f004 fe59 	bl	8008ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003ef6:	bf00      	nop
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	20002434 	.word	0x20002434

08003f00 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003f04:	4802      	ldr	r0, [pc, #8]	; (8003f10 <TIM4_IRQHandler+0x10>)
 8003f06:	f004 fe4f 	bl	8008ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003f0a:	bf00      	nop
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	20002480 	.word	0x20002480

08003f14 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003f18:	4802      	ldr	r0, [pc, #8]	; (8003f24 <USART3_IRQHandler+0x10>)
 8003f1a:	f005 feeb 	bl	8009cf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003f1e:	bf00      	nop
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20002518 	.word	0x20002518

08003f28 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003f2c:	4802      	ldr	r0, [pc, #8]	; (8003f38 <TIM7_IRQHandler+0x10>)
 8003f2e:	f004 fe3b 	bl	8008ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003f32:	bf00      	nop
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	200024cc 	.word	0x200024cc

08003f3c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003f40:	4802      	ldr	r0, [pc, #8]	; (8003f4c <DMA2_Stream0_IRQHandler+0x10>)
 8003f42:	f001 fb7b 	bl	800563c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003f46:	bf00      	nop
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	2000019c 	.word	0x2000019c

08003f50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f58:	4a14      	ldr	r2, [pc, #80]	; (8003fac <_sbrk+0x5c>)
 8003f5a:	4b15      	ldr	r3, [pc, #84]	; (8003fb0 <_sbrk+0x60>)
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f64:	4b13      	ldr	r3, [pc, #76]	; (8003fb4 <_sbrk+0x64>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d102      	bne.n	8003f72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f6c:	4b11      	ldr	r3, [pc, #68]	; (8003fb4 <_sbrk+0x64>)
 8003f6e:	4a12      	ldr	r2, [pc, #72]	; (8003fb8 <_sbrk+0x68>)
 8003f70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f72:	4b10      	ldr	r3, [pc, #64]	; (8003fb4 <_sbrk+0x64>)
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4413      	add	r3, r2
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d207      	bcs.n	8003f90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f80:	f00a f85e 	bl	800e040 <__errno>
 8003f84:	4603      	mov	r3, r0
 8003f86:	220c      	movs	r2, #12
 8003f88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f8e:	e009      	b.n	8003fa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f90:	4b08      	ldr	r3, [pc, #32]	; (8003fb4 <_sbrk+0x64>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f96:	4b07      	ldr	r3, [pc, #28]	; (8003fb4 <_sbrk+0x64>)
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	4a05      	ldr	r2, [pc, #20]	; (8003fb4 <_sbrk+0x64>)
 8003fa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	20050000 	.word	0x20050000
 8003fb0:	00000400 	.word	0x00000400
 8003fb4:	200023e4 	.word	0x200023e4
 8003fb8:	20002928 	.word	0x20002928

08003fbc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fc0:	4b06      	ldr	r3, [pc, #24]	; (8003fdc <SystemInit+0x20>)
 8003fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc6:	4a05      	ldr	r2, [pc, #20]	; (8003fdc <SystemInit+0x20>)
 8003fc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003fd0:	bf00      	nop
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	e000ed00 	.word	0xe000ed00

08003fe0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b088      	sub	sp, #32
 8003fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fe6:	f107 0310 	add.w	r3, r7, #16
 8003fea:	2200      	movs	r2, #0
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	605a      	str	r2, [r3, #4]
 8003ff0:	609a      	str	r2, [r3, #8]
 8003ff2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ff4:	1d3b      	adds	r3, r7, #4
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	605a      	str	r2, [r3, #4]
 8003ffc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003ffe:	4b1e      	ldr	r3, [pc, #120]	; (8004078 <MX_TIM2_Init+0x98>)
 8004000:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004004:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1079;
 8004006:	4b1c      	ldr	r3, [pc, #112]	; (8004078 <MX_TIM2_Init+0x98>)
 8004008:	f240 4237 	movw	r2, #1079	; 0x437
 800400c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800400e:	4b1a      	ldr	r3, [pc, #104]	; (8004078 <MX_TIM2_Init+0x98>)
 8004010:	2200      	movs	r2, #0
 8004012:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000; //zmienilem prescaler z 24999
 8004014:	4b18      	ldr	r3, [pc, #96]	; (8004078 <MX_TIM2_Init+0x98>)
 8004016:	f24c 3250 	movw	r2, #50000	; 0xc350
 800401a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800401c:	4b16      	ldr	r3, [pc, #88]	; (8004078 <MX_TIM2_Init+0x98>)
 800401e:	2200      	movs	r2, #0
 8004020:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004022:	4b15      	ldr	r3, [pc, #84]	; (8004078 <MX_TIM2_Init+0x98>)
 8004024:	2200      	movs	r2, #0
 8004026:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004028:	4813      	ldr	r0, [pc, #76]	; (8004078 <MX_TIM2_Init+0x98>)
 800402a:	f004 fb91 	bl	8008750 <HAL_TIM_Base_Init>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8004034:	f7ff fd48 	bl	8003ac8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800403c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800403e:	f107 0310 	add.w	r3, r7, #16
 8004042:	4619      	mov	r1, r3
 8004044:	480c      	ldr	r0, [pc, #48]	; (8004078 <MX_TIM2_Init+0x98>)
 8004046:	f004 ffe3 	bl	8009010 <HAL_TIM_ConfigClockSource>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8004050:	f7ff fd3a 	bl	8003ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004054:	2300      	movs	r3, #0
 8004056:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004058:	2300      	movs	r3, #0
 800405a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800405c:	1d3b      	adds	r3, r7, #4
 800405e:	4619      	mov	r1, r3
 8004060:	4805      	ldr	r0, [pc, #20]	; (8004078 <MX_TIM2_Init+0x98>)
 8004062:	f005 fc85 	bl	8009970 <HAL_TIMEx_MasterConfigSynchronization>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800406c:	f7ff fd2c 	bl	8003ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004070:	bf00      	nop
 8004072:	3720      	adds	r7, #32
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	200023e8 	.word	0x200023e8

0800407c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08e      	sub	sp, #56	; 0x38
 8004080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004082:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	605a      	str	r2, [r3, #4]
 800408c:	609a      	str	r2, [r3, #8]
 800408e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004090:	f107 031c 	add.w	r3, r7, #28
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	605a      	str	r2, [r3, #4]
 800409a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800409c:	463b      	mov	r3, r7
 800409e:	2200      	movs	r2, #0
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	605a      	str	r2, [r3, #4]
 80040a4:	609a      	str	r2, [r3, #8]
 80040a6:	60da      	str	r2, [r3, #12]
 80040a8:	611a      	str	r2, [r3, #16]
 80040aa:	615a      	str	r2, [r3, #20]
 80040ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80040ae:	4b34      	ldr	r3, [pc, #208]	; (8004180 <MX_TIM3_Init+0x104>)
 80040b0:	4a34      	ldr	r2, [pc, #208]	; (8004184 <MX_TIM3_Init+0x108>)
 80040b2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80040b4:	4b32      	ldr	r3, [pc, #200]	; (8004180 <MX_TIM3_Init+0x104>)
 80040b6:	2247      	movs	r2, #71	; 0x47
 80040b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040ba:	4b31      	ldr	r3, [pc, #196]	; (8004180 <MX_TIM3_Init+0x104>)
 80040bc:	2200      	movs	r2, #0
 80040be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80040c0:	4b2f      	ldr	r3, [pc, #188]	; (8004180 <MX_TIM3_Init+0x104>)
 80040c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80040c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040c8:	4b2d      	ldr	r3, [pc, #180]	; (8004180 <MX_TIM3_Init+0x104>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040ce:	4b2c      	ldr	r3, [pc, #176]	; (8004180 <MX_TIM3_Init+0x104>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80040d4:	482a      	ldr	r0, [pc, #168]	; (8004180 <MX_TIM3_Init+0x104>)
 80040d6:	f004 fb3b 	bl	8008750 <HAL_TIM_Base_Init>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80040e0:	f7ff fcf2 	bl	8003ac8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80040ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040ee:	4619      	mov	r1, r3
 80040f0:	4823      	ldr	r0, [pc, #140]	; (8004180 <MX_TIM3_Init+0x104>)
 80040f2:	f004 ff8d 	bl	8009010 <HAL_TIM_ConfigClockSource>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80040fc:	f7ff fce4 	bl	8003ac8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004100:	481f      	ldr	r0, [pc, #124]	; (8004180 <MX_TIM3_Init+0x104>)
 8004102:	f004 fbf5 	bl	80088f0 <HAL_TIM_PWM_Init>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800410c:	f7ff fcdc 	bl	8003ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004110:	2300      	movs	r3, #0
 8004112:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004114:	2300      	movs	r3, #0
 8004116:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004118:	f107 031c 	add.w	r3, r7, #28
 800411c:	4619      	mov	r1, r3
 800411e:	4818      	ldr	r0, [pc, #96]	; (8004180 <MX_TIM3_Init+0x104>)
 8004120:	f005 fc26 	bl	8009970 <HAL_TIMEx_MasterConfigSynchronization>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800412a:	f7ff fccd 	bl	8003ac8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800412e:	2360      	movs	r3, #96	; 0x60
 8004130:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004132:	2300      	movs	r3, #0
 8004134:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004136:	2300      	movs	r3, #0
 8004138:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800413a:	2300      	movs	r3, #0
 800413c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800413e:	463b      	mov	r3, r7
 8004140:	2204      	movs	r2, #4
 8004142:	4619      	mov	r1, r3
 8004144:	480e      	ldr	r0, [pc, #56]	; (8004180 <MX_TIM3_Init+0x104>)
 8004146:	f004 fe4f 	bl	8008de8 <HAL_TIM_PWM_ConfigChannel>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8004150:	f7ff fcba 	bl	8003ac8 <Error_Handler>
  }
  sConfigOC.Pulse = 500;
 8004154:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004158:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800415a:	463b      	mov	r3, r7
 800415c:	2208      	movs	r2, #8
 800415e:	4619      	mov	r1, r3
 8004160:	4807      	ldr	r0, [pc, #28]	; (8004180 <MX_TIM3_Init+0x104>)
 8004162:	f004 fe41 	bl	8008de8 <HAL_TIM_PWM_ConfigChannel>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 800416c:	f7ff fcac 	bl	8003ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004170:	4803      	ldr	r0, [pc, #12]	; (8004180 <MX_TIM3_Init+0x104>)
 8004172:	f000 f931 	bl	80043d8 <HAL_TIM_MspPostInit>

}
 8004176:	bf00      	nop
 8004178:	3738      	adds	r7, #56	; 0x38
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20002434 	.word	0x20002434
 8004184:	40000400 	.word	0x40000400

08004188 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b08e      	sub	sp, #56	; 0x38
 800418c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800418e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004192:	2200      	movs	r2, #0
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	605a      	str	r2, [r3, #4]
 8004198:	609a      	str	r2, [r3, #8]
 800419a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800419c:	f107 031c 	add.w	r3, r7, #28
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	605a      	str	r2, [r3, #4]
 80041a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80041a8:	463b      	mov	r3, r7
 80041aa:	2200      	movs	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	605a      	str	r2, [r3, #4]
 80041b0:	609a      	str	r2, [r3, #8]
 80041b2:	60da      	str	r2, [r3, #12]
 80041b4:	611a      	str	r2, [r3, #16]
 80041b6:	615a      	str	r2, [r3, #20]
 80041b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80041ba:	4b2d      	ldr	r3, [pc, #180]	; (8004270 <MX_TIM4_Init+0xe8>)
 80041bc:	4a2d      	ldr	r2, [pc, #180]	; (8004274 <MX_TIM4_Init+0xec>)
 80041be:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 107;
 80041c0:	4b2b      	ldr	r3, [pc, #172]	; (8004270 <MX_TIM4_Init+0xe8>)
 80041c2:	226b      	movs	r2, #107	; 0x6b
 80041c4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041c6:	4b2a      	ldr	r3, [pc, #168]	; (8004270 <MX_TIM4_Init+0xe8>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80041cc:	4b28      	ldr	r3, [pc, #160]	; (8004270 <MX_TIM4_Init+0xe8>)
 80041ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80041d2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041d4:	4b26      	ldr	r3, [pc, #152]	; (8004270 <MX_TIM4_Init+0xe8>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041da:	4b25      	ldr	r3, [pc, #148]	; (8004270 <MX_TIM4_Init+0xe8>)
 80041dc:	2200      	movs	r2, #0
 80041de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80041e0:	4823      	ldr	r0, [pc, #140]	; (8004270 <MX_TIM4_Init+0xe8>)
 80041e2:	f004 fab5 	bl	8008750 <HAL_TIM_Base_Init>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80041ec:	f7ff fc6c 	bl	8003ac8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041f4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80041f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041fa:	4619      	mov	r1, r3
 80041fc:	481c      	ldr	r0, [pc, #112]	; (8004270 <MX_TIM4_Init+0xe8>)
 80041fe:	f004 ff07 	bl	8009010 <HAL_TIM_ConfigClockSource>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8004208:	f7ff fc5e 	bl	8003ac8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800420c:	4818      	ldr	r0, [pc, #96]	; (8004270 <MX_TIM4_Init+0xe8>)
 800420e:	f004 fb6f 	bl	80088f0 <HAL_TIM_PWM_Init>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8004218:	f7ff fc56 	bl	8003ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800421c:	2300      	movs	r3, #0
 800421e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004220:	2300      	movs	r3, #0
 8004222:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004224:	f107 031c 	add.w	r3, r7, #28
 8004228:	4619      	mov	r1, r3
 800422a:	4811      	ldr	r0, [pc, #68]	; (8004270 <MX_TIM4_Init+0xe8>)
 800422c:	f005 fba0 	bl	8009970 <HAL_TIMEx_MasterConfigSynchronization>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8004236:	f7ff fc47 	bl	8003ac8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800423a:	2360      	movs	r3, #96	; 0x60
 800423c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800423e:	2300      	movs	r3, #0
 8004240:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004242:	2300      	movs	r3, #0
 8004244:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004246:	2300      	movs	r3, #0
 8004248:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800424a:	463b      	mov	r3, r7
 800424c:	2200      	movs	r2, #0
 800424e:	4619      	mov	r1, r3
 8004250:	4807      	ldr	r0, [pc, #28]	; (8004270 <MX_TIM4_Init+0xe8>)
 8004252:	f004 fdc9 	bl	8008de8 <HAL_TIM_PWM_ConfigChannel>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800425c:	f7ff fc34 	bl	8003ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004260:	4803      	ldr	r0, [pc, #12]	; (8004270 <MX_TIM4_Init+0xe8>)
 8004262:	f000 f8b9 	bl	80043d8 <HAL_TIM_MspPostInit>

}
 8004266:	bf00      	nop
 8004268:	3738      	adds	r7, #56	; 0x38
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	20002480 	.word	0x20002480
 8004274:	40000800 	.word	0x40000800

08004278 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800427e:	1d3b      	adds	r3, r7, #4
 8004280:	2200      	movs	r2, #0
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	605a      	str	r2, [r3, #4]
 8004286:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004288:	4b15      	ldr	r3, [pc, #84]	; (80042e0 <MX_TIM7_Init+0x68>)
 800428a:	4a16      	ldr	r2, [pc, #88]	; (80042e4 <MX_TIM7_Init+0x6c>)
 800428c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10799;
 800428e:	4b14      	ldr	r3, [pc, #80]	; (80042e0 <MX_TIM7_Init+0x68>)
 8004290:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8004294:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004296:	4b12      	ldr	r3, [pc, #72]	; (80042e0 <MX_TIM7_Init+0x68>)
 8004298:	2200      	movs	r2, #0
 800429a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800429c:	4b10      	ldr	r3, [pc, #64]	; (80042e0 <MX_TIM7_Init+0x68>)
 800429e:	f242 720f 	movw	r2, #9999	; 0x270f
 80042a2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042a4:	4b0e      	ldr	r3, [pc, #56]	; (80042e0 <MX_TIM7_Init+0x68>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80042aa:	480d      	ldr	r0, [pc, #52]	; (80042e0 <MX_TIM7_Init+0x68>)
 80042ac:	f004 fa50 	bl	8008750 <HAL_TIM_Base_Init>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80042b6:	f7ff fc07 	bl	8003ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042ba:	2300      	movs	r3, #0
 80042bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042be:	2300      	movs	r3, #0
 80042c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80042c2:	1d3b      	adds	r3, r7, #4
 80042c4:	4619      	mov	r1, r3
 80042c6:	4806      	ldr	r0, [pc, #24]	; (80042e0 <MX_TIM7_Init+0x68>)
 80042c8:	f005 fb52 	bl	8009970 <HAL_TIMEx_MasterConfigSynchronization>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80042d2:	f7ff fbf9 	bl	8003ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80042d6:	bf00      	nop
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	200024cc 	.word	0x200024cc
 80042e4:	40001400 	.word	0x40001400

080042e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f8:	d114      	bne.n	8004324 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042fa:	4b33      	ldr	r3, [pc, #204]	; (80043c8 <HAL_TIM_Base_MspInit+0xe0>)
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	4a32      	ldr	r2, [pc, #200]	; (80043c8 <HAL_TIM_Base_MspInit+0xe0>)
 8004300:	f043 0301 	orr.w	r3, r3, #1
 8004304:	6413      	str	r3, [r2, #64]	; 0x40
 8004306:	4b30      	ldr	r3, [pc, #192]	; (80043c8 <HAL_TIM_Base_MspInit+0xe0>)
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004312:	2200      	movs	r2, #0
 8004314:	2100      	movs	r1, #0
 8004316:	201c      	movs	r0, #28
 8004318:	f001 f80d 	bl	8005336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800431c:	201c      	movs	r0, #28
 800431e:	f001 f826 	bl	800536e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8004322:	e04c      	b.n	80043be <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a28      	ldr	r2, [pc, #160]	; (80043cc <HAL_TIM_Base_MspInit+0xe4>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d114      	bne.n	8004358 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800432e:	4b26      	ldr	r3, [pc, #152]	; (80043c8 <HAL_TIM_Base_MspInit+0xe0>)
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	4a25      	ldr	r2, [pc, #148]	; (80043c8 <HAL_TIM_Base_MspInit+0xe0>)
 8004334:	f043 0302 	orr.w	r3, r3, #2
 8004338:	6413      	str	r3, [r2, #64]	; 0x40
 800433a:	4b23      	ldr	r3, [pc, #140]	; (80043c8 <HAL_TIM_Base_MspInit+0xe0>)
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	613b      	str	r3, [r7, #16]
 8004344:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004346:	2200      	movs	r2, #0
 8004348:	2100      	movs	r1, #0
 800434a:	201d      	movs	r0, #29
 800434c:	f000 fff3 	bl	8005336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004350:	201d      	movs	r0, #29
 8004352:	f001 f80c 	bl	800536e <HAL_NVIC_EnableIRQ>
}
 8004356:	e032      	b.n	80043be <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a1c      	ldr	r2, [pc, #112]	; (80043d0 <HAL_TIM_Base_MspInit+0xe8>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d114      	bne.n	800438c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004362:	4b19      	ldr	r3, [pc, #100]	; (80043c8 <HAL_TIM_Base_MspInit+0xe0>)
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	4a18      	ldr	r2, [pc, #96]	; (80043c8 <HAL_TIM_Base_MspInit+0xe0>)
 8004368:	f043 0304 	orr.w	r3, r3, #4
 800436c:	6413      	str	r3, [r2, #64]	; 0x40
 800436e:	4b16      	ldr	r3, [pc, #88]	; (80043c8 <HAL_TIM_Base_MspInit+0xe0>)
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	f003 0304 	and.w	r3, r3, #4
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800437a:	2200      	movs	r2, #0
 800437c:	2100      	movs	r1, #0
 800437e:	201e      	movs	r0, #30
 8004380:	f000 ffd9 	bl	8005336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004384:	201e      	movs	r0, #30
 8004386:	f000 fff2 	bl	800536e <HAL_NVIC_EnableIRQ>
}
 800438a:	e018      	b.n	80043be <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM7)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a10      	ldr	r2, [pc, #64]	; (80043d4 <HAL_TIM_Base_MspInit+0xec>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d113      	bne.n	80043be <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004396:	4b0c      	ldr	r3, [pc, #48]	; (80043c8 <HAL_TIM_Base_MspInit+0xe0>)
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	4a0b      	ldr	r2, [pc, #44]	; (80043c8 <HAL_TIM_Base_MspInit+0xe0>)
 800439c:	f043 0320 	orr.w	r3, r3, #32
 80043a0:	6413      	str	r3, [r2, #64]	; 0x40
 80043a2:	4b09      	ldr	r3, [pc, #36]	; (80043c8 <HAL_TIM_Base_MspInit+0xe0>)
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	f003 0320 	and.w	r3, r3, #32
 80043aa:	60bb      	str	r3, [r7, #8]
 80043ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80043ae:	2200      	movs	r2, #0
 80043b0:	2100      	movs	r1, #0
 80043b2:	2037      	movs	r0, #55	; 0x37
 80043b4:	f000 ffbf 	bl	8005336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80043b8:	2037      	movs	r0, #55	; 0x37
 80043ba:	f000 ffd8 	bl	800536e <HAL_NVIC_EnableIRQ>
}
 80043be:	bf00      	nop
 80043c0:	3718      	adds	r7, #24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	40023800 	.word	0x40023800
 80043cc:	40000400 	.word	0x40000400
 80043d0:	40000800 	.word	0x40000800
 80043d4:	40001400 	.word	0x40001400

080043d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b08a      	sub	sp, #40	; 0x28
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043e0:	f107 0314 	add.w	r3, r7, #20
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	605a      	str	r2, [r3, #4]
 80043ea:	609a      	str	r2, [r3, #8]
 80043ec:	60da      	str	r2, [r3, #12]
 80043ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a23      	ldr	r2, [pc, #140]	; (8004484 <HAL_TIM_MspPostInit+0xac>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d11d      	bne.n	8004436 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043fa:	4b23      	ldr	r3, [pc, #140]	; (8004488 <HAL_TIM_MspPostInit+0xb0>)
 80043fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fe:	4a22      	ldr	r2, [pc, #136]	; (8004488 <HAL_TIM_MspPostInit+0xb0>)
 8004400:	f043 0304 	orr.w	r3, r3, #4
 8004404:	6313      	str	r3, [r2, #48]	; 0x30
 8004406:	4b20      	ldr	r3, [pc, #128]	; (8004488 <HAL_TIM_MspPostInit+0xb0>)
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	f003 0304 	and.w	r3, r3, #4
 800440e:	613b      	str	r3, [r7, #16]
 8004410:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004412:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004418:	2302      	movs	r3, #2
 800441a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800441c:	2300      	movs	r3, #0
 800441e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004420:	2300      	movs	r3, #0
 8004422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004424:	2302      	movs	r3, #2
 8004426:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004428:	f107 0314 	add.w	r3, r7, #20
 800442c:	4619      	mov	r1, r3
 800442e:	4817      	ldr	r0, [pc, #92]	; (800448c <HAL_TIM_MspPostInit+0xb4>)
 8004430:	f001 fb40 	bl	8005ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004434:	e021      	b.n	800447a <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM4)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a15      	ldr	r2, [pc, #84]	; (8004490 <HAL_TIM_MspPostInit+0xb8>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d11c      	bne.n	800447a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004440:	4b11      	ldr	r3, [pc, #68]	; (8004488 <HAL_TIM_MspPostInit+0xb0>)
 8004442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004444:	4a10      	ldr	r2, [pc, #64]	; (8004488 <HAL_TIM_MspPostInit+0xb0>)
 8004446:	f043 0308 	orr.w	r3, r3, #8
 800444a:	6313      	str	r3, [r2, #48]	; 0x30
 800444c:	4b0e      	ldr	r3, [pc, #56]	; (8004488 <HAL_TIM_MspPostInit+0xb0>)
 800444e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004450:	f003 0308 	and.w	r3, r3, #8
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800445c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800445e:	2302      	movs	r3, #2
 8004460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004462:	2300      	movs	r3, #0
 8004464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004466:	2300      	movs	r3, #0
 8004468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800446a:	2302      	movs	r3, #2
 800446c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800446e:	f107 0314 	add.w	r3, r7, #20
 8004472:	4619      	mov	r1, r3
 8004474:	4807      	ldr	r0, [pc, #28]	; (8004494 <HAL_TIM_MspPostInit+0xbc>)
 8004476:	f001 fb1d 	bl	8005ab4 <HAL_GPIO_Init>
}
 800447a:	bf00      	nop
 800447c:	3728      	adds	r7, #40	; 0x28
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	40000400 	.word	0x40000400
 8004488:	40023800 	.word	0x40023800
 800448c:	40020800 	.word	0x40020800
 8004490:	40000800 	.word	0x40000800
 8004494:	40020c00 	.word	0x40020c00

08004498 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800449c:	4b14      	ldr	r3, [pc, #80]	; (80044f0 <MX_USART3_UART_Init+0x58>)
 800449e:	4a15      	ldr	r2, [pc, #84]	; (80044f4 <MX_USART3_UART_Init+0x5c>)
 80044a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80044a2:	4b13      	ldr	r3, [pc, #76]	; (80044f0 <MX_USART3_UART_Init+0x58>)
 80044a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80044a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80044aa:	4b11      	ldr	r3, [pc, #68]	; (80044f0 <MX_USART3_UART_Init+0x58>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80044b0:	4b0f      	ldr	r3, [pc, #60]	; (80044f0 <MX_USART3_UART_Init+0x58>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80044b6:	4b0e      	ldr	r3, [pc, #56]	; (80044f0 <MX_USART3_UART_Init+0x58>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80044bc:	4b0c      	ldr	r3, [pc, #48]	; (80044f0 <MX_USART3_UART_Init+0x58>)
 80044be:	220c      	movs	r2, #12
 80044c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044c2:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <MX_USART3_UART_Init+0x58>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80044c8:	4b09      	ldr	r3, [pc, #36]	; (80044f0 <MX_USART3_UART_Init+0x58>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80044ce:	4b08      	ldr	r3, [pc, #32]	; (80044f0 <MX_USART3_UART_Init+0x58>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80044d4:	4b06      	ldr	r3, [pc, #24]	; (80044f0 <MX_USART3_UART_Init+0x58>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80044da:	4805      	ldr	r0, [pc, #20]	; (80044f0 <MX_USART3_UART_Init+0x58>)
 80044dc:	f005 faf4 	bl	8009ac8 <HAL_UART_Init>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80044e6:	f7ff faef 	bl	8003ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80044ea:	bf00      	nop
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	20002518 	.word	0x20002518
 80044f4:	40004800 	.word	0x40004800

080044f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b0aa      	sub	sp, #168	; 0xa8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004500:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	605a      	str	r2, [r3, #4]
 800450a:	609a      	str	r2, [r3, #8]
 800450c:	60da      	str	r2, [r3, #12]
 800450e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004510:	f107 0310 	add.w	r3, r7, #16
 8004514:	2284      	movs	r2, #132	; 0x84
 8004516:	2100      	movs	r1, #0
 8004518:	4618      	mov	r0, r3
 800451a:	f009 fd89 	bl	800e030 <memset>
  if(uartHandle->Instance==USART3)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a26      	ldr	r2, [pc, #152]	; (80045bc <HAL_UART_MspInit+0xc4>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d144      	bne.n	80045b2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004528:	f44f 7380 	mov.w	r3, #256	; 0x100
 800452c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800452e:	2300      	movs	r3, #0
 8004530:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004532:	f107 0310 	add.w	r3, r7, #16
 8004536:	4618      	mov	r0, r3
 8004538:	f002 fdba 	bl	80070b0 <HAL_RCCEx_PeriphCLKConfig>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004542:	f7ff fac1 	bl	8003ac8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004546:	4b1e      	ldr	r3, [pc, #120]	; (80045c0 <HAL_UART_MspInit+0xc8>)
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	4a1d      	ldr	r2, [pc, #116]	; (80045c0 <HAL_UART_MspInit+0xc8>)
 800454c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004550:	6413      	str	r3, [r2, #64]	; 0x40
 8004552:	4b1b      	ldr	r3, [pc, #108]	; (80045c0 <HAL_UART_MspInit+0xc8>)
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800455e:	4b18      	ldr	r3, [pc, #96]	; (80045c0 <HAL_UART_MspInit+0xc8>)
 8004560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004562:	4a17      	ldr	r2, [pc, #92]	; (80045c0 <HAL_UART_MspInit+0xc8>)
 8004564:	f043 0308 	orr.w	r3, r3, #8
 8004568:	6313      	str	r3, [r2, #48]	; 0x30
 800456a:	4b15      	ldr	r3, [pc, #84]	; (80045c0 <HAL_UART_MspInit+0xc8>)
 800456c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456e:	f003 0308 	and.w	r3, r3, #8
 8004572:	60bb      	str	r3, [r7, #8]
 8004574:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8004576:	f44f 7340 	mov.w	r3, #768	; 0x300
 800457a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800457e:	2302      	movs	r3, #2
 8004580:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004584:	2301      	movs	r3, #1
 8004586:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800458a:	2303      	movs	r3, #3
 800458c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004590:	2307      	movs	r3, #7
 8004592:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004596:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800459a:	4619      	mov	r1, r3
 800459c:	4809      	ldr	r0, [pc, #36]	; (80045c4 <HAL_UART_MspInit+0xcc>)
 800459e:	f001 fa89 	bl	8005ab4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80045a2:	2200      	movs	r2, #0
 80045a4:	2100      	movs	r1, #0
 80045a6:	2027      	movs	r0, #39	; 0x27
 80045a8:	f000 fec5 	bl	8005336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80045ac:	2027      	movs	r0, #39	; 0x27
 80045ae:	f000 fede 	bl	800536e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80045b2:	bf00      	nop
 80045b4:	37a8      	adds	r7, #168	; 0xa8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	40004800 	.word	0x40004800
 80045c0:	40023800 	.word	0x40023800
 80045c4:	40020c00 	.word	0x40020c00

080045c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80045c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004600 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80045cc:	480d      	ldr	r0, [pc, #52]	; (8004604 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80045ce:	490e      	ldr	r1, [pc, #56]	; (8004608 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80045d0:	4a0e      	ldr	r2, [pc, #56]	; (800460c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80045d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80045d4:	e002      	b.n	80045dc <LoopCopyDataInit>

080045d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045da:	3304      	adds	r3, #4

080045dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045e0:	d3f9      	bcc.n	80045d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045e2:	4a0b      	ldr	r2, [pc, #44]	; (8004610 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80045e4:	4c0b      	ldr	r4, [pc, #44]	; (8004614 <LoopFillZerobss+0x26>)
  movs r3, #0
 80045e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045e8:	e001      	b.n	80045ee <LoopFillZerobss>

080045ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045ec:	3204      	adds	r2, #4

080045ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045f0:	d3fb      	bcc.n	80045ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80045f2:	f7ff fce3 	bl	8003fbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045f6:	f009 fd29 	bl	800e04c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045fa:	f7ff f8dd 	bl	80037b8 <main>
  bx  lr    
 80045fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004600:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004608:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 800460c:	0800ef34 	.word	0x0800ef34
  ldr r2, =_sbss
 8004610:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 8004614:	20002928 	.word	0x20002928

08004618 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004618:	e7fe      	b.n	8004618 <CAN1_RX0_IRQHandler>

0800461a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800461e:	2003      	movs	r0, #3
 8004620:	f000 fe7e 	bl	8005320 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004624:	2000      	movs	r0, #0
 8004626:	f000 f805 	bl	8004634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800462a:	f7ff fbe3 	bl	8003df4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800463c:	4b12      	ldr	r3, [pc, #72]	; (8004688 <HAL_InitTick+0x54>)
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	4b12      	ldr	r3, [pc, #72]	; (800468c <HAL_InitTick+0x58>)
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	4619      	mov	r1, r3
 8004646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800464a:	fbb3 f3f1 	udiv	r3, r3, r1
 800464e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fe99 	bl	800538a <HAL_SYSTICK_Config>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e00e      	b.n	8004680 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b0f      	cmp	r3, #15
 8004666:	d80a      	bhi.n	800467e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004668:	2200      	movs	r2, #0
 800466a:	6879      	ldr	r1, [r7, #4]
 800466c:	f04f 30ff 	mov.w	r0, #4294967295
 8004670:	f000 fe61 	bl	8005336 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004674:	4a06      	ldr	r2, [pc, #24]	; (8004690 <HAL_InitTick+0x5c>)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800467a:	2300      	movs	r3, #0
 800467c:	e000      	b.n	8004680 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
}
 8004680:	4618      	mov	r0, r3
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	200000c4 	.word	0x200000c4
 800468c:	200000cc 	.word	0x200000cc
 8004690:	200000c8 	.word	0x200000c8

08004694 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004698:	4b06      	ldr	r3, [pc, #24]	; (80046b4 <HAL_IncTick+0x20>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	461a      	mov	r2, r3
 800469e:	4b06      	ldr	r3, [pc, #24]	; (80046b8 <HAL_IncTick+0x24>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4413      	add	r3, r2
 80046a4:	4a04      	ldr	r2, [pc, #16]	; (80046b8 <HAL_IncTick+0x24>)
 80046a6:	6013      	str	r3, [r2, #0]
}
 80046a8:	bf00      	nop
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	200000cc 	.word	0x200000cc
 80046b8:	200025a0 	.word	0x200025a0

080046bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  return uwTick;
 80046c0:	4b03      	ldr	r3, [pc, #12]	; (80046d0 <HAL_GetTick+0x14>)
 80046c2:	681b      	ldr	r3, [r3, #0]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	200025a0 	.word	0x200025a0

080046d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046dc:	f7ff ffee 	bl	80046bc <HAL_GetTick>
 80046e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ec:	d005      	beq.n	80046fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046ee:	4b0a      	ldr	r3, [pc, #40]	; (8004718 <HAL_Delay+0x44>)
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4413      	add	r3, r2
 80046f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80046fa:	bf00      	nop
 80046fc:	f7ff ffde 	bl	80046bc <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	429a      	cmp	r2, r3
 800470a:	d8f7      	bhi.n	80046fc <HAL_Delay+0x28>
  {
  }
}
 800470c:	bf00      	nop
 800470e:	bf00      	nop
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	200000cc 	.word	0x200000cc

0800471c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004724:	2300      	movs	r3, #0
 8004726:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e031      	b.n	8004796 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	2b00      	cmp	r3, #0
 8004738:	d109      	bne.n	800474e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7fd fd68 	bl	8002210 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	f003 0310 	and.w	r3, r3, #16
 8004756:	2b00      	cmp	r3, #0
 8004758:	d116      	bne.n	8004788 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800475e:	4b10      	ldr	r3, [pc, #64]	; (80047a0 <HAL_ADC_Init+0x84>)
 8004760:	4013      	ands	r3, r2
 8004762:	f043 0202 	orr.w	r2, r3, #2
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fc04 	bl	8004f78 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	f023 0303 	bic.w	r3, r3, #3
 800477e:	f043 0201 	orr.w	r2, r3, #1
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	641a      	str	r2, [r3, #64]	; 0x40
 8004786:	e001      	b.n	800478c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004794:	7bfb      	ldrb	r3, [r7, #15]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	ffffeefd 	.word	0xffffeefd

080047a4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80047ac:	2300      	movs	r3, #0
 80047ae:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d101      	bne.n	80047be <HAL_ADC_Start+0x1a>
 80047ba:	2302      	movs	r3, #2
 80047bc:	e0ad      	b.n	800491a <HAL_ADC_Start+0x176>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d018      	beq.n	8004806 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f042 0201 	orr.w	r2, r2, #1
 80047e2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80047e4:	4b50      	ldr	r3, [pc, #320]	; (8004928 <HAL_ADC_Start+0x184>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a50      	ldr	r2, [pc, #320]	; (800492c <HAL_ADC_Start+0x188>)
 80047ea:	fba2 2303 	umull	r2, r3, r2, r3
 80047ee:	0c9a      	lsrs	r2, r3, #18
 80047f0:	4613      	mov	r3, r2
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	4413      	add	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80047f8:	e002      	b.n	8004800 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	3b01      	subs	r3, #1
 80047fe:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1f9      	bne.n	80047fa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b01      	cmp	r3, #1
 8004812:	d175      	bne.n	8004900 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004818:	4b45      	ldr	r3, [pc, #276]	; (8004930 <HAL_ADC_Start+0x18c>)
 800481a:	4013      	ands	r3, r2
 800481c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800482e:	2b00      	cmp	r3, #0
 8004830:	d007      	beq.n	8004842 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800483a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800484a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800484e:	d106      	bne.n	800485e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004854:	f023 0206 	bic.w	r2, r3, #6
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	645a      	str	r2, [r3, #68]	; 0x44
 800485c:	e002      	b.n	8004864 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004874:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004876:	4b2f      	ldr	r3, [pc, #188]	; (8004934 <HAL_ADC_Start+0x190>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f003 031f 	and.w	r3, r3, #31
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10f      	bne.n	80048a2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d143      	bne.n	8004918 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689a      	ldr	r2, [r3, #8]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800489e:	609a      	str	r2, [r3, #8]
 80048a0:	e03a      	b.n	8004918 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a24      	ldr	r2, [pc, #144]	; (8004938 <HAL_ADC_Start+0x194>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d10e      	bne.n	80048ca <HAL_ADC_Start+0x126>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d107      	bne.n	80048ca <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80048c8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80048ca:	4b1a      	ldr	r3, [pc, #104]	; (8004934 <HAL_ADC_Start+0x190>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f003 0310 	and.w	r3, r3, #16
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d120      	bne.n	8004918 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a18      	ldr	r2, [pc, #96]	; (800493c <HAL_ADC_Start+0x198>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d11b      	bne.n	8004918 <HAL_ADC_Start+0x174>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d114      	bne.n	8004918 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689a      	ldr	r2, [r3, #8]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80048fc:	609a      	str	r2, [r3, #8]
 80048fe:	e00b      	b.n	8004918 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004904:	f043 0210 	orr.w	r2, r3, #16
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004910:	f043 0201 	orr.w	r2, r3, #1
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	200000c4 	.word	0x200000c4
 800492c:	431bde83 	.word	0x431bde83
 8004930:	fffff8fe 	.word	0xfffff8fe
 8004934:	40012300 	.word	0x40012300
 8004938:	40012000 	.word	0x40012000
 800493c:	40012200 	.word	0x40012200

08004940 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800494a:	2300      	movs	r3, #0
 800494c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800495c:	d113      	bne.n	8004986 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800496c:	d10b      	bne.n	8004986 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	f043 0220 	orr.w	r2, r3, #32
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e063      	b.n	8004a4e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004986:	f7ff fe99 	bl	80046bc <HAL_GetTick>
 800498a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800498c:	e021      	b.n	80049d2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004994:	d01d      	beq.n	80049d2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d007      	beq.n	80049ac <HAL_ADC_PollForConversion+0x6c>
 800499c:	f7ff fe8e 	bl	80046bc <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d212      	bcs.n	80049d2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d00b      	beq.n	80049d2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	f043 0204 	orr.w	r2, r3, #4
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e03d      	b.n	8004a4e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d1d6      	bne.n	800498e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f06f 0212 	mvn.w	r2, #18
 80049e8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d123      	bne.n	8004a4c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d11f      	bne.n	8004a4c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a12:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d006      	beq.n	8004a28 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d111      	bne.n	8004a4c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d105      	bne.n	8004a4c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a44:	f043 0201 	orr.w	r2, r3, #1
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b086      	sub	sp, #24
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	617b      	str	r3, [r7, #20]
 8004a62:	2300      	movs	r3, #0
 8004a64:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	f003 0320 	and.w	r3, r3, #32
 8004a84:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d049      	beq.n	8004b20 <HAL_ADC_IRQHandler+0xca>
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d046      	beq.n	8004b20 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	f003 0310 	and.w	r3, r3, #16
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d105      	bne.n	8004aaa <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d12b      	bne.n	8004b10 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d127      	bne.n	8004b10 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d006      	beq.n	8004adc <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d119      	bne.n	8004b10 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0220 	bic.w	r2, r2, #32
 8004aea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d105      	bne.n	8004b10 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b08:	f043 0201 	orr.w	r2, r3, #1
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f8bd 	bl	8004c90 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f06f 0212 	mvn.w	r2, #18
 8004b1e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f003 0304 	and.w	r3, r3, #4
 8004b26:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b2e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d057      	beq.n	8004be6 <HAL_ADC_IRQHandler+0x190>
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d054      	beq.n	8004be6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b40:	f003 0310 	and.w	r3, r3, #16
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d105      	bne.n	8004b54 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d139      	bne.n	8004bd6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b68:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d006      	beq.n	8004b7e <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d12b      	bne.n	8004bd6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d124      	bne.n	8004bd6 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d11d      	bne.n	8004bd6 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d119      	bne.n	8004bd6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bb0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d105      	bne.n	8004bd6 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	f043 0201 	orr.w	r2, r3, #1
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 fac8 	bl	800516c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f06f 020c 	mvn.w	r2, #12
 8004be4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d017      	beq.n	8004c2c <HAL_ADC_IRQHandler+0x1d6>
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d014      	beq.n	8004c2c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d10d      	bne.n	8004c2c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c14:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 f841 	bl	8004ca4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f06f 0201 	mvn.w	r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f003 0320 	and.w	r3, r3, #32
 8004c32:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c3a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d015      	beq.n	8004c6e <HAL_ADC_IRQHandler+0x218>
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d012      	beq.n	8004c6e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4c:	f043 0202 	orr.w	r2, r3, #2
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f06f 0220 	mvn.w	r2, #32
 8004c5c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f82a 	bl	8004cb8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f06f 0220 	mvn.w	r2, #32
 8004c6c:	601a      	str	r2, [r3, #0]
  }
}
 8004c6e:	bf00      	nop
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004c76:	b480      	push	{r7}
 8004c78:	b083      	sub	sp, #12
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d101      	bne.n	8004ce8 <HAL_ADC_ConfigChannel+0x1c>
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	e136      	b.n	8004f56 <HAL_ADC_ConfigChannel+0x28a>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b09      	cmp	r3, #9
 8004cf6:	d93a      	bls.n	8004d6e <HAL_ADC_ConfigChannel+0xa2>
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d00:	d035      	beq.n	8004d6e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68d9      	ldr	r1, [r3, #12]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	461a      	mov	r2, r3
 8004d10:	4613      	mov	r3, r2
 8004d12:	005b      	lsls	r3, r3, #1
 8004d14:	4413      	add	r3, r2
 8004d16:	3b1e      	subs	r3, #30
 8004d18:	2207      	movs	r2, #7
 8004d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1e:	43da      	mvns	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	400a      	ands	r2, r1
 8004d26:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a8d      	ldr	r2, [pc, #564]	; (8004f64 <HAL_ADC_ConfigChannel+0x298>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d10a      	bne.n	8004d48 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68d9      	ldr	r1, [r3, #12]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	061a      	lsls	r2, r3, #24
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d46:	e035      	b.n	8004db4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68d9      	ldr	r1, [r3, #12]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	689a      	ldr	r2, [r3, #8]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	4618      	mov	r0, r3
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	4403      	add	r3, r0
 8004d60:	3b1e      	subs	r3, #30
 8004d62:	409a      	lsls	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d6c:	e022      	b.n	8004db4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6919      	ldr	r1, [r3, #16]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	4413      	add	r3, r2
 8004d82:	2207      	movs	r2, #7
 8004d84:	fa02 f303 	lsl.w	r3, r2, r3
 8004d88:	43da      	mvns	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	400a      	ands	r2, r1
 8004d90:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6919      	ldr	r1, [r3, #16]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	4618      	mov	r0, r3
 8004da4:	4603      	mov	r3, r0
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	4403      	add	r3, r0
 8004daa:	409a      	lsls	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	2b06      	cmp	r3, #6
 8004dba:	d824      	bhi.n	8004e06 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	3b05      	subs	r3, #5
 8004dce:	221f      	movs	r2, #31
 8004dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd4:	43da      	mvns	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	400a      	ands	r2, r1
 8004ddc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	4618      	mov	r0, r3
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	4613      	mov	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	3b05      	subs	r3, #5
 8004df8:	fa00 f203 	lsl.w	r2, r0, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	635a      	str	r2, [r3, #52]	; 0x34
 8004e04:	e04c      	b.n	8004ea0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	2b0c      	cmp	r3, #12
 8004e0c:	d824      	bhi.n	8004e58 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4413      	add	r3, r2
 8004e1e:	3b23      	subs	r3, #35	; 0x23
 8004e20:	221f      	movs	r2, #31
 8004e22:	fa02 f303 	lsl.w	r3, r2, r3
 8004e26:	43da      	mvns	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	400a      	ands	r2, r1
 8004e2e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	4613      	mov	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	3b23      	subs	r3, #35	; 0x23
 8004e4a:	fa00 f203 	lsl.w	r2, r0, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	631a      	str	r2, [r3, #48]	; 0x30
 8004e56:	e023      	b.n	8004ea0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	4613      	mov	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	3b41      	subs	r3, #65	; 0x41
 8004e6a:	221f      	movs	r2, #31
 8004e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e70:	43da      	mvns	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	400a      	ands	r2, r1
 8004e78:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	4618      	mov	r0, r3
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	3b41      	subs	r3, #65	; 0x41
 8004e94:	fa00 f203 	lsl.w	r2, r0, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a30      	ldr	r2, [pc, #192]	; (8004f68 <HAL_ADC_ConfigChannel+0x29c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d10a      	bne.n	8004ec0 <HAL_ADC_ConfigChannel+0x1f4>
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004eb2:	d105      	bne.n	8004ec0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004eb4:	4b2d      	ldr	r3, [pc, #180]	; (8004f6c <HAL_ADC_ConfigChannel+0x2a0>)
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	4a2c      	ldr	r2, [pc, #176]	; (8004f6c <HAL_ADC_ConfigChannel+0x2a0>)
 8004eba:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004ebe:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a28      	ldr	r2, [pc, #160]	; (8004f68 <HAL_ADC_ConfigChannel+0x29c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d10f      	bne.n	8004eea <HAL_ADC_ConfigChannel+0x21e>
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2b12      	cmp	r3, #18
 8004ed0:	d10b      	bne.n	8004eea <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8004ed2:	4b26      	ldr	r3, [pc, #152]	; (8004f6c <HAL_ADC_ConfigChannel+0x2a0>)
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	4a25      	ldr	r2, [pc, #148]	; (8004f6c <HAL_ADC_ConfigChannel+0x2a0>)
 8004ed8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004edc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004ede:	4b23      	ldr	r3, [pc, #140]	; (8004f6c <HAL_ADC_ConfigChannel+0x2a0>)
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	4a22      	ldr	r2, [pc, #136]	; (8004f6c <HAL_ADC_ConfigChannel+0x2a0>)
 8004ee4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ee8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a1e      	ldr	r2, [pc, #120]	; (8004f68 <HAL_ADC_ConfigChannel+0x29c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d12b      	bne.n	8004f4c <HAL_ADC_ConfigChannel+0x280>
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a1a      	ldr	r2, [pc, #104]	; (8004f64 <HAL_ADC_ConfigChannel+0x298>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d003      	beq.n	8004f06 <HAL_ADC_ConfigChannel+0x23a>
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b11      	cmp	r3, #17
 8004f04:	d122      	bne.n	8004f4c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8004f06:	4b19      	ldr	r3, [pc, #100]	; (8004f6c <HAL_ADC_ConfigChannel+0x2a0>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	4a18      	ldr	r2, [pc, #96]	; (8004f6c <HAL_ADC_ConfigChannel+0x2a0>)
 8004f0c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004f10:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004f12:	4b16      	ldr	r3, [pc, #88]	; (8004f6c <HAL_ADC_ConfigChannel+0x2a0>)
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	4a15      	ldr	r2, [pc, #84]	; (8004f6c <HAL_ADC_ConfigChannel+0x2a0>)
 8004f18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f1c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a10      	ldr	r2, [pc, #64]	; (8004f64 <HAL_ADC_ConfigChannel+0x298>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d111      	bne.n	8004f4c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004f28:	4b11      	ldr	r3, [pc, #68]	; (8004f70 <HAL_ADC_ConfigChannel+0x2a4>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a11      	ldr	r2, [pc, #68]	; (8004f74 <HAL_ADC_ConfigChannel+0x2a8>)
 8004f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f32:	0c9a      	lsrs	r2, r3, #18
 8004f34:	4613      	mov	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004f3e:	e002      	b.n	8004f46 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	3b01      	subs	r3, #1
 8004f44:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1f9      	bne.n	8004f40 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	10000012 	.word	0x10000012
 8004f68:	40012000 	.word	0x40012000
 8004f6c:	40012300 	.word	0x40012300
 8004f70:	200000c4 	.word	0x200000c4
 8004f74:	431bde83 	.word	0x431bde83

08004f78 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004f80:	4b78      	ldr	r3, [pc, #480]	; (8005164 <ADC_Init+0x1ec>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	4a77      	ldr	r2, [pc, #476]	; (8005164 <ADC_Init+0x1ec>)
 8004f86:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004f8a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004f8c:	4b75      	ldr	r3, [pc, #468]	; (8005164 <ADC_Init+0x1ec>)
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	4973      	ldr	r1, [pc, #460]	; (8005164 <ADC_Init+0x1ec>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fa8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	6859      	ldr	r1, [r3, #4]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	021a      	lsls	r2, r3, #8
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004fcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6859      	ldr	r1, [r3, #4]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689a      	ldr	r2, [r3, #8]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6899      	ldr	r1, [r3, #8]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68da      	ldr	r2, [r3, #12]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005006:	4a58      	ldr	r2, [pc, #352]	; (8005168 <ADC_Init+0x1f0>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d022      	beq.n	8005052 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689a      	ldr	r2, [r3, #8]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800501a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6899      	ldr	r1, [r3, #8]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800503c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6899      	ldr	r1, [r3, #8]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	609a      	str	r2, [r3, #8]
 8005050:	e00f      	b.n	8005072 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005060:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	689a      	ldr	r2, [r3, #8]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005070:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 0202 	bic.w	r2, r2, #2
 8005080:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6899      	ldr	r1, [r3, #8]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	005a      	lsls	r2, r3, #1
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 3020 	ldrb.w	r3, [r3, #32]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d01b      	beq.n	80050d8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80050be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6859      	ldr	r1, [r3, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ca:	3b01      	subs	r3, #1
 80050cc:	035a      	lsls	r2, r3, #13
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	605a      	str	r2, [r3, #4]
 80050d6:	e007      	b.n	80050e8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80050f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	3b01      	subs	r3, #1
 8005104:	051a      	lsls	r2, r3, #20
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	689a      	ldr	r2, [r3, #8]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800511c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6899      	ldr	r1, [r3, #8]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800512a:	025a      	lsls	r2, r3, #9
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	430a      	orrs	r2, r1
 8005132:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689a      	ldr	r2, [r3, #8]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005142:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6899      	ldr	r1, [r3, #8]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	029a      	lsls	r2, r3, #10
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	609a      	str	r2, [r3, #8]
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr
 8005164:	40012300 	.word	0x40012300
 8005168:	0f000001 	.word	0x0f000001

0800516c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f003 0307 	and.w	r3, r3, #7
 800518e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005190:	4b0b      	ldr	r3, [pc, #44]	; (80051c0 <__NVIC_SetPriorityGrouping+0x40>)
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800519c:	4013      	ands	r3, r2
 800519e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80051a8:	4b06      	ldr	r3, [pc, #24]	; (80051c4 <__NVIC_SetPriorityGrouping+0x44>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80051ae:	4a04      	ldr	r2, [pc, #16]	; (80051c0 <__NVIC_SetPriorityGrouping+0x40>)
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	60d3      	str	r3, [r2, #12]
}
 80051b4:	bf00      	nop
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	e000ed00 	.word	0xe000ed00
 80051c4:	05fa0000 	.word	0x05fa0000

080051c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80051c8:	b480      	push	{r7}
 80051ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051cc:	4b04      	ldr	r3, [pc, #16]	; (80051e0 <__NVIC_GetPriorityGrouping+0x18>)
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	0a1b      	lsrs	r3, r3, #8
 80051d2:	f003 0307 	and.w	r3, r3, #7
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr
 80051e0:	e000ed00 	.word	0xe000ed00

080051e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	4603      	mov	r3, r0
 80051ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	db0b      	blt.n	800520e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051f6:	79fb      	ldrb	r3, [r7, #7]
 80051f8:	f003 021f 	and.w	r2, r3, #31
 80051fc:	4907      	ldr	r1, [pc, #28]	; (800521c <__NVIC_EnableIRQ+0x38>)
 80051fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005202:	095b      	lsrs	r3, r3, #5
 8005204:	2001      	movs	r0, #1
 8005206:	fa00 f202 	lsl.w	r2, r0, r2
 800520a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800520e:	bf00      	nop
 8005210:	370c      	adds	r7, #12
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	e000e100 	.word	0xe000e100

08005220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	4603      	mov	r3, r0
 8005228:	6039      	str	r1, [r7, #0]
 800522a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800522c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005230:	2b00      	cmp	r3, #0
 8005232:	db0a      	blt.n	800524a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	b2da      	uxtb	r2, r3
 8005238:	490c      	ldr	r1, [pc, #48]	; (800526c <__NVIC_SetPriority+0x4c>)
 800523a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800523e:	0112      	lsls	r2, r2, #4
 8005240:	b2d2      	uxtb	r2, r2
 8005242:	440b      	add	r3, r1
 8005244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005248:	e00a      	b.n	8005260 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	b2da      	uxtb	r2, r3
 800524e:	4908      	ldr	r1, [pc, #32]	; (8005270 <__NVIC_SetPriority+0x50>)
 8005250:	79fb      	ldrb	r3, [r7, #7]
 8005252:	f003 030f 	and.w	r3, r3, #15
 8005256:	3b04      	subs	r3, #4
 8005258:	0112      	lsls	r2, r2, #4
 800525a:	b2d2      	uxtb	r2, r2
 800525c:	440b      	add	r3, r1
 800525e:	761a      	strb	r2, [r3, #24]
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	e000e100 	.word	0xe000e100
 8005270:	e000ed00 	.word	0xe000ed00

08005274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005274:	b480      	push	{r7}
 8005276:	b089      	sub	sp, #36	; 0x24
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f003 0307 	and.w	r3, r3, #7
 8005286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	f1c3 0307 	rsb	r3, r3, #7
 800528e:	2b04      	cmp	r3, #4
 8005290:	bf28      	it	cs
 8005292:	2304      	movcs	r3, #4
 8005294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	3304      	adds	r3, #4
 800529a:	2b06      	cmp	r3, #6
 800529c:	d902      	bls.n	80052a4 <NVIC_EncodePriority+0x30>
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	3b03      	subs	r3, #3
 80052a2:	e000      	b.n	80052a6 <NVIC_EncodePriority+0x32>
 80052a4:	2300      	movs	r3, #0
 80052a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052a8:	f04f 32ff 	mov.w	r2, #4294967295
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	fa02 f303 	lsl.w	r3, r2, r3
 80052b2:	43da      	mvns	r2, r3
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	401a      	ands	r2, r3
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052bc:	f04f 31ff 	mov.w	r1, #4294967295
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	fa01 f303 	lsl.w	r3, r1, r3
 80052c6:	43d9      	mvns	r1, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052cc:	4313      	orrs	r3, r2
         );
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3724      	adds	r7, #36	; 0x24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
	...

080052dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	3b01      	subs	r3, #1
 80052e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052ec:	d301      	bcc.n	80052f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80052ee:	2301      	movs	r3, #1
 80052f0:	e00f      	b.n	8005312 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80052f2:	4a0a      	ldr	r2, [pc, #40]	; (800531c <SysTick_Config+0x40>)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80052fa:	210f      	movs	r1, #15
 80052fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005300:	f7ff ff8e 	bl	8005220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005304:	4b05      	ldr	r3, [pc, #20]	; (800531c <SysTick_Config+0x40>)
 8005306:	2200      	movs	r2, #0
 8005308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800530a:	4b04      	ldr	r3, [pc, #16]	; (800531c <SysTick_Config+0x40>)
 800530c:	2207      	movs	r2, #7
 800530e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	e000e010 	.word	0xe000e010

08005320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f7ff ff29 	bl	8005180 <__NVIC_SetPriorityGrouping>
}
 800532e:	bf00      	nop
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005336:	b580      	push	{r7, lr}
 8005338:	b086      	sub	sp, #24
 800533a:	af00      	add	r7, sp, #0
 800533c:	4603      	mov	r3, r0
 800533e:	60b9      	str	r1, [r7, #8]
 8005340:	607a      	str	r2, [r7, #4]
 8005342:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005344:	2300      	movs	r3, #0
 8005346:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005348:	f7ff ff3e 	bl	80051c8 <__NVIC_GetPriorityGrouping>
 800534c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	68b9      	ldr	r1, [r7, #8]
 8005352:	6978      	ldr	r0, [r7, #20]
 8005354:	f7ff ff8e 	bl	8005274 <NVIC_EncodePriority>
 8005358:	4602      	mov	r2, r0
 800535a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800535e:	4611      	mov	r1, r2
 8005360:	4618      	mov	r0, r3
 8005362:	f7ff ff5d 	bl	8005220 <__NVIC_SetPriority>
}
 8005366:	bf00      	nop
 8005368:	3718      	adds	r7, #24
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b082      	sub	sp, #8
 8005372:	af00      	add	r7, sp, #0
 8005374:	4603      	mov	r3, r0
 8005376:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800537c:	4618      	mov	r0, r3
 800537e:	f7ff ff31 	bl	80051e4 <__NVIC_EnableIRQ>
}
 8005382:	bf00      	nop
 8005384:	3708      	adds	r7, #8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b082      	sub	sp, #8
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7ff ffa2 	bl	80052dc <SysTick_Config>
 8005398:	4603      	mov	r3, r0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80053a6:	f000 f802 	bl	80053ae <HAL_SYSTICK_Callback>
}
 80053aa:	bf00      	nop
 80053ac:	bd80      	pop	{r7, pc}

080053ae <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80053ae:	b480      	push	{r7}
 80053b0:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80053b2:	bf00      	nop
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80053c4:	2300      	movs	r3, #0
 80053c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80053c8:	f7ff f978 	bl	80046bc <HAL_GetTick>
 80053cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e099      	b.n	800550c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2202      	movs	r2, #2
 80053dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0201 	bic.w	r2, r2, #1
 80053f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053f8:	e00f      	b.n	800541a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053fa:	f7ff f95f 	bl	80046bc <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	2b05      	cmp	r3, #5
 8005406:	d908      	bls.n	800541a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2220      	movs	r2, #32
 800540c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2203      	movs	r2, #3
 8005412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e078      	b.n	800550c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1e8      	bne.n	80053fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	4b38      	ldr	r3, [pc, #224]	; (8005514 <HAL_DMA_Init+0x158>)
 8005434:	4013      	ands	r3, r2
 8005436:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005446:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005452:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800545e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	4313      	orrs	r3, r2
 800546a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	2b04      	cmp	r3, #4
 8005472:	d107      	bne.n	8005484 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547c:	4313      	orrs	r3, r2
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	4313      	orrs	r3, r2
 8005482:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f023 0307 	bic.w	r3, r3, #7
 800549a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	d117      	bne.n	80054de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00e      	beq.n	80054de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 fa7b 	bl	80059bc <DMA_CheckFifoParam>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d008      	beq.n	80054de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2240      	movs	r2, #64	; 0x40
 80054d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80054da:	2301      	movs	r3, #1
 80054dc:	e016      	b.n	800550c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 fa32 	bl	8005950 <DMA_CalcBaseAndBitshift>
 80054ec:	4603      	mov	r3, r0
 80054ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f4:	223f      	movs	r2, #63	; 0x3f
 80054f6:	409a      	lsls	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3718      	adds	r7, #24
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	f010803f 	.word	0xf010803f

08005518 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005524:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005526:	f7ff f8c9 	bl	80046bc <HAL_GetTick>
 800552a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d008      	beq.n	800554a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2280      	movs	r2, #128	; 0x80
 800553c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e052      	b.n	80055f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 0216 	bic.w	r2, r2, #22
 8005558:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	695a      	ldr	r2, [r3, #20]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005568:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556e:	2b00      	cmp	r3, #0
 8005570:	d103      	bne.n	800557a <HAL_DMA_Abort+0x62>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005576:	2b00      	cmp	r3, #0
 8005578:	d007      	beq.n	800558a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f022 0208 	bic.w	r2, r2, #8
 8005588:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 0201 	bic.w	r2, r2, #1
 8005598:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800559a:	e013      	b.n	80055c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800559c:	f7ff f88e 	bl	80046bc <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b05      	cmp	r3, #5
 80055a8:	d90c      	bls.n	80055c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2220      	movs	r2, #32
 80055ae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2203      	movs	r2, #3
 80055b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e015      	b.n	80055f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1e4      	bne.n	800559c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055d6:	223f      	movs	r2, #63	; 0x3f
 80055d8:	409a      	lsls	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b02      	cmp	r3, #2
 800560a:	d004      	beq.n	8005616 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2280      	movs	r2, #128	; 0x80
 8005610:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e00c      	b.n	8005630 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2205      	movs	r2, #5
 800561a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 0201 	bic.w	r2, r2, #1
 800562c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005644:	2300      	movs	r3, #0
 8005646:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005648:	4b8e      	ldr	r3, [pc, #568]	; (8005884 <HAL_DMA_IRQHandler+0x248>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a8e      	ldr	r2, [pc, #568]	; (8005888 <HAL_DMA_IRQHandler+0x24c>)
 800564e:	fba2 2303 	umull	r2, r3, r2, r3
 8005652:	0a9b      	lsrs	r3, r3, #10
 8005654:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800565a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005666:	2208      	movs	r2, #8
 8005668:	409a      	lsls	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	4013      	ands	r3, r2
 800566e:	2b00      	cmp	r3, #0
 8005670:	d01a      	beq.n	80056a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0304 	and.w	r3, r3, #4
 800567c:	2b00      	cmp	r3, #0
 800567e:	d013      	beq.n	80056a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0204 	bic.w	r2, r2, #4
 800568e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005694:	2208      	movs	r2, #8
 8005696:	409a      	lsls	r2, r3
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a0:	f043 0201 	orr.w	r2, r3, #1
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ac:	2201      	movs	r2, #1
 80056ae:	409a      	lsls	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4013      	ands	r3, r2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d012      	beq.n	80056de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00b      	beq.n	80056de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ca:	2201      	movs	r2, #1
 80056cc:	409a      	lsls	r2, r3
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d6:	f043 0202 	orr.w	r2, r3, #2
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056e2:	2204      	movs	r2, #4
 80056e4:	409a      	lsls	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4013      	ands	r3, r2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d012      	beq.n	8005714 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00b      	beq.n	8005714 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005700:	2204      	movs	r2, #4
 8005702:	409a      	lsls	r2, r3
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570c:	f043 0204 	orr.w	r2, r3, #4
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005718:	2210      	movs	r2, #16
 800571a:	409a      	lsls	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4013      	ands	r3, r2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d043      	beq.n	80057ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0308 	and.w	r3, r3, #8
 800572e:	2b00      	cmp	r3, #0
 8005730:	d03c      	beq.n	80057ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005736:	2210      	movs	r2, #16
 8005738:	409a      	lsls	r2, r3
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d018      	beq.n	800577e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d108      	bne.n	800576c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575e:	2b00      	cmp	r3, #0
 8005760:	d024      	beq.n	80057ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	4798      	blx	r3
 800576a:	e01f      	b.n	80057ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005770:	2b00      	cmp	r3, #0
 8005772:	d01b      	beq.n	80057ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	4798      	blx	r3
 800577c:	e016      	b.n	80057ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005788:	2b00      	cmp	r3, #0
 800578a:	d107      	bne.n	800579c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f022 0208 	bic.w	r2, r2, #8
 800579a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d003      	beq.n	80057ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b0:	2220      	movs	r2, #32
 80057b2:	409a      	lsls	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4013      	ands	r3, r2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f000 808f 	beq.w	80058dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0310 	and.w	r3, r3, #16
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 8087 	beq.w	80058dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057d2:	2220      	movs	r2, #32
 80057d4:	409a      	lsls	r2, r3
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b05      	cmp	r3, #5
 80057e4:	d136      	bne.n	8005854 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 0216 	bic.w	r2, r2, #22
 80057f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	695a      	ldr	r2, [r3, #20]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005804:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580a:	2b00      	cmp	r3, #0
 800580c:	d103      	bne.n	8005816 <HAL_DMA_IRQHandler+0x1da>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005812:	2b00      	cmp	r3, #0
 8005814:	d007      	beq.n	8005826 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 0208 	bic.w	r2, r2, #8
 8005824:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800582a:	223f      	movs	r2, #63	; 0x3f
 800582c:	409a      	lsls	r2, r3
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005846:	2b00      	cmp	r3, #0
 8005848:	d07e      	beq.n	8005948 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	4798      	blx	r3
        }
        return;
 8005852:	e079      	b.n	8005948 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d01d      	beq.n	800589e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10d      	bne.n	800588c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005874:	2b00      	cmp	r3, #0
 8005876:	d031      	beq.n	80058dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	4798      	blx	r3
 8005880:	e02c      	b.n	80058dc <HAL_DMA_IRQHandler+0x2a0>
 8005882:	bf00      	nop
 8005884:	200000c4 	.word	0x200000c4
 8005888:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005890:	2b00      	cmp	r3, #0
 8005892:	d023      	beq.n	80058dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	4798      	blx	r3
 800589c:	e01e      	b.n	80058dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10f      	bne.n	80058cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 0210 	bic.w	r2, r2, #16
 80058ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d003      	beq.n	80058dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d032      	beq.n	800594a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d022      	beq.n	8005936 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2205      	movs	r2, #5
 80058f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 0201 	bic.w	r2, r2, #1
 8005906:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	3301      	adds	r3, #1
 800590c:	60bb      	str	r3, [r7, #8]
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	429a      	cmp	r2, r3
 8005912:	d307      	bcc.n	8005924 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1f2      	bne.n	8005908 <HAL_DMA_IRQHandler+0x2cc>
 8005922:	e000      	b.n	8005926 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005924:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800593a:	2b00      	cmp	r3, #0
 800593c:	d005      	beq.n	800594a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	4798      	blx	r3
 8005946:	e000      	b.n	800594a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005948:	bf00      	nop
    }
  }
}
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	b2db      	uxtb	r3, r3
 800595e:	3b10      	subs	r3, #16
 8005960:	4a13      	ldr	r2, [pc, #76]	; (80059b0 <DMA_CalcBaseAndBitshift+0x60>)
 8005962:	fba2 2303 	umull	r2, r3, r2, r3
 8005966:	091b      	lsrs	r3, r3, #4
 8005968:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800596a:	4a12      	ldr	r2, [pc, #72]	; (80059b4 <DMA_CalcBaseAndBitshift+0x64>)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4413      	add	r3, r2
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	461a      	mov	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2b03      	cmp	r3, #3
 800597c:	d908      	bls.n	8005990 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	461a      	mov	r2, r3
 8005984:	4b0c      	ldr	r3, [pc, #48]	; (80059b8 <DMA_CalcBaseAndBitshift+0x68>)
 8005986:	4013      	ands	r3, r2
 8005988:	1d1a      	adds	r2, r3, #4
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	659a      	str	r2, [r3, #88]	; 0x58
 800598e:	e006      	b.n	800599e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	461a      	mov	r2, r3
 8005996:	4b08      	ldr	r3, [pc, #32]	; (80059b8 <DMA_CalcBaseAndBitshift+0x68>)
 8005998:	4013      	ands	r3, r2
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	aaaaaaab 	.word	0xaaaaaaab
 80059b4:	0800eaa8 	.word	0x0800eaa8
 80059b8:	fffffc00 	.word	0xfffffc00

080059bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059c4:	2300      	movs	r3, #0
 80059c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d11f      	bne.n	8005a16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	2b03      	cmp	r3, #3
 80059da:	d856      	bhi.n	8005a8a <DMA_CheckFifoParam+0xce>
 80059dc:	a201      	add	r2, pc, #4	; (adr r2, 80059e4 <DMA_CheckFifoParam+0x28>)
 80059de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e2:	bf00      	nop
 80059e4:	080059f5 	.word	0x080059f5
 80059e8:	08005a07 	.word	0x08005a07
 80059ec:	080059f5 	.word	0x080059f5
 80059f0:	08005a8b 	.word	0x08005a8b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d046      	beq.n	8005a8e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a04:	e043      	b.n	8005a8e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a0e:	d140      	bne.n	8005a92 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a14:	e03d      	b.n	8005a92 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a1e:	d121      	bne.n	8005a64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2b03      	cmp	r3, #3
 8005a24:	d837      	bhi.n	8005a96 <DMA_CheckFifoParam+0xda>
 8005a26:	a201      	add	r2, pc, #4	; (adr r2, 8005a2c <DMA_CheckFifoParam+0x70>)
 8005a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2c:	08005a3d 	.word	0x08005a3d
 8005a30:	08005a43 	.word	0x08005a43
 8005a34:	08005a3d 	.word	0x08005a3d
 8005a38:	08005a55 	.word	0x08005a55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a40:	e030      	b.n	8005aa4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d025      	beq.n	8005a9a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a52:	e022      	b.n	8005a9a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a5c:	d11f      	bne.n	8005a9e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005a62:	e01c      	b.n	8005a9e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d903      	bls.n	8005a72 <DMA_CheckFifoParam+0xb6>
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2b03      	cmp	r3, #3
 8005a6e:	d003      	beq.n	8005a78 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005a70:	e018      	b.n	8005aa4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	73fb      	strb	r3, [r7, #15]
      break;
 8005a76:	e015      	b.n	8005aa4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00e      	beq.n	8005aa2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	73fb      	strb	r3, [r7, #15]
      break;
 8005a88:	e00b      	b.n	8005aa2 <DMA_CheckFifoParam+0xe6>
      break;
 8005a8a:	bf00      	nop
 8005a8c:	e00a      	b.n	8005aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8005a8e:	bf00      	nop
 8005a90:	e008      	b.n	8005aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8005a92:	bf00      	nop
 8005a94:	e006      	b.n	8005aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8005a96:	bf00      	nop
 8005a98:	e004      	b.n	8005aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8005a9a:	bf00      	nop
 8005a9c:	e002      	b.n	8005aa4 <DMA_CheckFifoParam+0xe8>
      break;   
 8005a9e:	bf00      	nop
 8005aa0:	e000      	b.n	8005aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8005aa2:	bf00      	nop
    }
  } 
  
  return status; 
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop

08005ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b089      	sub	sp, #36	; 0x24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005aca:	2300      	movs	r3, #0
 8005acc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005ace:	2300      	movs	r3, #0
 8005ad0:	61fb      	str	r3, [r7, #28]
 8005ad2:	e175      	b.n	8005dc0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8005adc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	f040 8164 	bne.w	8005dba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f003 0303 	and.w	r3, r3, #3
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d005      	beq.n	8005b0a <HAL_GPIO_Init+0x56>
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f003 0303 	and.w	r3, r3, #3
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d130      	bne.n	8005b6c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	2203      	movs	r2, #3
 8005b16:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1a:	43db      	mvns	r3, r3
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	68da      	ldr	r2, [r3, #12]
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2e:	69ba      	ldr	r2, [r7, #24]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	69ba      	ldr	r2, [r7, #24]
 8005b38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b40:	2201      	movs	r2, #1
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	fa02 f303 	lsl.w	r3, r2, r3
 8005b48:	43db      	mvns	r3, r3
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	091b      	lsrs	r3, r3, #4
 8005b56:	f003 0201 	and.w	r2, r3, #1
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	69ba      	ldr	r2, [r7, #24]
 8005b6a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f003 0303 	and.w	r3, r3, #3
 8005b74:	2b03      	cmp	r3, #3
 8005b76:	d017      	beq.n	8005ba8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	2203      	movs	r2, #3
 8005b84:	fa02 f303 	lsl.w	r3, r2, r3
 8005b88:	43db      	mvns	r3, r3
 8005b8a:	69ba      	ldr	r2, [r7, #24]
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	005b      	lsls	r3, r3, #1
 8005b98:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9c:	69ba      	ldr	r2, [r7, #24]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f003 0303 	and.w	r3, r3, #3
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d123      	bne.n	8005bfc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	08da      	lsrs	r2, r3, #3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	3208      	adds	r2, #8
 8005bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	f003 0307 	and.w	r3, r3, #7
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	220f      	movs	r2, #15
 8005bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd0:	43db      	mvns	r3, r3
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	691a      	ldr	r2, [r3, #16]
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	f003 0307 	and.w	r3, r3, #7
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	fa02 f303 	lsl.w	r3, r2, r3
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	08da      	lsrs	r2, r3, #3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	3208      	adds	r2, #8
 8005bf6:	69b9      	ldr	r1, [r7, #24]
 8005bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	005b      	lsls	r3, r3, #1
 8005c06:	2203      	movs	r2, #3
 8005c08:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0c:	43db      	mvns	r3, r3
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	4013      	ands	r3, r2
 8005c12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f003 0203 	and.w	r2, r3, #3
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	005b      	lsls	r3, r3, #1
 8005c20:	fa02 f303 	lsl.w	r3, r2, r3
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f000 80be 	beq.w	8005dba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c3e:	4b66      	ldr	r3, [pc, #408]	; (8005dd8 <HAL_GPIO_Init+0x324>)
 8005c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c42:	4a65      	ldr	r2, [pc, #404]	; (8005dd8 <HAL_GPIO_Init+0x324>)
 8005c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c48:	6453      	str	r3, [r2, #68]	; 0x44
 8005c4a:	4b63      	ldr	r3, [pc, #396]	; (8005dd8 <HAL_GPIO_Init+0x324>)
 8005c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c52:	60fb      	str	r3, [r7, #12]
 8005c54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005c56:	4a61      	ldr	r2, [pc, #388]	; (8005ddc <HAL_GPIO_Init+0x328>)
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	089b      	lsrs	r3, r3, #2
 8005c5c:	3302      	adds	r3, #2
 8005c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	f003 0303 	and.w	r3, r3, #3
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	220f      	movs	r2, #15
 8005c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c72:	43db      	mvns	r3, r3
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	4013      	ands	r3, r2
 8005c78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a58      	ldr	r2, [pc, #352]	; (8005de0 <HAL_GPIO_Init+0x32c>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d037      	beq.n	8005cf2 <HAL_GPIO_Init+0x23e>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a57      	ldr	r2, [pc, #348]	; (8005de4 <HAL_GPIO_Init+0x330>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d031      	beq.n	8005cee <HAL_GPIO_Init+0x23a>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a56      	ldr	r2, [pc, #344]	; (8005de8 <HAL_GPIO_Init+0x334>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d02b      	beq.n	8005cea <HAL_GPIO_Init+0x236>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a55      	ldr	r2, [pc, #340]	; (8005dec <HAL_GPIO_Init+0x338>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d025      	beq.n	8005ce6 <HAL_GPIO_Init+0x232>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a54      	ldr	r2, [pc, #336]	; (8005df0 <HAL_GPIO_Init+0x33c>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d01f      	beq.n	8005ce2 <HAL_GPIO_Init+0x22e>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a53      	ldr	r2, [pc, #332]	; (8005df4 <HAL_GPIO_Init+0x340>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d019      	beq.n	8005cde <HAL_GPIO_Init+0x22a>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a52      	ldr	r2, [pc, #328]	; (8005df8 <HAL_GPIO_Init+0x344>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d013      	beq.n	8005cda <HAL_GPIO_Init+0x226>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a51      	ldr	r2, [pc, #324]	; (8005dfc <HAL_GPIO_Init+0x348>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d00d      	beq.n	8005cd6 <HAL_GPIO_Init+0x222>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a50      	ldr	r2, [pc, #320]	; (8005e00 <HAL_GPIO_Init+0x34c>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d007      	beq.n	8005cd2 <HAL_GPIO_Init+0x21e>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a4f      	ldr	r2, [pc, #316]	; (8005e04 <HAL_GPIO_Init+0x350>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d101      	bne.n	8005cce <HAL_GPIO_Init+0x21a>
 8005cca:	2309      	movs	r3, #9
 8005ccc:	e012      	b.n	8005cf4 <HAL_GPIO_Init+0x240>
 8005cce:	230a      	movs	r3, #10
 8005cd0:	e010      	b.n	8005cf4 <HAL_GPIO_Init+0x240>
 8005cd2:	2308      	movs	r3, #8
 8005cd4:	e00e      	b.n	8005cf4 <HAL_GPIO_Init+0x240>
 8005cd6:	2307      	movs	r3, #7
 8005cd8:	e00c      	b.n	8005cf4 <HAL_GPIO_Init+0x240>
 8005cda:	2306      	movs	r3, #6
 8005cdc:	e00a      	b.n	8005cf4 <HAL_GPIO_Init+0x240>
 8005cde:	2305      	movs	r3, #5
 8005ce0:	e008      	b.n	8005cf4 <HAL_GPIO_Init+0x240>
 8005ce2:	2304      	movs	r3, #4
 8005ce4:	e006      	b.n	8005cf4 <HAL_GPIO_Init+0x240>
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e004      	b.n	8005cf4 <HAL_GPIO_Init+0x240>
 8005cea:	2302      	movs	r3, #2
 8005cec:	e002      	b.n	8005cf4 <HAL_GPIO_Init+0x240>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e000      	b.n	8005cf4 <HAL_GPIO_Init+0x240>
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	69fa      	ldr	r2, [r7, #28]
 8005cf6:	f002 0203 	and.w	r2, r2, #3
 8005cfa:	0092      	lsls	r2, r2, #2
 8005cfc:	4093      	lsls	r3, r2
 8005cfe:	69ba      	ldr	r2, [r7, #24]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005d04:	4935      	ldr	r1, [pc, #212]	; (8005ddc <HAL_GPIO_Init+0x328>)
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	089b      	lsrs	r3, r3, #2
 8005d0a:	3302      	adds	r3, #2
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005d12:	4b3d      	ldr	r3, [pc, #244]	; (8005e08 <HAL_GPIO_Init+0x354>)
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	43db      	mvns	r3, r3
 8005d1c:	69ba      	ldr	r2, [r7, #24]
 8005d1e:	4013      	ands	r3, r2
 8005d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005d2e:	69ba      	ldr	r2, [r7, #24]
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005d36:	4a34      	ldr	r2, [pc, #208]	; (8005e08 <HAL_GPIO_Init+0x354>)
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005d3c:	4b32      	ldr	r3, [pc, #200]	; (8005e08 <HAL_GPIO_Init+0x354>)
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	43db      	mvns	r3, r3
 8005d46:	69ba      	ldr	r2, [r7, #24]
 8005d48:	4013      	ands	r3, r2
 8005d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d003      	beq.n	8005d60 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005d58:	69ba      	ldr	r2, [r7, #24]
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d60:	4a29      	ldr	r2, [pc, #164]	; (8005e08 <HAL_GPIO_Init+0x354>)
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005d66:	4b28      	ldr	r3, [pc, #160]	; (8005e08 <HAL_GPIO_Init+0x354>)
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	43db      	mvns	r3, r3
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	4013      	ands	r3, r2
 8005d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d003      	beq.n	8005d8a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005d82:	69ba      	ldr	r2, [r7, #24]
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d8a:	4a1f      	ldr	r2, [pc, #124]	; (8005e08 <HAL_GPIO_Init+0x354>)
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d90:	4b1d      	ldr	r3, [pc, #116]	; (8005e08 <HAL_GPIO_Init+0x354>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	43db      	mvns	r3, r3
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d003      	beq.n	8005db4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005db4:	4a14      	ldr	r2, [pc, #80]	; (8005e08 <HAL_GPIO_Init+0x354>)
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	61fb      	str	r3, [r7, #28]
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	2b0f      	cmp	r3, #15
 8005dc4:	f67f ae86 	bls.w	8005ad4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005dc8:	bf00      	nop
 8005dca:	bf00      	nop
 8005dcc:	3724      	adds	r7, #36	; 0x24
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	40023800 	.word	0x40023800
 8005ddc:	40013800 	.word	0x40013800
 8005de0:	40020000 	.word	0x40020000
 8005de4:	40020400 	.word	0x40020400
 8005de8:	40020800 	.word	0x40020800
 8005dec:	40020c00 	.word	0x40020c00
 8005df0:	40021000 	.word	0x40021000
 8005df4:	40021400 	.word	0x40021400
 8005df8:	40021800 	.word	0x40021800
 8005dfc:	40021c00 	.word	0x40021c00
 8005e00:	40022000 	.word	0x40022000
 8005e04:	40022400 	.word	0x40022400
 8005e08:	40013c00 	.word	0x40013c00

08005e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	460b      	mov	r3, r1
 8005e16:	807b      	strh	r3, [r7, #2]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e1c:	787b      	ldrb	r3, [r7, #1]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d003      	beq.n	8005e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e22:	887a      	ldrh	r2, [r7, #2]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005e28:	e003      	b.n	8005e32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005e2a:	887b      	ldrh	r3, [r7, #2]
 8005e2c:	041a      	lsls	r2, r3, #16
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	619a      	str	r2, [r3, #24]
}
 8005e32:	bf00      	nop
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
	...

08005e40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e07f      	b.n	8005f52 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d106      	bne.n	8005e6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7fd f8fc 	bl	8003064 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2224      	movs	r2, #36	; 0x24
 8005e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f022 0201 	bic.w	r2, r2, #1
 8005e82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005e90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ea0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d107      	bne.n	8005eba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	689a      	ldr	r2, [r3, #8]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005eb6:	609a      	str	r2, [r3, #8]
 8005eb8:	e006      	b.n	8005ec8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	689a      	ldr	r2, [r3, #8]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005ec6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d104      	bne.n	8005eda <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ed8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	6859      	ldr	r1, [r3, #4]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	4b1d      	ldr	r3, [pc, #116]	; (8005f5c <HAL_I2C_Init+0x11c>)
 8005ee6:	430b      	orrs	r3, r1
 8005ee8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68da      	ldr	r2, [r3, #12]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ef8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	691a      	ldr	r2, [r3, #16]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	430a      	orrs	r2, r1
 8005f12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	69d9      	ldr	r1, [r3, #28]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a1a      	ldr	r2, [r3, #32]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	430a      	orrs	r2, r1
 8005f22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f042 0201 	orr.w	r2, r2, #1
 8005f32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	02008000 	.word	0x02008000

08005f60 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b088      	sub	sp, #32
 8005f64:	af02      	add	r7, sp, #8
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	607a      	str	r2, [r7, #4]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	817b      	strh	r3, [r7, #10]
 8005f70:	4613      	mov	r3, r2
 8005f72:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	2b20      	cmp	r3, #32
 8005f7e:	f040 80da 	bne.w	8006136 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d101      	bne.n	8005f90 <HAL_I2C_Master_Transmit+0x30>
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	e0d3      	b.n	8006138 <HAL_I2C_Master_Transmit+0x1d8>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f98:	f7fe fb90 	bl	80046bc <HAL_GetTick>
 8005f9c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	2319      	movs	r3, #25
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f000 f8f0 	bl	8006190 <I2C_WaitOnFlagUntilTimeout>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e0be      	b.n	8006138 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2221      	movs	r2, #33	; 0x21
 8005fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2210      	movs	r2, #16
 8005fc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	893a      	ldrh	r2, [r7, #8]
 8005fda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	2bff      	cmp	r3, #255	; 0xff
 8005fea:	d90e      	bls.n	800600a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	22ff      	movs	r2, #255	; 0xff
 8005ff0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ff6:	b2da      	uxtb	r2, r3
 8005ff8:	8979      	ldrh	r1, [r7, #10]
 8005ffa:	4b51      	ldr	r3, [pc, #324]	; (8006140 <HAL_I2C_Master_Transmit+0x1e0>)
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f000 fa60 	bl	80064c8 <I2C_TransferConfig>
 8006008:	e06c      	b.n	80060e4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800600e:	b29a      	uxth	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006018:	b2da      	uxtb	r2, r3
 800601a:	8979      	ldrh	r1, [r7, #10]
 800601c:	4b48      	ldr	r3, [pc, #288]	; (8006140 <HAL_I2C_Master_Transmit+0x1e0>)
 800601e:	9300      	str	r3, [sp, #0]
 8006020:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 fa4f 	bl	80064c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800602a:	e05b      	b.n	80060e4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	6a39      	ldr	r1, [r7, #32]
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f000 f8ed 	bl	8006210 <I2C_WaitOnTXISFlagUntilTimeout>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d001      	beq.n	8006040 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e07b      	b.n	8006138 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006044:	781a      	ldrb	r2, [r3, #0]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	1c5a      	adds	r2, r3, #1
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800605a:	b29b      	uxth	r3, r3
 800605c:	3b01      	subs	r3, #1
 800605e:	b29a      	uxth	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006068:	3b01      	subs	r3, #1
 800606a:	b29a      	uxth	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006074:	b29b      	uxth	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d034      	beq.n	80060e4 <HAL_I2C_Master_Transmit+0x184>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800607e:	2b00      	cmp	r3, #0
 8006080:	d130      	bne.n	80060e4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	6a3b      	ldr	r3, [r7, #32]
 8006088:	2200      	movs	r2, #0
 800608a:	2180      	movs	r1, #128	; 0x80
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f000 f87f 	bl	8006190 <I2C_WaitOnFlagUntilTimeout>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d001      	beq.n	800609c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e04d      	b.n	8006138 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	2bff      	cmp	r3, #255	; 0xff
 80060a4:	d90e      	bls.n	80060c4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	22ff      	movs	r2, #255	; 0xff
 80060aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b0:	b2da      	uxtb	r2, r3
 80060b2:	8979      	ldrh	r1, [r7, #10]
 80060b4:	2300      	movs	r3, #0
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f000 fa03 	bl	80064c8 <I2C_TransferConfig>
 80060c2:	e00f      	b.n	80060e4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060d2:	b2da      	uxtb	r2, r3
 80060d4:	8979      	ldrh	r1, [r7, #10]
 80060d6:	2300      	movs	r3, #0
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f000 f9f2 	bl	80064c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d19e      	bne.n	800602c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	6a39      	ldr	r1, [r7, #32]
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f000 f8cc 	bl	8006290 <I2C_WaitOnSTOPFlagUntilTimeout>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e01a      	b.n	8006138 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2220      	movs	r2, #32
 8006108:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6859      	ldr	r1, [r3, #4]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	4b0b      	ldr	r3, [pc, #44]	; (8006144 <HAL_I2C_Master_Transmit+0x1e4>)
 8006116:	400b      	ands	r3, r1
 8006118:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2220      	movs	r2, #32
 800611e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006132:	2300      	movs	r3, #0
 8006134:	e000      	b.n	8006138 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006136:	2302      	movs	r3, #2
  }
}
 8006138:	4618      	mov	r0, r3
 800613a:	3718      	adds	r7, #24
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	80002000 	.word	0x80002000
 8006144:	fe00e800 	.word	0xfe00e800

08006148 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	2b02      	cmp	r3, #2
 800615c:	d103      	bne.n	8006166 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2200      	movs	r2, #0
 8006164:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	2b01      	cmp	r3, #1
 8006172:	d007      	beq.n	8006184 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	699a      	ldr	r2, [r3, #24]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f042 0201 	orr.w	r2, r2, #1
 8006182:	619a      	str	r2, [r3, #24]
  }
}
 8006184:	bf00      	nop
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	603b      	str	r3, [r7, #0]
 800619c:	4613      	mov	r3, r2
 800619e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061a0:	e022      	b.n	80061e8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a8:	d01e      	beq.n	80061e8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061aa:	f7fe fa87 	bl	80046bc <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d302      	bcc.n	80061c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d113      	bne.n	80061e8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c4:	f043 0220 	orr.w	r2, r3, #32
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2220      	movs	r2, #32
 80061d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e00f      	b.n	8006208 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	699a      	ldr	r2, [r3, #24]
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	4013      	ands	r3, r2
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	bf0c      	ite	eq
 80061f8:	2301      	moveq	r3, #1
 80061fa:	2300      	movne	r3, #0
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	461a      	mov	r2, r3
 8006200:	79fb      	ldrb	r3, [r7, #7]
 8006202:	429a      	cmp	r2, r3
 8006204:	d0cd      	beq.n	80061a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800621c:	e02c      	b.n	8006278 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	68b9      	ldr	r1, [r7, #8]
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f000 f870 	bl	8006308 <I2C_IsErrorOccurred>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e02a      	b.n	8006288 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006238:	d01e      	beq.n	8006278 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800623a:	f7fe fa3f 	bl	80046bc <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	429a      	cmp	r2, r3
 8006248:	d302      	bcc.n	8006250 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d113      	bne.n	8006278 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006254:	f043 0220 	orr.w	r2, r3, #32
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2220      	movs	r2, #32
 8006260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e007      	b.n	8006288 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	f003 0302 	and.w	r3, r3, #2
 8006282:	2b02      	cmp	r3, #2
 8006284:	d1cb      	bne.n	800621e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800629c:	e028      	b.n	80062f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	68b9      	ldr	r1, [r7, #8]
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f000 f830 	bl	8006308 <I2C_IsErrorOccurred>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d001      	beq.n	80062b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e026      	b.n	8006300 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062b2:	f7fe fa03 	bl	80046bc <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d302      	bcc.n	80062c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d113      	bne.n	80062f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062cc:	f043 0220 	orr.w	r2, r3, #32
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2220      	movs	r2, #32
 80062d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e007      	b.n	8006300 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	f003 0320 	and.w	r3, r3, #32
 80062fa:	2b20      	cmp	r3, #32
 80062fc:	d1cf      	bne.n	800629e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b08a      	sub	sp, #40	; 0x28
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006314:	2300      	movs	r3, #0
 8006316:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006322:	2300      	movs	r3, #0
 8006324:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	f003 0310 	and.w	r3, r3, #16
 8006330:	2b00      	cmp	r3, #0
 8006332:	d068      	beq.n	8006406 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2210      	movs	r2, #16
 800633a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800633c:	e049      	b.n	80063d2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006344:	d045      	beq.n	80063d2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006346:	f7fe f9b9 	bl	80046bc <HAL_GetTick>
 800634a:	4602      	mov	r2, r0
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	68ba      	ldr	r2, [r7, #8]
 8006352:	429a      	cmp	r2, r3
 8006354:	d302      	bcc.n	800635c <I2C_IsErrorOccurred+0x54>
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d13a      	bne.n	80063d2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006366:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800636e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800637a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800637e:	d121      	bne.n	80063c4 <I2C_IsErrorOccurred+0xbc>
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006386:	d01d      	beq.n	80063c4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006388:	7cfb      	ldrb	r3, [r7, #19]
 800638a:	2b20      	cmp	r3, #32
 800638c:	d01a      	beq.n	80063c4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800639c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800639e:	f7fe f98d 	bl	80046bc <HAL_GetTick>
 80063a2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063a4:	e00e      	b.n	80063c4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80063a6:	f7fe f989 	bl	80046bc <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	2b19      	cmp	r3, #25
 80063b2:	d907      	bls.n	80063c4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80063b4:	6a3b      	ldr	r3, [r7, #32]
 80063b6:	f043 0320 	orr.w	r3, r3, #32
 80063ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80063c2:	e006      	b.n	80063d2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	f003 0320 	and.w	r3, r3, #32
 80063ce:	2b20      	cmp	r3, #32
 80063d0:	d1e9      	bne.n	80063a6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	f003 0320 	and.w	r3, r3, #32
 80063dc:	2b20      	cmp	r3, #32
 80063de:	d003      	beq.n	80063e8 <I2C_IsErrorOccurred+0xe0>
 80063e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d0aa      	beq.n	800633e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80063e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d103      	bne.n	80063f8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2220      	movs	r2, #32
 80063f6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80063f8:	6a3b      	ldr	r3, [r7, #32]
 80063fa:	f043 0304 	orr.w	r3, r3, #4
 80063fe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00b      	beq.n	8006430 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006418:	6a3b      	ldr	r3, [r7, #32]
 800641a:	f043 0301 	orr.w	r3, r3, #1
 800641e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006428:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00b      	beq.n	8006452 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800643a:	6a3b      	ldr	r3, [r7, #32]
 800643c:	f043 0308 	orr.w	r3, r3, #8
 8006440:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800644a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00b      	beq.n	8006474 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800645c:	6a3b      	ldr	r3, [r7, #32]
 800645e:	f043 0302 	orr.w	r3, r3, #2
 8006462:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f44f 7200 	mov.w	r2, #512	; 0x200
 800646c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006478:	2b00      	cmp	r3, #0
 800647a:	d01c      	beq.n	80064b6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f7ff fe63 	bl	8006148 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6859      	ldr	r1, [r3, #4]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	4b0d      	ldr	r3, [pc, #52]	; (80064c4 <I2C_IsErrorOccurred+0x1bc>)
 800648e:	400b      	ands	r3, r1
 8006490:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006496:	6a3b      	ldr	r3, [r7, #32]
 8006498:	431a      	orrs	r2, r3
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2220      	movs	r2, #32
 80064a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80064b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3728      	adds	r7, #40	; 0x28
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	fe00e800 	.word	0xfe00e800

080064c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b087      	sub	sp, #28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	607b      	str	r3, [r7, #4]
 80064d2:	460b      	mov	r3, r1
 80064d4:	817b      	strh	r3, [r7, #10]
 80064d6:	4613      	mov	r3, r2
 80064d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80064da:	897b      	ldrh	r3, [r7, #10]
 80064dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80064e0:	7a7b      	ldrb	r3, [r7, #9]
 80064e2:	041b      	lsls	r3, r3, #16
 80064e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80064e8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80064ee:	6a3b      	ldr	r3, [r7, #32]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064f6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	685a      	ldr	r2, [r3, #4]
 80064fe:	6a3b      	ldr	r3, [r7, #32]
 8006500:	0d5b      	lsrs	r3, r3, #21
 8006502:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006506:	4b08      	ldr	r3, [pc, #32]	; (8006528 <I2C_TransferConfig+0x60>)
 8006508:	430b      	orrs	r3, r1
 800650a:	43db      	mvns	r3, r3
 800650c:	ea02 0103 	and.w	r1, r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	430a      	orrs	r2, r1
 8006518:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800651a:	bf00      	nop
 800651c:	371c      	adds	r7, #28
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	03ff63ff 	.word	0x03ff63ff

0800652c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b20      	cmp	r3, #32
 8006540:	d138      	bne.n	80065b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006548:	2b01      	cmp	r3, #1
 800654a:	d101      	bne.n	8006550 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800654c:	2302      	movs	r3, #2
 800654e:	e032      	b.n	80065b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2224      	movs	r2, #36	; 0x24
 800655c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f022 0201 	bic.w	r2, r2, #1
 800656e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800657e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6819      	ldr	r1, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	683a      	ldr	r2, [r7, #0]
 800658c:	430a      	orrs	r2, r1
 800658e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f042 0201 	orr.w	r2, r2, #1
 800659e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2220      	movs	r2, #32
 80065a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80065b0:	2300      	movs	r3, #0
 80065b2:	e000      	b.n	80065b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80065b4:	2302      	movs	r3, #2
  }
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	370c      	adds	r7, #12
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr

080065c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80065c2:	b480      	push	{r7}
 80065c4:	b085      	sub	sp, #20
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
 80065ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b20      	cmp	r3, #32
 80065d6:	d139      	bne.n	800664c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d101      	bne.n	80065e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80065e2:	2302      	movs	r3, #2
 80065e4:	e033      	b.n	800664e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2224      	movs	r2, #36	; 0x24
 80065f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f022 0201 	bic.w	r2, r2, #1
 8006604:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006614:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	021b      	lsls	r3, r3, #8
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	4313      	orrs	r3, r2
 800661e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f042 0201 	orr.w	r2, r2, #1
 8006636:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2220      	movs	r2, #32
 800663c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006648:	2300      	movs	r3, #0
 800664a:	e000      	b.n	800664e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800664c:	2302      	movs	r3, #2
  }
}
 800664e:	4618      	mov	r0, r3
 8006650:	3714      	adds	r7, #20
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
	...

0800665c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800665c:	b480      	push	{r7}
 800665e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006660:	4b05      	ldr	r3, [pc, #20]	; (8006678 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a04      	ldr	r2, [pc, #16]	; (8006678 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800666a:	6013      	str	r3, [r2, #0]
}
 800666c:	bf00      	nop
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	40007000 	.word	0x40007000

0800667c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006682:	2300      	movs	r3, #0
 8006684:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006686:	4b23      	ldr	r3, [pc, #140]	; (8006714 <HAL_PWREx_EnableOverDrive+0x98>)
 8006688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668a:	4a22      	ldr	r2, [pc, #136]	; (8006714 <HAL_PWREx_EnableOverDrive+0x98>)
 800668c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006690:	6413      	str	r3, [r2, #64]	; 0x40
 8006692:	4b20      	ldr	r3, [pc, #128]	; (8006714 <HAL_PWREx_EnableOverDrive+0x98>)
 8006694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800669a:	603b      	str	r3, [r7, #0]
 800669c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800669e:	4b1e      	ldr	r3, [pc, #120]	; (8006718 <HAL_PWREx_EnableOverDrive+0x9c>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a1d      	ldr	r2, [pc, #116]	; (8006718 <HAL_PWREx_EnableOverDrive+0x9c>)
 80066a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066a8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80066aa:	f7fe f807 	bl	80046bc <HAL_GetTick>
 80066ae:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80066b0:	e009      	b.n	80066c6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80066b2:	f7fe f803 	bl	80046bc <HAL_GetTick>
 80066b6:	4602      	mov	r2, r0
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066c0:	d901      	bls.n	80066c6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e022      	b.n	800670c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80066c6:	4b14      	ldr	r3, [pc, #80]	; (8006718 <HAL_PWREx_EnableOverDrive+0x9c>)
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066d2:	d1ee      	bne.n	80066b2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80066d4:	4b10      	ldr	r3, [pc, #64]	; (8006718 <HAL_PWREx_EnableOverDrive+0x9c>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a0f      	ldr	r2, [pc, #60]	; (8006718 <HAL_PWREx_EnableOverDrive+0x9c>)
 80066da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80066e0:	f7fd ffec 	bl	80046bc <HAL_GetTick>
 80066e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80066e6:	e009      	b.n	80066fc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80066e8:	f7fd ffe8 	bl	80046bc <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066f6:	d901      	bls.n	80066fc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e007      	b.n	800670c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80066fc:	4b06      	ldr	r3, [pc, #24]	; (8006718 <HAL_PWREx_EnableOverDrive+0x9c>)
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006704:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006708:	d1ee      	bne.n	80066e8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	40023800 	.word	0x40023800
 8006718:	40007000 	.word	0x40007000

0800671c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b086      	sub	sp, #24
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006724:	2300      	movs	r3, #0
 8006726:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e291      	b.n	8006c56 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b00      	cmp	r3, #0
 800673c:	f000 8087 	beq.w	800684e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006740:	4b96      	ldr	r3, [pc, #600]	; (800699c <HAL_RCC_OscConfig+0x280>)
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	f003 030c 	and.w	r3, r3, #12
 8006748:	2b04      	cmp	r3, #4
 800674a:	d00c      	beq.n	8006766 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800674c:	4b93      	ldr	r3, [pc, #588]	; (800699c <HAL_RCC_OscConfig+0x280>)
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	f003 030c 	and.w	r3, r3, #12
 8006754:	2b08      	cmp	r3, #8
 8006756:	d112      	bne.n	800677e <HAL_RCC_OscConfig+0x62>
 8006758:	4b90      	ldr	r3, [pc, #576]	; (800699c <HAL_RCC_OscConfig+0x280>)
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006760:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006764:	d10b      	bne.n	800677e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006766:	4b8d      	ldr	r3, [pc, #564]	; (800699c <HAL_RCC_OscConfig+0x280>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d06c      	beq.n	800684c <HAL_RCC_OscConfig+0x130>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d168      	bne.n	800684c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e26b      	b.n	8006c56 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006786:	d106      	bne.n	8006796 <HAL_RCC_OscConfig+0x7a>
 8006788:	4b84      	ldr	r3, [pc, #528]	; (800699c <HAL_RCC_OscConfig+0x280>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a83      	ldr	r2, [pc, #524]	; (800699c <HAL_RCC_OscConfig+0x280>)
 800678e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006792:	6013      	str	r3, [r2, #0]
 8006794:	e02e      	b.n	80067f4 <HAL_RCC_OscConfig+0xd8>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10c      	bne.n	80067b8 <HAL_RCC_OscConfig+0x9c>
 800679e:	4b7f      	ldr	r3, [pc, #508]	; (800699c <HAL_RCC_OscConfig+0x280>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a7e      	ldr	r2, [pc, #504]	; (800699c <HAL_RCC_OscConfig+0x280>)
 80067a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067a8:	6013      	str	r3, [r2, #0]
 80067aa:	4b7c      	ldr	r3, [pc, #496]	; (800699c <HAL_RCC_OscConfig+0x280>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a7b      	ldr	r2, [pc, #492]	; (800699c <HAL_RCC_OscConfig+0x280>)
 80067b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067b4:	6013      	str	r3, [r2, #0]
 80067b6:	e01d      	b.n	80067f4 <HAL_RCC_OscConfig+0xd8>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067c0:	d10c      	bne.n	80067dc <HAL_RCC_OscConfig+0xc0>
 80067c2:	4b76      	ldr	r3, [pc, #472]	; (800699c <HAL_RCC_OscConfig+0x280>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a75      	ldr	r2, [pc, #468]	; (800699c <HAL_RCC_OscConfig+0x280>)
 80067c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067cc:	6013      	str	r3, [r2, #0]
 80067ce:	4b73      	ldr	r3, [pc, #460]	; (800699c <HAL_RCC_OscConfig+0x280>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a72      	ldr	r2, [pc, #456]	; (800699c <HAL_RCC_OscConfig+0x280>)
 80067d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067d8:	6013      	str	r3, [r2, #0]
 80067da:	e00b      	b.n	80067f4 <HAL_RCC_OscConfig+0xd8>
 80067dc:	4b6f      	ldr	r3, [pc, #444]	; (800699c <HAL_RCC_OscConfig+0x280>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a6e      	ldr	r2, [pc, #440]	; (800699c <HAL_RCC_OscConfig+0x280>)
 80067e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067e6:	6013      	str	r3, [r2, #0]
 80067e8:	4b6c      	ldr	r3, [pc, #432]	; (800699c <HAL_RCC_OscConfig+0x280>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a6b      	ldr	r2, [pc, #428]	; (800699c <HAL_RCC_OscConfig+0x280>)
 80067ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d013      	beq.n	8006824 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067fc:	f7fd ff5e 	bl	80046bc <HAL_GetTick>
 8006800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006802:	e008      	b.n	8006816 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006804:	f7fd ff5a 	bl	80046bc <HAL_GetTick>
 8006808:	4602      	mov	r2, r0
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	2b64      	cmp	r3, #100	; 0x64
 8006810:	d901      	bls.n	8006816 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e21f      	b.n	8006c56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006816:	4b61      	ldr	r3, [pc, #388]	; (800699c <HAL_RCC_OscConfig+0x280>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d0f0      	beq.n	8006804 <HAL_RCC_OscConfig+0xe8>
 8006822:	e014      	b.n	800684e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006824:	f7fd ff4a 	bl	80046bc <HAL_GetTick>
 8006828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800682a:	e008      	b.n	800683e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800682c:	f7fd ff46 	bl	80046bc <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	2b64      	cmp	r3, #100	; 0x64
 8006838:	d901      	bls.n	800683e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e20b      	b.n	8006c56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800683e:	4b57      	ldr	r3, [pc, #348]	; (800699c <HAL_RCC_OscConfig+0x280>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1f0      	bne.n	800682c <HAL_RCC_OscConfig+0x110>
 800684a:	e000      	b.n	800684e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800684c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0302 	and.w	r3, r3, #2
 8006856:	2b00      	cmp	r3, #0
 8006858:	d069      	beq.n	800692e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800685a:	4b50      	ldr	r3, [pc, #320]	; (800699c <HAL_RCC_OscConfig+0x280>)
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f003 030c 	and.w	r3, r3, #12
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00b      	beq.n	800687e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006866:	4b4d      	ldr	r3, [pc, #308]	; (800699c <HAL_RCC_OscConfig+0x280>)
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f003 030c 	and.w	r3, r3, #12
 800686e:	2b08      	cmp	r3, #8
 8006870:	d11c      	bne.n	80068ac <HAL_RCC_OscConfig+0x190>
 8006872:	4b4a      	ldr	r3, [pc, #296]	; (800699c <HAL_RCC_OscConfig+0x280>)
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d116      	bne.n	80068ac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800687e:	4b47      	ldr	r3, [pc, #284]	; (800699c <HAL_RCC_OscConfig+0x280>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b00      	cmp	r3, #0
 8006888:	d005      	beq.n	8006896 <HAL_RCC_OscConfig+0x17a>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d001      	beq.n	8006896 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e1df      	b.n	8006c56 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006896:	4b41      	ldr	r3, [pc, #260]	; (800699c <HAL_RCC_OscConfig+0x280>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	00db      	lsls	r3, r3, #3
 80068a4:	493d      	ldr	r1, [pc, #244]	; (800699c <HAL_RCC_OscConfig+0x280>)
 80068a6:	4313      	orrs	r3, r2
 80068a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068aa:	e040      	b.n	800692e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d023      	beq.n	80068fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068b4:	4b39      	ldr	r3, [pc, #228]	; (800699c <HAL_RCC_OscConfig+0x280>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a38      	ldr	r2, [pc, #224]	; (800699c <HAL_RCC_OscConfig+0x280>)
 80068ba:	f043 0301 	orr.w	r3, r3, #1
 80068be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c0:	f7fd fefc 	bl	80046bc <HAL_GetTick>
 80068c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068c6:	e008      	b.n	80068da <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068c8:	f7fd fef8 	bl	80046bc <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d901      	bls.n	80068da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e1bd      	b.n	8006c56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068da:	4b30      	ldr	r3, [pc, #192]	; (800699c <HAL_RCC_OscConfig+0x280>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d0f0      	beq.n	80068c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068e6:	4b2d      	ldr	r3, [pc, #180]	; (800699c <HAL_RCC_OscConfig+0x280>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	00db      	lsls	r3, r3, #3
 80068f4:	4929      	ldr	r1, [pc, #164]	; (800699c <HAL_RCC_OscConfig+0x280>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	600b      	str	r3, [r1, #0]
 80068fa:	e018      	b.n	800692e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068fc:	4b27      	ldr	r3, [pc, #156]	; (800699c <HAL_RCC_OscConfig+0x280>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a26      	ldr	r2, [pc, #152]	; (800699c <HAL_RCC_OscConfig+0x280>)
 8006902:	f023 0301 	bic.w	r3, r3, #1
 8006906:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006908:	f7fd fed8 	bl	80046bc <HAL_GetTick>
 800690c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800690e:	e008      	b.n	8006922 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006910:	f7fd fed4 	bl	80046bc <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	2b02      	cmp	r3, #2
 800691c:	d901      	bls.n	8006922 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e199      	b.n	8006c56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006922:	4b1e      	ldr	r3, [pc, #120]	; (800699c <HAL_RCC_OscConfig+0x280>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1f0      	bne.n	8006910 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0308 	and.w	r3, r3, #8
 8006936:	2b00      	cmp	r3, #0
 8006938:	d038      	beq.n	80069ac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	695b      	ldr	r3, [r3, #20]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d019      	beq.n	8006976 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006942:	4b16      	ldr	r3, [pc, #88]	; (800699c <HAL_RCC_OscConfig+0x280>)
 8006944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006946:	4a15      	ldr	r2, [pc, #84]	; (800699c <HAL_RCC_OscConfig+0x280>)
 8006948:	f043 0301 	orr.w	r3, r3, #1
 800694c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800694e:	f7fd feb5 	bl	80046bc <HAL_GetTick>
 8006952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006954:	e008      	b.n	8006968 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006956:	f7fd feb1 	bl	80046bc <HAL_GetTick>
 800695a:	4602      	mov	r2, r0
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	2b02      	cmp	r3, #2
 8006962:	d901      	bls.n	8006968 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e176      	b.n	8006c56 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006968:	4b0c      	ldr	r3, [pc, #48]	; (800699c <HAL_RCC_OscConfig+0x280>)
 800696a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	2b00      	cmp	r3, #0
 8006972:	d0f0      	beq.n	8006956 <HAL_RCC_OscConfig+0x23a>
 8006974:	e01a      	b.n	80069ac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006976:	4b09      	ldr	r3, [pc, #36]	; (800699c <HAL_RCC_OscConfig+0x280>)
 8006978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800697a:	4a08      	ldr	r2, [pc, #32]	; (800699c <HAL_RCC_OscConfig+0x280>)
 800697c:	f023 0301 	bic.w	r3, r3, #1
 8006980:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006982:	f7fd fe9b 	bl	80046bc <HAL_GetTick>
 8006986:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006988:	e00a      	b.n	80069a0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800698a:	f7fd fe97 	bl	80046bc <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	2b02      	cmp	r3, #2
 8006996:	d903      	bls.n	80069a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e15c      	b.n	8006c56 <HAL_RCC_OscConfig+0x53a>
 800699c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069a0:	4b91      	ldr	r3, [pc, #580]	; (8006be8 <HAL_RCC_OscConfig+0x4cc>)
 80069a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069a4:	f003 0302 	and.w	r3, r3, #2
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1ee      	bne.n	800698a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0304 	and.w	r3, r3, #4
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f000 80a4 	beq.w	8006b02 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069ba:	4b8b      	ldr	r3, [pc, #556]	; (8006be8 <HAL_RCC_OscConfig+0x4cc>)
 80069bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d10d      	bne.n	80069e2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80069c6:	4b88      	ldr	r3, [pc, #544]	; (8006be8 <HAL_RCC_OscConfig+0x4cc>)
 80069c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ca:	4a87      	ldr	r2, [pc, #540]	; (8006be8 <HAL_RCC_OscConfig+0x4cc>)
 80069cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069d0:	6413      	str	r3, [r2, #64]	; 0x40
 80069d2:	4b85      	ldr	r3, [pc, #532]	; (8006be8 <HAL_RCC_OscConfig+0x4cc>)
 80069d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069da:	60bb      	str	r3, [r7, #8]
 80069dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069de:	2301      	movs	r3, #1
 80069e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069e2:	4b82      	ldr	r3, [pc, #520]	; (8006bec <HAL_RCC_OscConfig+0x4d0>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d118      	bne.n	8006a20 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80069ee:	4b7f      	ldr	r3, [pc, #508]	; (8006bec <HAL_RCC_OscConfig+0x4d0>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a7e      	ldr	r2, [pc, #504]	; (8006bec <HAL_RCC_OscConfig+0x4d0>)
 80069f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069fa:	f7fd fe5f 	bl	80046bc <HAL_GetTick>
 80069fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a00:	e008      	b.n	8006a14 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a02:	f7fd fe5b 	bl	80046bc <HAL_GetTick>
 8006a06:	4602      	mov	r2, r0
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	2b64      	cmp	r3, #100	; 0x64
 8006a0e:	d901      	bls.n	8006a14 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e120      	b.n	8006c56 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a14:	4b75      	ldr	r3, [pc, #468]	; (8006bec <HAL_RCC_OscConfig+0x4d0>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d0f0      	beq.n	8006a02 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d106      	bne.n	8006a36 <HAL_RCC_OscConfig+0x31a>
 8006a28:	4b6f      	ldr	r3, [pc, #444]	; (8006be8 <HAL_RCC_OscConfig+0x4cc>)
 8006a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a2c:	4a6e      	ldr	r2, [pc, #440]	; (8006be8 <HAL_RCC_OscConfig+0x4cc>)
 8006a2e:	f043 0301 	orr.w	r3, r3, #1
 8006a32:	6713      	str	r3, [r2, #112]	; 0x70
 8006a34:	e02d      	b.n	8006a92 <HAL_RCC_OscConfig+0x376>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10c      	bne.n	8006a58 <HAL_RCC_OscConfig+0x33c>
 8006a3e:	4b6a      	ldr	r3, [pc, #424]	; (8006be8 <HAL_RCC_OscConfig+0x4cc>)
 8006a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a42:	4a69      	ldr	r2, [pc, #420]	; (8006be8 <HAL_RCC_OscConfig+0x4cc>)
 8006a44:	f023 0301 	bic.w	r3, r3, #1
 8006a48:	6713      	str	r3, [r2, #112]	; 0x70
 8006a4a:	4b67      	ldr	r3, [pc, #412]	; (8006be8 <HAL_RCC_OscConfig+0x4cc>)
 8006a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a4e:	4a66      	ldr	r2, [pc, #408]	; (8006be8 <HAL_RCC_OscConfig+0x4cc>)
 8006a50:	f023 0304 	bic.w	r3, r3, #4
 8006a54:	6713      	str	r3, [r2, #112]	; 0x70
 8006a56:	e01c      	b.n	8006a92 <HAL_RCC_OscConfig+0x376>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	2b05      	cmp	r3, #5
 8006a5e:	d10c      	bne.n	8006a7a <HAL_RCC_OscConfig+0x35e>
 8006a60:	4b61      	ldr	r3, [pc, #388]	; (8006be8 <HAL_RCC_OscConfig+0x4cc>)
 8006a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a64:	4a60      	ldr	r2, [pc, #384]	; (8006be8 <HAL_RCC_OscConfig+0x4cc>)
 8006a66:	f043 0304 	orr.w	r3, r3, #4
 8006a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8006a6c:	4b5e      	ldr	r3, [pc, #376]	; (8006be8 <HAL_RCC_OscConfig+0x4cc>)
 8006a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a70:	4a5d      	ldr	r2, [pc, #372]	; (8006be8 <HAL_RCC_OscConfig+0x4cc>)
 8006a72:	f043 0301 	orr.w	r3, r3, #1
 8006a76:	6713      	str	r3, [r2, #112]	; 0x70
 8006a78:	e00b      	b.n	8006a92 <HAL_RCC_OscConfig+0x376>
 8006a7a:	4b5b      	ldr	r3, [pc, #364]	; (8006be8 <HAL_RCC_OscConfig+0x4cc>)
 8006a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a7e:	4a5a      	ldr	r2, [pc, #360]	; (8006be8 <HAL_RCC_OscConfig+0x4cc>)
 8006a80:	f023 0301 	bic.w	r3, r3, #1
 8006a84:	6713      	str	r3, [r2, #112]	; 0x70
 8006a86:	4b58      	ldr	r3, [pc, #352]	; (8006be8 <HAL_RCC_OscConfig+0x4cc>)
 8006a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a8a:	4a57      	ldr	r2, [pc, #348]	; (8006be8 <HAL_RCC_OscConfig+0x4cc>)
 8006a8c:	f023 0304 	bic.w	r3, r3, #4
 8006a90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d015      	beq.n	8006ac6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a9a:	f7fd fe0f 	bl	80046bc <HAL_GetTick>
 8006a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006aa0:	e00a      	b.n	8006ab8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aa2:	f7fd fe0b 	bl	80046bc <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d901      	bls.n	8006ab8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	e0ce      	b.n	8006c56 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ab8:	4b4b      	ldr	r3, [pc, #300]	; (8006be8 <HAL_RCC_OscConfig+0x4cc>)
 8006aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006abc:	f003 0302 	and.w	r3, r3, #2
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d0ee      	beq.n	8006aa2 <HAL_RCC_OscConfig+0x386>
 8006ac4:	e014      	b.n	8006af0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ac6:	f7fd fdf9 	bl	80046bc <HAL_GetTick>
 8006aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006acc:	e00a      	b.n	8006ae4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ace:	f7fd fdf5 	bl	80046bc <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d901      	bls.n	8006ae4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e0b8      	b.n	8006c56 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ae4:	4b40      	ldr	r3, [pc, #256]	; (8006be8 <HAL_RCC_OscConfig+0x4cc>)
 8006ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae8:	f003 0302 	and.w	r3, r3, #2
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d1ee      	bne.n	8006ace <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006af0:	7dfb      	ldrb	r3, [r7, #23]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d105      	bne.n	8006b02 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006af6:	4b3c      	ldr	r3, [pc, #240]	; (8006be8 <HAL_RCC_OscConfig+0x4cc>)
 8006af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afa:	4a3b      	ldr	r2, [pc, #236]	; (8006be8 <HAL_RCC_OscConfig+0x4cc>)
 8006afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f000 80a4 	beq.w	8006c54 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b0c:	4b36      	ldr	r3, [pc, #216]	; (8006be8 <HAL_RCC_OscConfig+0x4cc>)
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	f003 030c 	and.w	r3, r3, #12
 8006b14:	2b08      	cmp	r3, #8
 8006b16:	d06b      	beq.n	8006bf0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d149      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b20:	4b31      	ldr	r3, [pc, #196]	; (8006be8 <HAL_RCC_OscConfig+0x4cc>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a30      	ldr	r2, [pc, #192]	; (8006be8 <HAL_RCC_OscConfig+0x4cc>)
 8006b26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b2c:	f7fd fdc6 	bl	80046bc <HAL_GetTick>
 8006b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b32:	e008      	b.n	8006b46 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b34:	f7fd fdc2 	bl	80046bc <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d901      	bls.n	8006b46 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e087      	b.n	8006c56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b46:	4b28      	ldr	r3, [pc, #160]	; (8006be8 <HAL_RCC_OscConfig+0x4cc>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1f0      	bne.n	8006b34 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	69da      	ldr	r2, [r3, #28]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	431a      	orrs	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b60:	019b      	lsls	r3, r3, #6
 8006b62:	431a      	orrs	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b68:	085b      	lsrs	r3, r3, #1
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	041b      	lsls	r3, r3, #16
 8006b6e:	431a      	orrs	r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b74:	061b      	lsls	r3, r3, #24
 8006b76:	4313      	orrs	r3, r2
 8006b78:	4a1b      	ldr	r2, [pc, #108]	; (8006be8 <HAL_RCC_OscConfig+0x4cc>)
 8006b7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b7e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b80:	4b19      	ldr	r3, [pc, #100]	; (8006be8 <HAL_RCC_OscConfig+0x4cc>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a18      	ldr	r2, [pc, #96]	; (8006be8 <HAL_RCC_OscConfig+0x4cc>)
 8006b86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b8c:	f7fd fd96 	bl	80046bc <HAL_GetTick>
 8006b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b92:	e008      	b.n	8006ba6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b94:	f7fd fd92 	bl	80046bc <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d901      	bls.n	8006ba6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e057      	b.n	8006c56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ba6:	4b10      	ldr	r3, [pc, #64]	; (8006be8 <HAL_RCC_OscConfig+0x4cc>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d0f0      	beq.n	8006b94 <HAL_RCC_OscConfig+0x478>
 8006bb2:	e04f      	b.n	8006c54 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bb4:	4b0c      	ldr	r3, [pc, #48]	; (8006be8 <HAL_RCC_OscConfig+0x4cc>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a0b      	ldr	r2, [pc, #44]	; (8006be8 <HAL_RCC_OscConfig+0x4cc>)
 8006bba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bc0:	f7fd fd7c 	bl	80046bc <HAL_GetTick>
 8006bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bc6:	e008      	b.n	8006bda <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bc8:	f7fd fd78 	bl	80046bc <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d901      	bls.n	8006bda <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e03d      	b.n	8006c56 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bda:	4b03      	ldr	r3, [pc, #12]	; (8006be8 <HAL_RCC_OscConfig+0x4cc>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1f0      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x4ac>
 8006be6:	e035      	b.n	8006c54 <HAL_RCC_OscConfig+0x538>
 8006be8:	40023800 	.word	0x40023800
 8006bec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006bf0:	4b1b      	ldr	r3, [pc, #108]	; (8006c60 <HAL_RCC_OscConfig+0x544>)
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d028      	beq.n	8006c50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d121      	bne.n	8006c50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d11a      	bne.n	8006c50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006c20:	4013      	ands	r3, r2
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c26:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d111      	bne.n	8006c50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c36:	085b      	lsrs	r3, r3, #1
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d107      	bne.n	8006c50 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d001      	beq.n	8006c54 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e000      	b.n	8006c56 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3718      	adds	r7, #24
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	40023800 	.word	0x40023800

08006c64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e0d0      	b.n	8006e1e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c7c:	4b6a      	ldr	r3, [pc, #424]	; (8006e28 <HAL_RCC_ClockConfig+0x1c4>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 030f 	and.w	r3, r3, #15
 8006c84:	683a      	ldr	r2, [r7, #0]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d910      	bls.n	8006cac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c8a:	4b67      	ldr	r3, [pc, #412]	; (8006e28 <HAL_RCC_ClockConfig+0x1c4>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f023 020f 	bic.w	r2, r3, #15
 8006c92:	4965      	ldr	r1, [pc, #404]	; (8006e28 <HAL_RCC_ClockConfig+0x1c4>)
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c9a:	4b63      	ldr	r3, [pc, #396]	; (8006e28 <HAL_RCC_ClockConfig+0x1c4>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 030f 	and.w	r3, r3, #15
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d001      	beq.n	8006cac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e0b8      	b.n	8006e1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0302 	and.w	r3, r3, #2
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d020      	beq.n	8006cfa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0304 	and.w	r3, r3, #4
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d005      	beq.n	8006cd0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006cc4:	4b59      	ldr	r3, [pc, #356]	; (8006e2c <HAL_RCC_ClockConfig+0x1c8>)
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	4a58      	ldr	r2, [pc, #352]	; (8006e2c <HAL_RCC_ClockConfig+0x1c8>)
 8006cca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006cce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0308 	and.w	r3, r3, #8
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d005      	beq.n	8006ce8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006cdc:	4b53      	ldr	r3, [pc, #332]	; (8006e2c <HAL_RCC_ClockConfig+0x1c8>)
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	4a52      	ldr	r2, [pc, #328]	; (8006e2c <HAL_RCC_ClockConfig+0x1c8>)
 8006ce2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006ce6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ce8:	4b50      	ldr	r3, [pc, #320]	; (8006e2c <HAL_RCC_ClockConfig+0x1c8>)
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	494d      	ldr	r1, [pc, #308]	; (8006e2c <HAL_RCC_ClockConfig+0x1c8>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d040      	beq.n	8006d88 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d107      	bne.n	8006d1e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d0e:	4b47      	ldr	r3, [pc, #284]	; (8006e2c <HAL_RCC_ClockConfig+0x1c8>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d115      	bne.n	8006d46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e07f      	b.n	8006e1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d107      	bne.n	8006d36 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d26:	4b41      	ldr	r3, [pc, #260]	; (8006e2c <HAL_RCC_ClockConfig+0x1c8>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d109      	bne.n	8006d46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e073      	b.n	8006e1e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d36:	4b3d      	ldr	r3, [pc, #244]	; (8006e2c <HAL_RCC_ClockConfig+0x1c8>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0302 	and.w	r3, r3, #2
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d101      	bne.n	8006d46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e06b      	b.n	8006e1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d46:	4b39      	ldr	r3, [pc, #228]	; (8006e2c <HAL_RCC_ClockConfig+0x1c8>)
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f023 0203 	bic.w	r2, r3, #3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	4936      	ldr	r1, [pc, #216]	; (8006e2c <HAL_RCC_ClockConfig+0x1c8>)
 8006d54:	4313      	orrs	r3, r2
 8006d56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d58:	f7fd fcb0 	bl	80046bc <HAL_GetTick>
 8006d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d5e:	e00a      	b.n	8006d76 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d60:	f7fd fcac 	bl	80046bc <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d901      	bls.n	8006d76 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e053      	b.n	8006e1e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d76:	4b2d      	ldr	r3, [pc, #180]	; (8006e2c <HAL_RCC_ClockConfig+0x1c8>)
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f003 020c 	and.w	r2, r3, #12
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d1eb      	bne.n	8006d60 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d88:	4b27      	ldr	r3, [pc, #156]	; (8006e28 <HAL_RCC_ClockConfig+0x1c4>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 030f 	and.w	r3, r3, #15
 8006d90:	683a      	ldr	r2, [r7, #0]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d210      	bcs.n	8006db8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d96:	4b24      	ldr	r3, [pc, #144]	; (8006e28 <HAL_RCC_ClockConfig+0x1c4>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f023 020f 	bic.w	r2, r3, #15
 8006d9e:	4922      	ldr	r1, [pc, #136]	; (8006e28 <HAL_RCC_ClockConfig+0x1c4>)
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006da6:	4b20      	ldr	r3, [pc, #128]	; (8006e28 <HAL_RCC_ClockConfig+0x1c4>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 030f 	and.w	r3, r3, #15
 8006dae:	683a      	ldr	r2, [r7, #0]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d001      	beq.n	8006db8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e032      	b.n	8006e1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0304 	and.w	r3, r3, #4
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d008      	beq.n	8006dd6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006dc4:	4b19      	ldr	r3, [pc, #100]	; (8006e2c <HAL_RCC_ClockConfig+0x1c8>)
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	4916      	ldr	r1, [pc, #88]	; (8006e2c <HAL_RCC_ClockConfig+0x1c8>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0308 	and.w	r3, r3, #8
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d009      	beq.n	8006df6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006de2:	4b12      	ldr	r3, [pc, #72]	; (8006e2c <HAL_RCC_ClockConfig+0x1c8>)
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	00db      	lsls	r3, r3, #3
 8006df0:	490e      	ldr	r1, [pc, #56]	; (8006e2c <HAL_RCC_ClockConfig+0x1c8>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006df6:	f000 f821 	bl	8006e3c <HAL_RCC_GetSysClockFreq>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	4b0b      	ldr	r3, [pc, #44]	; (8006e2c <HAL_RCC_ClockConfig+0x1c8>)
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	091b      	lsrs	r3, r3, #4
 8006e02:	f003 030f 	and.w	r3, r3, #15
 8006e06:	490a      	ldr	r1, [pc, #40]	; (8006e30 <HAL_RCC_ClockConfig+0x1cc>)
 8006e08:	5ccb      	ldrb	r3, [r1, r3]
 8006e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e0e:	4a09      	ldr	r2, [pc, #36]	; (8006e34 <HAL_RCC_ClockConfig+0x1d0>)
 8006e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006e12:	4b09      	ldr	r3, [pc, #36]	; (8006e38 <HAL_RCC_ClockConfig+0x1d4>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7fd fc0c 	bl	8004634 <HAL_InitTick>

  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	40023c00 	.word	0x40023c00
 8006e2c:	40023800 	.word	0x40023800
 8006e30:	0800ea90 	.word	0x0800ea90
 8006e34:	200000c4 	.word	0x200000c4
 8006e38:	200000c8 	.word	0x200000c8

08006e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e40:	b094      	sub	sp, #80	; 0x50
 8006e42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006e44:	2300      	movs	r3, #0
 8006e46:	647b      	str	r3, [r7, #68]	; 0x44
 8006e48:	2300      	movs	r3, #0
 8006e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8006e50:	2300      	movs	r3, #0
 8006e52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e54:	4b79      	ldr	r3, [pc, #484]	; (800703c <HAL_RCC_GetSysClockFreq+0x200>)
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f003 030c 	and.w	r3, r3, #12
 8006e5c:	2b08      	cmp	r3, #8
 8006e5e:	d00d      	beq.n	8006e7c <HAL_RCC_GetSysClockFreq+0x40>
 8006e60:	2b08      	cmp	r3, #8
 8006e62:	f200 80e1 	bhi.w	8007028 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d002      	beq.n	8006e70 <HAL_RCC_GetSysClockFreq+0x34>
 8006e6a:	2b04      	cmp	r3, #4
 8006e6c:	d003      	beq.n	8006e76 <HAL_RCC_GetSysClockFreq+0x3a>
 8006e6e:	e0db      	b.n	8007028 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e70:	4b73      	ldr	r3, [pc, #460]	; (8007040 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e74:	e0db      	b.n	800702e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e76:	4b73      	ldr	r3, [pc, #460]	; (8007044 <HAL_RCC_GetSysClockFreq+0x208>)
 8006e78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e7a:	e0d8      	b.n	800702e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e7c:	4b6f      	ldr	r3, [pc, #444]	; (800703c <HAL_RCC_GetSysClockFreq+0x200>)
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e84:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006e86:	4b6d      	ldr	r3, [pc, #436]	; (800703c <HAL_RCC_GetSysClockFreq+0x200>)
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d063      	beq.n	8006f5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e92:	4b6a      	ldr	r3, [pc, #424]	; (800703c <HAL_RCC_GetSysClockFreq+0x200>)
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	099b      	lsrs	r3, r3, #6
 8006e98:	2200      	movs	r2, #0
 8006e9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ea4:	633b      	str	r3, [r7, #48]	; 0x30
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	637b      	str	r3, [r7, #52]	; 0x34
 8006eaa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006eae:	4622      	mov	r2, r4
 8006eb0:	462b      	mov	r3, r5
 8006eb2:	f04f 0000 	mov.w	r0, #0
 8006eb6:	f04f 0100 	mov.w	r1, #0
 8006eba:	0159      	lsls	r1, r3, #5
 8006ebc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ec0:	0150      	lsls	r0, r2, #5
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	4621      	mov	r1, r4
 8006ec8:	1a51      	subs	r1, r2, r1
 8006eca:	6139      	str	r1, [r7, #16]
 8006ecc:	4629      	mov	r1, r5
 8006ece:	eb63 0301 	sbc.w	r3, r3, r1
 8006ed2:	617b      	str	r3, [r7, #20]
 8006ed4:	f04f 0200 	mov.w	r2, #0
 8006ed8:	f04f 0300 	mov.w	r3, #0
 8006edc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ee0:	4659      	mov	r1, fp
 8006ee2:	018b      	lsls	r3, r1, #6
 8006ee4:	4651      	mov	r1, sl
 8006ee6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006eea:	4651      	mov	r1, sl
 8006eec:	018a      	lsls	r2, r1, #6
 8006eee:	4651      	mov	r1, sl
 8006ef0:	ebb2 0801 	subs.w	r8, r2, r1
 8006ef4:	4659      	mov	r1, fp
 8006ef6:	eb63 0901 	sbc.w	r9, r3, r1
 8006efa:	f04f 0200 	mov.w	r2, #0
 8006efe:	f04f 0300 	mov.w	r3, #0
 8006f02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f0e:	4690      	mov	r8, r2
 8006f10:	4699      	mov	r9, r3
 8006f12:	4623      	mov	r3, r4
 8006f14:	eb18 0303 	adds.w	r3, r8, r3
 8006f18:	60bb      	str	r3, [r7, #8]
 8006f1a:	462b      	mov	r3, r5
 8006f1c:	eb49 0303 	adc.w	r3, r9, r3
 8006f20:	60fb      	str	r3, [r7, #12]
 8006f22:	f04f 0200 	mov.w	r2, #0
 8006f26:	f04f 0300 	mov.w	r3, #0
 8006f2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006f2e:	4629      	mov	r1, r5
 8006f30:	024b      	lsls	r3, r1, #9
 8006f32:	4621      	mov	r1, r4
 8006f34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006f38:	4621      	mov	r1, r4
 8006f3a:	024a      	lsls	r2, r1, #9
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	4619      	mov	r1, r3
 8006f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f42:	2200      	movs	r2, #0
 8006f44:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f4c:	f7f9 fe9e 	bl	8000c8c <__aeabi_uldivmod>
 8006f50:	4602      	mov	r2, r0
 8006f52:	460b      	mov	r3, r1
 8006f54:	4613      	mov	r3, r2
 8006f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f58:	e058      	b.n	800700c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f5a:	4b38      	ldr	r3, [pc, #224]	; (800703c <HAL_RCC_GetSysClockFreq+0x200>)
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	099b      	lsrs	r3, r3, #6
 8006f60:	2200      	movs	r2, #0
 8006f62:	4618      	mov	r0, r3
 8006f64:	4611      	mov	r1, r2
 8006f66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006f6a:	623b      	str	r3, [r7, #32]
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8006f70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006f74:	4642      	mov	r2, r8
 8006f76:	464b      	mov	r3, r9
 8006f78:	f04f 0000 	mov.w	r0, #0
 8006f7c:	f04f 0100 	mov.w	r1, #0
 8006f80:	0159      	lsls	r1, r3, #5
 8006f82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f86:	0150      	lsls	r0, r2, #5
 8006f88:	4602      	mov	r2, r0
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	4641      	mov	r1, r8
 8006f8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006f92:	4649      	mov	r1, r9
 8006f94:	eb63 0b01 	sbc.w	fp, r3, r1
 8006f98:	f04f 0200 	mov.w	r2, #0
 8006f9c:	f04f 0300 	mov.w	r3, #0
 8006fa0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006fa4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006fa8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006fac:	ebb2 040a 	subs.w	r4, r2, sl
 8006fb0:	eb63 050b 	sbc.w	r5, r3, fp
 8006fb4:	f04f 0200 	mov.w	r2, #0
 8006fb8:	f04f 0300 	mov.w	r3, #0
 8006fbc:	00eb      	lsls	r3, r5, #3
 8006fbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006fc2:	00e2      	lsls	r2, r4, #3
 8006fc4:	4614      	mov	r4, r2
 8006fc6:	461d      	mov	r5, r3
 8006fc8:	4643      	mov	r3, r8
 8006fca:	18e3      	adds	r3, r4, r3
 8006fcc:	603b      	str	r3, [r7, #0]
 8006fce:	464b      	mov	r3, r9
 8006fd0:	eb45 0303 	adc.w	r3, r5, r3
 8006fd4:	607b      	str	r3, [r7, #4]
 8006fd6:	f04f 0200 	mov.w	r2, #0
 8006fda:	f04f 0300 	mov.w	r3, #0
 8006fde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006fe2:	4629      	mov	r1, r5
 8006fe4:	028b      	lsls	r3, r1, #10
 8006fe6:	4621      	mov	r1, r4
 8006fe8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006fec:	4621      	mov	r1, r4
 8006fee:	028a      	lsls	r2, r1, #10
 8006ff0:	4610      	mov	r0, r2
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	61bb      	str	r3, [r7, #24]
 8006ffa:	61fa      	str	r2, [r7, #28]
 8006ffc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007000:	f7f9 fe44 	bl	8000c8c <__aeabi_uldivmod>
 8007004:	4602      	mov	r2, r0
 8007006:	460b      	mov	r3, r1
 8007008:	4613      	mov	r3, r2
 800700a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800700c:	4b0b      	ldr	r3, [pc, #44]	; (800703c <HAL_RCC_GetSysClockFreq+0x200>)
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	0c1b      	lsrs	r3, r3, #16
 8007012:	f003 0303 	and.w	r3, r3, #3
 8007016:	3301      	adds	r3, #1
 8007018:	005b      	lsls	r3, r3, #1
 800701a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800701c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800701e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007020:	fbb2 f3f3 	udiv	r3, r2, r3
 8007024:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007026:	e002      	b.n	800702e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007028:	4b05      	ldr	r3, [pc, #20]	; (8007040 <HAL_RCC_GetSysClockFreq+0x204>)
 800702a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800702c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800702e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007030:	4618      	mov	r0, r3
 8007032:	3750      	adds	r7, #80	; 0x50
 8007034:	46bd      	mov	sp, r7
 8007036:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800703a:	bf00      	nop
 800703c:	40023800 	.word	0x40023800
 8007040:	00f42400 	.word	0x00f42400
 8007044:	007a1200 	.word	0x007a1200

08007048 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007048:	b480      	push	{r7}
 800704a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800704c:	4b03      	ldr	r3, [pc, #12]	; (800705c <HAL_RCC_GetHCLKFreq+0x14>)
 800704e:	681b      	ldr	r3, [r3, #0]
}
 8007050:	4618      	mov	r0, r3
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	200000c4 	.word	0x200000c4

08007060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007064:	f7ff fff0 	bl	8007048 <HAL_RCC_GetHCLKFreq>
 8007068:	4602      	mov	r2, r0
 800706a:	4b05      	ldr	r3, [pc, #20]	; (8007080 <HAL_RCC_GetPCLK1Freq+0x20>)
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	0a9b      	lsrs	r3, r3, #10
 8007070:	f003 0307 	and.w	r3, r3, #7
 8007074:	4903      	ldr	r1, [pc, #12]	; (8007084 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007076:	5ccb      	ldrb	r3, [r1, r3]
 8007078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800707c:	4618      	mov	r0, r3
 800707e:	bd80      	pop	{r7, pc}
 8007080:	40023800 	.word	0x40023800
 8007084:	0800eaa0 	.word	0x0800eaa0

08007088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800708c:	f7ff ffdc 	bl	8007048 <HAL_RCC_GetHCLKFreq>
 8007090:	4602      	mov	r2, r0
 8007092:	4b05      	ldr	r3, [pc, #20]	; (80070a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	0b5b      	lsrs	r3, r3, #13
 8007098:	f003 0307 	and.w	r3, r3, #7
 800709c:	4903      	ldr	r1, [pc, #12]	; (80070ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800709e:	5ccb      	ldrb	r3, [r1, r3]
 80070a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	40023800 	.word	0x40023800
 80070ac:	0800eaa0 	.word	0x0800eaa0

080070b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b088      	sub	sp, #32
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80070b8:	2300      	movs	r3, #0
 80070ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80070bc:	2300      	movs	r3, #0
 80070be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80070c0:	2300      	movs	r3, #0
 80070c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80070c4:	2300      	movs	r3, #0
 80070c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80070c8:	2300      	movs	r3, #0
 80070ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0301 	and.w	r3, r3, #1
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d012      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80070d8:	4b69      	ldr	r3, [pc, #420]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	4a68      	ldr	r2, [pc, #416]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80070e2:	6093      	str	r3, [r2, #8]
 80070e4:	4b66      	ldr	r3, [pc, #408]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070e6:	689a      	ldr	r2, [r3, #8]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ec:	4964      	ldr	r1, [pc, #400]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070ee:	4313      	orrs	r3, r2
 80070f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d101      	bne.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80070fa:	2301      	movs	r3, #1
 80070fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d017      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800710a:	4b5d      	ldr	r3, [pc, #372]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800710c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007110:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007118:	4959      	ldr	r1, [pc, #356]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800711a:	4313      	orrs	r3, r2
 800711c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007124:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007128:	d101      	bne.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800712a:	2301      	movs	r3, #1
 800712c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007136:	2301      	movs	r3, #1
 8007138:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d017      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007146:	4b4e      	ldr	r3, [pc, #312]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800714c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007154:	494a      	ldr	r1, [pc, #296]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007156:	4313      	orrs	r3, r2
 8007158:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007160:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007164:	d101      	bne.n	800716a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007166:	2301      	movs	r3, #1
 8007168:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007172:	2301      	movs	r3, #1
 8007174:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800717e:	2b00      	cmp	r3, #0
 8007180:	d001      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007182:	2301      	movs	r3, #1
 8007184:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 0320 	and.w	r3, r3, #32
 800718e:	2b00      	cmp	r3, #0
 8007190:	f000 808b 	beq.w	80072aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007194:	4b3a      	ldr	r3, [pc, #232]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007198:	4a39      	ldr	r2, [pc, #228]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800719a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800719e:	6413      	str	r3, [r2, #64]	; 0x40
 80071a0:	4b37      	ldr	r3, [pc, #220]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071a8:	60bb      	str	r3, [r7, #8]
 80071aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80071ac:	4b35      	ldr	r3, [pc, #212]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a34      	ldr	r2, [pc, #208]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80071b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071b8:	f7fd fa80 	bl	80046bc <HAL_GetTick>
 80071bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80071be:	e008      	b.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071c0:	f7fd fa7c 	bl	80046bc <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	2b64      	cmp	r3, #100	; 0x64
 80071cc:	d901      	bls.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e357      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80071d2:	4b2c      	ldr	r3, [pc, #176]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d0f0      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80071de:	4b28      	ldr	r3, [pc, #160]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d035      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d02e      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071fc:	4b20      	ldr	r3, [pc, #128]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007204:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007206:	4b1e      	ldr	r3, [pc, #120]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800720a:	4a1d      	ldr	r2, [pc, #116]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800720c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007210:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007212:	4b1b      	ldr	r3, [pc, #108]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007216:	4a1a      	ldr	r2, [pc, #104]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800721c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800721e:	4a18      	ldr	r2, [pc, #96]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007224:	4b16      	ldr	r3, [pc, #88]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007228:	f003 0301 	and.w	r3, r3, #1
 800722c:	2b01      	cmp	r3, #1
 800722e:	d114      	bne.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007230:	f7fd fa44 	bl	80046bc <HAL_GetTick>
 8007234:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007236:	e00a      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007238:	f7fd fa40 	bl	80046bc <HAL_GetTick>
 800723c:	4602      	mov	r2, r0
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	1ad3      	subs	r3, r2, r3
 8007242:	f241 3288 	movw	r2, #5000	; 0x1388
 8007246:	4293      	cmp	r3, r2
 8007248:	d901      	bls.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800724a:	2303      	movs	r3, #3
 800724c:	e319      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800724e:	4b0c      	ldr	r3, [pc, #48]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007252:	f003 0302 	and.w	r3, r3, #2
 8007256:	2b00      	cmp	r3, #0
 8007258:	d0ee      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007262:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007266:	d111      	bne.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007268:	4b05      	ldr	r3, [pc, #20]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007274:	4b04      	ldr	r3, [pc, #16]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007276:	400b      	ands	r3, r1
 8007278:	4901      	ldr	r1, [pc, #4]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800727a:	4313      	orrs	r3, r2
 800727c:	608b      	str	r3, [r1, #8]
 800727e:	e00b      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007280:	40023800 	.word	0x40023800
 8007284:	40007000 	.word	0x40007000
 8007288:	0ffffcff 	.word	0x0ffffcff
 800728c:	4baa      	ldr	r3, [pc, #680]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	4aa9      	ldr	r2, [pc, #676]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007292:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007296:	6093      	str	r3, [r2, #8]
 8007298:	4ba7      	ldr	r3, [pc, #668]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800729a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072a4:	49a4      	ldr	r1, [pc, #656]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072a6:	4313      	orrs	r3, r2
 80072a8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 0310 	and.w	r3, r3, #16
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d010      	beq.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80072b6:	4ba0      	ldr	r3, [pc, #640]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072bc:	4a9e      	ldr	r2, [pc, #632]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80072c6:	4b9c      	ldr	r3, [pc, #624]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d0:	4999      	ldr	r1, [pc, #612]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00a      	beq.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80072e4:	4b94      	ldr	r3, [pc, #592]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072f2:	4991      	ldr	r1, [pc, #580]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00a      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007306:	4b8c      	ldr	r3, [pc, #560]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800730c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007314:	4988      	ldr	r1, [pc, #544]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007316:	4313      	orrs	r3, r2
 8007318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00a      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007328:	4b83      	ldr	r3, [pc, #524]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800732a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800732e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007336:	4980      	ldr	r1, [pc, #512]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007338:	4313      	orrs	r3, r2
 800733a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00a      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800734a:	4b7b      	ldr	r3, [pc, #492]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800734c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007350:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007358:	4977      	ldr	r1, [pc, #476]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800735a:	4313      	orrs	r3, r2
 800735c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00a      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800736c:	4b72      	ldr	r3, [pc, #456]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800736e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007372:	f023 0203 	bic.w	r2, r3, #3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800737a:	496f      	ldr	r1, [pc, #444]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800737c:	4313      	orrs	r3, r2
 800737e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00a      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800738e:	4b6a      	ldr	r3, [pc, #424]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007394:	f023 020c 	bic.w	r2, r3, #12
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800739c:	4966      	ldr	r1, [pc, #408]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800739e:	4313      	orrs	r3, r2
 80073a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00a      	beq.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80073b0:	4b61      	ldr	r3, [pc, #388]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073be:	495e      	ldr	r1, [pc, #376]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073c0:	4313      	orrs	r3, r2
 80073c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00a      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80073d2:	4b59      	ldr	r3, [pc, #356]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073e0:	4955      	ldr	r1, [pc, #340]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073e2:	4313      	orrs	r3, r2
 80073e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00a      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80073f4:	4b50      	ldr	r3, [pc, #320]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007402:	494d      	ldr	r1, [pc, #308]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007404:	4313      	orrs	r3, r2
 8007406:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00a      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007416:	4b48      	ldr	r3, [pc, #288]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800741c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007424:	4944      	ldr	r1, [pc, #272]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007426:	4313      	orrs	r3, r2
 8007428:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00a      	beq.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007438:	4b3f      	ldr	r3, [pc, #252]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800743a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800743e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007446:	493c      	ldr	r1, [pc, #240]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007448:	4313      	orrs	r3, r2
 800744a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00a      	beq.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800745a:	4b37      	ldr	r3, [pc, #220]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800745c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007460:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007468:	4933      	ldr	r1, [pc, #204]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800746a:	4313      	orrs	r3, r2
 800746c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00a      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800747c:	4b2e      	ldr	r3, [pc, #184]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800747e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007482:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800748a:	492b      	ldr	r1, [pc, #172]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800748c:	4313      	orrs	r3, r2
 800748e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d011      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800749e:	4b26      	ldr	r3, [pc, #152]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074ac:	4922      	ldr	r1, [pc, #136]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074ae:	4313      	orrs	r3, r2
 80074b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074bc:	d101      	bne.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80074be:	2301      	movs	r3, #1
 80074c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0308 	and.w	r3, r3, #8
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d001      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80074ce:	2301      	movs	r3, #1
 80074d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00a      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80074de:	4b16      	ldr	r3, [pc, #88]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074ec:	4912      	ldr	r1, [pc, #72]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074ee:	4313      	orrs	r3, r2
 80074f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00b      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007500:	4b0d      	ldr	r3, [pc, #52]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007506:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007510:	4909      	ldr	r1, [pc, #36]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007512:	4313      	orrs	r3, r2
 8007514:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	2b01      	cmp	r3, #1
 800751c:	d006      	beq.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007526:	2b00      	cmp	r3, #0
 8007528:	f000 80d9 	beq.w	80076de <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800752c:	4b02      	ldr	r3, [pc, #8]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a01      	ldr	r2, [pc, #4]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007532:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007536:	e001      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007538:	40023800 	.word	0x40023800
 800753c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800753e:	f7fd f8bd 	bl	80046bc <HAL_GetTick>
 8007542:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007544:	e008      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007546:	f7fd f8b9 	bl	80046bc <HAL_GetTick>
 800754a:	4602      	mov	r2, r0
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	2b64      	cmp	r3, #100	; 0x64
 8007552:	d901      	bls.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007554:	2303      	movs	r3, #3
 8007556:	e194      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007558:	4b6c      	ldr	r3, [pc, #432]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1f0      	bne.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0301 	and.w	r3, r3, #1
 800756c:	2b00      	cmp	r3, #0
 800756e:	d021      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007574:	2b00      	cmp	r3, #0
 8007576:	d11d      	bne.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007578:	4b64      	ldr	r3, [pc, #400]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800757a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800757e:	0c1b      	lsrs	r3, r3, #16
 8007580:	f003 0303 	and.w	r3, r3, #3
 8007584:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007586:	4b61      	ldr	r3, [pc, #388]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800758c:	0e1b      	lsrs	r3, r3, #24
 800758e:	f003 030f 	and.w	r3, r3, #15
 8007592:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	019a      	lsls	r2, r3, #6
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	041b      	lsls	r3, r3, #16
 800759e:	431a      	orrs	r2, r3
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	061b      	lsls	r3, r3, #24
 80075a4:	431a      	orrs	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	071b      	lsls	r3, r3, #28
 80075ac:	4957      	ldr	r1, [pc, #348]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80075ae:	4313      	orrs	r3, r2
 80075b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d004      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075c8:	d00a      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d02e      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075de:	d129      	bne.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80075e0:	4b4a      	ldr	r3, [pc, #296]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80075e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075e6:	0c1b      	lsrs	r3, r3, #16
 80075e8:	f003 0303 	and.w	r3, r3, #3
 80075ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80075ee:	4b47      	ldr	r3, [pc, #284]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80075f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075f4:	0f1b      	lsrs	r3, r3, #28
 80075f6:	f003 0307 	and.w	r3, r3, #7
 80075fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	019a      	lsls	r2, r3, #6
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	041b      	lsls	r3, r3, #16
 8007606:	431a      	orrs	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	061b      	lsls	r3, r3, #24
 800760e:	431a      	orrs	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	071b      	lsls	r3, r3, #28
 8007614:	493d      	ldr	r1, [pc, #244]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007616:	4313      	orrs	r3, r2
 8007618:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800761c:	4b3b      	ldr	r3, [pc, #236]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800761e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007622:	f023 021f 	bic.w	r2, r3, #31
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762a:	3b01      	subs	r3, #1
 800762c:	4937      	ldr	r1, [pc, #220]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800762e:	4313      	orrs	r3, r2
 8007630:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800763c:	2b00      	cmp	r3, #0
 800763e:	d01d      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007640:	4b32      	ldr	r3, [pc, #200]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007642:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007646:	0e1b      	lsrs	r3, r3, #24
 8007648:	f003 030f 	and.w	r3, r3, #15
 800764c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800764e:	4b2f      	ldr	r3, [pc, #188]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007654:	0f1b      	lsrs	r3, r3, #28
 8007656:	f003 0307 	and.w	r3, r3, #7
 800765a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	019a      	lsls	r2, r3, #6
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	041b      	lsls	r3, r3, #16
 8007668:	431a      	orrs	r2, r3
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	061b      	lsls	r3, r3, #24
 800766e:	431a      	orrs	r2, r3
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	071b      	lsls	r3, r3, #28
 8007674:	4925      	ldr	r1, [pc, #148]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007676:	4313      	orrs	r3, r2
 8007678:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007684:	2b00      	cmp	r3, #0
 8007686:	d011      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	019a      	lsls	r2, r3, #6
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	041b      	lsls	r3, r3, #16
 8007694:	431a      	orrs	r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	061b      	lsls	r3, r3, #24
 800769c:	431a      	orrs	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	071b      	lsls	r3, r3, #28
 80076a4:	4919      	ldr	r1, [pc, #100]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80076ac:	4b17      	ldr	r3, [pc, #92]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a16      	ldr	r2, [pc, #88]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80076b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076b8:	f7fd f800 	bl	80046bc <HAL_GetTick>
 80076bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80076be:	e008      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80076c0:	f7fc fffc 	bl	80046bc <HAL_GetTick>
 80076c4:	4602      	mov	r2, r0
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	2b64      	cmp	r3, #100	; 0x64
 80076cc:	d901      	bls.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	e0d7      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80076d2:	4b0e      	ldr	r3, [pc, #56]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d0f0      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	f040 80cd 	bne.w	8007880 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80076e6:	4b09      	ldr	r3, [pc, #36]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a08      	ldr	r2, [pc, #32]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076f2:	f7fc ffe3 	bl	80046bc <HAL_GetTick>
 80076f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80076f8:	e00a      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80076fa:	f7fc ffdf 	bl	80046bc <HAL_GetTick>
 80076fe:	4602      	mov	r2, r0
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	2b64      	cmp	r3, #100	; 0x64
 8007706:	d903      	bls.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007708:	2303      	movs	r3, #3
 800770a:	e0ba      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800770c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007710:	4b5e      	ldr	r3, [pc, #376]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007718:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800771c:	d0ed      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007726:	2b00      	cmp	r3, #0
 8007728:	d003      	beq.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800772e:	2b00      	cmp	r3, #0
 8007730:	d009      	beq.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800773a:	2b00      	cmp	r3, #0
 800773c:	d02e      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007742:	2b00      	cmp	r3, #0
 8007744:	d12a      	bne.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007746:	4b51      	ldr	r3, [pc, #324]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800774c:	0c1b      	lsrs	r3, r3, #16
 800774e:	f003 0303 	and.w	r3, r3, #3
 8007752:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007754:	4b4d      	ldr	r3, [pc, #308]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800775a:	0f1b      	lsrs	r3, r3, #28
 800775c:	f003 0307 	and.w	r3, r3, #7
 8007760:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	019a      	lsls	r2, r3, #6
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	041b      	lsls	r3, r3, #16
 800776c:	431a      	orrs	r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	061b      	lsls	r3, r3, #24
 8007774:	431a      	orrs	r2, r3
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	071b      	lsls	r3, r3, #28
 800777a:	4944      	ldr	r1, [pc, #272]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800777c:	4313      	orrs	r3, r2
 800777e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007782:	4b42      	ldr	r3, [pc, #264]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007784:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007788:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007790:	3b01      	subs	r3, #1
 8007792:	021b      	lsls	r3, r3, #8
 8007794:	493d      	ldr	r1, [pc, #244]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007796:	4313      	orrs	r3, r2
 8007798:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d022      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077b0:	d11d      	bne.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80077b2:	4b36      	ldr	r3, [pc, #216]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077b8:	0e1b      	lsrs	r3, r3, #24
 80077ba:	f003 030f 	and.w	r3, r3, #15
 80077be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80077c0:	4b32      	ldr	r3, [pc, #200]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077c6:	0f1b      	lsrs	r3, r3, #28
 80077c8:	f003 0307 	and.w	r3, r3, #7
 80077cc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	695b      	ldr	r3, [r3, #20]
 80077d2:	019a      	lsls	r2, r3, #6
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6a1b      	ldr	r3, [r3, #32]
 80077d8:	041b      	lsls	r3, r3, #16
 80077da:	431a      	orrs	r2, r3
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	061b      	lsls	r3, r3, #24
 80077e0:	431a      	orrs	r2, r3
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	071b      	lsls	r3, r3, #28
 80077e6:	4929      	ldr	r1, [pc, #164]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077e8:	4313      	orrs	r3, r2
 80077ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 0308 	and.w	r3, r3, #8
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d028      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80077fa:	4b24      	ldr	r3, [pc, #144]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007800:	0e1b      	lsrs	r3, r3, #24
 8007802:	f003 030f 	and.w	r3, r3, #15
 8007806:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007808:	4b20      	ldr	r3, [pc, #128]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800780a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800780e:	0c1b      	lsrs	r3, r3, #16
 8007810:	f003 0303 	and.w	r3, r3, #3
 8007814:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	695b      	ldr	r3, [r3, #20]
 800781a:	019a      	lsls	r2, r3, #6
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	041b      	lsls	r3, r3, #16
 8007820:	431a      	orrs	r2, r3
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	061b      	lsls	r3, r3, #24
 8007826:	431a      	orrs	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	69db      	ldr	r3, [r3, #28]
 800782c:	071b      	lsls	r3, r3, #28
 800782e:	4917      	ldr	r1, [pc, #92]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007830:	4313      	orrs	r3, r2
 8007832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007836:	4b15      	ldr	r3, [pc, #84]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007838:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800783c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007844:	4911      	ldr	r1, [pc, #68]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007846:	4313      	orrs	r3, r2
 8007848:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800784c:	4b0f      	ldr	r3, [pc, #60]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a0e      	ldr	r2, [pc, #56]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007856:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007858:	f7fc ff30 	bl	80046bc <HAL_GetTick>
 800785c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800785e:	e008      	b.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007860:	f7fc ff2c 	bl	80046bc <HAL_GetTick>
 8007864:	4602      	mov	r2, r0
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	2b64      	cmp	r3, #100	; 0x64
 800786c:	d901      	bls.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e007      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007872:	4b06      	ldr	r3, [pc, #24]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800787a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800787e:	d1ef      	bne.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3720      	adds	r7, #32
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	40023800 	.word	0x40023800

08007890 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d101      	bne.n	80078a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e09d      	b.n	80079de <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d108      	bne.n	80078bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078b2:	d009      	beq.n	80078c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	61da      	str	r2, [r3, #28]
 80078ba:	e005      	b.n	80078c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d106      	bne.n	80078e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7fc f9f2 	bl	8003ccc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2202      	movs	r2, #2
 80078ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007908:	d902      	bls.n	8007910 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800790a:	2300      	movs	r3, #0
 800790c:	60fb      	str	r3, [r7, #12]
 800790e:	e002      	b.n	8007916 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007914:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800791e:	d007      	beq.n	8007930 <HAL_SPI_Init+0xa0>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007928:	d002      	beq.n	8007930 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007940:	431a      	orrs	r2, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	f003 0302 	and.w	r3, r3, #2
 800794a:	431a      	orrs	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	695b      	ldr	r3, [r3, #20]
 8007950:	f003 0301 	and.w	r3, r3, #1
 8007954:	431a      	orrs	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	699b      	ldr	r3, [r3, #24]
 800795a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800795e:	431a      	orrs	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	69db      	ldr	r3, [r3, #28]
 8007964:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007968:	431a      	orrs	r2, r3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a1b      	ldr	r3, [r3, #32]
 800796e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007972:	ea42 0103 	orr.w	r1, r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	430a      	orrs	r2, r1
 8007984:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	0c1b      	lsrs	r3, r3, #16
 800798c:	f003 0204 	and.w	r2, r3, #4
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007994:	f003 0310 	and.w	r3, r3, #16
 8007998:	431a      	orrs	r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800799e:	f003 0308 	and.w	r3, r3, #8
 80079a2:	431a      	orrs	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80079ac:	ea42 0103 	orr.w	r1, r2, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	430a      	orrs	r2, r1
 80079bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	69da      	ldr	r2, [r3, #28]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b088      	sub	sp, #32
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	60f8      	str	r0, [r7, #12]
 80079ee:	60b9      	str	r1, [r7, #8]
 80079f0:	603b      	str	r3, [r7, #0]
 80079f2:	4613      	mov	r3, r2
 80079f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80079f6:	2300      	movs	r3, #0
 80079f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d101      	bne.n	8007a08 <HAL_SPI_Transmit+0x22>
 8007a04:	2302      	movs	r3, #2
 8007a06:	e158      	b.n	8007cba <HAL_SPI_Transmit+0x2d4>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a10:	f7fc fe54 	bl	80046bc <HAL_GetTick>
 8007a14:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007a16:	88fb      	ldrh	r3, [r7, #6]
 8007a18:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d002      	beq.n	8007a2c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007a26:	2302      	movs	r3, #2
 8007a28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007a2a:	e13d      	b.n	8007ca8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d002      	beq.n	8007a38 <HAL_SPI_Transmit+0x52>
 8007a32:	88fb      	ldrh	r3, [r7, #6]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d102      	bne.n	8007a3e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007a3c:	e134      	b.n	8007ca8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2203      	movs	r2, #3
 8007a42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	68ba      	ldr	r2, [r7, #8]
 8007a50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	88fa      	ldrh	r2, [r7, #6]
 8007a56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	88fa      	ldrh	r2, [r7, #6]
 8007a5c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2200      	movs	r2, #0
 8007a78:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a88:	d10f      	bne.n	8007aaa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007aa8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab4:	2b40      	cmp	r3, #64	; 0x40
 8007ab6:	d007      	beq.n	8007ac8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ac6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ad0:	d94b      	bls.n	8007b6a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d002      	beq.n	8007ae0 <HAL_SPI_Transmit+0xfa>
 8007ada:	8afb      	ldrh	r3, [r7, #22]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d13e      	bne.n	8007b5e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae4:	881a      	ldrh	r2, [r3, #0]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af0:	1c9a      	adds	r2, r3, #2
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	3b01      	subs	r3, #1
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007b04:	e02b      	b.n	8007b5e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	f003 0302 	and.w	r3, r3, #2
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d112      	bne.n	8007b3a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b18:	881a      	ldrh	r2, [r3, #0]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b24:	1c9a      	adds	r2, r3, #2
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	3b01      	subs	r3, #1
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b38:	e011      	b.n	8007b5e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b3a:	f7fc fdbf 	bl	80046bc <HAL_GetTick>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	1ad3      	subs	r3, r2, r3
 8007b44:	683a      	ldr	r2, [r7, #0]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d803      	bhi.n	8007b52 <HAL_SPI_Transmit+0x16c>
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b50:	d102      	bne.n	8007b58 <HAL_SPI_Transmit+0x172>
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d102      	bne.n	8007b5e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007b5c:	e0a4      	b.n	8007ca8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d1ce      	bne.n	8007b06 <HAL_SPI_Transmit+0x120>
 8007b68:	e07c      	b.n	8007c64 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d002      	beq.n	8007b78 <HAL_SPI_Transmit+0x192>
 8007b72:	8afb      	ldrh	r3, [r7, #22]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d170      	bne.n	8007c5a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d912      	bls.n	8007ba8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b86:	881a      	ldrh	r2, [r3, #0]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b92:	1c9a      	adds	r2, r3, #2
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	3b02      	subs	r3, #2
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007ba6:	e058      	b.n	8007c5a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	330c      	adds	r3, #12
 8007bb2:	7812      	ldrb	r2, [r2, #0]
 8007bb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bba:	1c5a      	adds	r2, r3, #1
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	3b01      	subs	r3, #1
 8007bc8:	b29a      	uxth	r2, r3
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007bce:	e044      	b.n	8007c5a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	f003 0302 	and.w	r3, r3, #2
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d12b      	bne.n	8007c36 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d912      	bls.n	8007c0e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bec:	881a      	ldrh	r2, [r3, #0]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf8:	1c9a      	adds	r2, r3, #2
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	3b02      	subs	r3, #2
 8007c06:	b29a      	uxth	r2, r3
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c0c:	e025      	b.n	8007c5a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	330c      	adds	r3, #12
 8007c18:	7812      	ldrb	r2, [r2, #0]
 8007c1a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c20:	1c5a      	adds	r2, r3, #1
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c34:	e011      	b.n	8007c5a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c36:	f7fc fd41 	bl	80046bc <HAL_GetTick>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	683a      	ldr	r2, [r7, #0]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d803      	bhi.n	8007c4e <HAL_SPI_Transmit+0x268>
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c4c:	d102      	bne.n	8007c54 <HAL_SPI_Transmit+0x26e>
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d102      	bne.n	8007c5a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007c54:	2303      	movs	r3, #3
 8007c56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007c58:	e026      	b.n	8007ca8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1b5      	bne.n	8007bd0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c64:	69ba      	ldr	r2, [r7, #24]
 8007c66:	6839      	ldr	r1, [r7, #0]
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f000 fd07 	bl	800867c <SPI_EndRxTxTransaction>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d002      	beq.n	8007c7a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2220      	movs	r2, #32
 8007c78:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d10a      	bne.n	8007c98 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c82:	2300      	movs	r3, #0
 8007c84:	613b      	str	r3, [r7, #16]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	613b      	str	r3, [r7, #16]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	613b      	str	r3, [r7, #16]
 8007c96:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d002      	beq.n	8007ca6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	77fb      	strb	r3, [r7, #31]
 8007ca4:	e000      	b.n	8007ca8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007ca6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007cb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3720      	adds	r7, #32
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b088      	sub	sp, #32
 8007cc6:	af02      	add	r7, sp, #8
 8007cc8:	60f8      	str	r0, [r7, #12]
 8007cca:	60b9      	str	r1, [r7, #8]
 8007ccc:	603b      	str	r3, [r7, #0]
 8007cce:	4613      	mov	r3, r2
 8007cd0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cde:	d112      	bne.n	8007d06 <HAL_SPI_Receive+0x44>
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10e      	bne.n	8007d06 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2204      	movs	r2, #4
 8007cec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007cf0:	88fa      	ldrh	r2, [r7, #6]
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	68ba      	ldr	r2, [r7, #8]
 8007cfa:	68b9      	ldr	r1, [r7, #8]
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f000 f910 	bl	8007f22 <HAL_SPI_TransmitReceive>
 8007d02:	4603      	mov	r3, r0
 8007d04:	e109      	b.n	8007f1a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d101      	bne.n	8007d14 <HAL_SPI_Receive+0x52>
 8007d10:	2302      	movs	r3, #2
 8007d12:	e102      	b.n	8007f1a <HAL_SPI_Receive+0x258>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d1c:	f7fc fcce 	bl	80046bc <HAL_GetTick>
 8007d20:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d002      	beq.n	8007d34 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007d2e:	2302      	movs	r3, #2
 8007d30:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007d32:	e0e9      	b.n	8007f08 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d002      	beq.n	8007d40 <HAL_SPI_Receive+0x7e>
 8007d3a:	88fb      	ldrh	r3, [r7, #6]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d102      	bne.n	8007d46 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007d44:	e0e0      	b.n	8007f08 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2204      	movs	r2, #4
 8007d4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2200      	movs	r2, #0
 8007d52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	88fa      	ldrh	r2, [r7, #6]
 8007d5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	88fa      	ldrh	r2, [r7, #6]
 8007d66:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2200      	movs	r2, #0
 8007d74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2200      	movs	r2, #0
 8007d86:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d90:	d908      	bls.n	8007da4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	685a      	ldr	r2, [r3, #4]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007da0:	605a      	str	r2, [r3, #4]
 8007da2:	e007      	b.n	8007db4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	685a      	ldr	r2, [r3, #4]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007db2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dbc:	d10f      	bne.n	8007dde <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dcc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007ddc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de8:	2b40      	cmp	r3, #64	; 0x40
 8007dea:	d007      	beq.n	8007dfc <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007dfa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e04:	d867      	bhi.n	8007ed6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007e06:	e030      	b.n	8007e6a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	f003 0301 	and.w	r3, r3, #1
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d117      	bne.n	8007e46 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f103 020c 	add.w	r2, r3, #12
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e22:	7812      	ldrb	r2, [r2, #0]
 8007e24:	b2d2      	uxtb	r2, r2
 8007e26:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2c:	1c5a      	adds	r2, r3, #1
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	b29a      	uxth	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007e44:	e011      	b.n	8007e6a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e46:	f7fc fc39 	bl	80046bc <HAL_GetTick>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	1ad3      	subs	r3, r2, r3
 8007e50:	683a      	ldr	r2, [r7, #0]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d803      	bhi.n	8007e5e <HAL_SPI_Receive+0x19c>
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e5c:	d102      	bne.n	8007e64 <HAL_SPI_Receive+0x1a2>
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d102      	bne.n	8007e6a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8007e64:	2303      	movs	r3, #3
 8007e66:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007e68:	e04e      	b.n	8007f08 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d1c8      	bne.n	8007e08 <HAL_SPI_Receive+0x146>
 8007e76:	e034      	b.n	8007ee2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	f003 0301 	and.w	r3, r3, #1
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d115      	bne.n	8007eb2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68da      	ldr	r2, [r3, #12]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e90:	b292      	uxth	r2, r2
 8007e92:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e98:	1c9a      	adds	r2, r3, #2
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007eb0:	e011      	b.n	8007ed6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007eb2:	f7fc fc03 	bl	80046bc <HAL_GetTick>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	1ad3      	subs	r3, r2, r3
 8007ebc:	683a      	ldr	r2, [r7, #0]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d803      	bhi.n	8007eca <HAL_SPI_Receive+0x208>
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec8:	d102      	bne.n	8007ed0 <HAL_SPI_Receive+0x20e>
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d102      	bne.n	8007ed6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007ed4:	e018      	b.n	8007f08 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d1ca      	bne.n	8007e78 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ee2:	693a      	ldr	r2, [r7, #16]
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	68f8      	ldr	r0, [r7, #12]
 8007ee8:	f000 fb4c 	bl	8008584 <SPI_EndRxTransaction>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d002      	beq.n	8007ef8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2220      	movs	r2, #32
 8007ef6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d002      	beq.n	8007f06 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	75fb      	strb	r3, [r7, #23]
 8007f04:	e000      	b.n	8007f08 <HAL_SPI_Receive+0x246>
  }

error :
 8007f06:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3718      	adds	r7, #24
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b08a      	sub	sp, #40	; 0x28
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	60f8      	str	r0, [r7, #12]
 8007f2a:	60b9      	str	r1, [r7, #8]
 8007f2c:	607a      	str	r2, [r7, #4]
 8007f2e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007f30:	2301      	movs	r3, #1
 8007f32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007f34:	2300      	movs	r3, #0
 8007f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d101      	bne.n	8007f48 <HAL_SPI_TransmitReceive+0x26>
 8007f44:	2302      	movs	r3, #2
 8007f46:	e1fb      	b.n	8008340 <HAL_SPI_TransmitReceive+0x41e>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f50:	f7fc fbb4 	bl	80046bc <HAL_GetTick>
 8007f54:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f5c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007f64:	887b      	ldrh	r3, [r7, #2]
 8007f66:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007f68:	887b      	ldrh	r3, [r7, #2]
 8007f6a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007f6c:	7efb      	ldrb	r3, [r7, #27]
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d00e      	beq.n	8007f90 <HAL_SPI_TransmitReceive+0x6e>
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f78:	d106      	bne.n	8007f88 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d102      	bne.n	8007f88 <HAL_SPI_TransmitReceive+0x66>
 8007f82:	7efb      	ldrb	r3, [r7, #27]
 8007f84:	2b04      	cmp	r3, #4
 8007f86:	d003      	beq.n	8007f90 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007f88:	2302      	movs	r3, #2
 8007f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007f8e:	e1cd      	b.n	800832c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d005      	beq.n	8007fa2 <HAL_SPI_TransmitReceive+0x80>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d002      	beq.n	8007fa2 <HAL_SPI_TransmitReceive+0x80>
 8007f9c:	887b      	ldrh	r3, [r7, #2]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d103      	bne.n	8007faa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007fa8:	e1c0      	b.n	800832c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b04      	cmp	r3, #4
 8007fb4:	d003      	beq.n	8007fbe <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2205      	movs	r2, #5
 8007fba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	887a      	ldrh	r2, [r7, #2]
 8007fce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	887a      	ldrh	r2, [r7, #2]
 8007fd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	68ba      	ldr	r2, [r7, #8]
 8007fde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	887a      	ldrh	r2, [r7, #2]
 8007fe4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	887a      	ldrh	r2, [r7, #2]
 8007fea:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008000:	d802      	bhi.n	8008008 <HAL_SPI_TransmitReceive+0xe6>
 8008002:	8a3b      	ldrh	r3, [r7, #16]
 8008004:	2b01      	cmp	r3, #1
 8008006:	d908      	bls.n	800801a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	685a      	ldr	r2, [r3, #4]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008016:	605a      	str	r2, [r3, #4]
 8008018:	e007      	b.n	800802a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	685a      	ldr	r2, [r3, #4]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008028:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008034:	2b40      	cmp	r3, #64	; 0x40
 8008036:	d007      	beq.n	8008048 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008046:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008050:	d97c      	bls.n	800814c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d002      	beq.n	8008060 <HAL_SPI_TransmitReceive+0x13e>
 800805a:	8a7b      	ldrh	r3, [r7, #18]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d169      	bne.n	8008134 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008064:	881a      	ldrh	r2, [r3, #0]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008070:	1c9a      	adds	r2, r3, #2
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800807a:	b29b      	uxth	r3, r3
 800807c:	3b01      	subs	r3, #1
 800807e:	b29a      	uxth	r2, r3
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008084:	e056      	b.n	8008134 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	f003 0302 	and.w	r3, r3, #2
 8008090:	2b02      	cmp	r3, #2
 8008092:	d11b      	bne.n	80080cc <HAL_SPI_TransmitReceive+0x1aa>
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008098:	b29b      	uxth	r3, r3
 800809a:	2b00      	cmp	r3, #0
 800809c:	d016      	beq.n	80080cc <HAL_SPI_TransmitReceive+0x1aa>
 800809e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d113      	bne.n	80080cc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a8:	881a      	ldrh	r2, [r3, #0]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b4:	1c9a      	adds	r2, r3, #2
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080be:	b29b      	uxth	r3, r3
 80080c0:	3b01      	subs	r3, #1
 80080c2:	b29a      	uxth	r2, r3
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80080c8:	2300      	movs	r3, #0
 80080ca:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	f003 0301 	and.w	r3, r3, #1
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d11c      	bne.n	8008114 <HAL_SPI_TransmitReceive+0x1f2>
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d016      	beq.n	8008114 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68da      	ldr	r2, [r3, #12]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f0:	b292      	uxth	r2, r2
 80080f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f8:	1c9a      	adds	r2, r3, #2
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008104:	b29b      	uxth	r3, r3
 8008106:	3b01      	subs	r3, #1
 8008108:	b29a      	uxth	r2, r3
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008110:	2301      	movs	r3, #1
 8008112:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008114:	f7fc fad2 	bl	80046bc <HAL_GetTick>
 8008118:	4602      	mov	r2, r0
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	1ad3      	subs	r3, r2, r3
 800811e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008120:	429a      	cmp	r2, r3
 8008122:	d807      	bhi.n	8008134 <HAL_SPI_TransmitReceive+0x212>
 8008124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800812a:	d003      	beq.n	8008134 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800812c:	2303      	movs	r3, #3
 800812e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008132:	e0fb      	b.n	800832c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008138:	b29b      	uxth	r3, r3
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1a3      	bne.n	8008086 <HAL_SPI_TransmitReceive+0x164>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008144:	b29b      	uxth	r3, r3
 8008146:	2b00      	cmp	r3, #0
 8008148:	d19d      	bne.n	8008086 <HAL_SPI_TransmitReceive+0x164>
 800814a:	e0df      	b.n	800830c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d003      	beq.n	800815c <HAL_SPI_TransmitReceive+0x23a>
 8008154:	8a7b      	ldrh	r3, [r7, #18]
 8008156:	2b01      	cmp	r3, #1
 8008158:	f040 80cb 	bne.w	80082f2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008160:	b29b      	uxth	r3, r3
 8008162:	2b01      	cmp	r3, #1
 8008164:	d912      	bls.n	800818c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816a:	881a      	ldrh	r2, [r3, #0]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008176:	1c9a      	adds	r2, r3, #2
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008180:	b29b      	uxth	r3, r3
 8008182:	3b02      	subs	r3, #2
 8008184:	b29a      	uxth	r2, r3
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	87da      	strh	r2, [r3, #62]	; 0x3e
 800818a:	e0b2      	b.n	80082f2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	330c      	adds	r3, #12
 8008196:	7812      	ldrb	r2, [r2, #0]
 8008198:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819e:	1c5a      	adds	r2, r3, #1
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	3b01      	subs	r3, #1
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80081b2:	e09e      	b.n	80082f2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	f003 0302 	and.w	r3, r3, #2
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d134      	bne.n	800822c <HAL_SPI_TransmitReceive+0x30a>
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d02f      	beq.n	800822c <HAL_SPI_TransmitReceive+0x30a>
 80081cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d12c      	bne.n	800822c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d912      	bls.n	8008202 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e0:	881a      	ldrh	r2, [r3, #0]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ec:	1c9a      	adds	r2, r3, #2
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	3b02      	subs	r3, #2
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008200:	e012      	b.n	8008228 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	330c      	adds	r3, #12
 800820c:	7812      	ldrb	r2, [r2, #0]
 800820e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008214:	1c5a      	adds	r2, r3, #1
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800821e:	b29b      	uxth	r3, r3
 8008220:	3b01      	subs	r3, #1
 8008222:	b29a      	uxth	r2, r3
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008228:	2300      	movs	r3, #0
 800822a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	f003 0301 	and.w	r3, r3, #1
 8008236:	2b01      	cmp	r3, #1
 8008238:	d148      	bne.n	80082cc <HAL_SPI_TransmitReceive+0x3aa>
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008240:	b29b      	uxth	r3, r3
 8008242:	2b00      	cmp	r3, #0
 8008244:	d042      	beq.n	80082cc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800824c:	b29b      	uxth	r3, r3
 800824e:	2b01      	cmp	r3, #1
 8008250:	d923      	bls.n	800829a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68da      	ldr	r2, [r3, #12]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825c:	b292      	uxth	r2, r2
 800825e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008264:	1c9a      	adds	r2, r3, #2
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008270:	b29b      	uxth	r3, r3
 8008272:	3b02      	subs	r3, #2
 8008274:	b29a      	uxth	r2, r3
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008282:	b29b      	uxth	r3, r3
 8008284:	2b01      	cmp	r3, #1
 8008286:	d81f      	bhi.n	80082c8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	685a      	ldr	r2, [r3, #4]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008296:	605a      	str	r2, [r3, #4]
 8008298:	e016      	b.n	80082c8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f103 020c 	add.w	r2, r3, #12
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a6:	7812      	ldrb	r2, [r2, #0]
 80082a8:	b2d2      	uxtb	r2, r2
 80082aa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b0:	1c5a      	adds	r2, r3, #1
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082bc:	b29b      	uxth	r3, r3
 80082be:	3b01      	subs	r3, #1
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80082c8:	2301      	movs	r3, #1
 80082ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80082cc:	f7fc f9f6 	bl	80046bc <HAL_GetTick>
 80082d0:	4602      	mov	r2, r0
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082d8:	429a      	cmp	r2, r3
 80082da:	d803      	bhi.n	80082e4 <HAL_SPI_TransmitReceive+0x3c2>
 80082dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e2:	d102      	bne.n	80082ea <HAL_SPI_TransmitReceive+0x3c8>
 80082e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d103      	bne.n	80082f2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80082ea:	2303      	movs	r3, #3
 80082ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80082f0:	e01c      	b.n	800832c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	f47f af5b 	bne.w	80081b4 <HAL_SPI_TransmitReceive+0x292>
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008304:	b29b      	uxth	r3, r3
 8008306:	2b00      	cmp	r3, #0
 8008308:	f47f af54 	bne.w	80081b4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800830c:	69fa      	ldr	r2, [r7, #28]
 800830e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f000 f9b3 	bl	800867c <SPI_EndRxTxTransaction>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d006      	beq.n	800832a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2220      	movs	r2, #32
 8008326:	661a      	str	r2, [r3, #96]	; 0x60
 8008328:	e000      	b.n	800832c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800832a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800833c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008340:	4618      	mov	r0, r3
 8008342:	3728      	adds	r7, #40	; 0x28
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b088      	sub	sp, #32
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	603b      	str	r3, [r7, #0]
 8008354:	4613      	mov	r3, r2
 8008356:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008358:	f7fc f9b0 	bl	80046bc <HAL_GetTick>
 800835c:	4602      	mov	r2, r0
 800835e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008360:	1a9b      	subs	r3, r3, r2
 8008362:	683a      	ldr	r2, [r7, #0]
 8008364:	4413      	add	r3, r2
 8008366:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008368:	f7fc f9a8 	bl	80046bc <HAL_GetTick>
 800836c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800836e:	4b39      	ldr	r3, [pc, #228]	; (8008454 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	015b      	lsls	r3, r3, #5
 8008374:	0d1b      	lsrs	r3, r3, #20
 8008376:	69fa      	ldr	r2, [r7, #28]
 8008378:	fb02 f303 	mul.w	r3, r2, r3
 800837c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800837e:	e054      	b.n	800842a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008386:	d050      	beq.n	800842a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008388:	f7fc f998 	bl	80046bc <HAL_GetTick>
 800838c:	4602      	mov	r2, r0
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	69fa      	ldr	r2, [r7, #28]
 8008394:	429a      	cmp	r2, r3
 8008396:	d902      	bls.n	800839e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d13d      	bne.n	800841a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	685a      	ldr	r2, [r3, #4]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80083ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083b6:	d111      	bne.n	80083dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083c0:	d004      	beq.n	80083cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083ca:	d107      	bne.n	80083dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083e4:	d10f      	bne.n	8008406 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80083f4:	601a      	str	r2, [r3, #0]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008404:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2201      	movs	r2, #1
 800840a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2200      	movs	r2, #0
 8008412:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008416:	2303      	movs	r3, #3
 8008418:	e017      	b.n	800844a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d101      	bne.n	8008424 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008420:	2300      	movs	r3, #0
 8008422:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	3b01      	subs	r3, #1
 8008428:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	689a      	ldr	r2, [r3, #8]
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	4013      	ands	r3, r2
 8008434:	68ba      	ldr	r2, [r7, #8]
 8008436:	429a      	cmp	r2, r3
 8008438:	bf0c      	ite	eq
 800843a:	2301      	moveq	r3, #1
 800843c:	2300      	movne	r3, #0
 800843e:	b2db      	uxtb	r3, r3
 8008440:	461a      	mov	r2, r3
 8008442:	79fb      	ldrb	r3, [r7, #7]
 8008444:	429a      	cmp	r2, r3
 8008446:	d19b      	bne.n	8008380 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3720      	adds	r7, #32
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	200000c4 	.word	0x200000c4

08008458 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b08a      	sub	sp, #40	; 0x28
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	607a      	str	r2, [r7, #4]
 8008464:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008466:	2300      	movs	r3, #0
 8008468:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800846a:	f7fc f927 	bl	80046bc <HAL_GetTick>
 800846e:	4602      	mov	r2, r0
 8008470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008472:	1a9b      	subs	r3, r3, r2
 8008474:	683a      	ldr	r2, [r7, #0]
 8008476:	4413      	add	r3, r2
 8008478:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800847a:	f7fc f91f 	bl	80046bc <HAL_GetTick>
 800847e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	330c      	adds	r3, #12
 8008486:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008488:	4b3d      	ldr	r3, [pc, #244]	; (8008580 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	4613      	mov	r3, r2
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	4413      	add	r3, r2
 8008492:	00da      	lsls	r2, r3, #3
 8008494:	1ad3      	subs	r3, r2, r3
 8008496:	0d1b      	lsrs	r3, r3, #20
 8008498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800849a:	fb02 f303 	mul.w	r3, r2, r3
 800849e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80084a0:	e060      	b.n	8008564 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80084a8:	d107      	bne.n	80084ba <SPI_WaitFifoStateUntilTimeout+0x62>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d104      	bne.n	80084ba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80084b8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084c0:	d050      	beq.n	8008564 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80084c2:	f7fc f8fb 	bl	80046bc <HAL_GetTick>
 80084c6:	4602      	mov	r2, r0
 80084c8:	6a3b      	ldr	r3, [r7, #32]
 80084ca:	1ad3      	subs	r3, r2, r3
 80084cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d902      	bls.n	80084d8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80084d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d13d      	bne.n	8008554 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	685a      	ldr	r2, [r3, #4]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80084e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084f0:	d111      	bne.n	8008516 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084fa:	d004      	beq.n	8008506 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008504:	d107      	bne.n	8008516 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008514:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800851a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800851e:	d10f      	bne.n	8008540 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800852e:	601a      	str	r2, [r3, #0]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800853e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2200      	movs	r2, #0
 800854c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008550:	2303      	movs	r3, #3
 8008552:	e010      	b.n	8008576 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d101      	bne.n	800855e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800855a:	2300      	movs	r3, #0
 800855c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	3b01      	subs	r3, #1
 8008562:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	689a      	ldr	r2, [r3, #8]
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	4013      	ands	r3, r2
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	429a      	cmp	r2, r3
 8008572:	d196      	bne.n	80084a2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	3728      	adds	r7, #40	; 0x28
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	200000c4 	.word	0x200000c4

08008584 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b088      	sub	sp, #32
 8008588:	af02      	add	r7, sp, #8
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	60b9      	str	r1, [r7, #8]
 800858e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008598:	d111      	bne.n	80085be <SPI_EndRxTransaction+0x3a>
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085a2:	d004      	beq.n	80085ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085ac:	d107      	bne.n	80085be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085bc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085c6:	d112      	bne.n	80085ee <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	2200      	movs	r2, #0
 80085d0:	2180      	movs	r1, #128	; 0x80
 80085d2:	68f8      	ldr	r0, [r7, #12]
 80085d4:	f7ff feb8 	bl	8008348 <SPI_WaitFlagStateUntilTimeout>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d021      	beq.n	8008622 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085e2:	f043 0220 	orr.w	r2, r3, #32
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80085ea:	2303      	movs	r3, #3
 80085ec:	e03d      	b.n	800866a <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80085ee:	4b21      	ldr	r3, [pc, #132]	; (8008674 <SPI_EndRxTransaction+0xf0>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a21      	ldr	r2, [pc, #132]	; (8008678 <SPI_EndRxTransaction+0xf4>)
 80085f4:	fba2 2303 	umull	r2, r3, r2, r3
 80085f8:	0d5b      	lsrs	r3, r3, #21
 80085fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80085fe:	fb02 f303 	mul.w	r3, r2, r3
 8008602:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00a      	beq.n	8008620 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	3b01      	subs	r3, #1
 800860e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800861a:	2b80      	cmp	r3, #128	; 0x80
 800861c:	d0f2      	beq.n	8008604 <SPI_EndRxTransaction+0x80>
 800861e:	e000      	b.n	8008622 <SPI_EndRxTransaction+0x9e>
        break;
 8008620:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800862a:	d11d      	bne.n	8008668 <SPI_EndRxTransaction+0xe4>
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008634:	d004      	beq.n	8008640 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800863e:	d113      	bne.n	8008668 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	2200      	movs	r2, #0
 8008648:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f7ff ff03 	bl	8008458 <SPI_WaitFifoStateUntilTimeout>
 8008652:	4603      	mov	r3, r0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d007      	beq.n	8008668 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800865c:	f043 0220 	orr.w	r2, r3, #32
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008664:	2303      	movs	r3, #3
 8008666:	e000      	b.n	800866a <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	3718      	adds	r7, #24
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	200000c4 	.word	0x200000c4
 8008678:	165e9f81 	.word	0x165e9f81

0800867c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b088      	sub	sp, #32
 8008680:	af02      	add	r7, sp, #8
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	9300      	str	r3, [sp, #0]
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	2200      	movs	r2, #0
 8008690:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008694:	68f8      	ldr	r0, [r7, #12]
 8008696:	f7ff fedf 	bl	8008458 <SPI_WaitFifoStateUntilTimeout>
 800869a:	4603      	mov	r3, r0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d007      	beq.n	80086b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086a4:	f043 0220 	orr.w	r2, r3, #32
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80086ac:	2303      	movs	r3, #3
 80086ae:	e046      	b.n	800873e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80086b0:	4b25      	ldr	r3, [pc, #148]	; (8008748 <SPI_EndRxTxTransaction+0xcc>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a25      	ldr	r2, [pc, #148]	; (800874c <SPI_EndRxTxTransaction+0xd0>)
 80086b6:	fba2 2303 	umull	r2, r3, r2, r3
 80086ba:	0d5b      	lsrs	r3, r3, #21
 80086bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80086c0:	fb02 f303 	mul.w	r3, r2, r3
 80086c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086ce:	d112      	bne.n	80086f6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	9300      	str	r3, [sp, #0]
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	2200      	movs	r2, #0
 80086d8:	2180      	movs	r1, #128	; 0x80
 80086da:	68f8      	ldr	r0, [r7, #12]
 80086dc:	f7ff fe34 	bl	8008348 <SPI_WaitFlagStateUntilTimeout>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d016      	beq.n	8008714 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086ea:	f043 0220 	orr.w	r2, r3, #32
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80086f2:	2303      	movs	r3, #3
 80086f4:	e023      	b.n	800873e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d00a      	beq.n	8008712 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	3b01      	subs	r3, #1
 8008700:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800870c:	2b80      	cmp	r3, #128	; 0x80
 800870e:	d0f2      	beq.n	80086f6 <SPI_EndRxTxTransaction+0x7a>
 8008710:	e000      	b.n	8008714 <SPI_EndRxTxTransaction+0x98>
        break;
 8008712:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	9300      	str	r3, [sp, #0]
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	2200      	movs	r2, #0
 800871c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008720:	68f8      	ldr	r0, [r7, #12]
 8008722:	f7ff fe99 	bl	8008458 <SPI_WaitFifoStateUntilTimeout>
 8008726:	4603      	mov	r3, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d007      	beq.n	800873c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008730:	f043 0220 	orr.w	r2, r3, #32
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008738:	2303      	movs	r3, #3
 800873a:	e000      	b.n	800873e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3718      	adds	r7, #24
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	200000c4 	.word	0x200000c4
 800874c:	165e9f81 	.word	0x165e9f81

08008750 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d101      	bne.n	8008762 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800875e:	2301      	movs	r3, #1
 8008760:	e049      	b.n	80087f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008768:	b2db      	uxtb	r3, r3
 800876a:	2b00      	cmp	r3, #0
 800876c:	d106      	bne.n	800877c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f7fb fdb6 	bl	80042e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2202      	movs	r2, #2
 8008780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	3304      	adds	r3, #4
 800878c:	4619      	mov	r1, r3
 800878e:	4610      	mov	r0, r2
 8008790:	f000 fd30 	bl	80091f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3708      	adds	r7, #8
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
	...

08008800 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008800:	b480      	push	{r7}
 8008802:	b085      	sub	sp, #20
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800880e:	b2db      	uxtb	r3, r3
 8008810:	2b01      	cmp	r3, #1
 8008812:	d001      	beq.n	8008818 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008814:	2301      	movs	r3, #1
 8008816:	e054      	b.n	80088c2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2202      	movs	r2, #2
 800881c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68da      	ldr	r2, [r3, #12]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f042 0201 	orr.w	r2, r2, #1
 800882e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a26      	ldr	r2, [pc, #152]	; (80088d0 <HAL_TIM_Base_Start_IT+0xd0>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d022      	beq.n	8008880 <HAL_TIM_Base_Start_IT+0x80>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008842:	d01d      	beq.n	8008880 <HAL_TIM_Base_Start_IT+0x80>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a22      	ldr	r2, [pc, #136]	; (80088d4 <HAL_TIM_Base_Start_IT+0xd4>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d018      	beq.n	8008880 <HAL_TIM_Base_Start_IT+0x80>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a21      	ldr	r2, [pc, #132]	; (80088d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d013      	beq.n	8008880 <HAL_TIM_Base_Start_IT+0x80>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a1f      	ldr	r2, [pc, #124]	; (80088dc <HAL_TIM_Base_Start_IT+0xdc>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d00e      	beq.n	8008880 <HAL_TIM_Base_Start_IT+0x80>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a1e      	ldr	r2, [pc, #120]	; (80088e0 <HAL_TIM_Base_Start_IT+0xe0>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d009      	beq.n	8008880 <HAL_TIM_Base_Start_IT+0x80>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a1c      	ldr	r2, [pc, #112]	; (80088e4 <HAL_TIM_Base_Start_IT+0xe4>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d004      	beq.n	8008880 <HAL_TIM_Base_Start_IT+0x80>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a1b      	ldr	r2, [pc, #108]	; (80088e8 <HAL_TIM_Base_Start_IT+0xe8>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d115      	bne.n	80088ac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	689a      	ldr	r2, [r3, #8]
 8008886:	4b19      	ldr	r3, [pc, #100]	; (80088ec <HAL_TIM_Base_Start_IT+0xec>)
 8008888:	4013      	ands	r3, r2
 800888a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2b06      	cmp	r3, #6
 8008890:	d015      	beq.n	80088be <HAL_TIM_Base_Start_IT+0xbe>
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008898:	d011      	beq.n	80088be <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f042 0201 	orr.w	r2, r2, #1
 80088a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088aa:	e008      	b.n	80088be <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f042 0201 	orr.w	r2, r2, #1
 80088ba:	601a      	str	r2, [r3, #0]
 80088bc:	e000      	b.n	80088c0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3714      	adds	r7, #20
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	40010000 	.word	0x40010000
 80088d4:	40000400 	.word	0x40000400
 80088d8:	40000800 	.word	0x40000800
 80088dc:	40000c00 	.word	0x40000c00
 80088e0:	40010400 	.word	0x40010400
 80088e4:	40014000 	.word	0x40014000
 80088e8:	40001800 	.word	0x40001800
 80088ec:	00010007 	.word	0x00010007

080088f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d101      	bne.n	8008902 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	e049      	b.n	8008996 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008908:	b2db      	uxtb	r3, r3
 800890a:	2b00      	cmp	r3, #0
 800890c:	d106      	bne.n	800891c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 f841 	bl	800899e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2202      	movs	r2, #2
 8008920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	3304      	adds	r3, #4
 800892c:	4619      	mov	r1, r3
 800892e:	4610      	mov	r0, r2
 8008930:	f000 fc60 	bl	80091f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2201      	movs	r2, #1
 8008978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008994:	2300      	movs	r3, #0
}
 8008996:	4618      	mov	r0, r3
 8008998:	3708      	adds	r7, #8
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800899e:	b480      	push	{r7}
 80089a0:	b083      	sub	sp, #12
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80089a6:	bf00      	nop
 80089a8:	370c      	adds	r7, #12
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr
	...

080089b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d109      	bne.n	80089d8 <HAL_TIM_PWM_Start+0x24>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	bf14      	ite	ne
 80089d0:	2301      	movne	r3, #1
 80089d2:	2300      	moveq	r3, #0
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	e03c      	b.n	8008a52 <HAL_TIM_PWM_Start+0x9e>
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	2b04      	cmp	r3, #4
 80089dc:	d109      	bne.n	80089f2 <HAL_TIM_PWM_Start+0x3e>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	bf14      	ite	ne
 80089ea:	2301      	movne	r3, #1
 80089ec:	2300      	moveq	r3, #0
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	e02f      	b.n	8008a52 <HAL_TIM_PWM_Start+0x9e>
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	2b08      	cmp	r3, #8
 80089f6:	d109      	bne.n	8008a0c <HAL_TIM_PWM_Start+0x58>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	bf14      	ite	ne
 8008a04:	2301      	movne	r3, #1
 8008a06:	2300      	moveq	r3, #0
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	e022      	b.n	8008a52 <HAL_TIM_PWM_Start+0x9e>
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	2b0c      	cmp	r3, #12
 8008a10:	d109      	bne.n	8008a26 <HAL_TIM_PWM_Start+0x72>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	bf14      	ite	ne
 8008a1e:	2301      	movne	r3, #1
 8008a20:	2300      	moveq	r3, #0
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	e015      	b.n	8008a52 <HAL_TIM_PWM_Start+0x9e>
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	2b10      	cmp	r3, #16
 8008a2a:	d109      	bne.n	8008a40 <HAL_TIM_PWM_Start+0x8c>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	bf14      	ite	ne
 8008a38:	2301      	movne	r3, #1
 8008a3a:	2300      	moveq	r3, #0
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	e008      	b.n	8008a52 <HAL_TIM_PWM_Start+0x9e>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	bf14      	ite	ne
 8008a4c:	2301      	movne	r3, #1
 8008a4e:	2300      	moveq	r3, #0
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d001      	beq.n	8008a5a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	e092      	b.n	8008b80 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d104      	bne.n	8008a6a <HAL_TIM_PWM_Start+0xb6>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2202      	movs	r2, #2
 8008a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a68:	e023      	b.n	8008ab2 <HAL_TIM_PWM_Start+0xfe>
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	2b04      	cmp	r3, #4
 8008a6e:	d104      	bne.n	8008a7a <HAL_TIM_PWM_Start+0xc6>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2202      	movs	r2, #2
 8008a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a78:	e01b      	b.n	8008ab2 <HAL_TIM_PWM_Start+0xfe>
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	2b08      	cmp	r3, #8
 8008a7e:	d104      	bne.n	8008a8a <HAL_TIM_PWM_Start+0xd6>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2202      	movs	r2, #2
 8008a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a88:	e013      	b.n	8008ab2 <HAL_TIM_PWM_Start+0xfe>
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	2b0c      	cmp	r3, #12
 8008a8e:	d104      	bne.n	8008a9a <HAL_TIM_PWM_Start+0xe6>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2202      	movs	r2, #2
 8008a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a98:	e00b      	b.n	8008ab2 <HAL_TIM_PWM_Start+0xfe>
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	2b10      	cmp	r3, #16
 8008a9e:	d104      	bne.n	8008aaa <HAL_TIM_PWM_Start+0xf6>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2202      	movs	r2, #2
 8008aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008aa8:	e003      	b.n	8008ab2 <HAL_TIM_PWM_Start+0xfe>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2202      	movs	r2, #2
 8008aae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	6839      	ldr	r1, [r7, #0]
 8008aba:	4618      	mov	r0, r3
 8008abc:	f000 ff32 	bl	8009924 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a30      	ldr	r2, [pc, #192]	; (8008b88 <HAL_TIM_PWM_Start+0x1d4>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d004      	beq.n	8008ad4 <HAL_TIM_PWM_Start+0x120>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a2f      	ldr	r2, [pc, #188]	; (8008b8c <HAL_TIM_PWM_Start+0x1d8>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d101      	bne.n	8008ad8 <HAL_TIM_PWM_Start+0x124>
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e000      	b.n	8008ada <HAL_TIM_PWM_Start+0x126>
 8008ad8:	2300      	movs	r3, #0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d007      	beq.n	8008aee <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008aec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a25      	ldr	r2, [pc, #148]	; (8008b88 <HAL_TIM_PWM_Start+0x1d4>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d022      	beq.n	8008b3e <HAL_TIM_PWM_Start+0x18a>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b00:	d01d      	beq.n	8008b3e <HAL_TIM_PWM_Start+0x18a>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a22      	ldr	r2, [pc, #136]	; (8008b90 <HAL_TIM_PWM_Start+0x1dc>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d018      	beq.n	8008b3e <HAL_TIM_PWM_Start+0x18a>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a20      	ldr	r2, [pc, #128]	; (8008b94 <HAL_TIM_PWM_Start+0x1e0>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d013      	beq.n	8008b3e <HAL_TIM_PWM_Start+0x18a>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a1f      	ldr	r2, [pc, #124]	; (8008b98 <HAL_TIM_PWM_Start+0x1e4>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d00e      	beq.n	8008b3e <HAL_TIM_PWM_Start+0x18a>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a19      	ldr	r2, [pc, #100]	; (8008b8c <HAL_TIM_PWM_Start+0x1d8>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d009      	beq.n	8008b3e <HAL_TIM_PWM_Start+0x18a>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a1b      	ldr	r2, [pc, #108]	; (8008b9c <HAL_TIM_PWM_Start+0x1e8>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d004      	beq.n	8008b3e <HAL_TIM_PWM_Start+0x18a>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a19      	ldr	r2, [pc, #100]	; (8008ba0 <HAL_TIM_PWM_Start+0x1ec>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d115      	bne.n	8008b6a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	689a      	ldr	r2, [r3, #8]
 8008b44:	4b17      	ldr	r3, [pc, #92]	; (8008ba4 <HAL_TIM_PWM_Start+0x1f0>)
 8008b46:	4013      	ands	r3, r2
 8008b48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2b06      	cmp	r3, #6
 8008b4e:	d015      	beq.n	8008b7c <HAL_TIM_PWM_Start+0x1c8>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b56:	d011      	beq.n	8008b7c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f042 0201 	orr.w	r2, r2, #1
 8008b66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b68:	e008      	b.n	8008b7c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f042 0201 	orr.w	r2, r2, #1
 8008b78:	601a      	str	r2, [r3, #0]
 8008b7a:	e000      	b.n	8008b7e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b7e:	2300      	movs	r3, #0
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3710      	adds	r7, #16
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	40010000 	.word	0x40010000
 8008b8c:	40010400 	.word	0x40010400
 8008b90:	40000400 	.word	0x40000400
 8008b94:	40000800 	.word	0x40000800
 8008b98:	40000c00 	.word	0x40000c00
 8008b9c:	40014000 	.word	0x40014000
 8008ba0:	40001800 	.word	0x40001800
 8008ba4:	00010007 	.word	0x00010007

08008ba8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	f003 0302 	and.w	r3, r3, #2
 8008bba:	2b02      	cmp	r3, #2
 8008bbc:	d122      	bne.n	8008c04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	f003 0302 	and.w	r3, r3, #2
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	d11b      	bne.n	8008c04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f06f 0202 	mvn.w	r2, #2
 8008bd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	699b      	ldr	r3, [r3, #24]
 8008be2:	f003 0303 	and.w	r3, r3, #3
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d003      	beq.n	8008bf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 fae4 	bl	80091b8 <HAL_TIM_IC_CaptureCallback>
 8008bf0:	e005      	b.n	8008bfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 fad6 	bl	80091a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 fae7 	bl	80091cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	691b      	ldr	r3, [r3, #16]
 8008c0a:	f003 0304 	and.w	r3, r3, #4
 8008c0e:	2b04      	cmp	r3, #4
 8008c10:	d122      	bne.n	8008c58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	f003 0304 	and.w	r3, r3, #4
 8008c1c:	2b04      	cmp	r3, #4
 8008c1e:	d11b      	bne.n	8008c58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f06f 0204 	mvn.w	r2, #4
 8008c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2202      	movs	r2, #2
 8008c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	699b      	ldr	r3, [r3, #24]
 8008c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d003      	beq.n	8008c46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 faba 	bl	80091b8 <HAL_TIM_IC_CaptureCallback>
 8008c44:	e005      	b.n	8008c52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 faac 	bl	80091a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 fabd 	bl	80091cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2200      	movs	r2, #0
 8008c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	f003 0308 	and.w	r3, r3, #8
 8008c62:	2b08      	cmp	r3, #8
 8008c64:	d122      	bne.n	8008cac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	f003 0308 	and.w	r3, r3, #8
 8008c70:	2b08      	cmp	r3, #8
 8008c72:	d11b      	bne.n	8008cac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f06f 0208 	mvn.w	r2, #8
 8008c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2204      	movs	r2, #4
 8008c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	69db      	ldr	r3, [r3, #28]
 8008c8a:	f003 0303 	and.w	r3, r3, #3
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d003      	beq.n	8008c9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 fa90 	bl	80091b8 <HAL_TIM_IC_CaptureCallback>
 8008c98:	e005      	b.n	8008ca6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 fa82 	bl	80091a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 fa93 	bl	80091cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	f003 0310 	and.w	r3, r3, #16
 8008cb6:	2b10      	cmp	r3, #16
 8008cb8:	d122      	bne.n	8008d00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	f003 0310 	and.w	r3, r3, #16
 8008cc4:	2b10      	cmp	r3, #16
 8008cc6:	d11b      	bne.n	8008d00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f06f 0210 	mvn.w	r2, #16
 8008cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2208      	movs	r2, #8
 8008cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	69db      	ldr	r3, [r3, #28]
 8008cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d003      	beq.n	8008cee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 fa66 	bl	80091b8 <HAL_TIM_IC_CaptureCallback>
 8008cec:	e005      	b.n	8008cfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 fa58 	bl	80091a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 fa69 	bl	80091cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	f003 0301 	and.w	r3, r3, #1
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d10e      	bne.n	8008d2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	f003 0301 	and.w	r3, r3, #1
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d107      	bne.n	8008d2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f06f 0201 	mvn.w	r2, #1
 8008d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f7fa fb42 	bl	80033b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	691b      	ldr	r3, [r3, #16]
 8008d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d36:	2b80      	cmp	r3, #128	; 0x80
 8008d38:	d10e      	bne.n	8008d58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d44:	2b80      	cmp	r3, #128	; 0x80
 8008d46:	d107      	bne.n	8008d58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 fea4 	bl	8009aa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	691b      	ldr	r3, [r3, #16]
 8008d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d66:	d10e      	bne.n	8008d86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d72:	2b80      	cmp	r3, #128	; 0x80
 8008d74:	d107      	bne.n	8008d86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 fe97 	bl	8009ab4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	691b      	ldr	r3, [r3, #16]
 8008d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d90:	2b40      	cmp	r3, #64	; 0x40
 8008d92:	d10e      	bne.n	8008db2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d9e:	2b40      	cmp	r3, #64	; 0x40
 8008da0:	d107      	bne.n	8008db2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008daa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 fa17 	bl	80091e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	691b      	ldr	r3, [r3, #16]
 8008db8:	f003 0320 	and.w	r3, r3, #32
 8008dbc:	2b20      	cmp	r3, #32
 8008dbe:	d10e      	bne.n	8008dde <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	f003 0320 	and.w	r3, r3, #32
 8008dca:	2b20      	cmp	r3, #32
 8008dcc:	d107      	bne.n	8008dde <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f06f 0220 	mvn.w	r2, #32
 8008dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 fe57 	bl	8009a8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008dde:	bf00      	nop
 8008de0:	3708      	adds	r7, #8
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
	...

08008de8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b086      	sub	sp, #24
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008df4:	2300      	movs	r3, #0
 8008df6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d101      	bne.n	8008e06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008e02:	2302      	movs	r3, #2
 8008e04:	e0ff      	b.n	8009006 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2b14      	cmp	r3, #20
 8008e12:	f200 80f0 	bhi.w	8008ff6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008e16:	a201      	add	r2, pc, #4	; (adr r2, 8008e1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1c:	08008e71 	.word	0x08008e71
 8008e20:	08008ff7 	.word	0x08008ff7
 8008e24:	08008ff7 	.word	0x08008ff7
 8008e28:	08008ff7 	.word	0x08008ff7
 8008e2c:	08008eb1 	.word	0x08008eb1
 8008e30:	08008ff7 	.word	0x08008ff7
 8008e34:	08008ff7 	.word	0x08008ff7
 8008e38:	08008ff7 	.word	0x08008ff7
 8008e3c:	08008ef3 	.word	0x08008ef3
 8008e40:	08008ff7 	.word	0x08008ff7
 8008e44:	08008ff7 	.word	0x08008ff7
 8008e48:	08008ff7 	.word	0x08008ff7
 8008e4c:	08008f33 	.word	0x08008f33
 8008e50:	08008ff7 	.word	0x08008ff7
 8008e54:	08008ff7 	.word	0x08008ff7
 8008e58:	08008ff7 	.word	0x08008ff7
 8008e5c:	08008f75 	.word	0x08008f75
 8008e60:	08008ff7 	.word	0x08008ff7
 8008e64:	08008ff7 	.word	0x08008ff7
 8008e68:	08008ff7 	.word	0x08008ff7
 8008e6c:	08008fb5 	.word	0x08008fb5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	68b9      	ldr	r1, [r7, #8]
 8008e76:	4618      	mov	r0, r3
 8008e78:	f000 fa5c 	bl	8009334 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	699a      	ldr	r2, [r3, #24]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f042 0208 	orr.w	r2, r2, #8
 8008e8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	699a      	ldr	r2, [r3, #24]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f022 0204 	bic.w	r2, r2, #4
 8008e9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	6999      	ldr	r1, [r3, #24]
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	691a      	ldr	r2, [r3, #16]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	430a      	orrs	r2, r1
 8008eac:	619a      	str	r2, [r3, #24]
      break;
 8008eae:	e0a5      	b.n	8008ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68b9      	ldr	r1, [r7, #8]
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f000 faae 	bl	8009418 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	699a      	ldr	r2, [r3, #24]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008eca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	699a      	ldr	r2, [r3, #24]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008eda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6999      	ldr	r1, [r3, #24]
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	021a      	lsls	r2, r3, #8
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	430a      	orrs	r2, r1
 8008eee:	619a      	str	r2, [r3, #24]
      break;
 8008ef0:	e084      	b.n	8008ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68b9      	ldr	r1, [r7, #8]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f000 fb05 	bl	8009508 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	69da      	ldr	r2, [r3, #28]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f042 0208 	orr.w	r2, r2, #8
 8008f0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	69da      	ldr	r2, [r3, #28]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f022 0204 	bic.w	r2, r2, #4
 8008f1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	69d9      	ldr	r1, [r3, #28]
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	691a      	ldr	r2, [r3, #16]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	430a      	orrs	r2, r1
 8008f2e:	61da      	str	r2, [r3, #28]
      break;
 8008f30:	e064      	b.n	8008ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68b9      	ldr	r1, [r7, #8]
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f000 fb5b 	bl	80095f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	69da      	ldr	r2, [r3, #28]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	69da      	ldr	r2, [r3, #28]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	69d9      	ldr	r1, [r3, #28]
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	691b      	ldr	r3, [r3, #16]
 8008f68:	021a      	lsls	r2, r3, #8
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	430a      	orrs	r2, r1
 8008f70:	61da      	str	r2, [r3, #28]
      break;
 8008f72:	e043      	b.n	8008ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	68b9      	ldr	r1, [r7, #8]
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f000 fb92 	bl	80096a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f042 0208 	orr.w	r2, r2, #8
 8008f8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f022 0204 	bic.w	r2, r2, #4
 8008f9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	691a      	ldr	r2, [r3, #16]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	430a      	orrs	r2, r1
 8008fb0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008fb2:	e023      	b.n	8008ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	68b9      	ldr	r1, [r7, #8]
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f000 fbc4 	bl	8009748 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fde:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	691b      	ldr	r3, [r3, #16]
 8008fea:	021a      	lsls	r2, r3, #8
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	430a      	orrs	r2, r1
 8008ff2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008ff4:	e002      	b.n	8008ffc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	75fb      	strb	r3, [r7, #23]
      break;
 8008ffa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009004:	7dfb      	ldrb	r3, [r7, #23]
}
 8009006:	4618      	mov	r0, r3
 8009008:	3718      	adds	r7, #24
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop

08009010 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800901a:	2300      	movs	r3, #0
 800901c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009024:	2b01      	cmp	r3, #1
 8009026:	d101      	bne.n	800902c <HAL_TIM_ConfigClockSource+0x1c>
 8009028:	2302      	movs	r3, #2
 800902a:	e0b4      	b.n	8009196 <HAL_TIM_ConfigClockSource+0x186>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2201      	movs	r2, #1
 8009030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2202      	movs	r2, #2
 8009038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009044:	68ba      	ldr	r2, [r7, #8]
 8009046:	4b56      	ldr	r3, [pc, #344]	; (80091a0 <HAL_TIM_ConfigClockSource+0x190>)
 8009048:	4013      	ands	r3, r2
 800904a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009052:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	68ba      	ldr	r2, [r7, #8]
 800905a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009064:	d03e      	beq.n	80090e4 <HAL_TIM_ConfigClockSource+0xd4>
 8009066:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800906a:	f200 8087 	bhi.w	800917c <HAL_TIM_ConfigClockSource+0x16c>
 800906e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009072:	f000 8086 	beq.w	8009182 <HAL_TIM_ConfigClockSource+0x172>
 8009076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800907a:	d87f      	bhi.n	800917c <HAL_TIM_ConfigClockSource+0x16c>
 800907c:	2b70      	cmp	r3, #112	; 0x70
 800907e:	d01a      	beq.n	80090b6 <HAL_TIM_ConfigClockSource+0xa6>
 8009080:	2b70      	cmp	r3, #112	; 0x70
 8009082:	d87b      	bhi.n	800917c <HAL_TIM_ConfigClockSource+0x16c>
 8009084:	2b60      	cmp	r3, #96	; 0x60
 8009086:	d050      	beq.n	800912a <HAL_TIM_ConfigClockSource+0x11a>
 8009088:	2b60      	cmp	r3, #96	; 0x60
 800908a:	d877      	bhi.n	800917c <HAL_TIM_ConfigClockSource+0x16c>
 800908c:	2b50      	cmp	r3, #80	; 0x50
 800908e:	d03c      	beq.n	800910a <HAL_TIM_ConfigClockSource+0xfa>
 8009090:	2b50      	cmp	r3, #80	; 0x50
 8009092:	d873      	bhi.n	800917c <HAL_TIM_ConfigClockSource+0x16c>
 8009094:	2b40      	cmp	r3, #64	; 0x40
 8009096:	d058      	beq.n	800914a <HAL_TIM_ConfigClockSource+0x13a>
 8009098:	2b40      	cmp	r3, #64	; 0x40
 800909a:	d86f      	bhi.n	800917c <HAL_TIM_ConfigClockSource+0x16c>
 800909c:	2b30      	cmp	r3, #48	; 0x30
 800909e:	d064      	beq.n	800916a <HAL_TIM_ConfigClockSource+0x15a>
 80090a0:	2b30      	cmp	r3, #48	; 0x30
 80090a2:	d86b      	bhi.n	800917c <HAL_TIM_ConfigClockSource+0x16c>
 80090a4:	2b20      	cmp	r3, #32
 80090a6:	d060      	beq.n	800916a <HAL_TIM_ConfigClockSource+0x15a>
 80090a8:	2b20      	cmp	r3, #32
 80090aa:	d867      	bhi.n	800917c <HAL_TIM_ConfigClockSource+0x16c>
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d05c      	beq.n	800916a <HAL_TIM_ConfigClockSource+0x15a>
 80090b0:	2b10      	cmp	r3, #16
 80090b2:	d05a      	beq.n	800916a <HAL_TIM_ConfigClockSource+0x15a>
 80090b4:	e062      	b.n	800917c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80090c6:	f000 fc0d 	bl	80098e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80090d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68ba      	ldr	r2, [r7, #8]
 80090e0:	609a      	str	r2, [r3, #8]
      break;
 80090e2:	e04f      	b.n	8009184 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80090f4:	f000 fbf6 	bl	80098e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	689a      	ldr	r2, [r3, #8]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009106:	609a      	str	r2, [r3, #8]
      break;
 8009108:	e03c      	b.n	8009184 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009116:	461a      	mov	r2, r3
 8009118:	f000 fb6a 	bl	80097f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2150      	movs	r1, #80	; 0x50
 8009122:	4618      	mov	r0, r3
 8009124:	f000 fbc3 	bl	80098ae <TIM_ITRx_SetConfig>
      break;
 8009128:	e02c      	b.n	8009184 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009136:	461a      	mov	r2, r3
 8009138:	f000 fb89 	bl	800984e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	2160      	movs	r1, #96	; 0x60
 8009142:	4618      	mov	r0, r3
 8009144:	f000 fbb3 	bl	80098ae <TIM_ITRx_SetConfig>
      break;
 8009148:	e01c      	b.n	8009184 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009156:	461a      	mov	r2, r3
 8009158:	f000 fb4a 	bl	80097f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2140      	movs	r1, #64	; 0x40
 8009162:	4618      	mov	r0, r3
 8009164:	f000 fba3 	bl	80098ae <TIM_ITRx_SetConfig>
      break;
 8009168:	e00c      	b.n	8009184 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4619      	mov	r1, r3
 8009174:	4610      	mov	r0, r2
 8009176:	f000 fb9a 	bl	80098ae <TIM_ITRx_SetConfig>
      break;
 800917a:	e003      	b.n	8009184 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800917c:	2301      	movs	r3, #1
 800917e:	73fb      	strb	r3, [r7, #15]
      break;
 8009180:	e000      	b.n	8009184 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009182:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009194:	7bfb      	ldrb	r3, [r7, #15]
}
 8009196:	4618      	mov	r0, r3
 8009198:	3710      	adds	r7, #16
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop
 80091a0:	fffeff88 	.word	0xfffeff88

080091a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80091ac:	bf00      	nop
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80091c0:	bf00      	nop
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80091d4:	bf00      	nop
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80091e8:	bf00      	nop
 80091ea:	370c      	adds	r7, #12
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b085      	sub	sp, #20
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	4a40      	ldr	r2, [pc, #256]	; (8009308 <TIM_Base_SetConfig+0x114>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d013      	beq.n	8009234 <TIM_Base_SetConfig+0x40>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009212:	d00f      	beq.n	8009234 <TIM_Base_SetConfig+0x40>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	4a3d      	ldr	r2, [pc, #244]	; (800930c <TIM_Base_SetConfig+0x118>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d00b      	beq.n	8009234 <TIM_Base_SetConfig+0x40>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	4a3c      	ldr	r2, [pc, #240]	; (8009310 <TIM_Base_SetConfig+0x11c>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d007      	beq.n	8009234 <TIM_Base_SetConfig+0x40>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	4a3b      	ldr	r2, [pc, #236]	; (8009314 <TIM_Base_SetConfig+0x120>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d003      	beq.n	8009234 <TIM_Base_SetConfig+0x40>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4a3a      	ldr	r2, [pc, #232]	; (8009318 <TIM_Base_SetConfig+0x124>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d108      	bne.n	8009246 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800923a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	68fa      	ldr	r2, [r7, #12]
 8009242:	4313      	orrs	r3, r2
 8009244:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	4a2f      	ldr	r2, [pc, #188]	; (8009308 <TIM_Base_SetConfig+0x114>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d02b      	beq.n	80092a6 <TIM_Base_SetConfig+0xb2>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009254:	d027      	beq.n	80092a6 <TIM_Base_SetConfig+0xb2>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	4a2c      	ldr	r2, [pc, #176]	; (800930c <TIM_Base_SetConfig+0x118>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d023      	beq.n	80092a6 <TIM_Base_SetConfig+0xb2>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	4a2b      	ldr	r2, [pc, #172]	; (8009310 <TIM_Base_SetConfig+0x11c>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d01f      	beq.n	80092a6 <TIM_Base_SetConfig+0xb2>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	4a2a      	ldr	r2, [pc, #168]	; (8009314 <TIM_Base_SetConfig+0x120>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d01b      	beq.n	80092a6 <TIM_Base_SetConfig+0xb2>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	4a29      	ldr	r2, [pc, #164]	; (8009318 <TIM_Base_SetConfig+0x124>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d017      	beq.n	80092a6 <TIM_Base_SetConfig+0xb2>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	4a28      	ldr	r2, [pc, #160]	; (800931c <TIM_Base_SetConfig+0x128>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d013      	beq.n	80092a6 <TIM_Base_SetConfig+0xb2>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	4a27      	ldr	r2, [pc, #156]	; (8009320 <TIM_Base_SetConfig+0x12c>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d00f      	beq.n	80092a6 <TIM_Base_SetConfig+0xb2>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	4a26      	ldr	r2, [pc, #152]	; (8009324 <TIM_Base_SetConfig+0x130>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d00b      	beq.n	80092a6 <TIM_Base_SetConfig+0xb2>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	4a25      	ldr	r2, [pc, #148]	; (8009328 <TIM_Base_SetConfig+0x134>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d007      	beq.n	80092a6 <TIM_Base_SetConfig+0xb2>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	4a24      	ldr	r2, [pc, #144]	; (800932c <TIM_Base_SetConfig+0x138>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d003      	beq.n	80092a6 <TIM_Base_SetConfig+0xb2>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4a23      	ldr	r2, [pc, #140]	; (8009330 <TIM_Base_SetConfig+0x13c>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d108      	bne.n	80092b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	68db      	ldr	r3, [r3, #12]
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	4313      	orrs	r3, r2
 80092b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	695b      	ldr	r3, [r3, #20]
 80092c2:	4313      	orrs	r3, r2
 80092c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	68fa      	ldr	r2, [r7, #12]
 80092ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	689a      	ldr	r2, [r3, #8]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4a0a      	ldr	r2, [pc, #40]	; (8009308 <TIM_Base_SetConfig+0x114>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d003      	beq.n	80092ec <TIM_Base_SetConfig+0xf8>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4a0c      	ldr	r2, [pc, #48]	; (8009318 <TIM_Base_SetConfig+0x124>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d103      	bne.n	80092f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	691a      	ldr	r2, [r3, #16]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2201      	movs	r2, #1
 80092f8:	615a      	str	r2, [r3, #20]
}
 80092fa:	bf00      	nop
 80092fc:	3714      	adds	r7, #20
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr
 8009306:	bf00      	nop
 8009308:	40010000 	.word	0x40010000
 800930c:	40000400 	.word	0x40000400
 8009310:	40000800 	.word	0x40000800
 8009314:	40000c00 	.word	0x40000c00
 8009318:	40010400 	.word	0x40010400
 800931c:	40014000 	.word	0x40014000
 8009320:	40014400 	.word	0x40014400
 8009324:	40014800 	.word	0x40014800
 8009328:	40001800 	.word	0x40001800
 800932c:	40001c00 	.word	0x40001c00
 8009330:	40002000 	.word	0x40002000

08009334 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009334:	b480      	push	{r7}
 8009336:	b087      	sub	sp, #28
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6a1b      	ldr	r3, [r3, #32]
 8009342:	f023 0201 	bic.w	r2, r3, #1
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6a1b      	ldr	r3, [r3, #32]
 800934e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	699b      	ldr	r3, [r3, #24]
 800935a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	4b2b      	ldr	r3, [pc, #172]	; (800940c <TIM_OC1_SetConfig+0xd8>)
 8009360:	4013      	ands	r3, r2
 8009362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f023 0303 	bic.w	r3, r3, #3
 800936a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	4313      	orrs	r3, r2
 8009374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	f023 0302 	bic.w	r3, r3, #2
 800937c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	697a      	ldr	r2, [r7, #20]
 8009384:	4313      	orrs	r3, r2
 8009386:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a21      	ldr	r2, [pc, #132]	; (8009410 <TIM_OC1_SetConfig+0xdc>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d003      	beq.n	8009398 <TIM_OC1_SetConfig+0x64>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a20      	ldr	r2, [pc, #128]	; (8009414 <TIM_OC1_SetConfig+0xe0>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d10c      	bne.n	80093b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	f023 0308 	bic.w	r3, r3, #8
 800939e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	697a      	ldr	r2, [r7, #20]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	f023 0304 	bic.w	r3, r3, #4
 80093b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a16      	ldr	r2, [pc, #88]	; (8009410 <TIM_OC1_SetConfig+0xdc>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d003      	beq.n	80093c2 <TIM_OC1_SetConfig+0x8e>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4a15      	ldr	r2, [pc, #84]	; (8009414 <TIM_OC1_SetConfig+0xe0>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d111      	bne.n	80093e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80093d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	695b      	ldr	r3, [r3, #20]
 80093d6:	693a      	ldr	r2, [r7, #16]
 80093d8:	4313      	orrs	r3, r2
 80093da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	699b      	ldr	r3, [r3, #24]
 80093e0:	693a      	ldr	r2, [r7, #16]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	693a      	ldr	r2, [r7, #16]
 80093ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	685a      	ldr	r2, [r3, #4]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	697a      	ldr	r2, [r7, #20]
 80093fe:	621a      	str	r2, [r3, #32]
}
 8009400:	bf00      	nop
 8009402:	371c      	adds	r7, #28
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr
 800940c:	fffeff8f 	.word	0xfffeff8f
 8009410:	40010000 	.word	0x40010000
 8009414:	40010400 	.word	0x40010400

08009418 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009418:	b480      	push	{r7}
 800941a:	b087      	sub	sp, #28
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a1b      	ldr	r3, [r3, #32]
 8009426:	f023 0210 	bic.w	r2, r3, #16
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6a1b      	ldr	r3, [r3, #32]
 8009432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	699b      	ldr	r3, [r3, #24]
 800943e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009440:	68fa      	ldr	r2, [r7, #12]
 8009442:	4b2e      	ldr	r3, [pc, #184]	; (80094fc <TIM_OC2_SetConfig+0xe4>)
 8009444:	4013      	ands	r3, r2
 8009446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800944e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	021b      	lsls	r3, r3, #8
 8009456:	68fa      	ldr	r2, [r7, #12]
 8009458:	4313      	orrs	r3, r2
 800945a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	f023 0320 	bic.w	r3, r3, #32
 8009462:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	011b      	lsls	r3, r3, #4
 800946a:	697a      	ldr	r2, [r7, #20]
 800946c:	4313      	orrs	r3, r2
 800946e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a23      	ldr	r2, [pc, #140]	; (8009500 <TIM_OC2_SetConfig+0xe8>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d003      	beq.n	8009480 <TIM_OC2_SetConfig+0x68>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a22      	ldr	r2, [pc, #136]	; (8009504 <TIM_OC2_SetConfig+0xec>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d10d      	bne.n	800949c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	68db      	ldr	r3, [r3, #12]
 800948c:	011b      	lsls	r3, r3, #4
 800948e:	697a      	ldr	r2, [r7, #20]
 8009490:	4313      	orrs	r3, r2
 8009492:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800949a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a18      	ldr	r2, [pc, #96]	; (8009500 <TIM_OC2_SetConfig+0xe8>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d003      	beq.n	80094ac <TIM_OC2_SetConfig+0x94>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a17      	ldr	r2, [pc, #92]	; (8009504 <TIM_OC2_SetConfig+0xec>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d113      	bne.n	80094d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80094b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80094ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	695b      	ldr	r3, [r3, #20]
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	693a      	ldr	r2, [r7, #16]
 80094c4:	4313      	orrs	r3, r2
 80094c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	699b      	ldr	r3, [r3, #24]
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	693a      	ldr	r2, [r7, #16]
 80094d0:	4313      	orrs	r3, r2
 80094d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	693a      	ldr	r2, [r7, #16]
 80094d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	685a      	ldr	r2, [r3, #4]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	697a      	ldr	r2, [r7, #20]
 80094ec:	621a      	str	r2, [r3, #32]
}
 80094ee:	bf00      	nop
 80094f0:	371c      	adds	r7, #28
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	feff8fff 	.word	0xfeff8fff
 8009500:	40010000 	.word	0x40010000
 8009504:	40010400 	.word	0x40010400

08009508 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009508:	b480      	push	{r7}
 800950a:	b087      	sub	sp, #28
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a1b      	ldr	r3, [r3, #32]
 8009516:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6a1b      	ldr	r3, [r3, #32]
 8009522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	69db      	ldr	r3, [r3, #28]
 800952e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	4b2d      	ldr	r3, [pc, #180]	; (80095e8 <TIM_OC3_SetConfig+0xe0>)
 8009534:	4013      	ands	r3, r2
 8009536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f023 0303 	bic.w	r3, r3, #3
 800953e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	4313      	orrs	r3, r2
 8009548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009550:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	021b      	lsls	r3, r3, #8
 8009558:	697a      	ldr	r2, [r7, #20]
 800955a:	4313      	orrs	r3, r2
 800955c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4a22      	ldr	r2, [pc, #136]	; (80095ec <TIM_OC3_SetConfig+0xe4>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d003      	beq.n	800956e <TIM_OC3_SetConfig+0x66>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4a21      	ldr	r2, [pc, #132]	; (80095f0 <TIM_OC3_SetConfig+0xe8>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d10d      	bne.n	800958a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009574:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	021b      	lsls	r3, r3, #8
 800957c:	697a      	ldr	r2, [r7, #20]
 800957e:	4313      	orrs	r3, r2
 8009580:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009588:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a17      	ldr	r2, [pc, #92]	; (80095ec <TIM_OC3_SetConfig+0xe4>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d003      	beq.n	800959a <TIM_OC3_SetConfig+0x92>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4a16      	ldr	r2, [pc, #88]	; (80095f0 <TIM_OC3_SetConfig+0xe8>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d113      	bne.n	80095c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80095a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	695b      	ldr	r3, [r3, #20]
 80095ae:	011b      	lsls	r3, r3, #4
 80095b0:	693a      	ldr	r2, [r7, #16]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	699b      	ldr	r3, [r3, #24]
 80095ba:	011b      	lsls	r3, r3, #4
 80095bc:	693a      	ldr	r2, [r7, #16]
 80095be:	4313      	orrs	r3, r2
 80095c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	693a      	ldr	r2, [r7, #16]
 80095c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	68fa      	ldr	r2, [r7, #12]
 80095cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	685a      	ldr	r2, [r3, #4]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	697a      	ldr	r2, [r7, #20]
 80095da:	621a      	str	r2, [r3, #32]
}
 80095dc:	bf00      	nop
 80095de:	371c      	adds	r7, #28
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr
 80095e8:	fffeff8f 	.word	0xfffeff8f
 80095ec:	40010000 	.word	0x40010000
 80095f0:	40010400 	.word	0x40010400

080095f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b087      	sub	sp, #28
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6a1b      	ldr	r3, [r3, #32]
 8009602:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6a1b      	ldr	r3, [r3, #32]
 800960e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	69db      	ldr	r3, [r3, #28]
 800961a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	4b1e      	ldr	r3, [pc, #120]	; (8009698 <TIM_OC4_SetConfig+0xa4>)
 8009620:	4013      	ands	r3, r2
 8009622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800962a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	021b      	lsls	r3, r3, #8
 8009632:	68fa      	ldr	r2, [r7, #12]
 8009634:	4313      	orrs	r3, r2
 8009636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800963e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	031b      	lsls	r3, r3, #12
 8009646:	693a      	ldr	r2, [r7, #16]
 8009648:	4313      	orrs	r3, r2
 800964a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	4a13      	ldr	r2, [pc, #76]	; (800969c <TIM_OC4_SetConfig+0xa8>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d003      	beq.n	800965c <TIM_OC4_SetConfig+0x68>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	4a12      	ldr	r2, [pc, #72]	; (80096a0 <TIM_OC4_SetConfig+0xac>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d109      	bne.n	8009670 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009662:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	695b      	ldr	r3, [r3, #20]
 8009668:	019b      	lsls	r3, r3, #6
 800966a:	697a      	ldr	r2, [r7, #20]
 800966c:	4313      	orrs	r3, r2
 800966e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	697a      	ldr	r2, [r7, #20]
 8009674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	68fa      	ldr	r2, [r7, #12]
 800967a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	685a      	ldr	r2, [r3, #4]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	693a      	ldr	r2, [r7, #16]
 8009688:	621a      	str	r2, [r3, #32]
}
 800968a:	bf00      	nop
 800968c:	371c      	adds	r7, #28
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr
 8009696:	bf00      	nop
 8009698:	feff8fff 	.word	0xfeff8fff
 800969c:	40010000 	.word	0x40010000
 80096a0:	40010400 	.word	0x40010400

080096a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b087      	sub	sp, #28
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6a1b      	ldr	r3, [r3, #32]
 80096b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6a1b      	ldr	r3, [r3, #32]
 80096be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80096cc:	68fa      	ldr	r2, [r7, #12]
 80096ce:	4b1b      	ldr	r3, [pc, #108]	; (800973c <TIM_OC5_SetConfig+0x98>)
 80096d0:	4013      	ands	r3, r2
 80096d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	4313      	orrs	r3, r2
 80096dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80096e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	041b      	lsls	r3, r3, #16
 80096ec:	693a      	ldr	r2, [r7, #16]
 80096ee:	4313      	orrs	r3, r2
 80096f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4a12      	ldr	r2, [pc, #72]	; (8009740 <TIM_OC5_SetConfig+0x9c>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d003      	beq.n	8009702 <TIM_OC5_SetConfig+0x5e>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4a11      	ldr	r2, [pc, #68]	; (8009744 <TIM_OC5_SetConfig+0xa0>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d109      	bne.n	8009716 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009708:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	695b      	ldr	r3, [r3, #20]
 800970e:	021b      	lsls	r3, r3, #8
 8009710:	697a      	ldr	r2, [r7, #20]
 8009712:	4313      	orrs	r3, r2
 8009714:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	697a      	ldr	r2, [r7, #20]
 800971a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	68fa      	ldr	r2, [r7, #12]
 8009720:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	685a      	ldr	r2, [r3, #4]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	693a      	ldr	r2, [r7, #16]
 800972e:	621a      	str	r2, [r3, #32]
}
 8009730:	bf00      	nop
 8009732:	371c      	adds	r7, #28
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr
 800973c:	fffeff8f 	.word	0xfffeff8f
 8009740:	40010000 	.word	0x40010000
 8009744:	40010400 	.word	0x40010400

08009748 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009748:	b480      	push	{r7}
 800974a:	b087      	sub	sp, #28
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6a1b      	ldr	r3, [r3, #32]
 8009756:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a1b      	ldr	r3, [r3, #32]
 8009762:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800976e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009770:	68fa      	ldr	r2, [r7, #12]
 8009772:	4b1c      	ldr	r3, [pc, #112]	; (80097e4 <TIM_OC6_SetConfig+0x9c>)
 8009774:	4013      	ands	r3, r2
 8009776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	021b      	lsls	r3, r3, #8
 800977e:	68fa      	ldr	r2, [r7, #12]
 8009780:	4313      	orrs	r3, r2
 8009782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800978a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	051b      	lsls	r3, r3, #20
 8009792:	693a      	ldr	r2, [r7, #16]
 8009794:	4313      	orrs	r3, r2
 8009796:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4a13      	ldr	r2, [pc, #76]	; (80097e8 <TIM_OC6_SetConfig+0xa0>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d003      	beq.n	80097a8 <TIM_OC6_SetConfig+0x60>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a12      	ldr	r2, [pc, #72]	; (80097ec <TIM_OC6_SetConfig+0xa4>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d109      	bne.n	80097bc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80097ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	695b      	ldr	r3, [r3, #20]
 80097b4:	029b      	lsls	r3, r3, #10
 80097b6:	697a      	ldr	r2, [r7, #20]
 80097b8:	4313      	orrs	r3, r2
 80097ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	697a      	ldr	r2, [r7, #20]
 80097c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	685a      	ldr	r2, [r3, #4]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	693a      	ldr	r2, [r7, #16]
 80097d4:	621a      	str	r2, [r3, #32]
}
 80097d6:	bf00      	nop
 80097d8:	371c      	adds	r7, #28
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop
 80097e4:	feff8fff 	.word	0xfeff8fff
 80097e8:	40010000 	.word	0x40010000
 80097ec:	40010400 	.word	0x40010400

080097f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b087      	sub	sp, #28
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	60b9      	str	r1, [r7, #8]
 80097fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6a1b      	ldr	r3, [r3, #32]
 8009800:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6a1b      	ldr	r3, [r3, #32]
 8009806:	f023 0201 	bic.w	r2, r3, #1
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	699b      	ldr	r3, [r3, #24]
 8009812:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800981a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	011b      	lsls	r3, r3, #4
 8009820:	693a      	ldr	r2, [r7, #16]
 8009822:	4313      	orrs	r3, r2
 8009824:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	f023 030a 	bic.w	r3, r3, #10
 800982c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800982e:	697a      	ldr	r2, [r7, #20]
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	4313      	orrs	r3, r2
 8009834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	693a      	ldr	r2, [r7, #16]
 800983a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	697a      	ldr	r2, [r7, #20]
 8009840:	621a      	str	r2, [r3, #32]
}
 8009842:	bf00      	nop
 8009844:	371c      	adds	r7, #28
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr

0800984e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800984e:	b480      	push	{r7}
 8009850:	b087      	sub	sp, #28
 8009852:	af00      	add	r7, sp, #0
 8009854:	60f8      	str	r0, [r7, #12]
 8009856:	60b9      	str	r1, [r7, #8]
 8009858:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	6a1b      	ldr	r3, [r3, #32]
 800985e:	f023 0210 	bic.w	r2, r3, #16
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	699b      	ldr	r3, [r3, #24]
 800986a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	6a1b      	ldr	r3, [r3, #32]
 8009870:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009878:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	031b      	lsls	r3, r3, #12
 800987e:	697a      	ldr	r2, [r7, #20]
 8009880:	4313      	orrs	r3, r2
 8009882:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800988a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	011b      	lsls	r3, r3, #4
 8009890:	693a      	ldr	r2, [r7, #16]
 8009892:	4313      	orrs	r3, r2
 8009894:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	697a      	ldr	r2, [r7, #20]
 800989a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	693a      	ldr	r2, [r7, #16]
 80098a0:	621a      	str	r2, [r3, #32]
}
 80098a2:	bf00      	nop
 80098a4:	371c      	adds	r7, #28
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr

080098ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80098ae:	b480      	push	{r7}
 80098b0:	b085      	sub	sp, #20
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
 80098b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80098c6:	683a      	ldr	r2, [r7, #0]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	4313      	orrs	r3, r2
 80098cc:	f043 0307 	orr.w	r3, r3, #7
 80098d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	609a      	str	r2, [r3, #8]
}
 80098d8:	bf00      	nop
 80098da:	3714      	adds	r7, #20
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b087      	sub	sp, #28
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	607a      	str	r2, [r7, #4]
 80098f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80098fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	021a      	lsls	r2, r3, #8
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	431a      	orrs	r2, r3
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	4313      	orrs	r3, r2
 800990c:	697a      	ldr	r2, [r7, #20]
 800990e:	4313      	orrs	r3, r2
 8009910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	697a      	ldr	r2, [r7, #20]
 8009916:	609a      	str	r2, [r3, #8]
}
 8009918:	bf00      	nop
 800991a:	371c      	adds	r7, #28
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009924:	b480      	push	{r7}
 8009926:	b087      	sub	sp, #28
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	f003 031f 	and.w	r3, r3, #31
 8009936:	2201      	movs	r2, #1
 8009938:	fa02 f303 	lsl.w	r3, r2, r3
 800993c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	6a1a      	ldr	r2, [r3, #32]
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	43db      	mvns	r3, r3
 8009946:	401a      	ands	r2, r3
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6a1a      	ldr	r2, [r3, #32]
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	f003 031f 	and.w	r3, r3, #31
 8009956:	6879      	ldr	r1, [r7, #4]
 8009958:	fa01 f303 	lsl.w	r3, r1, r3
 800995c:	431a      	orrs	r2, r3
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	621a      	str	r2, [r3, #32]
}
 8009962:	bf00      	nop
 8009964:	371c      	adds	r7, #28
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr
	...

08009970 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009970:	b480      	push	{r7}
 8009972:	b085      	sub	sp, #20
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009980:	2b01      	cmp	r3, #1
 8009982:	d101      	bne.n	8009988 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009984:	2302      	movs	r3, #2
 8009986:	e06d      	b.n	8009a64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2202      	movs	r2, #2
 8009994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a30      	ldr	r2, [pc, #192]	; (8009a70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d004      	beq.n	80099bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a2f      	ldr	r2, [pc, #188]	; (8009a74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d108      	bne.n	80099ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80099c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	68fa      	ldr	r2, [r7, #12]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	68fa      	ldr	r2, [r7, #12]
 80099dc:	4313      	orrs	r3, r2
 80099de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	68fa      	ldr	r2, [r7, #12]
 80099e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a20      	ldr	r2, [pc, #128]	; (8009a70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d022      	beq.n	8009a38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099fa:	d01d      	beq.n	8009a38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a1d      	ldr	r2, [pc, #116]	; (8009a78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d018      	beq.n	8009a38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a1c      	ldr	r2, [pc, #112]	; (8009a7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d013      	beq.n	8009a38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a1a      	ldr	r2, [pc, #104]	; (8009a80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d00e      	beq.n	8009a38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4a15      	ldr	r2, [pc, #84]	; (8009a74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d009      	beq.n	8009a38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a16      	ldr	r2, [pc, #88]	; (8009a84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d004      	beq.n	8009a38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4a15      	ldr	r2, [pc, #84]	; (8009a88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d10c      	bne.n	8009a52 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	68ba      	ldr	r2, [r7, #8]
 8009a46:	4313      	orrs	r3, r2
 8009a48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	68ba      	ldr	r2, [r7, #8]
 8009a50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2201      	movs	r2, #1
 8009a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a62:	2300      	movs	r3, #0
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3714      	adds	r7, #20
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr
 8009a70:	40010000 	.word	0x40010000
 8009a74:	40010400 	.word	0x40010400
 8009a78:	40000400 	.word	0x40000400
 8009a7c:	40000800 	.word	0x40000800
 8009a80:	40000c00 	.word	0x40000c00
 8009a84:	40014000 	.word	0x40014000
 8009a88:	40001800 	.word	0x40001800

08009a8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b083      	sub	sp, #12
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a94:	bf00      	nop
 8009a96:	370c      	adds	r7, #12
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009aa8:	bf00      	nop
 8009aaa:	370c      	adds	r7, #12
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b083      	sub	sp, #12
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009abc:	bf00      	nop
 8009abe:	370c      	adds	r7, #12
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr

08009ac8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d101      	bne.n	8009ada <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e040      	b.n	8009b5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d106      	bne.n	8009af0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f7fa fd04 	bl	80044f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2224      	movs	r2, #36	; 0x24
 8009af4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f022 0201 	bic.w	r2, r2, #1
 8009b04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 fbe6 	bl	800a2d8 <UART_SetConfig>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d101      	bne.n	8009b16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009b12:	2301      	movs	r3, #1
 8009b14:	e022      	b.n	8009b5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d002      	beq.n	8009b24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 fe3e 	bl	800a7a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	685a      	ldr	r2, [r3, #4]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	689a      	ldr	r2, [r3, #8]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f042 0201 	orr.w	r2, r2, #1
 8009b52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 fec5 	bl	800a8e4 <UART_CheckIdleState>
 8009b5a:	4603      	mov	r3, r0
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3708      	adds	r7, #8
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b08a      	sub	sp, #40	; 0x28
 8009b68:	af02      	add	r7, sp, #8
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	603b      	str	r3, [r7, #0]
 8009b70:	4613      	mov	r3, r2
 8009b72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b78:	2b20      	cmp	r3, #32
 8009b7a:	d171      	bne.n	8009c60 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d002      	beq.n	8009b88 <HAL_UART_Transmit+0x24>
 8009b82:	88fb      	ldrh	r3, [r7, #6]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d101      	bne.n	8009b8c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009b88:	2301      	movs	r3, #1
 8009b8a:	e06a      	b.n	8009c62 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2221      	movs	r2, #33	; 0x21
 8009b98:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009b9a:	f7fa fd8f 	bl	80046bc <HAL_GetTick>
 8009b9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	88fa      	ldrh	r2, [r7, #6]
 8009ba4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	88fa      	ldrh	r2, [r7, #6]
 8009bac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bb8:	d108      	bne.n	8009bcc <HAL_UART_Transmit+0x68>
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	691b      	ldr	r3, [r3, #16]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d104      	bne.n	8009bcc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	61bb      	str	r3, [r7, #24]
 8009bca:	e003      	b.n	8009bd4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009bd4:	e02c      	b.n	8009c30 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	9300      	str	r3, [sp, #0]
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	2180      	movs	r1, #128	; 0x80
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f000 feb6 	bl	800a952 <UART_WaitOnFlagUntilTimeout>
 8009be6:	4603      	mov	r3, r0
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d001      	beq.n	8009bf0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8009bec:	2303      	movs	r3, #3
 8009bee:	e038      	b.n	8009c62 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8009bf0:	69fb      	ldr	r3, [r7, #28]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d10b      	bne.n	8009c0e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	881b      	ldrh	r3, [r3, #0]
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c04:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	3302      	adds	r3, #2
 8009c0a:	61bb      	str	r3, [r7, #24]
 8009c0c:	e007      	b.n	8009c1e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	781a      	ldrb	r2, [r3, #0]
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	3b01      	subs	r3, #1
 8009c28:	b29a      	uxth	r2, r3
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d1cc      	bne.n	8009bd6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	9300      	str	r3, [sp, #0]
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	2200      	movs	r2, #0
 8009c44:	2140      	movs	r1, #64	; 0x40
 8009c46:	68f8      	ldr	r0, [r7, #12]
 8009c48:	f000 fe83 	bl	800a952 <UART_WaitOnFlagUntilTimeout>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d001      	beq.n	8009c56 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8009c52:	2303      	movs	r3, #3
 8009c54:	e005      	b.n	8009c62 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2220      	movs	r2, #32
 8009c5a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	e000      	b.n	8009c62 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8009c60:	2302      	movs	r3, #2
  }
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3720      	adds	r7, #32
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b08a      	sub	sp, #40	; 0x28
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	60f8      	str	r0, [r7, #12]
 8009c72:	60b9      	str	r1, [r7, #8]
 8009c74:	4613      	mov	r3, r2
 8009c76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c7e:	2b20      	cmp	r3, #32
 8009c80:	d132      	bne.n	8009ce8 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d002      	beq.n	8009c8e <HAL_UART_Receive_IT+0x24>
 8009c88:	88fb      	ldrh	r3, [r7, #6]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d101      	bne.n	8009c92 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	e02b      	b.n	8009cea <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2200      	movs	r2, #0
 8009c96:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d018      	beq.n	8009cd8 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	e853 3f00 	ldrex	r3, [r3]
 8009cb2:	613b      	str	r3, [r7, #16]
   return(result);
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009cba:	627b      	str	r3, [r7, #36]	; 0x24
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc4:	623b      	str	r3, [r7, #32]
 8009cc6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc8:	69f9      	ldr	r1, [r7, #28]
 8009cca:	6a3a      	ldr	r2, [r7, #32]
 8009ccc:	e841 2300 	strex	r3, r2, [r1]
 8009cd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8009cd2:	69bb      	ldr	r3, [r7, #24]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d1e6      	bne.n	8009ca6 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009cd8:	88fb      	ldrh	r3, [r7, #6]
 8009cda:	461a      	mov	r2, r3
 8009cdc:	68b9      	ldr	r1, [r7, #8]
 8009cde:	68f8      	ldr	r0, [r7, #12]
 8009ce0:	f000 fefe 	bl	800aae0 <UART_Start_Receive_IT>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	e000      	b.n	8009cea <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8009ce8:	2302      	movs	r3, #2
  }
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3728      	adds	r7, #40	; 0x28
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
	...

08009cf4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b0ba      	sub	sp, #232	; 0xe8
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	69db      	ldr	r3, [r3, #28]
 8009d02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	689b      	ldr	r3, [r3, #8]
 8009d16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009d1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009d1e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009d22:	4013      	ands	r3, r2
 8009d24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009d28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d115      	bne.n	8009d5c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d34:	f003 0320 	and.w	r3, r3, #32
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d00f      	beq.n	8009d5c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d40:	f003 0320 	and.w	r3, r3, #32
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d009      	beq.n	8009d5c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	f000 8297 	beq.w	800a280 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	4798      	blx	r3
      }
      return;
 8009d5a:	e291      	b.n	800a280 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009d5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	f000 8117 	beq.w	8009f94 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d6a:	f003 0301 	and.w	r3, r3, #1
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d106      	bne.n	8009d80 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009d72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009d76:	4b85      	ldr	r3, [pc, #532]	; (8009f8c <HAL_UART_IRQHandler+0x298>)
 8009d78:	4013      	ands	r3, r2
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	f000 810a 	beq.w	8009f94 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d84:	f003 0301 	and.w	r3, r3, #1
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d011      	beq.n	8009db0 <HAL_UART_IRQHandler+0xbc>
 8009d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d00b      	beq.n	8009db0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009da6:	f043 0201 	orr.w	r2, r3, #1
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009db4:	f003 0302 	and.w	r3, r3, #2
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d011      	beq.n	8009de0 <HAL_UART_IRQHandler+0xec>
 8009dbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009dc0:	f003 0301 	and.w	r3, r3, #1
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d00b      	beq.n	8009de0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2202      	movs	r2, #2
 8009dce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009dd6:	f043 0204 	orr.w	r2, r3, #4
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009de4:	f003 0304 	and.w	r3, r3, #4
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d011      	beq.n	8009e10 <HAL_UART_IRQHandler+0x11c>
 8009dec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009df0:	f003 0301 	and.w	r3, r3, #1
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d00b      	beq.n	8009e10 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2204      	movs	r2, #4
 8009dfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e06:	f043 0202 	orr.w	r2, r3, #2
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e14:	f003 0308 	and.w	r3, r3, #8
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d017      	beq.n	8009e4c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e20:	f003 0320 	and.w	r3, r3, #32
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d105      	bne.n	8009e34 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009e28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e2c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d00b      	beq.n	8009e4c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	2208      	movs	r2, #8
 8009e3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e42:	f043 0208 	orr.w	r2, r3, #8
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d012      	beq.n	8009e7e <HAL_UART_IRQHandler+0x18a>
 8009e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d00c      	beq.n	8009e7e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e74:	f043 0220 	orr.w	r2, r3, #32
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	f000 81fd 	beq.w	800a284 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e8e:	f003 0320 	and.w	r3, r3, #32
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00d      	beq.n	8009eb2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e9a:	f003 0320 	and.w	r3, r3, #32
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d007      	beq.n	8009eb2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d003      	beq.n	8009eb2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009eb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ec6:	2b40      	cmp	r3, #64	; 0x40
 8009ec8:	d005      	beq.n	8009ed6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009eca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009ece:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d04f      	beq.n	8009f76 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 fec8 	bl	800ac6c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ee6:	2b40      	cmp	r3, #64	; 0x40
 8009ee8:	d141      	bne.n	8009f6e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	3308      	adds	r3, #8
 8009ef0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ef4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ef8:	e853 3f00 	ldrex	r3, [r3]
 8009efc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009f00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	3308      	adds	r3, #8
 8009f12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009f16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009f1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009f22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009f26:	e841 2300 	strex	r3, r2, [r1]
 8009f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009f2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d1d9      	bne.n	8009eea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d013      	beq.n	8009f66 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f42:	4a13      	ldr	r2, [pc, #76]	; (8009f90 <HAL_UART_IRQHandler+0x29c>)
 8009f44:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7fb fb54 	bl	80055f8 <HAL_DMA_Abort_IT>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d017      	beq.n	8009f86 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009f60:	4610      	mov	r0, r2
 8009f62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f64:	e00f      	b.n	8009f86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 f9a0 	bl	800a2ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f6c:	e00b      	b.n	8009f86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 f99c 	bl	800a2ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f74:	e007      	b.n	8009f86 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 f998 	bl	800a2ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8009f84:	e17e      	b.n	800a284 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f86:	bf00      	nop
    return;
 8009f88:	e17c      	b.n	800a284 <HAL_UART_IRQHandler+0x590>
 8009f8a:	bf00      	nop
 8009f8c:	04000120 	.word	0x04000120
 8009f90:	0800ad35 	.word	0x0800ad35

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	f040 814c 	bne.w	800a236 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fa2:	f003 0310 	and.w	r3, r3, #16
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	f000 8145 	beq.w	800a236 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fb0:	f003 0310 	and.w	r3, r3, #16
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	f000 813e 	beq.w	800a236 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	2210      	movs	r2, #16
 8009fc0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fcc:	2b40      	cmp	r3, #64	; 0x40
 8009fce:	f040 80b6 	bne.w	800a13e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009fde:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	f000 8150 	beq.w	800a288 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009fee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	f080 8148 	bcs.w	800a288 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009ffe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a006:	69db      	ldr	r3, [r3, #28]
 800a008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a00c:	f000 8086 	beq.w	800a11c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a018:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a01c:	e853 3f00 	ldrex	r3, [r3]
 800a020:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a024:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a02c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	461a      	mov	r2, r3
 800a036:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a03a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a03e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a042:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a046:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a04a:	e841 2300 	strex	r3, r2, [r1]
 800a04e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a052:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a056:	2b00      	cmp	r3, #0
 800a058:	d1da      	bne.n	800a010 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	3308      	adds	r3, #8
 800a060:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a064:	e853 3f00 	ldrex	r3, [r3]
 800a068:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a06a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a06c:	f023 0301 	bic.w	r3, r3, #1
 800a070:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	3308      	adds	r3, #8
 800a07a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a07e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a082:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a084:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a086:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a08a:	e841 2300 	strex	r3, r2, [r1]
 800a08e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a092:	2b00      	cmp	r3, #0
 800a094:	d1e1      	bne.n	800a05a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	3308      	adds	r3, #8
 800a09c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a09e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0a0:	e853 3f00 	ldrex	r3, [r3]
 800a0a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a0a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	3308      	adds	r3, #8
 800a0b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a0ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a0bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a0c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a0c2:	e841 2300 	strex	r3, r2, [r1]
 800a0c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a0c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d1e3      	bne.n	800a096 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2220      	movs	r2, #32
 800a0d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0e4:	e853 3f00 	ldrex	r3, [r3]
 800a0e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a0ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0ec:	f023 0310 	bic.w	r3, r3, #16
 800a0f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a0fe:	65bb      	str	r3, [r7, #88]	; 0x58
 800a100:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a102:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a104:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a106:	e841 2300 	strex	r3, r2, [r1]
 800a10a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a10c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d1e4      	bne.n	800a0dc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a116:	4618      	mov	r0, r3
 800a118:	f7fb f9fe 	bl	8005518 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2202      	movs	r2, #2
 800a120:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a12e:	b29b      	uxth	r3, r3
 800a130:	1ad3      	subs	r3, r2, r3
 800a132:	b29b      	uxth	r3, r3
 800a134:	4619      	mov	r1, r3
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 f8c2 	bl	800a2c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a13c:	e0a4      	b.n	800a288 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	1ad3      	subs	r3, r2, r3
 800a14e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a158:	b29b      	uxth	r3, r3
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	f000 8096 	beq.w	800a28c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800a160:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a164:	2b00      	cmp	r3, #0
 800a166:	f000 8091 	beq.w	800a28c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a172:	e853 3f00 	ldrex	r3, [r3]
 800a176:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a17a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a17e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	461a      	mov	r2, r3
 800a188:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a18c:	647b      	str	r3, [r7, #68]	; 0x44
 800a18e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a190:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a192:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a194:	e841 2300 	strex	r3, r2, [r1]
 800a198:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a19a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d1e4      	bne.n	800a16a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	3308      	adds	r3, #8
 800a1a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1aa:	e853 3f00 	ldrex	r3, [r3]
 800a1ae:	623b      	str	r3, [r7, #32]
   return(result);
 800a1b0:	6a3b      	ldr	r3, [r7, #32]
 800a1b2:	f023 0301 	bic.w	r3, r3, #1
 800a1b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	3308      	adds	r3, #8
 800a1c0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a1c4:	633a      	str	r2, [r7, #48]	; 0x30
 800a1c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1cc:	e841 2300 	strex	r3, r2, [r1]
 800a1d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d1e3      	bne.n	800a1a0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2220      	movs	r2, #32
 800a1dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	e853 3f00 	ldrex	r3, [r3]
 800a1f8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f023 0310 	bic.w	r3, r3, #16
 800a200:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	461a      	mov	r2, r3
 800a20a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a20e:	61fb      	str	r3, [r7, #28]
 800a210:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a212:	69b9      	ldr	r1, [r7, #24]
 800a214:	69fa      	ldr	r2, [r7, #28]
 800a216:	e841 2300 	strex	r3, r2, [r1]
 800a21a:	617b      	str	r3, [r7, #20]
   return(result);
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d1e4      	bne.n	800a1ec <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2202      	movs	r2, #2
 800a226:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a228:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a22c:	4619      	mov	r1, r3
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 f846 	bl	800a2c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a234:	e02a      	b.n	800a28c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a23a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d00e      	beq.n	800a260 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d008      	beq.n	800a260 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a252:	2b00      	cmp	r3, #0
 800a254:	d01c      	beq.n	800a290 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	4798      	blx	r3
    }
    return;
 800a25e:	e017      	b.n	800a290 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d012      	beq.n	800a292 <HAL_UART_IRQHandler+0x59e>
 800a26c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a274:	2b00      	cmp	r3, #0
 800a276:	d00c      	beq.n	800a292 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 fd71 	bl	800ad60 <UART_EndTransmit_IT>
    return;
 800a27e:	e008      	b.n	800a292 <HAL_UART_IRQHandler+0x59e>
      return;
 800a280:	bf00      	nop
 800a282:	e006      	b.n	800a292 <HAL_UART_IRQHandler+0x59e>
    return;
 800a284:	bf00      	nop
 800a286:	e004      	b.n	800a292 <HAL_UART_IRQHandler+0x59e>
      return;
 800a288:	bf00      	nop
 800a28a:	e002      	b.n	800a292 <HAL_UART_IRQHandler+0x59e>
      return;
 800a28c:	bf00      	nop
 800a28e:	e000      	b.n	800a292 <HAL_UART_IRQHandler+0x59e>
    return;
 800a290:	bf00      	nop
  }

}
 800a292:	37e8      	adds	r7, #232	; 0xe8
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a2a0:	bf00      	nop
 800a2a2:	370c      	adds	r7, #12
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a2b4:	bf00      	nop
 800a2b6:	370c      	adds	r7, #12
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a2cc:	bf00      	nop
 800a2ce:	370c      	adds	r7, #12
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b088      	sub	sp, #32
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	689a      	ldr	r2, [r3, #8]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	691b      	ldr	r3, [r3, #16]
 800a2ec:	431a      	orrs	r2, r3
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	695b      	ldr	r3, [r3, #20]
 800a2f2:	431a      	orrs	r2, r3
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	69db      	ldr	r3, [r3, #28]
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	4ba6      	ldr	r3, [pc, #664]	; (800a59c <UART_SetConfig+0x2c4>)
 800a304:	4013      	ands	r3, r2
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	6812      	ldr	r2, [r2, #0]
 800a30a:	6979      	ldr	r1, [r7, #20]
 800a30c:	430b      	orrs	r3, r1
 800a30e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	68da      	ldr	r2, [r3, #12]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	430a      	orrs	r2, r1
 800a324:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	699b      	ldr	r3, [r3, #24]
 800a32a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6a1b      	ldr	r3, [r3, #32]
 800a330:	697a      	ldr	r2, [r7, #20]
 800a332:	4313      	orrs	r3, r2
 800a334:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	697a      	ldr	r2, [r7, #20]
 800a346:	430a      	orrs	r2, r1
 800a348:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a94      	ldr	r2, [pc, #592]	; (800a5a0 <UART_SetConfig+0x2c8>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d120      	bne.n	800a396 <UART_SetConfig+0xbe>
 800a354:	4b93      	ldr	r3, [pc, #588]	; (800a5a4 <UART_SetConfig+0x2cc>)
 800a356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a35a:	f003 0303 	and.w	r3, r3, #3
 800a35e:	2b03      	cmp	r3, #3
 800a360:	d816      	bhi.n	800a390 <UART_SetConfig+0xb8>
 800a362:	a201      	add	r2, pc, #4	; (adr r2, 800a368 <UART_SetConfig+0x90>)
 800a364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a368:	0800a379 	.word	0x0800a379
 800a36c:	0800a385 	.word	0x0800a385
 800a370:	0800a37f 	.word	0x0800a37f
 800a374:	0800a38b 	.word	0x0800a38b
 800a378:	2301      	movs	r3, #1
 800a37a:	77fb      	strb	r3, [r7, #31]
 800a37c:	e150      	b.n	800a620 <UART_SetConfig+0x348>
 800a37e:	2302      	movs	r3, #2
 800a380:	77fb      	strb	r3, [r7, #31]
 800a382:	e14d      	b.n	800a620 <UART_SetConfig+0x348>
 800a384:	2304      	movs	r3, #4
 800a386:	77fb      	strb	r3, [r7, #31]
 800a388:	e14a      	b.n	800a620 <UART_SetConfig+0x348>
 800a38a:	2308      	movs	r3, #8
 800a38c:	77fb      	strb	r3, [r7, #31]
 800a38e:	e147      	b.n	800a620 <UART_SetConfig+0x348>
 800a390:	2310      	movs	r3, #16
 800a392:	77fb      	strb	r3, [r7, #31]
 800a394:	e144      	b.n	800a620 <UART_SetConfig+0x348>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4a83      	ldr	r2, [pc, #524]	; (800a5a8 <UART_SetConfig+0x2d0>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d132      	bne.n	800a406 <UART_SetConfig+0x12e>
 800a3a0:	4b80      	ldr	r3, [pc, #512]	; (800a5a4 <UART_SetConfig+0x2cc>)
 800a3a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3a6:	f003 030c 	and.w	r3, r3, #12
 800a3aa:	2b0c      	cmp	r3, #12
 800a3ac:	d828      	bhi.n	800a400 <UART_SetConfig+0x128>
 800a3ae:	a201      	add	r2, pc, #4	; (adr r2, 800a3b4 <UART_SetConfig+0xdc>)
 800a3b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b4:	0800a3e9 	.word	0x0800a3e9
 800a3b8:	0800a401 	.word	0x0800a401
 800a3bc:	0800a401 	.word	0x0800a401
 800a3c0:	0800a401 	.word	0x0800a401
 800a3c4:	0800a3f5 	.word	0x0800a3f5
 800a3c8:	0800a401 	.word	0x0800a401
 800a3cc:	0800a401 	.word	0x0800a401
 800a3d0:	0800a401 	.word	0x0800a401
 800a3d4:	0800a3ef 	.word	0x0800a3ef
 800a3d8:	0800a401 	.word	0x0800a401
 800a3dc:	0800a401 	.word	0x0800a401
 800a3e0:	0800a401 	.word	0x0800a401
 800a3e4:	0800a3fb 	.word	0x0800a3fb
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	77fb      	strb	r3, [r7, #31]
 800a3ec:	e118      	b.n	800a620 <UART_SetConfig+0x348>
 800a3ee:	2302      	movs	r3, #2
 800a3f0:	77fb      	strb	r3, [r7, #31]
 800a3f2:	e115      	b.n	800a620 <UART_SetConfig+0x348>
 800a3f4:	2304      	movs	r3, #4
 800a3f6:	77fb      	strb	r3, [r7, #31]
 800a3f8:	e112      	b.n	800a620 <UART_SetConfig+0x348>
 800a3fa:	2308      	movs	r3, #8
 800a3fc:	77fb      	strb	r3, [r7, #31]
 800a3fe:	e10f      	b.n	800a620 <UART_SetConfig+0x348>
 800a400:	2310      	movs	r3, #16
 800a402:	77fb      	strb	r3, [r7, #31]
 800a404:	e10c      	b.n	800a620 <UART_SetConfig+0x348>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4a68      	ldr	r2, [pc, #416]	; (800a5ac <UART_SetConfig+0x2d4>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d120      	bne.n	800a452 <UART_SetConfig+0x17a>
 800a410:	4b64      	ldr	r3, [pc, #400]	; (800a5a4 <UART_SetConfig+0x2cc>)
 800a412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a416:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a41a:	2b30      	cmp	r3, #48	; 0x30
 800a41c:	d013      	beq.n	800a446 <UART_SetConfig+0x16e>
 800a41e:	2b30      	cmp	r3, #48	; 0x30
 800a420:	d814      	bhi.n	800a44c <UART_SetConfig+0x174>
 800a422:	2b20      	cmp	r3, #32
 800a424:	d009      	beq.n	800a43a <UART_SetConfig+0x162>
 800a426:	2b20      	cmp	r3, #32
 800a428:	d810      	bhi.n	800a44c <UART_SetConfig+0x174>
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d002      	beq.n	800a434 <UART_SetConfig+0x15c>
 800a42e:	2b10      	cmp	r3, #16
 800a430:	d006      	beq.n	800a440 <UART_SetConfig+0x168>
 800a432:	e00b      	b.n	800a44c <UART_SetConfig+0x174>
 800a434:	2300      	movs	r3, #0
 800a436:	77fb      	strb	r3, [r7, #31]
 800a438:	e0f2      	b.n	800a620 <UART_SetConfig+0x348>
 800a43a:	2302      	movs	r3, #2
 800a43c:	77fb      	strb	r3, [r7, #31]
 800a43e:	e0ef      	b.n	800a620 <UART_SetConfig+0x348>
 800a440:	2304      	movs	r3, #4
 800a442:	77fb      	strb	r3, [r7, #31]
 800a444:	e0ec      	b.n	800a620 <UART_SetConfig+0x348>
 800a446:	2308      	movs	r3, #8
 800a448:	77fb      	strb	r3, [r7, #31]
 800a44a:	e0e9      	b.n	800a620 <UART_SetConfig+0x348>
 800a44c:	2310      	movs	r3, #16
 800a44e:	77fb      	strb	r3, [r7, #31]
 800a450:	e0e6      	b.n	800a620 <UART_SetConfig+0x348>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4a56      	ldr	r2, [pc, #344]	; (800a5b0 <UART_SetConfig+0x2d8>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d120      	bne.n	800a49e <UART_SetConfig+0x1c6>
 800a45c:	4b51      	ldr	r3, [pc, #324]	; (800a5a4 <UART_SetConfig+0x2cc>)
 800a45e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a462:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a466:	2bc0      	cmp	r3, #192	; 0xc0
 800a468:	d013      	beq.n	800a492 <UART_SetConfig+0x1ba>
 800a46a:	2bc0      	cmp	r3, #192	; 0xc0
 800a46c:	d814      	bhi.n	800a498 <UART_SetConfig+0x1c0>
 800a46e:	2b80      	cmp	r3, #128	; 0x80
 800a470:	d009      	beq.n	800a486 <UART_SetConfig+0x1ae>
 800a472:	2b80      	cmp	r3, #128	; 0x80
 800a474:	d810      	bhi.n	800a498 <UART_SetConfig+0x1c0>
 800a476:	2b00      	cmp	r3, #0
 800a478:	d002      	beq.n	800a480 <UART_SetConfig+0x1a8>
 800a47a:	2b40      	cmp	r3, #64	; 0x40
 800a47c:	d006      	beq.n	800a48c <UART_SetConfig+0x1b4>
 800a47e:	e00b      	b.n	800a498 <UART_SetConfig+0x1c0>
 800a480:	2300      	movs	r3, #0
 800a482:	77fb      	strb	r3, [r7, #31]
 800a484:	e0cc      	b.n	800a620 <UART_SetConfig+0x348>
 800a486:	2302      	movs	r3, #2
 800a488:	77fb      	strb	r3, [r7, #31]
 800a48a:	e0c9      	b.n	800a620 <UART_SetConfig+0x348>
 800a48c:	2304      	movs	r3, #4
 800a48e:	77fb      	strb	r3, [r7, #31]
 800a490:	e0c6      	b.n	800a620 <UART_SetConfig+0x348>
 800a492:	2308      	movs	r3, #8
 800a494:	77fb      	strb	r3, [r7, #31]
 800a496:	e0c3      	b.n	800a620 <UART_SetConfig+0x348>
 800a498:	2310      	movs	r3, #16
 800a49a:	77fb      	strb	r3, [r7, #31]
 800a49c:	e0c0      	b.n	800a620 <UART_SetConfig+0x348>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4a44      	ldr	r2, [pc, #272]	; (800a5b4 <UART_SetConfig+0x2dc>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d125      	bne.n	800a4f4 <UART_SetConfig+0x21c>
 800a4a8:	4b3e      	ldr	r3, [pc, #248]	; (800a5a4 <UART_SetConfig+0x2cc>)
 800a4aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a4b6:	d017      	beq.n	800a4e8 <UART_SetConfig+0x210>
 800a4b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a4bc:	d817      	bhi.n	800a4ee <UART_SetConfig+0x216>
 800a4be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4c2:	d00b      	beq.n	800a4dc <UART_SetConfig+0x204>
 800a4c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4c8:	d811      	bhi.n	800a4ee <UART_SetConfig+0x216>
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d003      	beq.n	800a4d6 <UART_SetConfig+0x1fe>
 800a4ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4d2:	d006      	beq.n	800a4e2 <UART_SetConfig+0x20a>
 800a4d4:	e00b      	b.n	800a4ee <UART_SetConfig+0x216>
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	77fb      	strb	r3, [r7, #31]
 800a4da:	e0a1      	b.n	800a620 <UART_SetConfig+0x348>
 800a4dc:	2302      	movs	r3, #2
 800a4de:	77fb      	strb	r3, [r7, #31]
 800a4e0:	e09e      	b.n	800a620 <UART_SetConfig+0x348>
 800a4e2:	2304      	movs	r3, #4
 800a4e4:	77fb      	strb	r3, [r7, #31]
 800a4e6:	e09b      	b.n	800a620 <UART_SetConfig+0x348>
 800a4e8:	2308      	movs	r3, #8
 800a4ea:	77fb      	strb	r3, [r7, #31]
 800a4ec:	e098      	b.n	800a620 <UART_SetConfig+0x348>
 800a4ee:	2310      	movs	r3, #16
 800a4f0:	77fb      	strb	r3, [r7, #31]
 800a4f2:	e095      	b.n	800a620 <UART_SetConfig+0x348>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a2f      	ldr	r2, [pc, #188]	; (800a5b8 <UART_SetConfig+0x2e0>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d125      	bne.n	800a54a <UART_SetConfig+0x272>
 800a4fe:	4b29      	ldr	r3, [pc, #164]	; (800a5a4 <UART_SetConfig+0x2cc>)
 800a500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a504:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a508:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a50c:	d017      	beq.n	800a53e <UART_SetConfig+0x266>
 800a50e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a512:	d817      	bhi.n	800a544 <UART_SetConfig+0x26c>
 800a514:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a518:	d00b      	beq.n	800a532 <UART_SetConfig+0x25a>
 800a51a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a51e:	d811      	bhi.n	800a544 <UART_SetConfig+0x26c>
 800a520:	2b00      	cmp	r3, #0
 800a522:	d003      	beq.n	800a52c <UART_SetConfig+0x254>
 800a524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a528:	d006      	beq.n	800a538 <UART_SetConfig+0x260>
 800a52a:	e00b      	b.n	800a544 <UART_SetConfig+0x26c>
 800a52c:	2301      	movs	r3, #1
 800a52e:	77fb      	strb	r3, [r7, #31]
 800a530:	e076      	b.n	800a620 <UART_SetConfig+0x348>
 800a532:	2302      	movs	r3, #2
 800a534:	77fb      	strb	r3, [r7, #31]
 800a536:	e073      	b.n	800a620 <UART_SetConfig+0x348>
 800a538:	2304      	movs	r3, #4
 800a53a:	77fb      	strb	r3, [r7, #31]
 800a53c:	e070      	b.n	800a620 <UART_SetConfig+0x348>
 800a53e:	2308      	movs	r3, #8
 800a540:	77fb      	strb	r3, [r7, #31]
 800a542:	e06d      	b.n	800a620 <UART_SetConfig+0x348>
 800a544:	2310      	movs	r3, #16
 800a546:	77fb      	strb	r3, [r7, #31]
 800a548:	e06a      	b.n	800a620 <UART_SetConfig+0x348>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4a1b      	ldr	r2, [pc, #108]	; (800a5bc <UART_SetConfig+0x2e4>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d138      	bne.n	800a5c6 <UART_SetConfig+0x2ee>
 800a554:	4b13      	ldr	r3, [pc, #76]	; (800a5a4 <UART_SetConfig+0x2cc>)
 800a556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a55a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a55e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a562:	d017      	beq.n	800a594 <UART_SetConfig+0x2bc>
 800a564:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a568:	d82a      	bhi.n	800a5c0 <UART_SetConfig+0x2e8>
 800a56a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a56e:	d00b      	beq.n	800a588 <UART_SetConfig+0x2b0>
 800a570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a574:	d824      	bhi.n	800a5c0 <UART_SetConfig+0x2e8>
 800a576:	2b00      	cmp	r3, #0
 800a578:	d003      	beq.n	800a582 <UART_SetConfig+0x2aa>
 800a57a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a57e:	d006      	beq.n	800a58e <UART_SetConfig+0x2b6>
 800a580:	e01e      	b.n	800a5c0 <UART_SetConfig+0x2e8>
 800a582:	2300      	movs	r3, #0
 800a584:	77fb      	strb	r3, [r7, #31]
 800a586:	e04b      	b.n	800a620 <UART_SetConfig+0x348>
 800a588:	2302      	movs	r3, #2
 800a58a:	77fb      	strb	r3, [r7, #31]
 800a58c:	e048      	b.n	800a620 <UART_SetConfig+0x348>
 800a58e:	2304      	movs	r3, #4
 800a590:	77fb      	strb	r3, [r7, #31]
 800a592:	e045      	b.n	800a620 <UART_SetConfig+0x348>
 800a594:	2308      	movs	r3, #8
 800a596:	77fb      	strb	r3, [r7, #31]
 800a598:	e042      	b.n	800a620 <UART_SetConfig+0x348>
 800a59a:	bf00      	nop
 800a59c:	efff69f3 	.word	0xefff69f3
 800a5a0:	40011000 	.word	0x40011000
 800a5a4:	40023800 	.word	0x40023800
 800a5a8:	40004400 	.word	0x40004400
 800a5ac:	40004800 	.word	0x40004800
 800a5b0:	40004c00 	.word	0x40004c00
 800a5b4:	40005000 	.word	0x40005000
 800a5b8:	40011400 	.word	0x40011400
 800a5bc:	40007800 	.word	0x40007800
 800a5c0:	2310      	movs	r3, #16
 800a5c2:	77fb      	strb	r3, [r7, #31]
 800a5c4:	e02c      	b.n	800a620 <UART_SetConfig+0x348>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4a72      	ldr	r2, [pc, #456]	; (800a794 <UART_SetConfig+0x4bc>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d125      	bne.n	800a61c <UART_SetConfig+0x344>
 800a5d0:	4b71      	ldr	r3, [pc, #452]	; (800a798 <UART_SetConfig+0x4c0>)
 800a5d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a5da:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a5de:	d017      	beq.n	800a610 <UART_SetConfig+0x338>
 800a5e0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a5e4:	d817      	bhi.n	800a616 <UART_SetConfig+0x33e>
 800a5e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5ea:	d00b      	beq.n	800a604 <UART_SetConfig+0x32c>
 800a5ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5f0:	d811      	bhi.n	800a616 <UART_SetConfig+0x33e>
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d003      	beq.n	800a5fe <UART_SetConfig+0x326>
 800a5f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5fa:	d006      	beq.n	800a60a <UART_SetConfig+0x332>
 800a5fc:	e00b      	b.n	800a616 <UART_SetConfig+0x33e>
 800a5fe:	2300      	movs	r3, #0
 800a600:	77fb      	strb	r3, [r7, #31]
 800a602:	e00d      	b.n	800a620 <UART_SetConfig+0x348>
 800a604:	2302      	movs	r3, #2
 800a606:	77fb      	strb	r3, [r7, #31]
 800a608:	e00a      	b.n	800a620 <UART_SetConfig+0x348>
 800a60a:	2304      	movs	r3, #4
 800a60c:	77fb      	strb	r3, [r7, #31]
 800a60e:	e007      	b.n	800a620 <UART_SetConfig+0x348>
 800a610:	2308      	movs	r3, #8
 800a612:	77fb      	strb	r3, [r7, #31]
 800a614:	e004      	b.n	800a620 <UART_SetConfig+0x348>
 800a616:	2310      	movs	r3, #16
 800a618:	77fb      	strb	r3, [r7, #31]
 800a61a:	e001      	b.n	800a620 <UART_SetConfig+0x348>
 800a61c:	2310      	movs	r3, #16
 800a61e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	69db      	ldr	r3, [r3, #28]
 800a624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a628:	d15b      	bne.n	800a6e2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a62a:	7ffb      	ldrb	r3, [r7, #31]
 800a62c:	2b08      	cmp	r3, #8
 800a62e:	d828      	bhi.n	800a682 <UART_SetConfig+0x3aa>
 800a630:	a201      	add	r2, pc, #4	; (adr r2, 800a638 <UART_SetConfig+0x360>)
 800a632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a636:	bf00      	nop
 800a638:	0800a65d 	.word	0x0800a65d
 800a63c:	0800a665 	.word	0x0800a665
 800a640:	0800a66d 	.word	0x0800a66d
 800a644:	0800a683 	.word	0x0800a683
 800a648:	0800a673 	.word	0x0800a673
 800a64c:	0800a683 	.word	0x0800a683
 800a650:	0800a683 	.word	0x0800a683
 800a654:	0800a683 	.word	0x0800a683
 800a658:	0800a67b 	.word	0x0800a67b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a65c:	f7fc fd00 	bl	8007060 <HAL_RCC_GetPCLK1Freq>
 800a660:	61b8      	str	r0, [r7, #24]
        break;
 800a662:	e013      	b.n	800a68c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a664:	f7fc fd10 	bl	8007088 <HAL_RCC_GetPCLK2Freq>
 800a668:	61b8      	str	r0, [r7, #24]
        break;
 800a66a:	e00f      	b.n	800a68c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a66c:	4b4b      	ldr	r3, [pc, #300]	; (800a79c <UART_SetConfig+0x4c4>)
 800a66e:	61bb      	str	r3, [r7, #24]
        break;
 800a670:	e00c      	b.n	800a68c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a672:	f7fc fbe3 	bl	8006e3c <HAL_RCC_GetSysClockFreq>
 800a676:	61b8      	str	r0, [r7, #24]
        break;
 800a678:	e008      	b.n	800a68c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a67a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a67e:	61bb      	str	r3, [r7, #24]
        break;
 800a680:	e004      	b.n	800a68c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a682:	2300      	movs	r3, #0
 800a684:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a686:	2301      	movs	r3, #1
 800a688:	77bb      	strb	r3, [r7, #30]
        break;
 800a68a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a68c:	69bb      	ldr	r3, [r7, #24]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d074      	beq.n	800a77c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a692:	69bb      	ldr	r3, [r7, #24]
 800a694:	005a      	lsls	r2, r3, #1
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	085b      	lsrs	r3, r3, #1
 800a69c:	441a      	add	r2, r3
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	2b0f      	cmp	r3, #15
 800a6ac:	d916      	bls.n	800a6dc <UART_SetConfig+0x404>
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6b4:	d212      	bcs.n	800a6dc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	f023 030f 	bic.w	r3, r3, #15
 800a6be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	085b      	lsrs	r3, r3, #1
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	f003 0307 	and.w	r3, r3, #7
 800a6ca:	b29a      	uxth	r2, r3
 800a6cc:	89fb      	ldrh	r3, [r7, #14]
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	89fa      	ldrh	r2, [r7, #14]
 800a6d8:	60da      	str	r2, [r3, #12]
 800a6da:	e04f      	b.n	800a77c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	77bb      	strb	r3, [r7, #30]
 800a6e0:	e04c      	b.n	800a77c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a6e2:	7ffb      	ldrb	r3, [r7, #31]
 800a6e4:	2b08      	cmp	r3, #8
 800a6e6:	d828      	bhi.n	800a73a <UART_SetConfig+0x462>
 800a6e8:	a201      	add	r2, pc, #4	; (adr r2, 800a6f0 <UART_SetConfig+0x418>)
 800a6ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ee:	bf00      	nop
 800a6f0:	0800a715 	.word	0x0800a715
 800a6f4:	0800a71d 	.word	0x0800a71d
 800a6f8:	0800a725 	.word	0x0800a725
 800a6fc:	0800a73b 	.word	0x0800a73b
 800a700:	0800a72b 	.word	0x0800a72b
 800a704:	0800a73b 	.word	0x0800a73b
 800a708:	0800a73b 	.word	0x0800a73b
 800a70c:	0800a73b 	.word	0x0800a73b
 800a710:	0800a733 	.word	0x0800a733
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a714:	f7fc fca4 	bl	8007060 <HAL_RCC_GetPCLK1Freq>
 800a718:	61b8      	str	r0, [r7, #24]
        break;
 800a71a:	e013      	b.n	800a744 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a71c:	f7fc fcb4 	bl	8007088 <HAL_RCC_GetPCLK2Freq>
 800a720:	61b8      	str	r0, [r7, #24]
        break;
 800a722:	e00f      	b.n	800a744 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a724:	4b1d      	ldr	r3, [pc, #116]	; (800a79c <UART_SetConfig+0x4c4>)
 800a726:	61bb      	str	r3, [r7, #24]
        break;
 800a728:	e00c      	b.n	800a744 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a72a:	f7fc fb87 	bl	8006e3c <HAL_RCC_GetSysClockFreq>
 800a72e:	61b8      	str	r0, [r7, #24]
        break;
 800a730:	e008      	b.n	800a744 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a736:	61bb      	str	r3, [r7, #24]
        break;
 800a738:	e004      	b.n	800a744 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a73a:	2300      	movs	r3, #0
 800a73c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a73e:	2301      	movs	r3, #1
 800a740:	77bb      	strb	r3, [r7, #30]
        break;
 800a742:	bf00      	nop
    }

    if (pclk != 0U)
 800a744:	69bb      	ldr	r3, [r7, #24]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d018      	beq.n	800a77c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	085a      	lsrs	r2, r3, #1
 800a750:	69bb      	ldr	r3, [r7, #24]
 800a752:	441a      	add	r2, r3
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	fbb2 f3f3 	udiv	r3, r2, r3
 800a75c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	2b0f      	cmp	r3, #15
 800a762:	d909      	bls.n	800a778 <UART_SetConfig+0x4a0>
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a76a:	d205      	bcs.n	800a778 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	b29a      	uxth	r2, r3
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	60da      	str	r2, [r3, #12]
 800a776:	e001      	b.n	800a77c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a778:	2301      	movs	r3, #1
 800a77a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2200      	movs	r2, #0
 800a786:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a788:	7fbb      	ldrb	r3, [r7, #30]
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3720      	adds	r7, #32
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop
 800a794:	40007c00 	.word	0x40007c00
 800a798:	40023800 	.word	0x40023800
 800a79c:	00f42400 	.word	0x00f42400

0800a7a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b083      	sub	sp, #12
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ac:	f003 0301 	and.w	r3, r3, #1
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d00a      	beq.n	800a7ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	685b      	ldr	r3, [r3, #4]
 800a7ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	430a      	orrs	r2, r1
 800a7c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ce:	f003 0302 	and.w	r3, r3, #2
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d00a      	beq.n	800a7ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	430a      	orrs	r2, r1
 800a7ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f0:	f003 0304 	and.w	r3, r3, #4
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d00a      	beq.n	800a80e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	430a      	orrs	r2, r1
 800a80c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a812:	f003 0308 	and.w	r3, r3, #8
 800a816:	2b00      	cmp	r3, #0
 800a818:	d00a      	beq.n	800a830 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	430a      	orrs	r2, r1
 800a82e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a834:	f003 0310 	and.w	r3, r3, #16
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d00a      	beq.n	800a852 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	689b      	ldr	r3, [r3, #8]
 800a842:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	430a      	orrs	r2, r1
 800a850:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a856:	f003 0320 	and.w	r3, r3, #32
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d00a      	beq.n	800a874 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	430a      	orrs	r2, r1
 800a872:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d01a      	beq.n	800a8b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	430a      	orrs	r2, r1
 800a894:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a89a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a89e:	d10a      	bne.n	800a8b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	430a      	orrs	r2, r1
 800a8b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d00a      	beq.n	800a8d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	430a      	orrs	r2, r1
 800a8d6:	605a      	str	r2, [r3, #4]
  }
}
 800a8d8:	bf00      	nop
 800a8da:	370c      	adds	r7, #12
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b086      	sub	sp, #24
 800a8e8:	af02      	add	r7, sp, #8
 800a8ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a8f4:	f7f9 fee2 	bl	80046bc <HAL_GetTick>
 800a8f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f003 0308 	and.w	r3, r3, #8
 800a904:	2b08      	cmp	r3, #8
 800a906:	d10e      	bne.n	800a926 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a908:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a90c:	9300      	str	r3, [sp, #0]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2200      	movs	r2, #0
 800a912:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 f81b 	bl	800a952 <UART_WaitOnFlagUntilTimeout>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d001      	beq.n	800a926 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a922:	2303      	movs	r3, #3
 800a924:	e011      	b.n	800a94a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2220      	movs	r2, #32
 800a92a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2220      	movs	r2, #32
 800a930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2200      	movs	r2, #0
 800a938:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2200      	movs	r2, #0
 800a93e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2200      	movs	r2, #0
 800a944:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a948:	2300      	movs	r3, #0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3710      	adds	r7, #16
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}

0800a952 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a952:	b580      	push	{r7, lr}
 800a954:	b09c      	sub	sp, #112	; 0x70
 800a956:	af00      	add	r7, sp, #0
 800a958:	60f8      	str	r0, [r7, #12]
 800a95a:	60b9      	str	r1, [r7, #8]
 800a95c:	603b      	str	r3, [r7, #0]
 800a95e:	4613      	mov	r3, r2
 800a960:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a962:	e0a7      	b.n	800aab4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a964:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a96a:	f000 80a3 	beq.w	800aab4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a96e:	f7f9 fea5 	bl	80046bc <HAL_GetTick>
 800a972:	4602      	mov	r2, r0
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	1ad3      	subs	r3, r2, r3
 800a978:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d302      	bcc.n	800a984 <UART_WaitOnFlagUntilTimeout+0x32>
 800a97e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a980:	2b00      	cmp	r3, #0
 800a982:	d13f      	bne.n	800aa04 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a98a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a98c:	e853 3f00 	ldrex	r3, [r3]
 800a990:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a994:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a998:	667b      	str	r3, [r7, #100]	; 0x64
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	461a      	mov	r2, r3
 800a9a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a9a4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a9a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a9aa:	e841 2300 	strex	r3, r2, [r1]
 800a9ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a9b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d1e6      	bne.n	800a984 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	3308      	adds	r3, #8
 800a9bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9c0:	e853 3f00 	ldrex	r3, [r3]
 800a9c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c8:	f023 0301 	bic.w	r3, r3, #1
 800a9cc:	663b      	str	r3, [r7, #96]	; 0x60
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	3308      	adds	r3, #8
 800a9d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a9d6:	64ba      	str	r2, [r7, #72]	; 0x48
 800a9d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a9dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9de:	e841 2300 	strex	r3, r2, [r1]
 800a9e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a9e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d1e5      	bne.n	800a9b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	2220      	movs	r2, #32
 800a9ee:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2220      	movs	r2, #32
 800a9f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800aa00:	2303      	movs	r3, #3
 800aa02:	e068      	b.n	800aad6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f003 0304 	and.w	r3, r3, #4
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d050      	beq.n	800aab4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	69db      	ldr	r3, [r3, #28]
 800aa18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa20:	d148      	bne.n	800aab4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa2a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa34:	e853 3f00 	ldrex	r3, [r3]
 800aa38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aa40:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	461a      	mov	r2, r3
 800aa48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa4a:	637b      	str	r3, [r7, #52]	; 0x34
 800aa4c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa52:	e841 2300 	strex	r3, r2, [r1]
 800aa56:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aa58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d1e6      	bne.n	800aa2c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	3308      	adds	r3, #8
 800aa64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	e853 3f00 	ldrex	r3, [r3]
 800aa6c:	613b      	str	r3, [r7, #16]
   return(result);
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	f023 0301 	bic.w	r3, r3, #1
 800aa74:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	3308      	adds	r3, #8
 800aa7c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aa7e:	623a      	str	r2, [r7, #32]
 800aa80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa82:	69f9      	ldr	r1, [r7, #28]
 800aa84:	6a3a      	ldr	r2, [r7, #32]
 800aa86:	e841 2300 	strex	r3, r2, [r1]
 800aa8a:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa8c:	69bb      	ldr	r3, [r7, #24]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d1e5      	bne.n	800aa5e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2220      	movs	r2, #32
 800aa96:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2220      	movs	r2, #32
 800aa9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2220      	movs	r2, #32
 800aaa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800aab0:	2303      	movs	r3, #3
 800aab2:	e010      	b.n	800aad6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	69da      	ldr	r2, [r3, #28]
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	4013      	ands	r3, r2
 800aabe:	68ba      	ldr	r2, [r7, #8]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	bf0c      	ite	eq
 800aac4:	2301      	moveq	r3, #1
 800aac6:	2300      	movne	r3, #0
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	461a      	mov	r2, r3
 800aacc:	79fb      	ldrb	r3, [r7, #7]
 800aace:	429a      	cmp	r2, r3
 800aad0:	f43f af48 	beq.w	800a964 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aad4:	2300      	movs	r3, #0
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3770      	adds	r7, #112	; 0x70
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
	...

0800aae0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b097      	sub	sp, #92	; 0x5c
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	60b9      	str	r1, [r7, #8]
 800aaea:	4613      	mov	r3, r2
 800aaec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	68ba      	ldr	r2, [r7, #8]
 800aaf2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	88fa      	ldrh	r2, [r7, #6]
 800aaf8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	88fa      	ldrh	r2, [r7, #6]
 800ab00:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2200      	movs	r2, #0
 800ab08:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	689b      	ldr	r3, [r3, #8]
 800ab0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab12:	d10e      	bne.n	800ab32 <UART_Start_Receive_IT+0x52>
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	691b      	ldr	r3, [r3, #16]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d105      	bne.n	800ab28 <UART_Start_Receive_IT+0x48>
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ab22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ab26:	e02d      	b.n	800ab84 <UART_Start_Receive_IT+0xa4>
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	22ff      	movs	r2, #255	; 0xff
 800ab2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ab30:	e028      	b.n	800ab84 <UART_Start_Receive_IT+0xa4>
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	689b      	ldr	r3, [r3, #8]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d10d      	bne.n	800ab56 <UART_Start_Receive_IT+0x76>
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	691b      	ldr	r3, [r3, #16]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d104      	bne.n	800ab4c <UART_Start_Receive_IT+0x6c>
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	22ff      	movs	r2, #255	; 0xff
 800ab46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ab4a:	e01b      	b.n	800ab84 <UART_Start_Receive_IT+0xa4>
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	227f      	movs	r2, #127	; 0x7f
 800ab50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ab54:	e016      	b.n	800ab84 <UART_Start_Receive_IT+0xa4>
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab5e:	d10d      	bne.n	800ab7c <UART_Start_Receive_IT+0x9c>
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	691b      	ldr	r3, [r3, #16]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d104      	bne.n	800ab72 <UART_Start_Receive_IT+0x92>
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	227f      	movs	r2, #127	; 0x7f
 800ab6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ab70:	e008      	b.n	800ab84 <UART_Start_Receive_IT+0xa4>
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	223f      	movs	r2, #63	; 0x3f
 800ab76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ab7a:	e003      	b.n	800ab84 <UART_Start_Receive_IT+0xa4>
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2200      	movs	r2, #0
 800ab88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2222      	movs	r2, #34	; 0x22
 800ab90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	3308      	adds	r3, #8
 800ab9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab9e:	e853 3f00 	ldrex	r3, [r3]
 800aba2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba6:	f043 0301 	orr.w	r3, r3, #1
 800abaa:	657b      	str	r3, [r7, #84]	; 0x54
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	3308      	adds	r3, #8
 800abb2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800abb4:	64ba      	str	r2, [r7, #72]	; 0x48
 800abb6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abb8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800abba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800abbc:	e841 2300 	strex	r3, r2, [r1]
 800abc0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800abc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d1e5      	bne.n	800ab94 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	689b      	ldr	r3, [r3, #8]
 800abcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abd0:	d107      	bne.n	800abe2 <UART_Start_Receive_IT+0x102>
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	691b      	ldr	r3, [r3, #16]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d103      	bne.n	800abe2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	4a21      	ldr	r2, [pc, #132]	; (800ac64 <UART_Start_Receive_IT+0x184>)
 800abde:	669a      	str	r2, [r3, #104]	; 0x68
 800abe0:	e002      	b.n	800abe8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	4a20      	ldr	r2, [pc, #128]	; (800ac68 <UART_Start_Receive_IT+0x188>)
 800abe6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	691b      	ldr	r3, [r3, #16]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d019      	beq.n	800ac24 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf8:	e853 3f00 	ldrex	r3, [r3]
 800abfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800abfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac00:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ac04:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac0e:	637b      	str	r3, [r7, #52]	; 0x34
 800ac10:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ac14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac16:	e841 2300 	strex	r3, r2, [r1]
 800ac1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ac1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d1e6      	bne.n	800abf0 <UART_Start_Receive_IT+0x110>
 800ac22:	e018      	b.n	800ac56 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	e853 3f00 	ldrex	r3, [r3]
 800ac30:	613b      	str	r3, [r7, #16]
   return(result);
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	f043 0320 	orr.w	r3, r3, #32
 800ac38:	653b      	str	r3, [r7, #80]	; 0x50
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	461a      	mov	r2, r3
 800ac40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac42:	623b      	str	r3, [r7, #32]
 800ac44:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac46:	69f9      	ldr	r1, [r7, #28]
 800ac48:	6a3a      	ldr	r2, [r7, #32]
 800ac4a:	e841 2300 	strex	r3, r2, [r1]
 800ac4e:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac50:	69bb      	ldr	r3, [r7, #24]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d1e6      	bne.n	800ac24 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800ac56:	2300      	movs	r3, #0
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	375c      	adds	r7, #92	; 0x5c
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr
 800ac64:	0800af1b 	.word	0x0800af1b
 800ac68:	0800adb5 	.word	0x0800adb5

0800ac6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b095      	sub	sp, #84	; 0x54
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac7c:	e853 3f00 	ldrex	r3, [r3]
 800ac80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ac82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ac88:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	461a      	mov	r2, r3
 800ac90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac92:	643b      	str	r3, [r7, #64]	; 0x40
 800ac94:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ac98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac9a:	e841 2300 	strex	r3, r2, [r1]
 800ac9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d1e6      	bne.n	800ac74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	3308      	adds	r3, #8
 800acac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acae:	6a3b      	ldr	r3, [r7, #32]
 800acb0:	e853 3f00 	ldrex	r3, [r3]
 800acb4:	61fb      	str	r3, [r7, #28]
   return(result);
 800acb6:	69fb      	ldr	r3, [r7, #28]
 800acb8:	f023 0301 	bic.w	r3, r3, #1
 800acbc:	64bb      	str	r3, [r7, #72]	; 0x48
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	3308      	adds	r3, #8
 800acc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800acc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800acc8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800accc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acce:	e841 2300 	strex	r3, r2, [r1]
 800acd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800acd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d1e5      	bne.n	800aca6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d118      	bne.n	800ad14 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	e853 3f00 	ldrex	r3, [r3]
 800acee:	60bb      	str	r3, [r7, #8]
   return(result);
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	f023 0310 	bic.w	r3, r3, #16
 800acf6:	647b      	str	r3, [r7, #68]	; 0x44
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	461a      	mov	r2, r3
 800acfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad00:	61bb      	str	r3, [r7, #24]
 800ad02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad04:	6979      	ldr	r1, [r7, #20]
 800ad06:	69ba      	ldr	r2, [r7, #24]
 800ad08:	e841 2300 	strex	r3, r2, [r1]
 800ad0c:	613b      	str	r3, [r7, #16]
   return(result);
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d1e6      	bne.n	800ace2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2220      	movs	r2, #32
 800ad18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2200      	movs	r2, #0
 800ad26:	669a      	str	r2, [r3, #104]	; 0x68
}
 800ad28:	bf00      	nop
 800ad2a:	3754      	adds	r7, #84	; 0x54
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr

0800ad34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2200      	movs	r2, #0
 800ad46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad52:	68f8      	ldr	r0, [r7, #12]
 800ad54:	f7ff faaa 	bl	800a2ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad58:	bf00      	nop
 800ad5a:	3710      	adds	r7, #16
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b088      	sub	sp, #32
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	e853 3f00 	ldrex	r3, [r3]
 800ad74:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad7c:	61fb      	str	r3, [r7, #28]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	461a      	mov	r2, r3
 800ad84:	69fb      	ldr	r3, [r7, #28]
 800ad86:	61bb      	str	r3, [r7, #24]
 800ad88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad8a:	6979      	ldr	r1, [r7, #20]
 800ad8c:	69ba      	ldr	r2, [r7, #24]
 800ad8e:	e841 2300 	strex	r3, r2, [r1]
 800ad92:	613b      	str	r3, [r7, #16]
   return(result);
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d1e6      	bne.n	800ad68 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2220      	movs	r2, #32
 800ad9e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2200      	movs	r2, #0
 800ada4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f7ff fa76 	bl	800a298 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adac:	bf00      	nop
 800adae:	3720      	adds	r7, #32
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b096      	sub	sp, #88	; 0x58
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800adc2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800adcc:	2b22      	cmp	r3, #34	; 0x22
 800adce:	f040 8098 	bne.w	800af02 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800addc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800ade0:	b2d9      	uxtb	r1, r3
 800ade2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800ade6:	b2da      	uxtb	r2, r3
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adec:	400a      	ands	r2, r1
 800adee:	b2d2      	uxtb	r2, r2
 800adf0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adf6:	1c5a      	adds	r2, r3, #1
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ae02:	b29b      	uxth	r3, r3
 800ae04:	3b01      	subs	r3, #1
 800ae06:	b29a      	uxth	r2, r3
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d17b      	bne.n	800af12 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae22:	e853 3f00 	ldrex	r3, [r3]
 800ae26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ae28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae2e:	653b      	str	r3, [r7, #80]	; 0x50
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	461a      	mov	r2, r3
 800ae36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae38:	647b      	str	r3, [r7, #68]	; 0x44
 800ae3a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ae3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae40:	e841 2300 	strex	r3, r2, [r1]
 800ae44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ae46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d1e6      	bne.n	800ae1a <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	3308      	adds	r3, #8
 800ae52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae56:	e853 3f00 	ldrex	r3, [r3]
 800ae5a:	623b      	str	r3, [r7, #32]
   return(result);
 800ae5c:	6a3b      	ldr	r3, [r7, #32]
 800ae5e:	f023 0301 	bic.w	r3, r3, #1
 800ae62:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	3308      	adds	r3, #8
 800ae6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ae6c:	633a      	str	r2, [r7, #48]	; 0x30
 800ae6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae74:	e841 2300 	strex	r3, r2, [r1]
 800ae78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d1e5      	bne.n	800ae4c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2220      	movs	r2, #32
 800ae84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2200      	movs	r2, #0
 800ae92:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d12e      	bne.n	800aefa <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	e853 3f00 	ldrex	r3, [r3]
 800aeae:	60fb      	str	r3, [r7, #12]
   return(result);
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f023 0310 	bic.w	r3, r3, #16
 800aeb6:	64bb      	str	r3, [r7, #72]	; 0x48
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	461a      	mov	r2, r3
 800aebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aec0:	61fb      	str	r3, [r7, #28]
 800aec2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec4:	69b9      	ldr	r1, [r7, #24]
 800aec6:	69fa      	ldr	r2, [r7, #28]
 800aec8:	e841 2300 	strex	r3, r2, [r1]
 800aecc:	617b      	str	r3, [r7, #20]
   return(result);
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d1e6      	bne.n	800aea2 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	69db      	ldr	r3, [r3, #28]
 800aeda:	f003 0310 	and.w	r3, r3, #16
 800aede:	2b10      	cmp	r3, #16
 800aee0:	d103      	bne.n	800aeea <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	2210      	movs	r2, #16
 800aee8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800aef0:	4619      	mov	r1, r3
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f7ff f9e4 	bl	800a2c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aef8:	e00b      	b.n	800af12 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f7f8 fbac 	bl	8003658 <HAL_UART_RxCpltCallback>
}
 800af00:	e007      	b.n	800af12 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	699a      	ldr	r2, [r3, #24]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f042 0208 	orr.w	r2, r2, #8
 800af10:	619a      	str	r2, [r3, #24]
}
 800af12:	bf00      	nop
 800af14:	3758      	adds	r7, #88	; 0x58
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}

0800af1a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800af1a:	b580      	push	{r7, lr}
 800af1c:	b096      	sub	sp, #88	; 0x58
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800af28:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af32:	2b22      	cmp	r3, #34	; 0x22
 800af34:	f040 8098 	bne.w	800b068 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af3e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af46:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800af48:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800af4c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800af50:	4013      	ands	r3, r2
 800af52:	b29a      	uxth	r2, r3
 800af54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af56:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af5c:	1c9a      	adds	r2, r3, #2
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800af68:	b29b      	uxth	r3, r3
 800af6a:	3b01      	subs	r3, #1
 800af6c:	b29a      	uxth	r2, r3
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800af7a:	b29b      	uxth	r3, r3
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d17b      	bne.n	800b078 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af88:	e853 3f00 	ldrex	r3, [r3]
 800af8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800af8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af94:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	461a      	mov	r2, r3
 800af9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af9e:	643b      	str	r3, [r7, #64]	; 0x40
 800afa0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800afa4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800afa6:	e841 2300 	strex	r3, r2, [r1]
 800afaa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800afac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d1e6      	bne.n	800af80 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	3308      	adds	r3, #8
 800afb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afba:	6a3b      	ldr	r3, [r7, #32]
 800afbc:	e853 3f00 	ldrex	r3, [r3]
 800afc0:	61fb      	str	r3, [r7, #28]
   return(result);
 800afc2:	69fb      	ldr	r3, [r7, #28]
 800afc4:	f023 0301 	bic.w	r3, r3, #1
 800afc8:	64bb      	str	r3, [r7, #72]	; 0x48
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	3308      	adds	r3, #8
 800afd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800afd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800afd4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800afd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afda:	e841 2300 	strex	r3, r2, [r1]
 800afde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800afe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d1e5      	bne.n	800afb2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2220      	movs	r2, #32
 800afea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2200      	movs	r2, #0
 800aff2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2200      	movs	r2, #0
 800aff8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800affe:	2b01      	cmp	r3, #1
 800b000:	d12e      	bne.n	800b060 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2200      	movs	r2, #0
 800b006:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	e853 3f00 	ldrex	r3, [r3]
 800b014:	60bb      	str	r3, [r7, #8]
   return(result);
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	f023 0310 	bic.w	r3, r3, #16
 800b01c:	647b      	str	r3, [r7, #68]	; 0x44
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	461a      	mov	r2, r3
 800b024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b026:	61bb      	str	r3, [r7, #24]
 800b028:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b02a:	6979      	ldr	r1, [r7, #20]
 800b02c:	69ba      	ldr	r2, [r7, #24]
 800b02e:	e841 2300 	strex	r3, r2, [r1]
 800b032:	613b      	str	r3, [r7, #16]
   return(result);
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d1e6      	bne.n	800b008 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	69db      	ldr	r3, [r3, #28]
 800b040:	f003 0310 	and.w	r3, r3, #16
 800b044:	2b10      	cmp	r3, #16
 800b046:	d103      	bne.n	800b050 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	2210      	movs	r2, #16
 800b04e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b056:	4619      	mov	r1, r3
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f7ff f931 	bl	800a2c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b05e:	e00b      	b.n	800b078 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f7f8 faf9 	bl	8003658 <HAL_UART_RxCpltCallback>
}
 800b066:	e007      	b.n	800b078 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	699a      	ldr	r2, [r3, #24]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f042 0208 	orr.w	r2, r2, #8
 800b076:	619a      	str	r2, [r3, #24]
}
 800b078:	bf00      	nop
 800b07a:	3758      	adds	r7, #88	; 0x58
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b084:	4904      	ldr	r1, [pc, #16]	; (800b098 <MX_FATFS_Init+0x18>)
 800b086:	4805      	ldr	r0, [pc, #20]	; (800b09c <MX_FATFS_Init+0x1c>)
 800b088:	f002 fedc 	bl	800de44 <FATFS_LinkDriver>
 800b08c:	4603      	mov	r3, r0
 800b08e:	461a      	mov	r2, r3
 800b090:	4b03      	ldr	r3, [pc, #12]	; (800b0a0 <MX_FATFS_Init+0x20>)
 800b092:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b094:	bf00      	nop
 800b096:	bd80      	pop	{r7, pc}
 800b098:	200025a8 	.word	0x200025a8
 800b09c:	200000d0 	.word	0x200000d0
 800b0a0:	200025a4 	.word	0x200025a4

0800b0a4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b0a8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr

0800b0b4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	SD_disk_initialize (pdrv);
 800b0be:	79fb      	ldrb	r3, [r7, #7]
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f7f7 faf3 	bl	80026ac <SD_disk_initialize>
  /* USER CODE END INIT */
}
 800b0c6:	bf00      	nop
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3708      	adds	r7, #8
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b082      	sub	sp, #8
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	SD_disk_status (pdrv);
 800b0da:	79fb      	ldrb	r3, [r7, #7]
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f7f7 fbcb 	bl	8002878 <SD_disk_status>
  /* USER CODE END STATUS */
}
 800b0e2:	bf00      	nop
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3708      	adds	r7, #8
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60b9      	str	r1, [r7, #8]
 800b0f4:	607a      	str	r2, [r7, #4]
 800b0f6:	603b      	str	r3, [r7, #0]
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	SD_disk_read (pdrv, buff, sector, count);
 800b0fc:	7bf8      	ldrb	r0, [r7, #15]
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	687a      	ldr	r2, [r7, #4]
 800b102:	68b9      	ldr	r1, [r7, #8]
 800b104:	f7f7 fbce 	bl	80028a4 <SD_disk_read>
  /* USER CODE END READ */
}
 800b108:	bf00      	nop
 800b10a:	4618      	mov	r0, r3
 800b10c:	3710      	adds	r7, #16
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}

0800b112 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b084      	sub	sp, #16
 800b116:	af00      	add	r7, sp, #0
 800b118:	60b9      	str	r1, [r7, #8]
 800b11a:	607a      	str	r2, [r7, #4]
 800b11c:	603b      	str	r3, [r7, #0]
 800b11e:	4603      	mov	r3, r0
 800b120:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	SD_disk_write (pdrv, buff, sector, count);
 800b122:	7bf8      	ldrb	r0, [r7, #15]
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	68b9      	ldr	r1, [r7, #8]
 800b12a:	f7f7 fc25 	bl	8002978 <SD_disk_write>
  /* USER CODE END WRITE */
}
 800b12e:	bf00      	nop
 800b130:	4618      	mov	r0, r3
 800b132:	3710      	adds	r7, #16
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}

0800b138 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	4603      	mov	r3, r0
 800b140:	603a      	str	r2, [r7, #0]
 800b142:	71fb      	strb	r3, [r7, #7]
 800b144:	460b      	mov	r3, r1
 800b146:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	SD_disk_ioctl (pdrv, cmd, buff);
 800b148:	79fb      	ldrb	r3, [r7, #7]
 800b14a:	79b9      	ldrb	r1, [r7, #6]
 800b14c:	683a      	ldr	r2, [r7, #0]
 800b14e:	4618      	mov	r0, r3
 800b150:	f7f7 fc96 	bl	8002a80 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 800b154:	bf00      	nop
 800b156:	4618      	mov	r0, r3
 800b158:	3708      	adds	r7, #8
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
	...

0800b160 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
 800b166:	4603      	mov	r3, r0
 800b168:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b16a:	79fb      	ldrb	r3, [r7, #7]
 800b16c:	4a08      	ldr	r2, [pc, #32]	; (800b190 <disk_status+0x30>)
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	4413      	add	r3, r2
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	79fa      	ldrb	r2, [r7, #7]
 800b178:	4905      	ldr	r1, [pc, #20]	; (800b190 <disk_status+0x30>)
 800b17a:	440a      	add	r2, r1
 800b17c:	7a12      	ldrb	r2, [r2, #8]
 800b17e:	4610      	mov	r0, r2
 800b180:	4798      	blx	r3
 800b182:	4603      	mov	r3, r0
 800b184:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b186:	7bfb      	ldrb	r3, [r7, #15]
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3710      	adds	r7, #16
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}
 800b190:	200027d4 	.word	0x200027d4

0800b194 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b084      	sub	sp, #16
 800b198:	af00      	add	r7, sp, #0
 800b19a:	4603      	mov	r3, r0
 800b19c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b1a2:	79fb      	ldrb	r3, [r7, #7]
 800b1a4:	4a0d      	ldr	r2, [pc, #52]	; (800b1dc <disk_initialize+0x48>)
 800b1a6:	5cd3      	ldrb	r3, [r2, r3]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d111      	bne.n	800b1d0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b1ac:	79fb      	ldrb	r3, [r7, #7]
 800b1ae:	4a0b      	ldr	r2, [pc, #44]	; (800b1dc <disk_initialize+0x48>)
 800b1b0:	2101      	movs	r1, #1
 800b1b2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b1b4:	79fb      	ldrb	r3, [r7, #7]
 800b1b6:	4a09      	ldr	r2, [pc, #36]	; (800b1dc <disk_initialize+0x48>)
 800b1b8:	009b      	lsls	r3, r3, #2
 800b1ba:	4413      	add	r3, r2
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	79fa      	ldrb	r2, [r7, #7]
 800b1c2:	4906      	ldr	r1, [pc, #24]	; (800b1dc <disk_initialize+0x48>)
 800b1c4:	440a      	add	r2, r1
 800b1c6:	7a12      	ldrb	r2, [r2, #8]
 800b1c8:	4610      	mov	r0, r2
 800b1ca:	4798      	blx	r3
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b1d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3710      	adds	r7, #16
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}
 800b1da:	bf00      	nop
 800b1dc:	200027d4 	.word	0x200027d4

0800b1e0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b1e0:	b590      	push	{r4, r7, lr}
 800b1e2:	b087      	sub	sp, #28
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	60b9      	str	r1, [r7, #8]
 800b1e8:	607a      	str	r2, [r7, #4]
 800b1ea:	603b      	str	r3, [r7, #0]
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b1f0:	7bfb      	ldrb	r3, [r7, #15]
 800b1f2:	4a0a      	ldr	r2, [pc, #40]	; (800b21c <disk_read+0x3c>)
 800b1f4:	009b      	lsls	r3, r3, #2
 800b1f6:	4413      	add	r3, r2
 800b1f8:	685b      	ldr	r3, [r3, #4]
 800b1fa:	689c      	ldr	r4, [r3, #8]
 800b1fc:	7bfb      	ldrb	r3, [r7, #15]
 800b1fe:	4a07      	ldr	r2, [pc, #28]	; (800b21c <disk_read+0x3c>)
 800b200:	4413      	add	r3, r2
 800b202:	7a18      	ldrb	r0, [r3, #8]
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	687a      	ldr	r2, [r7, #4]
 800b208:	68b9      	ldr	r1, [r7, #8]
 800b20a:	47a0      	blx	r4
 800b20c:	4603      	mov	r3, r0
 800b20e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b210:	7dfb      	ldrb	r3, [r7, #23]
}
 800b212:	4618      	mov	r0, r3
 800b214:	371c      	adds	r7, #28
 800b216:	46bd      	mov	sp, r7
 800b218:	bd90      	pop	{r4, r7, pc}
 800b21a:	bf00      	nop
 800b21c:	200027d4 	.word	0x200027d4

0800b220 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b220:	b590      	push	{r4, r7, lr}
 800b222:	b087      	sub	sp, #28
 800b224:	af00      	add	r7, sp, #0
 800b226:	60b9      	str	r1, [r7, #8]
 800b228:	607a      	str	r2, [r7, #4]
 800b22a:	603b      	str	r3, [r7, #0]
 800b22c:	4603      	mov	r3, r0
 800b22e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b230:	7bfb      	ldrb	r3, [r7, #15]
 800b232:	4a0a      	ldr	r2, [pc, #40]	; (800b25c <disk_write+0x3c>)
 800b234:	009b      	lsls	r3, r3, #2
 800b236:	4413      	add	r3, r2
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	68dc      	ldr	r4, [r3, #12]
 800b23c:	7bfb      	ldrb	r3, [r7, #15]
 800b23e:	4a07      	ldr	r2, [pc, #28]	; (800b25c <disk_write+0x3c>)
 800b240:	4413      	add	r3, r2
 800b242:	7a18      	ldrb	r0, [r3, #8]
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	687a      	ldr	r2, [r7, #4]
 800b248:	68b9      	ldr	r1, [r7, #8]
 800b24a:	47a0      	blx	r4
 800b24c:	4603      	mov	r3, r0
 800b24e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b250:	7dfb      	ldrb	r3, [r7, #23]
}
 800b252:	4618      	mov	r0, r3
 800b254:	371c      	adds	r7, #28
 800b256:	46bd      	mov	sp, r7
 800b258:	bd90      	pop	{r4, r7, pc}
 800b25a:	bf00      	nop
 800b25c:	200027d4 	.word	0x200027d4

0800b260 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b084      	sub	sp, #16
 800b264:	af00      	add	r7, sp, #0
 800b266:	4603      	mov	r3, r0
 800b268:	603a      	str	r2, [r7, #0]
 800b26a:	71fb      	strb	r3, [r7, #7]
 800b26c:	460b      	mov	r3, r1
 800b26e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b270:	79fb      	ldrb	r3, [r7, #7]
 800b272:	4a09      	ldr	r2, [pc, #36]	; (800b298 <disk_ioctl+0x38>)
 800b274:	009b      	lsls	r3, r3, #2
 800b276:	4413      	add	r3, r2
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	691b      	ldr	r3, [r3, #16]
 800b27c:	79fa      	ldrb	r2, [r7, #7]
 800b27e:	4906      	ldr	r1, [pc, #24]	; (800b298 <disk_ioctl+0x38>)
 800b280:	440a      	add	r2, r1
 800b282:	7a10      	ldrb	r0, [r2, #8]
 800b284:	79b9      	ldrb	r1, [r7, #6]
 800b286:	683a      	ldr	r2, [r7, #0]
 800b288:	4798      	blx	r3
 800b28a:	4603      	mov	r3, r0
 800b28c:	73fb      	strb	r3, [r7, #15]
  return res;
 800b28e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b290:	4618      	mov	r0, r3
 800b292:	3710      	adds	r7, #16
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}
 800b298:	200027d4 	.word	0x200027d4

0800b29c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b29c:	b480      	push	{r7}
 800b29e:	b085      	sub	sp, #20
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b2ac:	89fb      	ldrh	r3, [r7, #14]
 800b2ae:	021b      	lsls	r3, r3, #8
 800b2b0:	b21a      	sxth	r2, r3
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	b21b      	sxth	r3, r3
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	b21b      	sxth	r3, r3
 800b2bc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b2be:	89fb      	ldrh	r3, [r7, #14]
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3714      	adds	r7, #20
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr

0800b2cc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b085      	sub	sp, #20
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	3303      	adds	r3, #3
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	021b      	lsls	r3, r3, #8
 800b2e0:	687a      	ldr	r2, [r7, #4]
 800b2e2:	3202      	adds	r2, #2
 800b2e4:	7812      	ldrb	r2, [r2, #0]
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	021b      	lsls	r3, r3, #8
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	3201      	adds	r2, #1
 800b2f2:	7812      	ldrb	r2, [r2, #0]
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	021b      	lsls	r3, r3, #8
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	7812      	ldrb	r2, [r2, #0]
 800b300:	4313      	orrs	r3, r2
 800b302:	60fb      	str	r3, [r7, #12]
	return rv;
 800b304:	68fb      	ldr	r3, [r7, #12]
}
 800b306:	4618      	mov	r0, r3
 800b308:	3714      	adds	r7, #20
 800b30a:	46bd      	mov	sp, r7
 800b30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b310:	4770      	bx	lr

0800b312 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b312:	b480      	push	{r7}
 800b314:	b083      	sub	sp, #12
 800b316:	af00      	add	r7, sp, #0
 800b318:	6078      	str	r0, [r7, #4]
 800b31a:	460b      	mov	r3, r1
 800b31c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	1c5a      	adds	r2, r3, #1
 800b322:	607a      	str	r2, [r7, #4]
 800b324:	887a      	ldrh	r2, [r7, #2]
 800b326:	b2d2      	uxtb	r2, r2
 800b328:	701a      	strb	r2, [r3, #0]
 800b32a:	887b      	ldrh	r3, [r7, #2]
 800b32c:	0a1b      	lsrs	r3, r3, #8
 800b32e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	1c5a      	adds	r2, r3, #1
 800b334:	607a      	str	r2, [r7, #4]
 800b336:	887a      	ldrh	r2, [r7, #2]
 800b338:	b2d2      	uxtb	r2, r2
 800b33a:	701a      	strb	r2, [r3, #0]
}
 800b33c:	bf00      	nop
 800b33e:	370c      	adds	r7, #12
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr

0800b348 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b348:	b480      	push	{r7}
 800b34a:	b083      	sub	sp, #12
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	1c5a      	adds	r2, r3, #1
 800b356:	607a      	str	r2, [r7, #4]
 800b358:	683a      	ldr	r2, [r7, #0]
 800b35a:	b2d2      	uxtb	r2, r2
 800b35c:	701a      	strb	r2, [r3, #0]
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	0a1b      	lsrs	r3, r3, #8
 800b362:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	1c5a      	adds	r2, r3, #1
 800b368:	607a      	str	r2, [r7, #4]
 800b36a:	683a      	ldr	r2, [r7, #0]
 800b36c:	b2d2      	uxtb	r2, r2
 800b36e:	701a      	strb	r2, [r3, #0]
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	0a1b      	lsrs	r3, r3, #8
 800b374:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	1c5a      	adds	r2, r3, #1
 800b37a:	607a      	str	r2, [r7, #4]
 800b37c:	683a      	ldr	r2, [r7, #0]
 800b37e:	b2d2      	uxtb	r2, r2
 800b380:	701a      	strb	r2, [r3, #0]
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	0a1b      	lsrs	r3, r3, #8
 800b386:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	1c5a      	adds	r2, r3, #1
 800b38c:	607a      	str	r2, [r7, #4]
 800b38e:	683a      	ldr	r2, [r7, #0]
 800b390:	b2d2      	uxtb	r2, r2
 800b392:	701a      	strb	r2, [r3, #0]
}
 800b394:	bf00      	nop
 800b396:	370c      	adds	r7, #12
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr

0800b3a0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b3a0:	b480      	push	{r7}
 800b3a2:	b087      	sub	sp, #28
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	60b9      	str	r1, [r7, #8]
 800b3aa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d00d      	beq.n	800b3d6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b3ba:	693a      	ldr	r2, [r7, #16]
 800b3bc:	1c53      	adds	r3, r2, #1
 800b3be:	613b      	str	r3, [r7, #16]
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	1c59      	adds	r1, r3, #1
 800b3c4:	6179      	str	r1, [r7, #20]
 800b3c6:	7812      	ldrb	r2, [r2, #0]
 800b3c8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	3b01      	subs	r3, #1
 800b3ce:	607b      	str	r3, [r7, #4]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d1f1      	bne.n	800b3ba <mem_cpy+0x1a>
	}
}
 800b3d6:	bf00      	nop
 800b3d8:	371c      	adds	r7, #28
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr

0800b3e2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b3e2:	b480      	push	{r7}
 800b3e4:	b087      	sub	sp, #28
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	60f8      	str	r0, [r7, #12]
 800b3ea:	60b9      	str	r1, [r7, #8]
 800b3ec:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	1c5a      	adds	r2, r3, #1
 800b3f6:	617a      	str	r2, [r7, #20]
 800b3f8:	68ba      	ldr	r2, [r7, #8]
 800b3fa:	b2d2      	uxtb	r2, r2
 800b3fc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	3b01      	subs	r3, #1
 800b402:	607b      	str	r3, [r7, #4]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d1f3      	bne.n	800b3f2 <mem_set+0x10>
}
 800b40a:	bf00      	nop
 800b40c:	bf00      	nop
 800b40e:	371c      	adds	r7, #28
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr

0800b418 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b418:	b480      	push	{r7}
 800b41a:	b089      	sub	sp, #36	; 0x24
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	60f8      	str	r0, [r7, #12]
 800b420:	60b9      	str	r1, [r7, #8]
 800b422:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	61fb      	str	r3, [r7, #28]
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b42c:	2300      	movs	r3, #0
 800b42e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b430:	69fb      	ldr	r3, [r7, #28]
 800b432:	1c5a      	adds	r2, r3, #1
 800b434:	61fa      	str	r2, [r7, #28]
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	4619      	mov	r1, r3
 800b43a:	69bb      	ldr	r3, [r7, #24]
 800b43c:	1c5a      	adds	r2, r3, #1
 800b43e:	61ba      	str	r2, [r7, #24]
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	1acb      	subs	r3, r1, r3
 800b444:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	3b01      	subs	r3, #1
 800b44a:	607b      	str	r3, [r7, #4]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d002      	beq.n	800b458 <mem_cmp+0x40>
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d0eb      	beq.n	800b430 <mem_cmp+0x18>

	return r;
 800b458:	697b      	ldr	r3, [r7, #20]
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3724      	adds	r7, #36	; 0x24
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr

0800b466 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b466:	b480      	push	{r7}
 800b468:	b083      	sub	sp, #12
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	6078      	str	r0, [r7, #4]
 800b46e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b470:	e002      	b.n	800b478 <chk_chr+0x12>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	3301      	adds	r3, #1
 800b476:	607b      	str	r3, [r7, #4]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	781b      	ldrb	r3, [r3, #0]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d005      	beq.n	800b48c <chk_chr+0x26>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	781b      	ldrb	r3, [r3, #0]
 800b484:	461a      	mov	r2, r3
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	4293      	cmp	r3, r2
 800b48a:	d1f2      	bne.n	800b472 <chk_chr+0xc>
	return *str;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	781b      	ldrb	r3, [r3, #0]
}
 800b490:	4618      	mov	r0, r3
 800b492:	370c      	adds	r7, #12
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr

0800b49c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b085      	sub	sp, #20
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	60bb      	str	r3, [r7, #8]
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	60fb      	str	r3, [r7, #12]
 800b4ae:	e029      	b.n	800b504 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b4b0:	4a27      	ldr	r2, [pc, #156]	; (800b550 <chk_lock+0xb4>)
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	011b      	lsls	r3, r3, #4
 800b4b6:	4413      	add	r3, r2
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d01d      	beq.n	800b4fa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b4be:	4a24      	ldr	r2, [pc, #144]	; (800b550 <chk_lock+0xb4>)
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	011b      	lsls	r3, r3, #4
 800b4c4:	4413      	add	r3, r2
 800b4c6:	681a      	ldr	r2, [r3, #0]
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d116      	bne.n	800b4fe <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b4d0:	4a1f      	ldr	r2, [pc, #124]	; (800b550 <chk_lock+0xb4>)
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	011b      	lsls	r3, r3, #4
 800b4d6:	4413      	add	r3, r2
 800b4d8:	3304      	adds	r3, #4
 800b4da:	681a      	ldr	r2, [r3, #0]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d10c      	bne.n	800b4fe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b4e4:	4a1a      	ldr	r2, [pc, #104]	; (800b550 <chk_lock+0xb4>)
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	011b      	lsls	r3, r3, #4
 800b4ea:	4413      	add	r3, r2
 800b4ec:	3308      	adds	r3, #8
 800b4ee:	681a      	ldr	r2, [r3, #0]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d102      	bne.n	800b4fe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b4f8:	e007      	b.n	800b50a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	3301      	adds	r3, #1
 800b502:	60fb      	str	r3, [r7, #12]
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2b01      	cmp	r3, #1
 800b508:	d9d2      	bls.n	800b4b0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2b02      	cmp	r3, #2
 800b50e:	d109      	bne.n	800b524 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d102      	bne.n	800b51c <chk_lock+0x80>
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	2b02      	cmp	r3, #2
 800b51a:	d101      	bne.n	800b520 <chk_lock+0x84>
 800b51c:	2300      	movs	r3, #0
 800b51e:	e010      	b.n	800b542 <chk_lock+0xa6>
 800b520:	2312      	movs	r3, #18
 800b522:	e00e      	b.n	800b542 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d108      	bne.n	800b53c <chk_lock+0xa0>
 800b52a:	4a09      	ldr	r2, [pc, #36]	; (800b550 <chk_lock+0xb4>)
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	011b      	lsls	r3, r3, #4
 800b530:	4413      	add	r3, r2
 800b532:	330c      	adds	r3, #12
 800b534:	881b      	ldrh	r3, [r3, #0]
 800b536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b53a:	d101      	bne.n	800b540 <chk_lock+0xa4>
 800b53c:	2310      	movs	r3, #16
 800b53e:	e000      	b.n	800b542 <chk_lock+0xa6>
 800b540:	2300      	movs	r3, #0
}
 800b542:	4618      	mov	r0, r3
 800b544:	3714      	adds	r7, #20
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr
 800b54e:	bf00      	nop
 800b550:	200025b4 	.word	0x200025b4

0800b554 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b554:	b480      	push	{r7}
 800b556:	b083      	sub	sp, #12
 800b558:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b55a:	2300      	movs	r3, #0
 800b55c:	607b      	str	r3, [r7, #4]
 800b55e:	e002      	b.n	800b566 <enq_lock+0x12>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	3301      	adds	r3, #1
 800b564:	607b      	str	r3, [r7, #4]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2b01      	cmp	r3, #1
 800b56a:	d806      	bhi.n	800b57a <enq_lock+0x26>
 800b56c:	4a09      	ldr	r2, [pc, #36]	; (800b594 <enq_lock+0x40>)
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	011b      	lsls	r3, r3, #4
 800b572:	4413      	add	r3, r2
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d1f2      	bne.n	800b560 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2b02      	cmp	r3, #2
 800b57e:	bf14      	ite	ne
 800b580:	2301      	movne	r3, #1
 800b582:	2300      	moveq	r3, #0
 800b584:	b2db      	uxtb	r3, r3
}
 800b586:	4618      	mov	r0, r3
 800b588:	370c      	adds	r7, #12
 800b58a:	46bd      	mov	sp, r7
 800b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b590:	4770      	bx	lr
 800b592:	bf00      	nop
 800b594:	200025b4 	.word	0x200025b4

0800b598 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b598:	b480      	push	{r7}
 800b59a:	b085      	sub	sp, #20
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	60fb      	str	r3, [r7, #12]
 800b5a6:	e01f      	b.n	800b5e8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b5a8:	4a41      	ldr	r2, [pc, #260]	; (800b6b0 <inc_lock+0x118>)
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	011b      	lsls	r3, r3, #4
 800b5ae:	4413      	add	r3, r2
 800b5b0:	681a      	ldr	r2, [r3, #0]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d113      	bne.n	800b5e2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b5ba:	4a3d      	ldr	r2, [pc, #244]	; (800b6b0 <inc_lock+0x118>)
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	011b      	lsls	r3, r3, #4
 800b5c0:	4413      	add	r3, r2
 800b5c2:	3304      	adds	r3, #4
 800b5c4:	681a      	ldr	r2, [r3, #0]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	d109      	bne.n	800b5e2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b5ce:	4a38      	ldr	r2, [pc, #224]	; (800b6b0 <inc_lock+0x118>)
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	011b      	lsls	r3, r3, #4
 800b5d4:	4413      	add	r3, r2
 800b5d6:	3308      	adds	r3, #8
 800b5d8:	681a      	ldr	r2, [r3, #0]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d006      	beq.n	800b5f0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	60fb      	str	r3, [r7, #12]
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	2b01      	cmp	r3, #1
 800b5ec:	d9dc      	bls.n	800b5a8 <inc_lock+0x10>
 800b5ee:	e000      	b.n	800b5f2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b5f0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2b02      	cmp	r3, #2
 800b5f6:	d132      	bne.n	800b65e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	60fb      	str	r3, [r7, #12]
 800b5fc:	e002      	b.n	800b604 <inc_lock+0x6c>
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	3301      	adds	r3, #1
 800b602:	60fb      	str	r3, [r7, #12]
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2b01      	cmp	r3, #1
 800b608:	d806      	bhi.n	800b618 <inc_lock+0x80>
 800b60a:	4a29      	ldr	r2, [pc, #164]	; (800b6b0 <inc_lock+0x118>)
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	011b      	lsls	r3, r3, #4
 800b610:	4413      	add	r3, r2
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d1f2      	bne.n	800b5fe <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2b02      	cmp	r3, #2
 800b61c:	d101      	bne.n	800b622 <inc_lock+0x8a>
 800b61e:	2300      	movs	r3, #0
 800b620:	e040      	b.n	800b6a4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681a      	ldr	r2, [r3, #0]
 800b626:	4922      	ldr	r1, [pc, #136]	; (800b6b0 <inc_lock+0x118>)
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	011b      	lsls	r3, r3, #4
 800b62c:	440b      	add	r3, r1
 800b62e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	689a      	ldr	r2, [r3, #8]
 800b634:	491e      	ldr	r1, [pc, #120]	; (800b6b0 <inc_lock+0x118>)
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	011b      	lsls	r3, r3, #4
 800b63a:	440b      	add	r3, r1
 800b63c:	3304      	adds	r3, #4
 800b63e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	695a      	ldr	r2, [r3, #20]
 800b644:	491a      	ldr	r1, [pc, #104]	; (800b6b0 <inc_lock+0x118>)
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	011b      	lsls	r3, r3, #4
 800b64a:	440b      	add	r3, r1
 800b64c:	3308      	adds	r3, #8
 800b64e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b650:	4a17      	ldr	r2, [pc, #92]	; (800b6b0 <inc_lock+0x118>)
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	011b      	lsls	r3, r3, #4
 800b656:	4413      	add	r3, r2
 800b658:	330c      	adds	r3, #12
 800b65a:	2200      	movs	r2, #0
 800b65c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d009      	beq.n	800b678 <inc_lock+0xe0>
 800b664:	4a12      	ldr	r2, [pc, #72]	; (800b6b0 <inc_lock+0x118>)
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	011b      	lsls	r3, r3, #4
 800b66a:	4413      	add	r3, r2
 800b66c:	330c      	adds	r3, #12
 800b66e:	881b      	ldrh	r3, [r3, #0]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d001      	beq.n	800b678 <inc_lock+0xe0>
 800b674:	2300      	movs	r3, #0
 800b676:	e015      	b.n	800b6a4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d108      	bne.n	800b690 <inc_lock+0xf8>
 800b67e:	4a0c      	ldr	r2, [pc, #48]	; (800b6b0 <inc_lock+0x118>)
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	011b      	lsls	r3, r3, #4
 800b684:	4413      	add	r3, r2
 800b686:	330c      	adds	r3, #12
 800b688:	881b      	ldrh	r3, [r3, #0]
 800b68a:	3301      	adds	r3, #1
 800b68c:	b29a      	uxth	r2, r3
 800b68e:	e001      	b.n	800b694 <inc_lock+0xfc>
 800b690:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b694:	4906      	ldr	r1, [pc, #24]	; (800b6b0 <inc_lock+0x118>)
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	011b      	lsls	r3, r3, #4
 800b69a:	440b      	add	r3, r1
 800b69c:	330c      	adds	r3, #12
 800b69e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	3301      	adds	r3, #1
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3714      	adds	r7, #20
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr
 800b6b0:	200025b4 	.word	0x200025b4

0800b6b4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b085      	sub	sp, #20
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	3b01      	subs	r3, #1
 800b6c0:	607b      	str	r3, [r7, #4]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2b01      	cmp	r3, #1
 800b6c6:	d825      	bhi.n	800b714 <dec_lock+0x60>
		n = Files[i].ctr;
 800b6c8:	4a17      	ldr	r2, [pc, #92]	; (800b728 <dec_lock+0x74>)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	011b      	lsls	r3, r3, #4
 800b6ce:	4413      	add	r3, r2
 800b6d0:	330c      	adds	r3, #12
 800b6d2:	881b      	ldrh	r3, [r3, #0]
 800b6d4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b6d6:	89fb      	ldrh	r3, [r7, #14]
 800b6d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6dc:	d101      	bne.n	800b6e2 <dec_lock+0x2e>
 800b6de:	2300      	movs	r3, #0
 800b6e0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b6e2:	89fb      	ldrh	r3, [r7, #14]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d002      	beq.n	800b6ee <dec_lock+0x3a>
 800b6e8:	89fb      	ldrh	r3, [r7, #14]
 800b6ea:	3b01      	subs	r3, #1
 800b6ec:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b6ee:	4a0e      	ldr	r2, [pc, #56]	; (800b728 <dec_lock+0x74>)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	011b      	lsls	r3, r3, #4
 800b6f4:	4413      	add	r3, r2
 800b6f6:	330c      	adds	r3, #12
 800b6f8:	89fa      	ldrh	r2, [r7, #14]
 800b6fa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b6fc:	89fb      	ldrh	r3, [r7, #14]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d105      	bne.n	800b70e <dec_lock+0x5a>
 800b702:	4a09      	ldr	r2, [pc, #36]	; (800b728 <dec_lock+0x74>)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	011b      	lsls	r3, r3, #4
 800b708:	4413      	add	r3, r2
 800b70a:	2200      	movs	r2, #0
 800b70c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b70e:	2300      	movs	r3, #0
 800b710:	737b      	strb	r3, [r7, #13]
 800b712:	e001      	b.n	800b718 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b714:	2302      	movs	r3, #2
 800b716:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b718:	7b7b      	ldrb	r3, [r7, #13]
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3714      	adds	r7, #20
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr
 800b726:	bf00      	nop
 800b728:	200025b4 	.word	0x200025b4

0800b72c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b085      	sub	sp, #20
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b734:	2300      	movs	r3, #0
 800b736:	60fb      	str	r3, [r7, #12]
 800b738:	e010      	b.n	800b75c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b73a:	4a0d      	ldr	r2, [pc, #52]	; (800b770 <clear_lock+0x44>)
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	011b      	lsls	r3, r3, #4
 800b740:	4413      	add	r3, r2
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	687a      	ldr	r2, [r7, #4]
 800b746:	429a      	cmp	r2, r3
 800b748:	d105      	bne.n	800b756 <clear_lock+0x2a>
 800b74a:	4a09      	ldr	r2, [pc, #36]	; (800b770 <clear_lock+0x44>)
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	011b      	lsls	r3, r3, #4
 800b750:	4413      	add	r3, r2
 800b752:	2200      	movs	r2, #0
 800b754:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	3301      	adds	r3, #1
 800b75a:	60fb      	str	r3, [r7, #12]
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	2b01      	cmp	r3, #1
 800b760:	d9eb      	bls.n	800b73a <clear_lock+0xe>
	}
}
 800b762:	bf00      	nop
 800b764:	bf00      	nop
 800b766:	3714      	adds	r7, #20
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr
 800b770:	200025b4 	.word	0x200025b4

0800b774 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b086      	sub	sp, #24
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b77c:	2300      	movs	r3, #0
 800b77e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	78db      	ldrb	r3, [r3, #3]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d034      	beq.n	800b7f2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b78c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	7858      	ldrb	r0, [r3, #1]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b798:	2301      	movs	r3, #1
 800b79a:	697a      	ldr	r2, [r7, #20]
 800b79c:	f7ff fd40 	bl	800b220 <disk_write>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d002      	beq.n	800b7ac <sync_window+0x38>
			res = FR_DISK_ERR;
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	73fb      	strb	r3, [r7, #15]
 800b7aa:	e022      	b.n	800b7f2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7b6:	697a      	ldr	r2, [r7, #20]
 800b7b8:	1ad2      	subs	r2, r2, r3
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6a1b      	ldr	r3, [r3, #32]
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	d217      	bcs.n	800b7f2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	789b      	ldrb	r3, [r3, #2]
 800b7c6:	613b      	str	r3, [r7, #16]
 800b7c8:	e010      	b.n	800b7ec <sync_window+0x78>
					wsect += fs->fsize;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6a1b      	ldr	r3, [r3, #32]
 800b7ce:	697a      	ldr	r2, [r7, #20]
 800b7d0:	4413      	add	r3, r2
 800b7d2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	7858      	ldrb	r0, [r3, #1]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b7de:	2301      	movs	r3, #1
 800b7e0:	697a      	ldr	r2, [r7, #20]
 800b7e2:	f7ff fd1d 	bl	800b220 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	3b01      	subs	r3, #1
 800b7ea:	613b      	str	r3, [r7, #16]
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	d8eb      	bhi.n	800b7ca <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b7f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3718      	adds	r7, #24
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b084      	sub	sp, #16
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b806:	2300      	movs	r3, #0
 800b808:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b80e:	683a      	ldr	r2, [r7, #0]
 800b810:	429a      	cmp	r2, r3
 800b812:	d01b      	beq.n	800b84c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f7ff ffad 	bl	800b774 <sync_window>
 800b81a:	4603      	mov	r3, r0
 800b81c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b81e:	7bfb      	ldrb	r3, [r7, #15]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d113      	bne.n	800b84c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	7858      	ldrb	r0, [r3, #1]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b82e:	2301      	movs	r3, #1
 800b830:	683a      	ldr	r2, [r7, #0]
 800b832:	f7ff fcd5 	bl	800b1e0 <disk_read>
 800b836:	4603      	mov	r3, r0
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d004      	beq.n	800b846 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b83c:	f04f 33ff 	mov.w	r3, #4294967295
 800b840:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b842:	2301      	movs	r3, #1
 800b844:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	683a      	ldr	r2, [r7, #0]
 800b84a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800b84c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3710      	adds	r7, #16
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
	...

0800b858 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f7ff ff87 	bl	800b774 <sync_window>
 800b866:	4603      	mov	r3, r0
 800b868:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b86a:	7bfb      	ldrb	r3, [r7, #15]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d159      	bne.n	800b924 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	781b      	ldrb	r3, [r3, #0]
 800b874:	2b03      	cmp	r3, #3
 800b876:	d149      	bne.n	800b90c <sync_fs+0xb4>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	791b      	ldrb	r3, [r3, #4]
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	d145      	bne.n	800b90c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	899b      	ldrh	r3, [r3, #12]
 800b88a:	461a      	mov	r2, r3
 800b88c:	2100      	movs	r1, #0
 800b88e:	f7ff fda8 	bl	800b3e2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	3338      	adds	r3, #56	; 0x38
 800b896:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b89a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f7ff fd37 	bl	800b312 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	3338      	adds	r3, #56	; 0x38
 800b8a8:	4921      	ldr	r1, [pc, #132]	; (800b930 <sync_fs+0xd8>)
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7ff fd4c 	bl	800b348 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	3338      	adds	r3, #56	; 0x38
 800b8b4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b8b8:	491e      	ldr	r1, [pc, #120]	; (800b934 <sync_fs+0xdc>)
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7ff fd44 	bl	800b348 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	3338      	adds	r3, #56	; 0x38
 800b8c4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	699b      	ldr	r3, [r3, #24]
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	4610      	mov	r0, r2
 800b8d0:	f7ff fd3a 	bl	800b348 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	3338      	adds	r3, #56	; 0x38
 800b8d8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	695b      	ldr	r3, [r3, #20]
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	4610      	mov	r0, r2
 800b8e4:	f7ff fd30 	bl	800b348 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ec:	1c5a      	adds	r2, r3, #1
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	7858      	ldrb	r0, [r3, #1]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b900:	2301      	movs	r3, #1
 800b902:	f7ff fc8d 	bl	800b220 <disk_write>
			fs->fsi_flag = 0;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2200      	movs	r2, #0
 800b90a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	785b      	ldrb	r3, [r3, #1]
 800b910:	2200      	movs	r2, #0
 800b912:	2100      	movs	r1, #0
 800b914:	4618      	mov	r0, r3
 800b916:	f7ff fca3 	bl	800b260 <disk_ioctl>
 800b91a:	4603      	mov	r3, r0
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d001      	beq.n	800b924 <sync_fs+0xcc>
 800b920:	2301      	movs	r3, #1
 800b922:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b924:	7bfb      	ldrb	r3, [r7, #15]
}
 800b926:	4618      	mov	r0, r3
 800b928:	3710      	adds	r7, #16
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}
 800b92e:	bf00      	nop
 800b930:	41615252 	.word	0x41615252
 800b934:	61417272 	.word	0x61417272

0800b938 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b938:	b480      	push	{r7}
 800b93a:	b083      	sub	sp, #12
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	3b02      	subs	r3, #2
 800b946:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	69db      	ldr	r3, [r3, #28]
 800b94c:	3b02      	subs	r3, #2
 800b94e:	683a      	ldr	r2, [r7, #0]
 800b950:	429a      	cmp	r2, r3
 800b952:	d301      	bcc.n	800b958 <clust2sect+0x20>
 800b954:	2300      	movs	r3, #0
 800b956:	e008      	b.n	800b96a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	895b      	ldrh	r3, [r3, #10]
 800b95c:	461a      	mov	r2, r3
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	fb03 f202 	mul.w	r2, r3, r2
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b968:	4413      	add	r3, r2
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	370c      	adds	r7, #12
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr

0800b976 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b976:	b580      	push	{r7, lr}
 800b978:	b086      	sub	sp, #24
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
 800b97e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d904      	bls.n	800b996 <get_fat+0x20>
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	69db      	ldr	r3, [r3, #28]
 800b990:	683a      	ldr	r2, [r7, #0]
 800b992:	429a      	cmp	r2, r3
 800b994:	d302      	bcc.n	800b99c <get_fat+0x26>
		val = 1;	/* Internal error */
 800b996:	2301      	movs	r3, #1
 800b998:	617b      	str	r3, [r7, #20]
 800b99a:	e0bb      	b.n	800bb14 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b99c:	f04f 33ff 	mov.w	r3, #4294967295
 800b9a0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	781b      	ldrb	r3, [r3, #0]
 800b9a6:	2b03      	cmp	r3, #3
 800b9a8:	f000 8083 	beq.w	800bab2 <get_fat+0x13c>
 800b9ac:	2b03      	cmp	r3, #3
 800b9ae:	f300 80a7 	bgt.w	800bb00 <get_fat+0x18a>
 800b9b2:	2b01      	cmp	r3, #1
 800b9b4:	d002      	beq.n	800b9bc <get_fat+0x46>
 800b9b6:	2b02      	cmp	r3, #2
 800b9b8:	d056      	beq.n	800ba68 <get_fat+0xf2>
 800b9ba:	e0a1      	b.n	800bb00 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	60fb      	str	r3, [r7, #12]
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	085b      	lsrs	r3, r3, #1
 800b9c4:	68fa      	ldr	r2, [r7, #12]
 800b9c6:	4413      	add	r3, r2
 800b9c8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	899b      	ldrh	r3, [r3, #12]
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	fbb3 f3f1 	udiv	r3, r3, r1
 800b9da:	4413      	add	r3, r2
 800b9dc:	4619      	mov	r1, r3
 800b9de:	6938      	ldr	r0, [r7, #16]
 800b9e0:	f7ff ff0c 	bl	800b7fc <move_window>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	f040 808d 	bne.w	800bb06 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	1c5a      	adds	r2, r3, #1
 800b9f0:	60fa      	str	r2, [r7, #12]
 800b9f2:	693a      	ldr	r2, [r7, #16]
 800b9f4:	8992      	ldrh	r2, [r2, #12]
 800b9f6:	fbb3 f1f2 	udiv	r1, r3, r2
 800b9fa:	fb01 f202 	mul.w	r2, r1, r2
 800b9fe:	1a9b      	subs	r3, r3, r2
 800ba00:	693a      	ldr	r2, [r7, #16]
 800ba02:	4413      	add	r3, r2
 800ba04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ba08:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	899b      	ldrh	r3, [r3, #12]
 800ba12:	4619      	mov	r1, r3
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	fbb3 f3f1 	udiv	r3, r3, r1
 800ba1a:	4413      	add	r3, r2
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	6938      	ldr	r0, [r7, #16]
 800ba20:	f7ff feec 	bl	800b7fc <move_window>
 800ba24:	4603      	mov	r3, r0
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d16f      	bne.n	800bb0a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	899b      	ldrh	r3, [r3, #12]
 800ba2e:	461a      	mov	r2, r3
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba36:	fb01 f202 	mul.w	r2, r1, r2
 800ba3a:	1a9b      	subs	r3, r3, r2
 800ba3c:	693a      	ldr	r2, [r7, #16]
 800ba3e:	4413      	add	r3, r2
 800ba40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ba44:	021b      	lsls	r3, r3, #8
 800ba46:	461a      	mov	r2, r3
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	4313      	orrs	r3, r2
 800ba4c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	f003 0301 	and.w	r3, r3, #1
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d002      	beq.n	800ba5e <get_fat+0xe8>
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	091b      	lsrs	r3, r3, #4
 800ba5c:	e002      	b.n	800ba64 <get_fat+0xee>
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ba64:	617b      	str	r3, [r7, #20]
			break;
 800ba66:	e055      	b.n	800bb14 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	899b      	ldrh	r3, [r3, #12]
 800ba70:	085b      	lsrs	r3, r3, #1
 800ba72:	b29b      	uxth	r3, r3
 800ba74:	4619      	mov	r1, r3
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	fbb3 f3f1 	udiv	r3, r3, r1
 800ba7c:	4413      	add	r3, r2
 800ba7e:	4619      	mov	r1, r3
 800ba80:	6938      	ldr	r0, [r7, #16]
 800ba82:	f7ff febb 	bl	800b7fc <move_window>
 800ba86:	4603      	mov	r3, r0
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d140      	bne.n	800bb0e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	005b      	lsls	r3, r3, #1
 800ba96:	693a      	ldr	r2, [r7, #16]
 800ba98:	8992      	ldrh	r2, [r2, #12]
 800ba9a:	fbb3 f0f2 	udiv	r0, r3, r2
 800ba9e:	fb00 f202 	mul.w	r2, r0, r2
 800baa2:	1a9b      	subs	r3, r3, r2
 800baa4:	440b      	add	r3, r1
 800baa6:	4618      	mov	r0, r3
 800baa8:	f7ff fbf8 	bl	800b29c <ld_word>
 800baac:	4603      	mov	r3, r0
 800baae:	617b      	str	r3, [r7, #20]
			break;
 800bab0:	e030      	b.n	800bb14 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	899b      	ldrh	r3, [r3, #12]
 800baba:	089b      	lsrs	r3, r3, #2
 800babc:	b29b      	uxth	r3, r3
 800babe:	4619      	mov	r1, r3
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	fbb3 f3f1 	udiv	r3, r3, r1
 800bac6:	4413      	add	r3, r2
 800bac8:	4619      	mov	r1, r3
 800baca:	6938      	ldr	r0, [r7, #16]
 800bacc:	f7ff fe96 	bl	800b7fc <move_window>
 800bad0:	4603      	mov	r3, r0
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d11d      	bne.n	800bb12 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	009b      	lsls	r3, r3, #2
 800bae0:	693a      	ldr	r2, [r7, #16]
 800bae2:	8992      	ldrh	r2, [r2, #12]
 800bae4:	fbb3 f0f2 	udiv	r0, r3, r2
 800bae8:	fb00 f202 	mul.w	r2, r0, r2
 800baec:	1a9b      	subs	r3, r3, r2
 800baee:	440b      	add	r3, r1
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7ff fbeb 	bl	800b2cc <ld_dword>
 800baf6:	4603      	mov	r3, r0
 800baf8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bafc:	617b      	str	r3, [r7, #20]
			break;
 800bafe:	e009      	b.n	800bb14 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bb00:	2301      	movs	r3, #1
 800bb02:	617b      	str	r3, [r7, #20]
 800bb04:	e006      	b.n	800bb14 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bb06:	bf00      	nop
 800bb08:	e004      	b.n	800bb14 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bb0a:	bf00      	nop
 800bb0c:	e002      	b.n	800bb14 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bb0e:	bf00      	nop
 800bb10:	e000      	b.n	800bb14 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bb12:	bf00      	nop
		}
	}

	return val;
 800bb14:	697b      	ldr	r3, [r7, #20]
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3718      	adds	r7, #24
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}

0800bb1e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bb1e:	b590      	push	{r4, r7, lr}
 800bb20:	b089      	sub	sp, #36	; 0x24
 800bb22:	af00      	add	r7, sp, #0
 800bb24:	60f8      	str	r0, [r7, #12]
 800bb26:	60b9      	str	r1, [r7, #8]
 800bb28:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bb2a:	2302      	movs	r3, #2
 800bb2c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	2b01      	cmp	r3, #1
 800bb32:	f240 8109 	bls.w	800bd48 <put_fat+0x22a>
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	69db      	ldr	r3, [r3, #28]
 800bb3a:	68ba      	ldr	r2, [r7, #8]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	f080 8103 	bcs.w	800bd48 <put_fat+0x22a>
		switch (fs->fs_type) {
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	2b03      	cmp	r3, #3
 800bb48:	f000 80b6 	beq.w	800bcb8 <put_fat+0x19a>
 800bb4c:	2b03      	cmp	r3, #3
 800bb4e:	f300 80fb 	bgt.w	800bd48 <put_fat+0x22a>
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	d003      	beq.n	800bb5e <put_fat+0x40>
 800bb56:	2b02      	cmp	r3, #2
 800bb58:	f000 8083 	beq.w	800bc62 <put_fat+0x144>
 800bb5c:	e0f4      	b.n	800bd48 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	61bb      	str	r3, [r7, #24]
 800bb62:	69bb      	ldr	r3, [r7, #24]
 800bb64:	085b      	lsrs	r3, r3, #1
 800bb66:	69ba      	ldr	r2, [r7, #24]
 800bb68:	4413      	add	r3, r2
 800bb6a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	899b      	ldrh	r3, [r3, #12]
 800bb74:	4619      	mov	r1, r3
 800bb76:	69bb      	ldr	r3, [r7, #24]
 800bb78:	fbb3 f3f1 	udiv	r3, r3, r1
 800bb7c:	4413      	add	r3, r2
 800bb7e:	4619      	mov	r1, r3
 800bb80:	68f8      	ldr	r0, [r7, #12]
 800bb82:	f7ff fe3b 	bl	800b7fc <move_window>
 800bb86:	4603      	mov	r3, r0
 800bb88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bb8a:	7ffb      	ldrb	r3, [r7, #31]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	f040 80d4 	bne.w	800bd3a <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bb98:	69bb      	ldr	r3, [r7, #24]
 800bb9a:	1c5a      	adds	r2, r3, #1
 800bb9c:	61ba      	str	r2, [r7, #24]
 800bb9e:	68fa      	ldr	r2, [r7, #12]
 800bba0:	8992      	ldrh	r2, [r2, #12]
 800bba2:	fbb3 f0f2 	udiv	r0, r3, r2
 800bba6:	fb00 f202 	mul.w	r2, r0, r2
 800bbaa:	1a9b      	subs	r3, r3, r2
 800bbac:	440b      	add	r3, r1
 800bbae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	f003 0301 	and.w	r3, r3, #1
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d00d      	beq.n	800bbd6 <put_fat+0xb8>
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	781b      	ldrb	r3, [r3, #0]
 800bbbe:	b25b      	sxtb	r3, r3
 800bbc0:	f003 030f 	and.w	r3, r3, #15
 800bbc4:	b25a      	sxtb	r2, r3
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	b2db      	uxtb	r3, r3
 800bbca:	011b      	lsls	r3, r3, #4
 800bbcc:	b25b      	sxtb	r3, r3
 800bbce:	4313      	orrs	r3, r2
 800bbd0:	b25b      	sxtb	r3, r3
 800bbd2:	b2db      	uxtb	r3, r3
 800bbd4:	e001      	b.n	800bbda <put_fat+0xbc>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	697a      	ldr	r2, [r7, #20]
 800bbdc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	899b      	ldrh	r3, [r3, #12]
 800bbec:	4619      	mov	r1, r3
 800bbee:	69bb      	ldr	r3, [r7, #24]
 800bbf0:	fbb3 f3f1 	udiv	r3, r3, r1
 800bbf4:	4413      	add	r3, r2
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	68f8      	ldr	r0, [r7, #12]
 800bbfa:	f7ff fdff 	bl	800b7fc <move_window>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bc02:	7ffb      	ldrb	r3, [r7, #31]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	f040 809a 	bne.w	800bd3e <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	899b      	ldrh	r3, [r3, #12]
 800bc14:	461a      	mov	r2, r3
 800bc16:	69bb      	ldr	r3, [r7, #24]
 800bc18:	fbb3 f0f2 	udiv	r0, r3, r2
 800bc1c:	fb00 f202 	mul.w	r2, r0, r2
 800bc20:	1a9b      	subs	r3, r3, r2
 800bc22:	440b      	add	r3, r1
 800bc24:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	f003 0301 	and.w	r3, r3, #1
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d003      	beq.n	800bc38 <put_fat+0x11a>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	091b      	lsrs	r3, r3, #4
 800bc34:	b2db      	uxtb	r3, r3
 800bc36:	e00e      	b.n	800bc56 <put_fat+0x138>
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	781b      	ldrb	r3, [r3, #0]
 800bc3c:	b25b      	sxtb	r3, r3
 800bc3e:	f023 030f 	bic.w	r3, r3, #15
 800bc42:	b25a      	sxtb	r2, r3
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	0a1b      	lsrs	r3, r3, #8
 800bc48:	b25b      	sxtb	r3, r3
 800bc4a:	f003 030f 	and.w	r3, r3, #15
 800bc4e:	b25b      	sxtb	r3, r3
 800bc50:	4313      	orrs	r3, r2
 800bc52:	b25b      	sxtb	r3, r3
 800bc54:	b2db      	uxtb	r3, r3
 800bc56:	697a      	ldr	r2, [r7, #20]
 800bc58:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2201      	movs	r2, #1
 800bc5e:	70da      	strb	r2, [r3, #3]
			break;
 800bc60:	e072      	b.n	800bd48 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	899b      	ldrh	r3, [r3, #12]
 800bc6a:	085b      	lsrs	r3, r3, #1
 800bc6c:	b29b      	uxth	r3, r3
 800bc6e:	4619      	mov	r1, r3
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	fbb3 f3f1 	udiv	r3, r3, r1
 800bc76:	4413      	add	r3, r2
 800bc78:	4619      	mov	r1, r3
 800bc7a:	68f8      	ldr	r0, [r7, #12]
 800bc7c:	f7ff fdbe 	bl	800b7fc <move_window>
 800bc80:	4603      	mov	r3, r0
 800bc82:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bc84:	7ffb      	ldrb	r3, [r7, #31]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d15b      	bne.n	800bd42 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	005b      	lsls	r3, r3, #1
 800bc94:	68fa      	ldr	r2, [r7, #12]
 800bc96:	8992      	ldrh	r2, [r2, #12]
 800bc98:	fbb3 f0f2 	udiv	r0, r3, r2
 800bc9c:	fb00 f202 	mul.w	r2, r0, r2
 800bca0:	1a9b      	subs	r3, r3, r2
 800bca2:	440b      	add	r3, r1
 800bca4:	687a      	ldr	r2, [r7, #4]
 800bca6:	b292      	uxth	r2, r2
 800bca8:	4611      	mov	r1, r2
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f7ff fb31 	bl	800b312 <st_word>
			fs->wflag = 1;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2201      	movs	r2, #1
 800bcb4:	70da      	strb	r2, [r3, #3]
			break;
 800bcb6:	e047      	b.n	800bd48 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	899b      	ldrh	r3, [r3, #12]
 800bcc0:	089b      	lsrs	r3, r3, #2
 800bcc2:	b29b      	uxth	r3, r3
 800bcc4:	4619      	mov	r1, r3
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	fbb3 f3f1 	udiv	r3, r3, r1
 800bccc:	4413      	add	r3, r2
 800bcce:	4619      	mov	r1, r3
 800bcd0:	68f8      	ldr	r0, [r7, #12]
 800bcd2:	f7ff fd93 	bl	800b7fc <move_window>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bcda:	7ffb      	ldrb	r3, [r7, #31]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d132      	bne.n	800bd46 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	009b      	lsls	r3, r3, #2
 800bcf0:	68fa      	ldr	r2, [r7, #12]
 800bcf2:	8992      	ldrh	r2, [r2, #12]
 800bcf4:	fbb3 f0f2 	udiv	r0, r3, r2
 800bcf8:	fb00 f202 	mul.w	r2, r0, r2
 800bcfc:	1a9b      	subs	r3, r3, r2
 800bcfe:	440b      	add	r3, r1
 800bd00:	4618      	mov	r0, r3
 800bd02:	f7ff fae3 	bl	800b2cc <ld_dword>
 800bd06:	4603      	mov	r3, r0
 800bd08:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bd0c:	4323      	orrs	r3, r4
 800bd0e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	009b      	lsls	r3, r3, #2
 800bd1a:	68fa      	ldr	r2, [r7, #12]
 800bd1c:	8992      	ldrh	r2, [r2, #12]
 800bd1e:	fbb3 f0f2 	udiv	r0, r3, r2
 800bd22:	fb00 f202 	mul.w	r2, r0, r2
 800bd26:	1a9b      	subs	r3, r3, r2
 800bd28:	440b      	add	r3, r1
 800bd2a:	6879      	ldr	r1, [r7, #4]
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f7ff fb0b 	bl	800b348 <st_dword>
			fs->wflag = 1;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	2201      	movs	r2, #1
 800bd36:	70da      	strb	r2, [r3, #3]
			break;
 800bd38:	e006      	b.n	800bd48 <put_fat+0x22a>
			if (res != FR_OK) break;
 800bd3a:	bf00      	nop
 800bd3c:	e004      	b.n	800bd48 <put_fat+0x22a>
			if (res != FR_OK) break;
 800bd3e:	bf00      	nop
 800bd40:	e002      	b.n	800bd48 <put_fat+0x22a>
			if (res != FR_OK) break;
 800bd42:	bf00      	nop
 800bd44:	e000      	b.n	800bd48 <put_fat+0x22a>
			if (res != FR_OK) break;
 800bd46:	bf00      	nop
		}
	}
	return res;
 800bd48:	7ffb      	ldrb	r3, [r7, #31]
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3724      	adds	r7, #36	; 0x24
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd90      	pop	{r4, r7, pc}

0800bd52 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bd52:	b580      	push	{r7, lr}
 800bd54:	b088      	sub	sp, #32
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	60f8      	str	r0, [r7, #12]
 800bd5a:	60b9      	str	r1, [r7, #8]
 800bd5c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	2b01      	cmp	r3, #1
 800bd6c:	d904      	bls.n	800bd78 <remove_chain+0x26>
 800bd6e:	69bb      	ldr	r3, [r7, #24]
 800bd70:	69db      	ldr	r3, [r3, #28]
 800bd72:	68ba      	ldr	r2, [r7, #8]
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d301      	bcc.n	800bd7c <remove_chain+0x2a>
 800bd78:	2302      	movs	r3, #2
 800bd7a:	e04b      	b.n	800be14 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d00c      	beq.n	800bd9c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800bd82:	f04f 32ff 	mov.w	r2, #4294967295
 800bd86:	6879      	ldr	r1, [r7, #4]
 800bd88:	69b8      	ldr	r0, [r7, #24]
 800bd8a:	f7ff fec8 	bl	800bb1e <put_fat>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bd92:	7ffb      	ldrb	r3, [r7, #31]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d001      	beq.n	800bd9c <remove_chain+0x4a>
 800bd98:	7ffb      	ldrb	r3, [r7, #31]
 800bd9a:	e03b      	b.n	800be14 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bd9c:	68b9      	ldr	r1, [r7, #8]
 800bd9e:	68f8      	ldr	r0, [r7, #12]
 800bda0:	f7ff fde9 	bl	800b976 <get_fat>
 800bda4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d031      	beq.n	800be10 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	2b01      	cmp	r3, #1
 800bdb0:	d101      	bne.n	800bdb6 <remove_chain+0x64>
 800bdb2:	2302      	movs	r3, #2
 800bdb4:	e02e      	b.n	800be14 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdbc:	d101      	bne.n	800bdc2 <remove_chain+0x70>
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	e028      	b.n	800be14 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	68b9      	ldr	r1, [r7, #8]
 800bdc6:	69b8      	ldr	r0, [r7, #24]
 800bdc8:	f7ff fea9 	bl	800bb1e <put_fat>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bdd0:	7ffb      	ldrb	r3, [r7, #31]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d001      	beq.n	800bdda <remove_chain+0x88>
 800bdd6:	7ffb      	ldrb	r3, [r7, #31]
 800bdd8:	e01c      	b.n	800be14 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bdda:	69bb      	ldr	r3, [r7, #24]
 800bddc:	699a      	ldr	r2, [r3, #24]
 800bdde:	69bb      	ldr	r3, [r7, #24]
 800bde0:	69db      	ldr	r3, [r3, #28]
 800bde2:	3b02      	subs	r3, #2
 800bde4:	429a      	cmp	r2, r3
 800bde6:	d20b      	bcs.n	800be00 <remove_chain+0xae>
			fs->free_clst++;
 800bde8:	69bb      	ldr	r3, [r7, #24]
 800bdea:	699b      	ldr	r3, [r3, #24]
 800bdec:	1c5a      	adds	r2, r3, #1
 800bdee:	69bb      	ldr	r3, [r7, #24]
 800bdf0:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800bdf2:	69bb      	ldr	r3, [r7, #24]
 800bdf4:	791b      	ldrb	r3, [r3, #4]
 800bdf6:	f043 0301 	orr.w	r3, r3, #1
 800bdfa:	b2da      	uxtb	r2, r3
 800bdfc:	69bb      	ldr	r3, [r7, #24]
 800bdfe:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800be04:	69bb      	ldr	r3, [r7, #24]
 800be06:	69db      	ldr	r3, [r3, #28]
 800be08:	68ba      	ldr	r2, [r7, #8]
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d3c6      	bcc.n	800bd9c <remove_chain+0x4a>
 800be0e:	e000      	b.n	800be12 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800be10:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800be12:	2300      	movs	r3, #0
}
 800be14:	4618      	mov	r0, r3
 800be16:	3720      	adds	r7, #32
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}

0800be1c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b088      	sub	sp, #32
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d10d      	bne.n	800be4e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	695b      	ldr	r3, [r3, #20]
 800be36:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800be38:	69bb      	ldr	r3, [r7, #24]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d004      	beq.n	800be48 <create_chain+0x2c>
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	69db      	ldr	r3, [r3, #28]
 800be42:	69ba      	ldr	r2, [r7, #24]
 800be44:	429a      	cmp	r2, r3
 800be46:	d31b      	bcc.n	800be80 <create_chain+0x64>
 800be48:	2301      	movs	r3, #1
 800be4a:	61bb      	str	r3, [r7, #24]
 800be4c:	e018      	b.n	800be80 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800be4e:	6839      	ldr	r1, [r7, #0]
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f7ff fd90 	bl	800b976 <get_fat>
 800be56:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	d801      	bhi.n	800be62 <create_chain+0x46>
 800be5e:	2301      	movs	r3, #1
 800be60:	e070      	b.n	800bf44 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be68:	d101      	bne.n	800be6e <create_chain+0x52>
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	e06a      	b.n	800bf44 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	69db      	ldr	r3, [r3, #28]
 800be72:	68fa      	ldr	r2, [r7, #12]
 800be74:	429a      	cmp	r2, r3
 800be76:	d201      	bcs.n	800be7c <create_chain+0x60>
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	e063      	b.n	800bf44 <create_chain+0x128>
		scl = clst;
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800be80:	69bb      	ldr	r3, [r7, #24]
 800be82:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800be84:	69fb      	ldr	r3, [r7, #28]
 800be86:	3301      	adds	r3, #1
 800be88:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	69db      	ldr	r3, [r3, #28]
 800be8e:	69fa      	ldr	r2, [r7, #28]
 800be90:	429a      	cmp	r2, r3
 800be92:	d307      	bcc.n	800bea4 <create_chain+0x88>
				ncl = 2;
 800be94:	2302      	movs	r3, #2
 800be96:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800be98:	69fa      	ldr	r2, [r7, #28]
 800be9a:	69bb      	ldr	r3, [r7, #24]
 800be9c:	429a      	cmp	r2, r3
 800be9e:	d901      	bls.n	800bea4 <create_chain+0x88>
 800bea0:	2300      	movs	r3, #0
 800bea2:	e04f      	b.n	800bf44 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bea4:	69f9      	ldr	r1, [r7, #28]
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f7ff fd65 	bl	800b976 <get_fat>
 800beac:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d00e      	beq.n	800bed2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	2b01      	cmp	r3, #1
 800beb8:	d003      	beq.n	800bec2 <create_chain+0xa6>
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bec0:	d101      	bne.n	800bec6 <create_chain+0xaa>
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	e03e      	b.n	800bf44 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800bec6:	69fa      	ldr	r2, [r7, #28]
 800bec8:	69bb      	ldr	r3, [r7, #24]
 800beca:	429a      	cmp	r2, r3
 800becc:	d1da      	bne.n	800be84 <create_chain+0x68>
 800bece:	2300      	movs	r3, #0
 800bed0:	e038      	b.n	800bf44 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800bed2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800bed4:	f04f 32ff 	mov.w	r2, #4294967295
 800bed8:	69f9      	ldr	r1, [r7, #28]
 800beda:	6938      	ldr	r0, [r7, #16]
 800bedc:	f7ff fe1f 	bl	800bb1e <put_fat>
 800bee0:	4603      	mov	r3, r0
 800bee2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800bee4:	7dfb      	ldrb	r3, [r7, #23]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d109      	bne.n	800befe <create_chain+0xe2>
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d006      	beq.n	800befe <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800bef0:	69fa      	ldr	r2, [r7, #28]
 800bef2:	6839      	ldr	r1, [r7, #0]
 800bef4:	6938      	ldr	r0, [r7, #16]
 800bef6:	f7ff fe12 	bl	800bb1e <put_fat>
 800befa:	4603      	mov	r3, r0
 800befc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800befe:	7dfb      	ldrb	r3, [r7, #23]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d116      	bne.n	800bf32 <create_chain+0x116>
		fs->last_clst = ncl;
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	69fa      	ldr	r2, [r7, #28]
 800bf08:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	699a      	ldr	r2, [r3, #24]
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	69db      	ldr	r3, [r3, #28]
 800bf12:	3b02      	subs	r3, #2
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d804      	bhi.n	800bf22 <create_chain+0x106>
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	699b      	ldr	r3, [r3, #24]
 800bf1c:	1e5a      	subs	r2, r3, #1
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	791b      	ldrb	r3, [r3, #4]
 800bf26:	f043 0301 	orr.w	r3, r3, #1
 800bf2a:	b2da      	uxtb	r2, r3
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	711a      	strb	r2, [r3, #4]
 800bf30:	e007      	b.n	800bf42 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bf32:	7dfb      	ldrb	r3, [r7, #23]
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d102      	bne.n	800bf3e <create_chain+0x122>
 800bf38:	f04f 33ff 	mov.w	r3, #4294967295
 800bf3c:	e000      	b.n	800bf40 <create_chain+0x124>
 800bf3e:	2301      	movs	r3, #1
 800bf40:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bf42:	69fb      	ldr	r3, [r7, #28]
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3720      	adds	r7, #32
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}

0800bf4c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b087      	sub	sp, #28
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
 800bf54:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf60:	3304      	adds	r3, #4
 800bf62:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	899b      	ldrh	r3, [r3, #12]
 800bf68:	461a      	mov	r2, r3
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf70:	68fa      	ldr	r2, [r7, #12]
 800bf72:	8952      	ldrh	r2, [r2, #10]
 800bf74:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf78:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	1d1a      	adds	r2, r3, #4
 800bf7e:	613a      	str	r2, [r7, #16]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d101      	bne.n	800bf8e <clmt_clust+0x42>
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	e010      	b.n	800bfb0 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800bf8e:	697a      	ldr	r2, [r7, #20]
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d307      	bcc.n	800bfa6 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800bf96:	697a      	ldr	r2, [r7, #20]
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	1ad3      	subs	r3, r2, r3
 800bf9c:	617b      	str	r3, [r7, #20]
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	3304      	adds	r3, #4
 800bfa2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bfa4:	e7e9      	b.n	800bf7a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800bfa6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	681a      	ldr	r2, [r3, #0]
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	4413      	add	r3, r2
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	371c      	adds	r7, #28
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfba:	4770      	bx	lr

0800bfbc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b086      	sub	sp, #24
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bfd2:	d204      	bcs.n	800bfde <dir_sdi+0x22>
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	f003 031f 	and.w	r3, r3, #31
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d001      	beq.n	800bfe2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800bfde:	2302      	movs	r3, #2
 800bfe0:	e071      	b.n	800c0c6 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	683a      	ldr	r2, [r7, #0]
 800bfe6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	689b      	ldr	r3, [r3, #8]
 800bfec:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bfee:	697b      	ldr	r3, [r7, #20]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d106      	bne.n	800c002 <dir_sdi+0x46>
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	781b      	ldrb	r3, [r3, #0]
 800bff8:	2b02      	cmp	r3, #2
 800bffa:	d902      	bls.n	800c002 <dir_sdi+0x46>
		clst = fs->dirbase;
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c000:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d10c      	bne.n	800c022 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	095b      	lsrs	r3, r3, #5
 800c00c:	693a      	ldr	r2, [r7, #16]
 800c00e:	8912      	ldrh	r2, [r2, #8]
 800c010:	4293      	cmp	r3, r2
 800c012:	d301      	bcc.n	800c018 <dir_sdi+0x5c>
 800c014:	2302      	movs	r3, #2
 800c016:	e056      	b.n	800c0c6 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	61da      	str	r2, [r3, #28]
 800c020:	e02d      	b.n	800c07e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	895b      	ldrh	r3, [r3, #10]
 800c026:	461a      	mov	r2, r3
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	899b      	ldrh	r3, [r3, #12]
 800c02c:	fb02 f303 	mul.w	r3, r2, r3
 800c030:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c032:	e019      	b.n	800c068 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6979      	ldr	r1, [r7, #20]
 800c038:	4618      	mov	r0, r3
 800c03a:	f7ff fc9c 	bl	800b976 <get_fat>
 800c03e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c046:	d101      	bne.n	800c04c <dir_sdi+0x90>
 800c048:	2301      	movs	r3, #1
 800c04a:	e03c      	b.n	800c0c6 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d904      	bls.n	800c05c <dir_sdi+0xa0>
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	69db      	ldr	r3, [r3, #28]
 800c056:	697a      	ldr	r2, [r7, #20]
 800c058:	429a      	cmp	r2, r3
 800c05a:	d301      	bcc.n	800c060 <dir_sdi+0xa4>
 800c05c:	2302      	movs	r3, #2
 800c05e:	e032      	b.n	800c0c6 <dir_sdi+0x10a>
			ofs -= csz;
 800c060:	683a      	ldr	r2, [r7, #0]
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	1ad3      	subs	r3, r2, r3
 800c066:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c068:	683a      	ldr	r2, [r7, #0]
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d2e1      	bcs.n	800c034 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800c070:	6979      	ldr	r1, [r7, #20]
 800c072:	6938      	ldr	r0, [r7, #16]
 800c074:	f7ff fc60 	bl	800b938 <clust2sect>
 800c078:	4602      	mov	r2, r0
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	697a      	ldr	r2, [r7, #20]
 800c082:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	69db      	ldr	r3, [r3, #28]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d101      	bne.n	800c090 <dir_sdi+0xd4>
 800c08c:	2302      	movs	r3, #2
 800c08e:	e01a      	b.n	800c0c6 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	69da      	ldr	r2, [r3, #28]
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	899b      	ldrh	r3, [r3, #12]
 800c098:	4619      	mov	r1, r3
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	fbb3 f3f1 	udiv	r3, r3, r1
 800c0a0:	441a      	add	r2, r3
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	899b      	ldrh	r3, [r3, #12]
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	fbb3 f0f2 	udiv	r0, r3, r2
 800c0b8:	fb00 f202 	mul.w	r2, r0, r2
 800c0bc:	1a9b      	subs	r3, r3, r2
 800c0be:	18ca      	adds	r2, r1, r3
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c0c4:	2300      	movs	r3, #0
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3718      	adds	r7, #24
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}

0800c0ce <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c0ce:	b580      	push	{r7, lr}
 800c0d0:	b086      	sub	sp, #24
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	6078      	str	r0, [r7, #4]
 800c0d6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	695b      	ldr	r3, [r3, #20]
 800c0e2:	3320      	adds	r3, #32
 800c0e4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	69db      	ldr	r3, [r3, #28]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d003      	beq.n	800c0f6 <dir_next+0x28>
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c0f4:	d301      	bcc.n	800c0fa <dir_next+0x2c>
 800c0f6:	2304      	movs	r3, #4
 800c0f8:	e0bb      	b.n	800c272 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	899b      	ldrh	r3, [r3, #12]
 800c0fe:	461a      	mov	r2, r3
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	fbb3 f1f2 	udiv	r1, r3, r2
 800c106:	fb01 f202 	mul.w	r2, r1, r2
 800c10a:	1a9b      	subs	r3, r3, r2
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	f040 809d 	bne.w	800c24c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	69db      	ldr	r3, [r3, #28]
 800c116:	1c5a      	adds	r2, r3, #1
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	699b      	ldr	r3, [r3, #24]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d10b      	bne.n	800c13c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	095b      	lsrs	r3, r3, #5
 800c128:	68fa      	ldr	r2, [r7, #12]
 800c12a:	8912      	ldrh	r2, [r2, #8]
 800c12c:	4293      	cmp	r3, r2
 800c12e:	f0c0 808d 	bcc.w	800c24c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2200      	movs	r2, #0
 800c136:	61da      	str	r2, [r3, #28]
 800c138:	2304      	movs	r3, #4
 800c13a:	e09a      	b.n	800c272 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	899b      	ldrh	r3, [r3, #12]
 800c140:	461a      	mov	r2, r3
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	fbb3 f3f2 	udiv	r3, r3, r2
 800c148:	68fa      	ldr	r2, [r7, #12]
 800c14a:	8952      	ldrh	r2, [r2, #10]
 800c14c:	3a01      	subs	r2, #1
 800c14e:	4013      	ands	r3, r2
 800c150:	2b00      	cmp	r3, #0
 800c152:	d17b      	bne.n	800c24c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c154:	687a      	ldr	r2, [r7, #4]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	699b      	ldr	r3, [r3, #24]
 800c15a:	4619      	mov	r1, r3
 800c15c:	4610      	mov	r0, r2
 800c15e:	f7ff fc0a 	bl	800b976 <get_fat>
 800c162:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	2b01      	cmp	r3, #1
 800c168:	d801      	bhi.n	800c16e <dir_next+0xa0>
 800c16a:	2302      	movs	r3, #2
 800c16c:	e081      	b.n	800c272 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c174:	d101      	bne.n	800c17a <dir_next+0xac>
 800c176:	2301      	movs	r3, #1
 800c178:	e07b      	b.n	800c272 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	69db      	ldr	r3, [r3, #28]
 800c17e:	697a      	ldr	r2, [r7, #20]
 800c180:	429a      	cmp	r2, r3
 800c182:	d359      	bcc.n	800c238 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d104      	bne.n	800c194 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2200      	movs	r2, #0
 800c18e:	61da      	str	r2, [r3, #28]
 800c190:	2304      	movs	r3, #4
 800c192:	e06e      	b.n	800c272 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c194:	687a      	ldr	r2, [r7, #4]
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	699b      	ldr	r3, [r3, #24]
 800c19a:	4619      	mov	r1, r3
 800c19c:	4610      	mov	r0, r2
 800c19e:	f7ff fe3d 	bl	800be1c <create_chain>
 800c1a2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d101      	bne.n	800c1ae <dir_next+0xe0>
 800c1aa:	2307      	movs	r3, #7
 800c1ac:	e061      	b.n	800c272 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	2b01      	cmp	r3, #1
 800c1b2:	d101      	bne.n	800c1b8 <dir_next+0xea>
 800c1b4:	2302      	movs	r3, #2
 800c1b6:	e05c      	b.n	800c272 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1be:	d101      	bne.n	800c1c4 <dir_next+0xf6>
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	e056      	b.n	800c272 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c1c4:	68f8      	ldr	r0, [r7, #12]
 800c1c6:	f7ff fad5 	bl	800b774 <sync_window>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d001      	beq.n	800c1d4 <dir_next+0x106>
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	e04e      	b.n	800c272 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	899b      	ldrh	r3, [r3, #12]
 800c1de:	461a      	mov	r2, r3
 800c1e0:	2100      	movs	r1, #0
 800c1e2:	f7ff f8fe 	bl	800b3e2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	613b      	str	r3, [r7, #16]
 800c1ea:	6979      	ldr	r1, [r7, #20]
 800c1ec:	68f8      	ldr	r0, [r7, #12]
 800c1ee:	f7ff fba3 	bl	800b938 <clust2sect>
 800c1f2:	4602      	mov	r2, r0
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	635a      	str	r2, [r3, #52]	; 0x34
 800c1f8:	e012      	b.n	800c220 <dir_next+0x152>
						fs->wflag = 1;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	2201      	movs	r2, #1
 800c1fe:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c200:	68f8      	ldr	r0, [r7, #12]
 800c202:	f7ff fab7 	bl	800b774 <sync_window>
 800c206:	4603      	mov	r3, r0
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d001      	beq.n	800c210 <dir_next+0x142>
 800c20c:	2301      	movs	r3, #1
 800c20e:	e030      	b.n	800c272 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	3301      	adds	r3, #1
 800c214:	613b      	str	r3, [r7, #16]
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c21a:	1c5a      	adds	r2, r3, #1
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	635a      	str	r2, [r3, #52]	; 0x34
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	895b      	ldrh	r3, [r3, #10]
 800c224:	461a      	mov	r2, r3
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	4293      	cmp	r3, r2
 800c22a:	d3e6      	bcc.n	800c1fa <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	1ad2      	subs	r2, r2, r3
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	697a      	ldr	r2, [r7, #20]
 800c23c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c23e:	6979      	ldr	r1, [r7, #20]
 800c240:	68f8      	ldr	r0, [r7, #12]
 800c242:	f7ff fb79 	bl	800b938 <clust2sect>
 800c246:	4602      	mov	r2, r0
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	68ba      	ldr	r2, [r7, #8]
 800c250:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	899b      	ldrh	r3, [r3, #12]
 800c25c:	461a      	mov	r2, r3
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	fbb3 f0f2 	udiv	r0, r3, r2
 800c264:	fb00 f202 	mul.w	r2, r0, r2
 800c268:	1a9b      	subs	r3, r3, r2
 800c26a:	18ca      	adds	r2, r1, r3
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c270:	2300      	movs	r3, #0
}
 800c272:	4618      	mov	r0, r3
 800c274:	3718      	adds	r7, #24
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}

0800c27a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c27a:	b580      	push	{r7, lr}
 800c27c:	b086      	sub	sp, #24
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
 800c282:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c28a:	2100      	movs	r1, #0
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f7ff fe95 	bl	800bfbc <dir_sdi>
 800c292:	4603      	mov	r3, r0
 800c294:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c296:	7dfb      	ldrb	r3, [r7, #23]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d12b      	bne.n	800c2f4 <dir_alloc+0x7a>
		n = 0;
 800c29c:	2300      	movs	r3, #0
 800c29e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	69db      	ldr	r3, [r3, #28]
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	68f8      	ldr	r0, [r7, #12]
 800c2a8:	f7ff faa8 	bl	800b7fc <move_window>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c2b0:	7dfb      	ldrb	r3, [r7, #23]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d11d      	bne.n	800c2f2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6a1b      	ldr	r3, [r3, #32]
 800c2ba:	781b      	ldrb	r3, [r3, #0]
 800c2bc:	2be5      	cmp	r3, #229	; 0xe5
 800c2be:	d004      	beq.n	800c2ca <dir_alloc+0x50>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6a1b      	ldr	r3, [r3, #32]
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d107      	bne.n	800c2da <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	3301      	adds	r3, #1
 800c2ce:	613b      	str	r3, [r7, #16]
 800c2d0:	693a      	ldr	r2, [r7, #16]
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d102      	bne.n	800c2de <dir_alloc+0x64>
 800c2d8:	e00c      	b.n	800c2f4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c2da:	2300      	movs	r3, #0
 800c2dc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c2de:	2101      	movs	r1, #1
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f7ff fef4 	bl	800c0ce <dir_next>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c2ea:	7dfb      	ldrb	r3, [r7, #23]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d0d7      	beq.n	800c2a0 <dir_alloc+0x26>
 800c2f0:	e000      	b.n	800c2f4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c2f2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c2f4:	7dfb      	ldrb	r3, [r7, #23]
 800c2f6:	2b04      	cmp	r3, #4
 800c2f8:	d101      	bne.n	800c2fe <dir_alloc+0x84>
 800c2fa:	2307      	movs	r3, #7
 800c2fc:	75fb      	strb	r3, [r7, #23]
	return res;
 800c2fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800c300:	4618      	mov	r0, r3
 800c302:	3718      	adds	r7, #24
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}

0800c308 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b084      	sub	sp, #16
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	331a      	adds	r3, #26
 800c316:	4618      	mov	r0, r3
 800c318:	f7fe ffc0 	bl	800b29c <ld_word>
 800c31c:	4603      	mov	r3, r0
 800c31e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	2b03      	cmp	r3, #3
 800c326:	d109      	bne.n	800c33c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	3314      	adds	r3, #20
 800c32c:	4618      	mov	r0, r3
 800c32e:	f7fe ffb5 	bl	800b29c <ld_word>
 800c332:	4603      	mov	r3, r0
 800c334:	041b      	lsls	r3, r3, #16
 800c336:	68fa      	ldr	r2, [r7, #12]
 800c338:	4313      	orrs	r3, r2
 800c33a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c33c:	68fb      	ldr	r3, [r7, #12]
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3710      	adds	r7, #16
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}

0800c346 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c346:	b580      	push	{r7, lr}
 800c348:	b084      	sub	sp, #16
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	60f8      	str	r0, [r7, #12]
 800c34e:	60b9      	str	r1, [r7, #8]
 800c350:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	331a      	adds	r3, #26
 800c356:	687a      	ldr	r2, [r7, #4]
 800c358:	b292      	uxth	r2, r2
 800c35a:	4611      	mov	r1, r2
 800c35c:	4618      	mov	r0, r3
 800c35e:	f7fe ffd8 	bl	800b312 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	2b03      	cmp	r3, #3
 800c368:	d109      	bne.n	800c37e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	f103 0214 	add.w	r2, r3, #20
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	0c1b      	lsrs	r3, r3, #16
 800c374:	b29b      	uxth	r3, r3
 800c376:	4619      	mov	r1, r3
 800c378:	4610      	mov	r0, r2
 800c37a:	f7fe ffca 	bl	800b312 <st_word>
	}
}
 800c37e:	bf00      	nop
 800c380:	3710      	adds	r7, #16
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
	...

0800c388 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c388:	b590      	push	{r4, r7, lr}
 800c38a:	b087      	sub	sp, #28
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	331a      	adds	r3, #26
 800c396:	4618      	mov	r0, r3
 800c398:	f7fe ff80 	bl	800b29c <ld_word>
 800c39c:	4603      	mov	r3, r0
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d001      	beq.n	800c3a6 <cmp_lfn+0x1e>
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	e059      	b.n	800c45a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	781b      	ldrb	r3, [r3, #0]
 800c3aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c3ae:	1e5a      	subs	r2, r3, #1
 800c3b0:	4613      	mov	r3, r2
 800c3b2:	005b      	lsls	r3, r3, #1
 800c3b4:	4413      	add	r3, r2
 800c3b6:	009b      	lsls	r3, r3, #2
 800c3b8:	4413      	add	r3, r2
 800c3ba:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c3bc:	2301      	movs	r3, #1
 800c3be:	81fb      	strh	r3, [r7, #14]
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	613b      	str	r3, [r7, #16]
 800c3c4:	e033      	b.n	800c42e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c3c6:	4a27      	ldr	r2, [pc, #156]	; (800c464 <cmp_lfn+0xdc>)
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	4413      	add	r3, r2
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	4413      	add	r3, r2
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f7fe ff61 	bl	800b29c <ld_word>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c3de:	89fb      	ldrh	r3, [r7, #14]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d01a      	beq.n	800c41a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	2bfe      	cmp	r3, #254	; 0xfe
 800c3e8:	d812      	bhi.n	800c410 <cmp_lfn+0x88>
 800c3ea:	89bb      	ldrh	r3, [r7, #12]
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f001 fd75 	bl	800dedc <ff_wtoupper>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	461c      	mov	r4, r3
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	1c5a      	adds	r2, r3, #1
 800c3fa:	617a      	str	r2, [r7, #20]
 800c3fc:	005b      	lsls	r3, r3, #1
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	4413      	add	r3, r2
 800c402:	881b      	ldrh	r3, [r3, #0]
 800c404:	4618      	mov	r0, r3
 800c406:	f001 fd69 	bl	800dedc <ff_wtoupper>
 800c40a:	4603      	mov	r3, r0
 800c40c:	429c      	cmp	r4, r3
 800c40e:	d001      	beq.n	800c414 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c410:	2300      	movs	r3, #0
 800c412:	e022      	b.n	800c45a <cmp_lfn+0xd2>
			}
			wc = uc;
 800c414:	89bb      	ldrh	r3, [r7, #12]
 800c416:	81fb      	strh	r3, [r7, #14]
 800c418:	e006      	b.n	800c428 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c41a:	89bb      	ldrh	r3, [r7, #12]
 800c41c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c420:	4293      	cmp	r3, r2
 800c422:	d001      	beq.n	800c428 <cmp_lfn+0xa0>
 800c424:	2300      	movs	r3, #0
 800c426:	e018      	b.n	800c45a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	3301      	adds	r3, #1
 800c42c:	613b      	str	r3, [r7, #16]
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	2b0c      	cmp	r3, #12
 800c432:	d9c8      	bls.n	800c3c6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d00b      	beq.n	800c458 <cmp_lfn+0xd0>
 800c440:	89fb      	ldrh	r3, [r7, #14]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d008      	beq.n	800c458 <cmp_lfn+0xd0>
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	005b      	lsls	r3, r3, #1
 800c44a:	687a      	ldr	r2, [r7, #4]
 800c44c:	4413      	add	r3, r2
 800c44e:	881b      	ldrh	r3, [r3, #0]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d001      	beq.n	800c458 <cmp_lfn+0xd0>
 800c454:	2300      	movs	r3, #0
 800c456:	e000      	b.n	800c45a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c458:	2301      	movs	r3, #1
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	371c      	adds	r7, #28
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd90      	pop	{r4, r7, pc}
 800c462:	bf00      	nop
 800c464:	0800eb30 	.word	0x0800eb30

0800c468 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b088      	sub	sp, #32
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	60f8      	str	r0, [r7, #12]
 800c470:	60b9      	str	r1, [r7, #8]
 800c472:	4611      	mov	r1, r2
 800c474:	461a      	mov	r2, r3
 800c476:	460b      	mov	r3, r1
 800c478:	71fb      	strb	r3, [r7, #7]
 800c47a:	4613      	mov	r3, r2
 800c47c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	330d      	adds	r3, #13
 800c482:	79ba      	ldrb	r2, [r7, #6]
 800c484:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	330b      	adds	r3, #11
 800c48a:	220f      	movs	r2, #15
 800c48c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	330c      	adds	r3, #12
 800c492:	2200      	movs	r2, #0
 800c494:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	331a      	adds	r3, #26
 800c49a:	2100      	movs	r1, #0
 800c49c:	4618      	mov	r0, r3
 800c49e:	f7fe ff38 	bl	800b312 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c4a2:	79fb      	ldrb	r3, [r7, #7]
 800c4a4:	1e5a      	subs	r2, r3, #1
 800c4a6:	4613      	mov	r3, r2
 800c4a8:	005b      	lsls	r3, r3, #1
 800c4aa:	4413      	add	r3, r2
 800c4ac:	009b      	lsls	r3, r3, #2
 800c4ae:	4413      	add	r3, r2
 800c4b0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	82fb      	strh	r3, [r7, #22]
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c4ba:	8afb      	ldrh	r3, [r7, #22]
 800c4bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d007      	beq.n	800c4d4 <put_lfn+0x6c>
 800c4c4:	69fb      	ldr	r3, [r7, #28]
 800c4c6:	1c5a      	adds	r2, r3, #1
 800c4c8:	61fa      	str	r2, [r7, #28]
 800c4ca:	005b      	lsls	r3, r3, #1
 800c4cc:	68fa      	ldr	r2, [r7, #12]
 800c4ce:	4413      	add	r3, r2
 800c4d0:	881b      	ldrh	r3, [r3, #0]
 800c4d2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c4d4:	4a17      	ldr	r2, [pc, #92]	; (800c534 <put_lfn+0xcc>)
 800c4d6:	69bb      	ldr	r3, [r7, #24]
 800c4d8:	4413      	add	r3, r2
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	461a      	mov	r2, r3
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	4413      	add	r3, r2
 800c4e2:	8afa      	ldrh	r2, [r7, #22]
 800c4e4:	4611      	mov	r1, r2
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f7fe ff13 	bl	800b312 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c4ec:	8afb      	ldrh	r3, [r7, #22]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d102      	bne.n	800c4f8 <put_lfn+0x90>
 800c4f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c4f6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c4f8:	69bb      	ldr	r3, [r7, #24]
 800c4fa:	3301      	adds	r3, #1
 800c4fc:	61bb      	str	r3, [r7, #24]
 800c4fe:	69bb      	ldr	r3, [r7, #24]
 800c500:	2b0c      	cmp	r3, #12
 800c502:	d9da      	bls.n	800c4ba <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c504:	8afb      	ldrh	r3, [r7, #22]
 800c506:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c50a:	4293      	cmp	r3, r2
 800c50c:	d006      	beq.n	800c51c <put_lfn+0xb4>
 800c50e:	69fb      	ldr	r3, [r7, #28]
 800c510:	005b      	lsls	r3, r3, #1
 800c512:	68fa      	ldr	r2, [r7, #12]
 800c514:	4413      	add	r3, r2
 800c516:	881b      	ldrh	r3, [r3, #0]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d103      	bne.n	800c524 <put_lfn+0xbc>
 800c51c:	79fb      	ldrb	r3, [r7, #7]
 800c51e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c522:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	79fa      	ldrb	r2, [r7, #7]
 800c528:	701a      	strb	r2, [r3, #0]
}
 800c52a:	bf00      	nop
 800c52c:	3720      	adds	r7, #32
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}
 800c532:	bf00      	nop
 800c534:	0800eb30 	.word	0x0800eb30

0800c538 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b08c      	sub	sp, #48	; 0x30
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	60f8      	str	r0, [r7, #12]
 800c540:	60b9      	str	r1, [r7, #8]
 800c542:	607a      	str	r2, [r7, #4]
 800c544:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c546:	220b      	movs	r2, #11
 800c548:	68b9      	ldr	r1, [r7, #8]
 800c54a:	68f8      	ldr	r0, [r7, #12]
 800c54c:	f7fe ff28 	bl	800b3a0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	2b05      	cmp	r3, #5
 800c554:	d929      	bls.n	800c5aa <gen_numname+0x72>
		sr = seq;
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c55a:	e020      	b.n	800c59e <gen_numname+0x66>
			wc = *lfn++;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	1c9a      	adds	r2, r3, #2
 800c560:	607a      	str	r2, [r7, #4]
 800c562:	881b      	ldrh	r3, [r3, #0]
 800c564:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800c566:	2300      	movs	r3, #0
 800c568:	62bb      	str	r3, [r7, #40]	; 0x28
 800c56a:	e015      	b.n	800c598 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800c56c:	69fb      	ldr	r3, [r7, #28]
 800c56e:	005a      	lsls	r2, r3, #1
 800c570:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c572:	f003 0301 	and.w	r3, r3, #1
 800c576:	4413      	add	r3, r2
 800c578:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c57a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c57c:	085b      	lsrs	r3, r3, #1
 800c57e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c580:	69fb      	ldr	r3, [r7, #28]
 800c582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c586:	2b00      	cmp	r3, #0
 800c588:	d003      	beq.n	800c592 <gen_numname+0x5a>
 800c58a:	69fa      	ldr	r2, [r7, #28]
 800c58c:	4b30      	ldr	r3, [pc, #192]	; (800c650 <gen_numname+0x118>)
 800c58e:	4053      	eors	r3, r2
 800c590:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c594:	3301      	adds	r3, #1
 800c596:	62bb      	str	r3, [r7, #40]	; 0x28
 800c598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c59a:	2b0f      	cmp	r3, #15
 800c59c:	d9e6      	bls.n	800c56c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	881b      	ldrh	r3, [r3, #0]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d1da      	bne.n	800c55c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c5a6:	69fb      	ldr	r3, [r7, #28]
 800c5a8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c5aa:	2307      	movs	r3, #7
 800c5ac:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	b2db      	uxtb	r3, r3
 800c5b2:	f003 030f 	and.w	r3, r3, #15
 800c5b6:	b2db      	uxtb	r3, r3
 800c5b8:	3330      	adds	r3, #48	; 0x30
 800c5ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800c5be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c5c2:	2b39      	cmp	r3, #57	; 0x39
 800c5c4:	d904      	bls.n	800c5d0 <gen_numname+0x98>
 800c5c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c5ca:	3307      	adds	r3, #7
 800c5cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800c5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5d2:	1e5a      	subs	r2, r3, #1
 800c5d4:	62ba      	str	r2, [r7, #40]	; 0x28
 800c5d6:	3330      	adds	r3, #48	; 0x30
 800c5d8:	443b      	add	r3, r7
 800c5da:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c5de:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	091b      	lsrs	r3, r3, #4
 800c5e6:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d1df      	bne.n	800c5ae <gen_numname+0x76>
	ns[i] = '~';
 800c5ee:	f107 0214 	add.w	r2, r7, #20
 800c5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5f4:	4413      	add	r3, r2
 800c5f6:	227e      	movs	r2, #126	; 0x7e
 800c5f8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	627b      	str	r3, [r7, #36]	; 0x24
 800c5fe:	e002      	b.n	800c606 <gen_numname+0xce>
 800c600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c602:	3301      	adds	r3, #1
 800c604:	627b      	str	r3, [r7, #36]	; 0x24
 800c606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c60a:	429a      	cmp	r2, r3
 800c60c:	d205      	bcs.n	800c61a <gen_numname+0xe2>
 800c60e:	68fa      	ldr	r2, [r7, #12]
 800c610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c612:	4413      	add	r3, r2
 800c614:	781b      	ldrb	r3, [r3, #0]
 800c616:	2b20      	cmp	r3, #32
 800c618:	d1f2      	bne.n	800c600 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c61c:	2b07      	cmp	r3, #7
 800c61e:	d807      	bhi.n	800c630 <gen_numname+0xf8>
 800c620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c622:	1c5a      	adds	r2, r3, #1
 800c624:	62ba      	str	r2, [r7, #40]	; 0x28
 800c626:	3330      	adds	r3, #48	; 0x30
 800c628:	443b      	add	r3, r7
 800c62a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c62e:	e000      	b.n	800c632 <gen_numname+0xfa>
 800c630:	2120      	movs	r1, #32
 800c632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c634:	1c5a      	adds	r2, r3, #1
 800c636:	627a      	str	r2, [r7, #36]	; 0x24
 800c638:	68fa      	ldr	r2, [r7, #12]
 800c63a:	4413      	add	r3, r2
 800c63c:	460a      	mov	r2, r1
 800c63e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c642:	2b07      	cmp	r3, #7
 800c644:	d9e9      	bls.n	800c61a <gen_numname+0xe2>
}
 800c646:	bf00      	nop
 800c648:	bf00      	nop
 800c64a:	3730      	adds	r7, #48	; 0x30
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}
 800c650:	00011021 	.word	0x00011021

0800c654 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c654:	b480      	push	{r7}
 800c656:	b085      	sub	sp, #20
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c65c:	2300      	movs	r3, #0
 800c65e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c660:	230b      	movs	r3, #11
 800c662:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c664:	7bfb      	ldrb	r3, [r7, #15]
 800c666:	b2da      	uxtb	r2, r3
 800c668:	0852      	lsrs	r2, r2, #1
 800c66a:	01db      	lsls	r3, r3, #7
 800c66c:	4313      	orrs	r3, r2
 800c66e:	b2da      	uxtb	r2, r3
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	1c59      	adds	r1, r3, #1
 800c674:	6079      	str	r1, [r7, #4]
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	4413      	add	r3, r2
 800c67a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	3b01      	subs	r3, #1
 800c680:	60bb      	str	r3, [r7, #8]
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d1ed      	bne.n	800c664 <sum_sfn+0x10>
	return sum;
 800c688:	7bfb      	ldrb	r3, [r7, #15]
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	3714      	adds	r7, #20
 800c68e:	46bd      	mov	sp, r7
 800c690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c694:	4770      	bx	lr

0800c696 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c696:	b580      	push	{r7, lr}
 800c698:	b086      	sub	sp, #24
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c6a4:	2100      	movs	r1, #0
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f7ff fc88 	bl	800bfbc <dir_sdi>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c6b0:	7dfb      	ldrb	r3, [r7, #23]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d001      	beq.n	800c6ba <dir_find+0x24>
 800c6b6:	7dfb      	ldrb	r3, [r7, #23]
 800c6b8:	e0a9      	b.n	800c80e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c6ba:	23ff      	movs	r3, #255	; 0xff
 800c6bc:	753b      	strb	r3, [r7, #20]
 800c6be:	7d3b      	ldrb	r3, [r7, #20]
 800c6c0:	757b      	strb	r3, [r7, #21]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f04f 32ff 	mov.w	r2, #4294967295
 800c6c8:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	69db      	ldr	r3, [r3, #28]
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	6938      	ldr	r0, [r7, #16]
 800c6d2:	f7ff f893 	bl	800b7fc <move_window>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c6da:	7dfb      	ldrb	r3, [r7, #23]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	f040 8090 	bne.w	800c802 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6a1b      	ldr	r3, [r3, #32]
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c6ea:	7dbb      	ldrb	r3, [r7, #22]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d102      	bne.n	800c6f6 <dir_find+0x60>
 800c6f0:	2304      	movs	r3, #4
 800c6f2:	75fb      	strb	r3, [r7, #23]
 800c6f4:	e08a      	b.n	800c80c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6a1b      	ldr	r3, [r3, #32]
 800c6fa:	330b      	adds	r3, #11
 800c6fc:	781b      	ldrb	r3, [r3, #0]
 800c6fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c702:	73fb      	strb	r3, [r7, #15]
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	7bfa      	ldrb	r2, [r7, #15]
 800c708:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c70a:	7dbb      	ldrb	r3, [r7, #22]
 800c70c:	2be5      	cmp	r3, #229	; 0xe5
 800c70e:	d007      	beq.n	800c720 <dir_find+0x8a>
 800c710:	7bfb      	ldrb	r3, [r7, #15]
 800c712:	f003 0308 	and.w	r3, r3, #8
 800c716:	2b00      	cmp	r3, #0
 800c718:	d009      	beq.n	800c72e <dir_find+0x98>
 800c71a:	7bfb      	ldrb	r3, [r7, #15]
 800c71c:	2b0f      	cmp	r3, #15
 800c71e:	d006      	beq.n	800c72e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c720:	23ff      	movs	r3, #255	; 0xff
 800c722:	757b      	strb	r3, [r7, #21]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f04f 32ff 	mov.w	r2, #4294967295
 800c72a:	631a      	str	r2, [r3, #48]	; 0x30
 800c72c:	e05e      	b.n	800c7ec <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c72e:	7bfb      	ldrb	r3, [r7, #15]
 800c730:	2b0f      	cmp	r3, #15
 800c732:	d136      	bne.n	800c7a2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c73a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d154      	bne.n	800c7ec <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c742:	7dbb      	ldrb	r3, [r7, #22]
 800c744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d00d      	beq.n	800c768 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6a1b      	ldr	r3, [r3, #32]
 800c750:	7b5b      	ldrb	r3, [r3, #13]
 800c752:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c754:	7dbb      	ldrb	r3, [r7, #22]
 800c756:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c75a:	75bb      	strb	r3, [r7, #22]
 800c75c:	7dbb      	ldrb	r3, [r7, #22]
 800c75e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	695a      	ldr	r2, [r3, #20]
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c768:	7dba      	ldrb	r2, [r7, #22]
 800c76a:	7d7b      	ldrb	r3, [r7, #21]
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d115      	bne.n	800c79c <dir_find+0x106>
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6a1b      	ldr	r3, [r3, #32]
 800c774:	330d      	adds	r3, #13
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	7d3a      	ldrb	r2, [r7, #20]
 800c77a:	429a      	cmp	r2, r3
 800c77c:	d10e      	bne.n	800c79c <dir_find+0x106>
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	691a      	ldr	r2, [r3, #16]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6a1b      	ldr	r3, [r3, #32]
 800c786:	4619      	mov	r1, r3
 800c788:	4610      	mov	r0, r2
 800c78a:	f7ff fdfd 	bl	800c388 <cmp_lfn>
 800c78e:	4603      	mov	r3, r0
 800c790:	2b00      	cmp	r3, #0
 800c792:	d003      	beq.n	800c79c <dir_find+0x106>
 800c794:	7d7b      	ldrb	r3, [r7, #21]
 800c796:	3b01      	subs	r3, #1
 800c798:	b2db      	uxtb	r3, r3
 800c79a:	e000      	b.n	800c79e <dir_find+0x108>
 800c79c:	23ff      	movs	r3, #255	; 0xff
 800c79e:	757b      	strb	r3, [r7, #21]
 800c7a0:	e024      	b.n	800c7ec <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c7a2:	7d7b      	ldrb	r3, [r7, #21]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d109      	bne.n	800c7bc <dir_find+0x126>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6a1b      	ldr	r3, [r3, #32]
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f7ff ff51 	bl	800c654 <sum_sfn>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	461a      	mov	r2, r3
 800c7b6:	7d3b      	ldrb	r3, [r7, #20]
 800c7b8:	4293      	cmp	r3, r2
 800c7ba:	d024      	beq.n	800c806 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c7c2:	f003 0301 	and.w	r3, r3, #1
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d10a      	bne.n	800c7e0 <dir_find+0x14a>
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6a18      	ldr	r0, [r3, #32]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	3324      	adds	r3, #36	; 0x24
 800c7d2:	220b      	movs	r2, #11
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	f7fe fe1f 	bl	800b418 <mem_cmp>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d014      	beq.n	800c80a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c7e0:	23ff      	movs	r3, #255	; 0xff
 800c7e2:	757b      	strb	r3, [r7, #21]
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f04f 32ff 	mov.w	r2, #4294967295
 800c7ea:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c7ec:	2100      	movs	r1, #0
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f7ff fc6d 	bl	800c0ce <dir_next>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c7f8:	7dfb      	ldrb	r3, [r7, #23]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	f43f af65 	beq.w	800c6ca <dir_find+0x34>
 800c800:	e004      	b.n	800c80c <dir_find+0x176>
		if (res != FR_OK) break;
 800c802:	bf00      	nop
 800c804:	e002      	b.n	800c80c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c806:	bf00      	nop
 800c808:	e000      	b.n	800c80c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c80a:	bf00      	nop

	return res;
 800c80c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3718      	adds	r7, #24
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
	...

0800c818 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b08c      	sub	sp, #48	; 0x30
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c82c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c830:	2b00      	cmp	r3, #0
 800c832:	d001      	beq.n	800c838 <dir_register+0x20>
 800c834:	2306      	movs	r3, #6
 800c836:	e0e0      	b.n	800c9fa <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c838:	2300      	movs	r3, #0
 800c83a:	627b      	str	r3, [r7, #36]	; 0x24
 800c83c:	e002      	b.n	800c844 <dir_register+0x2c>
 800c83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c840:	3301      	adds	r3, #1
 800c842:	627b      	str	r3, [r7, #36]	; 0x24
 800c844:	69fb      	ldr	r3, [r7, #28]
 800c846:	691a      	ldr	r2, [r3, #16]
 800c848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c84a:	005b      	lsls	r3, r3, #1
 800c84c:	4413      	add	r3, r2
 800c84e:	881b      	ldrh	r3, [r3, #0]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d1f4      	bne.n	800c83e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800c85a:	f107 030c 	add.w	r3, r7, #12
 800c85e:	220c      	movs	r2, #12
 800c860:	4618      	mov	r0, r3
 800c862:	f7fe fd9d 	bl	800b3a0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c866:	7dfb      	ldrb	r3, [r7, #23]
 800c868:	f003 0301 	and.w	r3, r3, #1
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d032      	beq.n	800c8d6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2240      	movs	r2, #64	; 0x40
 800c874:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800c878:	2301      	movs	r3, #1
 800c87a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c87c:	e016      	b.n	800c8ac <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800c884:	69fb      	ldr	r3, [r7, #28]
 800c886:	691a      	ldr	r2, [r3, #16]
 800c888:	f107 010c 	add.w	r1, r7, #12
 800c88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c88e:	f7ff fe53 	bl	800c538 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f7ff feff 	bl	800c696 <dir_find>
 800c898:	4603      	mov	r3, r0
 800c89a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800c89e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d106      	bne.n	800c8b4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800c8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a8:	3301      	adds	r3, #1
 800c8aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ae:	2b63      	cmp	r3, #99	; 0x63
 800c8b0:	d9e5      	bls.n	800c87e <dir_register+0x66>
 800c8b2:	e000      	b.n	800c8b6 <dir_register+0x9e>
			if (res != FR_OK) break;
 800c8b4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b8:	2b64      	cmp	r3, #100	; 0x64
 800c8ba:	d101      	bne.n	800c8c0 <dir_register+0xa8>
 800c8bc:	2307      	movs	r3, #7
 800c8be:	e09c      	b.n	800c9fa <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c8c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8c4:	2b04      	cmp	r3, #4
 800c8c6:	d002      	beq.n	800c8ce <dir_register+0xb6>
 800c8c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8cc:	e095      	b.n	800c9fa <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c8ce:	7dfa      	ldrb	r2, [r7, #23]
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c8d6:	7dfb      	ldrb	r3, [r7, #23]
 800c8d8:	f003 0302 	and.w	r3, r3, #2
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d007      	beq.n	800c8f0 <dir_register+0xd8>
 800c8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e2:	330c      	adds	r3, #12
 800c8e4:	4a47      	ldr	r2, [pc, #284]	; (800ca04 <dir_register+0x1ec>)
 800c8e6:	fba2 2303 	umull	r2, r3, r2, r3
 800c8ea:	089b      	lsrs	r3, r3, #2
 800c8ec:	3301      	adds	r3, #1
 800c8ee:	e000      	b.n	800c8f2 <dir_register+0xda>
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c8f4:	6a39      	ldr	r1, [r7, #32]
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f7ff fcbf 	bl	800c27a <dir_alloc>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c902:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c906:	2b00      	cmp	r3, #0
 800c908:	d148      	bne.n	800c99c <dir_register+0x184>
 800c90a:	6a3b      	ldr	r3, [r7, #32]
 800c90c:	3b01      	subs	r3, #1
 800c90e:	623b      	str	r3, [r7, #32]
 800c910:	6a3b      	ldr	r3, [r7, #32]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d042      	beq.n	800c99c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	695a      	ldr	r2, [r3, #20]
 800c91a:	6a3b      	ldr	r3, [r7, #32]
 800c91c:	015b      	lsls	r3, r3, #5
 800c91e:	1ad3      	subs	r3, r2, r3
 800c920:	4619      	mov	r1, r3
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f7ff fb4a 	bl	800bfbc <dir_sdi>
 800c928:	4603      	mov	r3, r0
 800c92a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c92e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c932:	2b00      	cmp	r3, #0
 800c934:	d132      	bne.n	800c99c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	3324      	adds	r3, #36	; 0x24
 800c93a:	4618      	mov	r0, r3
 800c93c:	f7ff fe8a 	bl	800c654 <sum_sfn>
 800c940:	4603      	mov	r3, r0
 800c942:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	69db      	ldr	r3, [r3, #28]
 800c948:	4619      	mov	r1, r3
 800c94a:	69f8      	ldr	r0, [r7, #28]
 800c94c:	f7fe ff56 	bl	800b7fc <move_window>
 800c950:	4603      	mov	r3, r0
 800c952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800c956:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d11d      	bne.n	800c99a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c95e:	69fb      	ldr	r3, [r7, #28]
 800c960:	6918      	ldr	r0, [r3, #16]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6a19      	ldr	r1, [r3, #32]
 800c966:	6a3b      	ldr	r3, [r7, #32]
 800c968:	b2da      	uxtb	r2, r3
 800c96a:	7efb      	ldrb	r3, [r7, #27]
 800c96c:	f7ff fd7c 	bl	800c468 <put_lfn>
				fs->wflag = 1;
 800c970:	69fb      	ldr	r3, [r7, #28]
 800c972:	2201      	movs	r2, #1
 800c974:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c976:	2100      	movs	r1, #0
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f7ff fba8 	bl	800c0ce <dir_next>
 800c97e:	4603      	mov	r3, r0
 800c980:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800c984:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d107      	bne.n	800c99c <dir_register+0x184>
 800c98c:	6a3b      	ldr	r3, [r7, #32]
 800c98e:	3b01      	subs	r3, #1
 800c990:	623b      	str	r3, [r7, #32]
 800c992:	6a3b      	ldr	r3, [r7, #32]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d1d5      	bne.n	800c944 <dir_register+0x12c>
 800c998:	e000      	b.n	800c99c <dir_register+0x184>
				if (res != FR_OK) break;
 800c99a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c99c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d128      	bne.n	800c9f6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	69db      	ldr	r3, [r3, #28]
 800c9a8:	4619      	mov	r1, r3
 800c9aa:	69f8      	ldr	r0, [r7, #28]
 800c9ac:	f7fe ff26 	bl	800b7fc <move_window>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c9b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d11b      	bne.n	800c9f6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6a1b      	ldr	r3, [r3, #32]
 800c9c2:	2220      	movs	r2, #32
 800c9c4:	2100      	movs	r1, #0
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f7fe fd0b 	bl	800b3e2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	6a18      	ldr	r0, [r3, #32]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	3324      	adds	r3, #36	; 0x24
 800c9d4:	220b      	movs	r2, #11
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	f7fe fce2 	bl	800b3a0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6a1b      	ldr	r3, [r3, #32]
 800c9e6:	330c      	adds	r3, #12
 800c9e8:	f002 0218 	and.w	r2, r2, #24
 800c9ec:	b2d2      	uxtb	r2, r2
 800c9ee:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c9f0:	69fb      	ldr	r3, [r7, #28]
 800c9f2:	2201      	movs	r2, #1
 800c9f4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c9f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	3730      	adds	r7, #48	; 0x30
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}
 800ca02:	bf00      	nop
 800ca04:	4ec4ec4f 	.word	0x4ec4ec4f

0800ca08 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b08a      	sub	sp, #40	; 0x28
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
 800ca10:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	613b      	str	r3, [r7, #16]
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	691b      	ldr	r3, [r3, #16]
 800ca1e:	60fb      	str	r3, [r7, #12]
 800ca20:	2300      	movs	r3, #0
 800ca22:	617b      	str	r3, [r7, #20]
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800ca28:	69bb      	ldr	r3, [r7, #24]
 800ca2a:	1c5a      	adds	r2, r3, #1
 800ca2c:	61ba      	str	r2, [r7, #24]
 800ca2e:	693a      	ldr	r2, [r7, #16]
 800ca30:	4413      	add	r3, r2
 800ca32:	781b      	ldrb	r3, [r3, #0]
 800ca34:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800ca36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca38:	2b1f      	cmp	r3, #31
 800ca3a:	d940      	bls.n	800cabe <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ca3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca3e:	2b2f      	cmp	r3, #47	; 0x2f
 800ca40:	d006      	beq.n	800ca50 <create_name+0x48>
 800ca42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca44:	2b5c      	cmp	r3, #92	; 0x5c
 800ca46:	d110      	bne.n	800ca6a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ca48:	e002      	b.n	800ca50 <create_name+0x48>
 800ca4a:	69bb      	ldr	r3, [r7, #24]
 800ca4c:	3301      	adds	r3, #1
 800ca4e:	61bb      	str	r3, [r7, #24]
 800ca50:	693a      	ldr	r2, [r7, #16]
 800ca52:	69bb      	ldr	r3, [r7, #24]
 800ca54:	4413      	add	r3, r2
 800ca56:	781b      	ldrb	r3, [r3, #0]
 800ca58:	2b2f      	cmp	r3, #47	; 0x2f
 800ca5a:	d0f6      	beq.n	800ca4a <create_name+0x42>
 800ca5c:	693a      	ldr	r2, [r7, #16]
 800ca5e:	69bb      	ldr	r3, [r7, #24]
 800ca60:	4413      	add	r3, r2
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	2b5c      	cmp	r3, #92	; 0x5c
 800ca66:	d0f0      	beq.n	800ca4a <create_name+0x42>
			break;
 800ca68:	e02a      	b.n	800cac0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	2bfe      	cmp	r3, #254	; 0xfe
 800ca6e:	d901      	bls.n	800ca74 <create_name+0x6c>
 800ca70:	2306      	movs	r3, #6
 800ca72:	e17d      	b.n	800cd70 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ca74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca76:	b2db      	uxtb	r3, r3
 800ca78:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ca7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca7c:	2101      	movs	r1, #1
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f001 f9f0 	bl	800de64 <ff_convert>
 800ca84:	4603      	mov	r3, r0
 800ca86:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ca88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d101      	bne.n	800ca92 <create_name+0x8a>
 800ca8e:	2306      	movs	r3, #6
 800ca90:	e16e      	b.n	800cd70 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ca92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca94:	2b7f      	cmp	r3, #127	; 0x7f
 800ca96:	d809      	bhi.n	800caac <create_name+0xa4>
 800ca98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca9a:	4619      	mov	r1, r3
 800ca9c:	488d      	ldr	r0, [pc, #564]	; (800ccd4 <create_name+0x2cc>)
 800ca9e:	f7fe fce2 	bl	800b466 <chk_chr>
 800caa2:	4603      	mov	r3, r0
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d001      	beq.n	800caac <create_name+0xa4>
 800caa8:	2306      	movs	r3, #6
 800caaa:	e161      	b.n	800cd70 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	1c5a      	adds	r2, r3, #1
 800cab0:	617a      	str	r2, [r7, #20]
 800cab2:	005b      	lsls	r3, r3, #1
 800cab4:	68fa      	ldr	r2, [r7, #12]
 800cab6:	4413      	add	r3, r2
 800cab8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800caba:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800cabc:	e7b4      	b.n	800ca28 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800cabe:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800cac0:	693a      	ldr	r2, [r7, #16]
 800cac2:	69bb      	ldr	r3, [r7, #24]
 800cac4:	441a      	add	r2, r3
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800caca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cacc:	2b1f      	cmp	r3, #31
 800cace:	d801      	bhi.n	800cad4 <create_name+0xcc>
 800cad0:	2304      	movs	r3, #4
 800cad2:	e000      	b.n	800cad6 <create_name+0xce>
 800cad4:	2300      	movs	r3, #0
 800cad6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800cada:	e011      	b.n	800cb00 <create_name+0xf8>
		w = lfn[di - 1];
 800cadc:	697a      	ldr	r2, [r7, #20]
 800cade:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cae2:	4413      	add	r3, r2
 800cae4:	005b      	lsls	r3, r3, #1
 800cae6:	68fa      	ldr	r2, [r7, #12]
 800cae8:	4413      	add	r3, r2
 800caea:	881b      	ldrh	r3, [r3, #0]
 800caec:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800caee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800caf0:	2b20      	cmp	r3, #32
 800caf2:	d002      	beq.n	800cafa <create_name+0xf2>
 800caf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800caf6:	2b2e      	cmp	r3, #46	; 0x2e
 800caf8:	d106      	bne.n	800cb08 <create_name+0x100>
		di--;
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	3b01      	subs	r3, #1
 800cafe:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800cb00:	697b      	ldr	r3, [r7, #20]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d1ea      	bne.n	800cadc <create_name+0xd4>
 800cb06:	e000      	b.n	800cb0a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800cb08:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	005b      	lsls	r3, r3, #1
 800cb0e:	68fa      	ldr	r2, [r7, #12]
 800cb10:	4413      	add	r3, r2
 800cb12:	2200      	movs	r2, #0
 800cb14:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d101      	bne.n	800cb20 <create_name+0x118>
 800cb1c:	2306      	movs	r3, #6
 800cb1e:	e127      	b.n	800cd70 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	3324      	adds	r3, #36	; 0x24
 800cb24:	220b      	movs	r2, #11
 800cb26:	2120      	movs	r1, #32
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f7fe fc5a 	bl	800b3e2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800cb2e:	2300      	movs	r3, #0
 800cb30:	61bb      	str	r3, [r7, #24]
 800cb32:	e002      	b.n	800cb3a <create_name+0x132>
 800cb34:	69bb      	ldr	r3, [r7, #24]
 800cb36:	3301      	adds	r3, #1
 800cb38:	61bb      	str	r3, [r7, #24]
 800cb3a:	69bb      	ldr	r3, [r7, #24]
 800cb3c:	005b      	lsls	r3, r3, #1
 800cb3e:	68fa      	ldr	r2, [r7, #12]
 800cb40:	4413      	add	r3, r2
 800cb42:	881b      	ldrh	r3, [r3, #0]
 800cb44:	2b20      	cmp	r3, #32
 800cb46:	d0f5      	beq.n	800cb34 <create_name+0x12c>
 800cb48:	69bb      	ldr	r3, [r7, #24]
 800cb4a:	005b      	lsls	r3, r3, #1
 800cb4c:	68fa      	ldr	r2, [r7, #12]
 800cb4e:	4413      	add	r3, r2
 800cb50:	881b      	ldrh	r3, [r3, #0]
 800cb52:	2b2e      	cmp	r3, #46	; 0x2e
 800cb54:	d0ee      	beq.n	800cb34 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800cb56:	69bb      	ldr	r3, [r7, #24]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d009      	beq.n	800cb70 <create_name+0x168>
 800cb5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb60:	f043 0303 	orr.w	r3, r3, #3
 800cb64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800cb68:	e002      	b.n	800cb70 <create_name+0x168>
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	3b01      	subs	r3, #1
 800cb6e:	617b      	str	r3, [r7, #20]
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d009      	beq.n	800cb8a <create_name+0x182>
 800cb76:	697a      	ldr	r2, [r7, #20]
 800cb78:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cb7c:	4413      	add	r3, r2
 800cb7e:	005b      	lsls	r3, r3, #1
 800cb80:	68fa      	ldr	r2, [r7, #12]
 800cb82:	4413      	add	r3, r2
 800cb84:	881b      	ldrh	r3, [r3, #0]
 800cb86:	2b2e      	cmp	r3, #46	; 0x2e
 800cb88:	d1ef      	bne.n	800cb6a <create_name+0x162>

	i = b = 0; ni = 8;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cb90:	2300      	movs	r3, #0
 800cb92:	623b      	str	r3, [r7, #32]
 800cb94:	2308      	movs	r3, #8
 800cb96:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800cb98:	69bb      	ldr	r3, [r7, #24]
 800cb9a:	1c5a      	adds	r2, r3, #1
 800cb9c:	61ba      	str	r2, [r7, #24]
 800cb9e:	005b      	lsls	r3, r3, #1
 800cba0:	68fa      	ldr	r2, [r7, #12]
 800cba2:	4413      	add	r3, r2
 800cba4:	881b      	ldrh	r3, [r3, #0]
 800cba6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800cba8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	f000 8090 	beq.w	800ccd0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800cbb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbb2:	2b20      	cmp	r3, #32
 800cbb4:	d006      	beq.n	800cbc4 <create_name+0x1bc>
 800cbb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbb8:	2b2e      	cmp	r3, #46	; 0x2e
 800cbba:	d10a      	bne.n	800cbd2 <create_name+0x1ca>
 800cbbc:	69ba      	ldr	r2, [r7, #24]
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	d006      	beq.n	800cbd2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800cbc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbc8:	f043 0303 	orr.w	r3, r3, #3
 800cbcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cbd0:	e07d      	b.n	800ccce <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800cbd2:	6a3a      	ldr	r2, [r7, #32]
 800cbd4:	69fb      	ldr	r3, [r7, #28]
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d203      	bcs.n	800cbe2 <create_name+0x1da>
 800cbda:	69ba      	ldr	r2, [r7, #24]
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d123      	bne.n	800cc2a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800cbe2:	69fb      	ldr	r3, [r7, #28]
 800cbe4:	2b0b      	cmp	r3, #11
 800cbe6:	d106      	bne.n	800cbf6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800cbe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbec:	f043 0303 	orr.w	r3, r3, #3
 800cbf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cbf4:	e075      	b.n	800cce2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800cbf6:	69ba      	ldr	r2, [r7, #24]
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	d005      	beq.n	800cc0a <create_name+0x202>
 800cbfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc02:	f043 0303 	orr.w	r3, r3, #3
 800cc06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800cc0a:	69ba      	ldr	r2, [r7, #24]
 800cc0c:	697b      	ldr	r3, [r7, #20]
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	d866      	bhi.n	800cce0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	61bb      	str	r3, [r7, #24]
 800cc16:	2308      	movs	r3, #8
 800cc18:	623b      	str	r3, [r7, #32]
 800cc1a:	230b      	movs	r3, #11
 800cc1c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800cc1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cc22:	009b      	lsls	r3, r3, #2
 800cc24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cc28:	e051      	b.n	800ccce <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800cc2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc2c:	2b7f      	cmp	r3, #127	; 0x7f
 800cc2e:	d914      	bls.n	800cc5a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800cc30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc32:	2100      	movs	r1, #0
 800cc34:	4618      	mov	r0, r3
 800cc36:	f001 f915 	bl	800de64 <ff_convert>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800cc3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d004      	beq.n	800cc4e <create_name+0x246>
 800cc44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc46:	3b80      	subs	r3, #128	; 0x80
 800cc48:	4a23      	ldr	r2, [pc, #140]	; (800ccd8 <create_name+0x2d0>)
 800cc4a:	5cd3      	ldrb	r3, [r2, r3]
 800cc4c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800cc4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc52:	f043 0302 	orr.w	r3, r3, #2
 800cc56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800cc5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d007      	beq.n	800cc70 <create_name+0x268>
 800cc60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc62:	4619      	mov	r1, r3
 800cc64:	481d      	ldr	r0, [pc, #116]	; (800ccdc <create_name+0x2d4>)
 800cc66:	f7fe fbfe 	bl	800b466 <chk_chr>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d008      	beq.n	800cc82 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800cc70:	235f      	movs	r3, #95	; 0x5f
 800cc72:	84bb      	strh	r3, [r7, #36]	; 0x24
 800cc74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc78:	f043 0303 	orr.w	r3, r3, #3
 800cc7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cc80:	e01b      	b.n	800ccba <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800cc82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc84:	2b40      	cmp	r3, #64	; 0x40
 800cc86:	d909      	bls.n	800cc9c <create_name+0x294>
 800cc88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc8a:	2b5a      	cmp	r3, #90	; 0x5a
 800cc8c:	d806      	bhi.n	800cc9c <create_name+0x294>
					b |= 2;
 800cc8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cc92:	f043 0302 	orr.w	r3, r3, #2
 800cc96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cc9a:	e00e      	b.n	800ccba <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800cc9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc9e:	2b60      	cmp	r3, #96	; 0x60
 800cca0:	d90b      	bls.n	800ccba <create_name+0x2b2>
 800cca2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cca4:	2b7a      	cmp	r3, #122	; 0x7a
 800cca6:	d808      	bhi.n	800ccba <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800cca8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ccac:	f043 0301 	orr.w	r3, r3, #1
 800ccb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ccb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ccb6:	3b20      	subs	r3, #32
 800ccb8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ccba:	6a3b      	ldr	r3, [r7, #32]
 800ccbc:	1c5a      	adds	r2, r3, #1
 800ccbe:	623a      	str	r2, [r7, #32]
 800ccc0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ccc2:	b2d1      	uxtb	r1, r2
 800ccc4:	687a      	ldr	r2, [r7, #4]
 800ccc6:	4413      	add	r3, r2
 800ccc8:	460a      	mov	r2, r1
 800ccca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800ccce:	e763      	b.n	800cb98 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800ccd0:	bf00      	nop
 800ccd2:	e006      	b.n	800cce2 <create_name+0x2da>
 800ccd4:	0800ea48 	.word	0x0800ea48
 800ccd8:	0800eab0 	.word	0x0800eab0
 800ccdc:	0800ea54 	.word	0x0800ea54
			if (si > di) break;			/* No extension */
 800cce0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cce8:	2be5      	cmp	r3, #229	; 0xe5
 800ccea:	d103      	bne.n	800ccf4 <create_name+0x2ec>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2205      	movs	r2, #5
 800ccf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800ccf4:	69fb      	ldr	r3, [r7, #28]
 800ccf6:	2b08      	cmp	r3, #8
 800ccf8:	d104      	bne.n	800cd04 <create_name+0x2fc>
 800ccfa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ccfe:	009b      	lsls	r3, r3, #2
 800cd00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800cd04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cd08:	f003 030c 	and.w	r3, r3, #12
 800cd0c:	2b0c      	cmp	r3, #12
 800cd0e:	d005      	beq.n	800cd1c <create_name+0x314>
 800cd10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cd14:	f003 0303 	and.w	r3, r3, #3
 800cd18:	2b03      	cmp	r3, #3
 800cd1a:	d105      	bne.n	800cd28 <create_name+0x320>
 800cd1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd20:	f043 0302 	orr.w	r3, r3, #2
 800cd24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800cd28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd2c:	f003 0302 	and.w	r3, r3, #2
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d117      	bne.n	800cd64 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800cd34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cd38:	f003 0303 	and.w	r3, r3, #3
 800cd3c:	2b01      	cmp	r3, #1
 800cd3e:	d105      	bne.n	800cd4c <create_name+0x344>
 800cd40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd44:	f043 0310 	orr.w	r3, r3, #16
 800cd48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800cd4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cd50:	f003 030c 	and.w	r3, r3, #12
 800cd54:	2b04      	cmp	r3, #4
 800cd56:	d105      	bne.n	800cd64 <create_name+0x35c>
 800cd58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd5c:	f043 0308 	orr.w	r3, r3, #8
 800cd60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cd6a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800cd6e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3728      	adds	r7, #40	; 0x28
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}

0800cd78 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b086      	sub	sp, #24
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cd8c:	e002      	b.n	800cd94 <follow_path+0x1c>
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	3301      	adds	r3, #1
 800cd92:	603b      	str	r3, [r7, #0]
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	781b      	ldrb	r3, [r3, #0]
 800cd98:	2b2f      	cmp	r3, #47	; 0x2f
 800cd9a:	d0f8      	beq.n	800cd8e <follow_path+0x16>
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	781b      	ldrb	r3, [r3, #0]
 800cda0:	2b5c      	cmp	r3, #92	; 0x5c
 800cda2:	d0f4      	beq.n	800cd8e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800cda4:	693b      	ldr	r3, [r7, #16]
 800cda6:	2200      	movs	r2, #0
 800cda8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	781b      	ldrb	r3, [r3, #0]
 800cdae:	2b1f      	cmp	r3, #31
 800cdb0:	d80a      	bhi.n	800cdc8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2280      	movs	r2, #128	; 0x80
 800cdb6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800cdba:	2100      	movs	r1, #0
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f7ff f8fd 	bl	800bfbc <dir_sdi>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	75fb      	strb	r3, [r7, #23]
 800cdc6:	e048      	b.n	800ce5a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cdc8:	463b      	mov	r3, r7
 800cdca:	4619      	mov	r1, r3
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f7ff fe1b 	bl	800ca08 <create_name>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cdd6:	7dfb      	ldrb	r3, [r7, #23]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d139      	bne.n	800ce50 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f7ff fc5a 	bl	800c696 <dir_find>
 800cde2:	4603      	mov	r3, r0
 800cde4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cdec:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800cdee:	7dfb      	ldrb	r3, [r7, #23]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d00a      	beq.n	800ce0a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cdf4:	7dfb      	ldrb	r3, [r7, #23]
 800cdf6:	2b04      	cmp	r3, #4
 800cdf8:	d12c      	bne.n	800ce54 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cdfa:	7afb      	ldrb	r3, [r7, #11]
 800cdfc:	f003 0304 	and.w	r3, r3, #4
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d127      	bne.n	800ce54 <follow_path+0xdc>
 800ce04:	2305      	movs	r3, #5
 800ce06:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ce08:	e024      	b.n	800ce54 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ce0a:	7afb      	ldrb	r3, [r7, #11]
 800ce0c:	f003 0304 	and.w	r3, r3, #4
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d121      	bne.n	800ce58 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	799b      	ldrb	r3, [r3, #6]
 800ce18:	f003 0310 	and.w	r3, r3, #16
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d102      	bne.n	800ce26 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ce20:	2305      	movs	r3, #5
 800ce22:	75fb      	strb	r3, [r7, #23]
 800ce24:	e019      	b.n	800ce5a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	695b      	ldr	r3, [r3, #20]
 800ce30:	68fa      	ldr	r2, [r7, #12]
 800ce32:	8992      	ldrh	r2, [r2, #12]
 800ce34:	fbb3 f0f2 	udiv	r0, r3, r2
 800ce38:	fb00 f202 	mul.w	r2, r0, r2
 800ce3c:	1a9b      	subs	r3, r3, r2
 800ce3e:	440b      	add	r3, r1
 800ce40:	4619      	mov	r1, r3
 800ce42:	68f8      	ldr	r0, [r7, #12]
 800ce44:	f7ff fa60 	bl	800c308 <ld_clust>
 800ce48:	4602      	mov	r2, r0
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ce4e:	e7bb      	b.n	800cdc8 <follow_path+0x50>
			if (res != FR_OK) break;
 800ce50:	bf00      	nop
 800ce52:	e002      	b.n	800ce5a <follow_path+0xe2>
				break;
 800ce54:	bf00      	nop
 800ce56:	e000      	b.n	800ce5a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ce58:	bf00      	nop
			}
		}
	}

	return res;
 800ce5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3718      	adds	r7, #24
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}

0800ce64 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ce64:	b480      	push	{r7}
 800ce66:	b087      	sub	sp, #28
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ce6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ce70:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d031      	beq.n	800cede <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	617b      	str	r3, [r7, #20]
 800ce80:	e002      	b.n	800ce88 <get_ldnumber+0x24>
 800ce82:	697b      	ldr	r3, [r7, #20]
 800ce84:	3301      	adds	r3, #1
 800ce86:	617b      	str	r3, [r7, #20]
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	781b      	ldrb	r3, [r3, #0]
 800ce8c:	2b1f      	cmp	r3, #31
 800ce8e:	d903      	bls.n	800ce98 <get_ldnumber+0x34>
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	781b      	ldrb	r3, [r3, #0]
 800ce94:	2b3a      	cmp	r3, #58	; 0x3a
 800ce96:	d1f4      	bne.n	800ce82 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	781b      	ldrb	r3, [r3, #0]
 800ce9c:	2b3a      	cmp	r3, #58	; 0x3a
 800ce9e:	d11c      	bne.n	800ceda <get_ldnumber+0x76>
			tp = *path;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	1c5a      	adds	r2, r3, #1
 800ceaa:	60fa      	str	r2, [r7, #12]
 800ceac:	781b      	ldrb	r3, [r3, #0]
 800ceae:	3b30      	subs	r3, #48	; 0x30
 800ceb0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	2b09      	cmp	r3, #9
 800ceb6:	d80e      	bhi.n	800ced6 <get_ldnumber+0x72>
 800ceb8:	68fa      	ldr	r2, [r7, #12]
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	429a      	cmp	r2, r3
 800cebe:	d10a      	bne.n	800ced6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d107      	bne.n	800ced6 <get_ldnumber+0x72>
					vol = (int)i;
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	3301      	adds	r3, #1
 800cece:	617b      	str	r3, [r7, #20]
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	697a      	ldr	r2, [r7, #20]
 800ced4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ced6:	693b      	ldr	r3, [r7, #16]
 800ced8:	e002      	b.n	800cee0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ceda:	2300      	movs	r3, #0
 800cedc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cede:	693b      	ldr	r3, [r7, #16]
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	371c      	adds	r7, #28
 800cee4:	46bd      	mov	sp, r7
 800cee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceea:	4770      	bx	lr

0800ceec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b082      	sub	sp, #8
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2200      	movs	r2, #0
 800cefa:	70da      	strb	r2, [r3, #3]
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f04f 32ff 	mov.w	r2, #4294967295
 800cf02:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cf04:	6839      	ldr	r1, [r7, #0]
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f7fe fc78 	bl	800b7fc <move_window>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d001      	beq.n	800cf16 <check_fs+0x2a>
 800cf12:	2304      	movs	r3, #4
 800cf14:	e038      	b.n	800cf88 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	3338      	adds	r3, #56	; 0x38
 800cf1a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7fe f9bc 	bl	800b29c <ld_word>
 800cf24:	4603      	mov	r3, r0
 800cf26:	461a      	mov	r2, r3
 800cf28:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cf2c:	429a      	cmp	r2, r3
 800cf2e:	d001      	beq.n	800cf34 <check_fs+0x48>
 800cf30:	2303      	movs	r3, #3
 800cf32:	e029      	b.n	800cf88 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cf3a:	2be9      	cmp	r3, #233	; 0xe9
 800cf3c:	d009      	beq.n	800cf52 <check_fs+0x66>
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cf44:	2beb      	cmp	r3, #235	; 0xeb
 800cf46:	d11e      	bne.n	800cf86 <check_fs+0x9a>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800cf4e:	2b90      	cmp	r3, #144	; 0x90
 800cf50:	d119      	bne.n	800cf86 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	3338      	adds	r3, #56	; 0x38
 800cf56:	3336      	adds	r3, #54	; 0x36
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f7fe f9b7 	bl	800b2cc <ld_dword>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cf64:	4a0a      	ldr	r2, [pc, #40]	; (800cf90 <check_fs+0xa4>)
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d101      	bne.n	800cf6e <check_fs+0x82>
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	e00c      	b.n	800cf88 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	3338      	adds	r3, #56	; 0x38
 800cf72:	3352      	adds	r3, #82	; 0x52
 800cf74:	4618      	mov	r0, r3
 800cf76:	f7fe f9a9 	bl	800b2cc <ld_dword>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	4a05      	ldr	r2, [pc, #20]	; (800cf94 <check_fs+0xa8>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d101      	bne.n	800cf86 <check_fs+0x9a>
 800cf82:	2300      	movs	r3, #0
 800cf84:	e000      	b.n	800cf88 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800cf86:	2302      	movs	r3, #2
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3708      	adds	r7, #8
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}
 800cf90:	00544146 	.word	0x00544146
 800cf94:	33544146 	.word	0x33544146

0800cf98 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b096      	sub	sp, #88	; 0x58
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	60f8      	str	r0, [r7, #12]
 800cfa0:	60b9      	str	r1, [r7, #8]
 800cfa2:	4613      	mov	r3, r2
 800cfa4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cfac:	68f8      	ldr	r0, [r7, #12]
 800cfae:	f7ff ff59 	bl	800ce64 <get_ldnumber>
 800cfb2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cfb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	da01      	bge.n	800cfbe <find_volume+0x26>
 800cfba:	230b      	movs	r3, #11
 800cfbc:	e265      	b.n	800d48a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cfbe:	4a9f      	ldr	r2, [pc, #636]	; (800d23c <find_volume+0x2a4>)
 800cfc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfc6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cfc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d101      	bne.n	800cfd2 <find_volume+0x3a>
 800cfce:	230c      	movs	r3, #12
 800cfd0:	e25b      	b.n	800d48a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cfd6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cfd8:	79fb      	ldrb	r3, [r7, #7]
 800cfda:	f023 0301 	bic.w	r3, r3, #1
 800cfde:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfe2:	781b      	ldrb	r3, [r3, #0]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d01a      	beq.n	800d01e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800cfe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfea:	785b      	ldrb	r3, [r3, #1]
 800cfec:	4618      	mov	r0, r3
 800cfee:	f7fe f8b7 	bl	800b160 <disk_status>
 800cff2:	4603      	mov	r3, r0
 800cff4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cff8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cffc:	f003 0301 	and.w	r3, r3, #1
 800d000:	2b00      	cmp	r3, #0
 800d002:	d10c      	bne.n	800d01e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d004:	79fb      	ldrb	r3, [r7, #7]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d007      	beq.n	800d01a <find_volume+0x82>
 800d00a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d00e:	f003 0304 	and.w	r3, r3, #4
 800d012:	2b00      	cmp	r3, #0
 800d014:	d001      	beq.n	800d01a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d016:	230a      	movs	r3, #10
 800d018:	e237      	b.n	800d48a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800d01a:	2300      	movs	r3, #0
 800d01c:	e235      	b.n	800d48a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d020:	2200      	movs	r2, #0
 800d022:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d026:	b2da      	uxtb	r2, r3
 800d028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d02a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d02e:	785b      	ldrb	r3, [r3, #1]
 800d030:	4618      	mov	r0, r3
 800d032:	f7fe f8af 	bl	800b194 <disk_initialize>
 800d036:	4603      	mov	r3, r0
 800d038:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d03c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d040:	f003 0301 	and.w	r3, r3, #1
 800d044:	2b00      	cmp	r3, #0
 800d046:	d001      	beq.n	800d04c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d048:	2303      	movs	r3, #3
 800d04a:	e21e      	b.n	800d48a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d04c:	79fb      	ldrb	r3, [r7, #7]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d007      	beq.n	800d062 <find_volume+0xca>
 800d052:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d056:	f003 0304 	and.w	r3, r3, #4
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d001      	beq.n	800d062 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d05e:	230a      	movs	r3, #10
 800d060:	e213      	b.n	800d48a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800d062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d064:	7858      	ldrb	r0, [r3, #1]
 800d066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d068:	330c      	adds	r3, #12
 800d06a:	461a      	mov	r2, r3
 800d06c:	2102      	movs	r1, #2
 800d06e:	f7fe f8f7 	bl	800b260 <disk_ioctl>
 800d072:	4603      	mov	r3, r0
 800d074:	2b00      	cmp	r3, #0
 800d076:	d001      	beq.n	800d07c <find_volume+0xe4>
 800d078:	2301      	movs	r3, #1
 800d07a:	e206      	b.n	800d48a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800d07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d07e:	899b      	ldrh	r3, [r3, #12]
 800d080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d084:	d80d      	bhi.n	800d0a2 <find_volume+0x10a>
 800d086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d088:	899b      	ldrh	r3, [r3, #12]
 800d08a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d08e:	d308      	bcc.n	800d0a2 <find_volume+0x10a>
 800d090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d092:	899b      	ldrh	r3, [r3, #12]
 800d094:	461a      	mov	r2, r3
 800d096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d098:	899b      	ldrh	r3, [r3, #12]
 800d09a:	3b01      	subs	r3, #1
 800d09c:	4013      	ands	r3, r2
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d001      	beq.n	800d0a6 <find_volume+0x10e>
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	e1f1      	b.n	800d48a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d0aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d0ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d0ae:	f7ff ff1d 	bl	800ceec <check_fs>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d0b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d0bc:	2b02      	cmp	r3, #2
 800d0be:	d149      	bne.n	800d154 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	643b      	str	r3, [r7, #64]	; 0x40
 800d0c4:	e01e      	b.n	800d104 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d0cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0ce:	011b      	lsls	r3, r3, #4
 800d0d0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d0d4:	4413      	add	r3, r2
 800d0d6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0da:	3304      	adds	r3, #4
 800d0dc:	781b      	ldrb	r3, [r3, #0]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d006      	beq.n	800d0f0 <find_volume+0x158>
 800d0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e4:	3308      	adds	r3, #8
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f7fe f8f0 	bl	800b2cc <ld_dword>
 800d0ec:	4602      	mov	r2, r0
 800d0ee:	e000      	b.n	800d0f2 <find_volume+0x15a>
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0f4:	009b      	lsls	r3, r3, #2
 800d0f6:	3358      	adds	r3, #88	; 0x58
 800d0f8:	443b      	add	r3, r7
 800d0fa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d0fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d100:	3301      	adds	r3, #1
 800d102:	643b      	str	r3, [r7, #64]	; 0x40
 800d104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d106:	2b03      	cmp	r3, #3
 800d108:	d9dd      	bls.n	800d0c6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d10a:	2300      	movs	r3, #0
 800d10c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d10e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d110:	2b00      	cmp	r3, #0
 800d112:	d002      	beq.n	800d11a <find_volume+0x182>
 800d114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d116:	3b01      	subs	r3, #1
 800d118:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d11a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d11c:	009b      	lsls	r3, r3, #2
 800d11e:	3358      	adds	r3, #88	; 0x58
 800d120:	443b      	add	r3, r7
 800d122:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d126:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d005      	beq.n	800d13a <find_volume+0x1a2>
 800d12e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d130:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d132:	f7ff fedb 	bl	800ceec <check_fs>
 800d136:	4603      	mov	r3, r0
 800d138:	e000      	b.n	800d13c <find_volume+0x1a4>
 800d13a:	2303      	movs	r3, #3
 800d13c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d140:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d144:	2b01      	cmp	r3, #1
 800d146:	d905      	bls.n	800d154 <find_volume+0x1bc>
 800d148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d14a:	3301      	adds	r3, #1
 800d14c:	643b      	str	r3, [r7, #64]	; 0x40
 800d14e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d150:	2b03      	cmp	r3, #3
 800d152:	d9e2      	bls.n	800d11a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d154:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d158:	2b04      	cmp	r3, #4
 800d15a:	d101      	bne.n	800d160 <find_volume+0x1c8>
 800d15c:	2301      	movs	r3, #1
 800d15e:	e194      	b.n	800d48a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d160:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d164:	2b01      	cmp	r3, #1
 800d166:	d901      	bls.n	800d16c <find_volume+0x1d4>
 800d168:	230d      	movs	r3, #13
 800d16a:	e18e      	b.n	800d48a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d16e:	3338      	adds	r3, #56	; 0x38
 800d170:	330b      	adds	r3, #11
 800d172:	4618      	mov	r0, r3
 800d174:	f7fe f892 	bl	800b29c <ld_word>
 800d178:	4603      	mov	r3, r0
 800d17a:	461a      	mov	r2, r3
 800d17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d17e:	899b      	ldrh	r3, [r3, #12]
 800d180:	429a      	cmp	r2, r3
 800d182:	d001      	beq.n	800d188 <find_volume+0x1f0>
 800d184:	230d      	movs	r3, #13
 800d186:	e180      	b.n	800d48a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d18a:	3338      	adds	r3, #56	; 0x38
 800d18c:	3316      	adds	r3, #22
 800d18e:	4618      	mov	r0, r3
 800d190:	f7fe f884 	bl	800b29c <ld_word>
 800d194:	4603      	mov	r3, r0
 800d196:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d106      	bne.n	800d1ac <find_volume+0x214>
 800d19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a0:	3338      	adds	r3, #56	; 0x38
 800d1a2:	3324      	adds	r3, #36	; 0x24
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f7fe f891 	bl	800b2cc <ld_dword>
 800d1aa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d1b0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800d1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ba:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1be:	789b      	ldrb	r3, [r3, #2]
 800d1c0:	2b01      	cmp	r3, #1
 800d1c2:	d005      	beq.n	800d1d0 <find_volume+0x238>
 800d1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c6:	789b      	ldrb	r3, [r3, #2]
 800d1c8:	2b02      	cmp	r3, #2
 800d1ca:	d001      	beq.n	800d1d0 <find_volume+0x238>
 800d1cc:	230d      	movs	r3, #13
 800d1ce:	e15c      	b.n	800d48a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d2:	789b      	ldrb	r3, [r3, #2]
 800d1d4:	461a      	mov	r2, r3
 800d1d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1d8:	fb02 f303 	mul.w	r3, r2, r3
 800d1dc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d1e4:	b29a      	uxth	r2, r3
 800d1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ec:	895b      	ldrh	r3, [r3, #10]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d008      	beq.n	800d204 <find_volume+0x26c>
 800d1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1f4:	895b      	ldrh	r3, [r3, #10]
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1fa:	895b      	ldrh	r3, [r3, #10]
 800d1fc:	3b01      	subs	r3, #1
 800d1fe:	4013      	ands	r3, r2
 800d200:	2b00      	cmp	r3, #0
 800d202:	d001      	beq.n	800d208 <find_volume+0x270>
 800d204:	230d      	movs	r3, #13
 800d206:	e140      	b.n	800d48a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d20a:	3338      	adds	r3, #56	; 0x38
 800d20c:	3311      	adds	r3, #17
 800d20e:	4618      	mov	r0, r3
 800d210:	f7fe f844 	bl	800b29c <ld_word>
 800d214:	4603      	mov	r3, r0
 800d216:	461a      	mov	r2, r3
 800d218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d21a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d21e:	891b      	ldrh	r3, [r3, #8]
 800d220:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d222:	8992      	ldrh	r2, [r2, #12]
 800d224:	0952      	lsrs	r2, r2, #5
 800d226:	b292      	uxth	r2, r2
 800d228:	fbb3 f1f2 	udiv	r1, r3, r2
 800d22c:	fb01 f202 	mul.w	r2, r1, r2
 800d230:	1a9b      	subs	r3, r3, r2
 800d232:	b29b      	uxth	r3, r3
 800d234:	2b00      	cmp	r3, #0
 800d236:	d003      	beq.n	800d240 <find_volume+0x2a8>
 800d238:	230d      	movs	r3, #13
 800d23a:	e126      	b.n	800d48a <find_volume+0x4f2>
 800d23c:	200025ac 	.word	0x200025ac

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d242:	3338      	adds	r3, #56	; 0x38
 800d244:	3313      	adds	r3, #19
 800d246:	4618      	mov	r0, r3
 800d248:	f7fe f828 	bl	800b29c <ld_word>
 800d24c:	4603      	mov	r3, r0
 800d24e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d252:	2b00      	cmp	r3, #0
 800d254:	d106      	bne.n	800d264 <find_volume+0x2cc>
 800d256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d258:	3338      	adds	r3, #56	; 0x38
 800d25a:	3320      	adds	r3, #32
 800d25c:	4618      	mov	r0, r3
 800d25e:	f7fe f835 	bl	800b2cc <ld_dword>
 800d262:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d266:	3338      	adds	r3, #56	; 0x38
 800d268:	330e      	adds	r3, #14
 800d26a:	4618      	mov	r0, r3
 800d26c:	f7fe f816 	bl	800b29c <ld_word>
 800d270:	4603      	mov	r3, r0
 800d272:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d274:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d276:	2b00      	cmp	r3, #0
 800d278:	d101      	bne.n	800d27e <find_volume+0x2e6>
 800d27a:	230d      	movs	r3, #13
 800d27c:	e105      	b.n	800d48a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d27e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d282:	4413      	add	r3, r2
 800d284:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d286:	8911      	ldrh	r1, [r2, #8]
 800d288:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d28a:	8992      	ldrh	r2, [r2, #12]
 800d28c:	0952      	lsrs	r2, r2, #5
 800d28e:	b292      	uxth	r2, r2
 800d290:	fbb1 f2f2 	udiv	r2, r1, r2
 800d294:	b292      	uxth	r2, r2
 800d296:	4413      	add	r3, r2
 800d298:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d29a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	d201      	bcs.n	800d2a6 <find_volume+0x30e>
 800d2a2:	230d      	movs	r3, #13
 800d2a4:	e0f1      	b.n	800d48a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d2a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2aa:	1ad3      	subs	r3, r2, r3
 800d2ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d2ae:	8952      	ldrh	r2, [r2, #10]
 800d2b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d2b4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d101      	bne.n	800d2c0 <find_volume+0x328>
 800d2bc:	230d      	movs	r3, #13
 800d2be:	e0e4      	b.n	800d48a <find_volume+0x4f2>
		fmt = FS_FAT32;
 800d2c0:	2303      	movs	r3, #3
 800d2c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d2cc:	4293      	cmp	r3, r2
 800d2ce:	d802      	bhi.n	800d2d6 <find_volume+0x33e>
 800d2d0:	2302      	movs	r3, #2
 800d2d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d2dc:	4293      	cmp	r3, r2
 800d2de:	d802      	bhi.n	800d2e6 <find_volume+0x34e>
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e8:	1c9a      	adds	r2, r3, #2
 800d2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ec:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800d2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d2f2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d2f4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d2f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2f8:	441a      	add	r2, r3
 800d2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2fc:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800d2fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d302:	441a      	add	r2, r3
 800d304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d306:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800d308:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d30c:	2b03      	cmp	r3, #3
 800d30e:	d11e      	bne.n	800d34e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d312:	3338      	adds	r3, #56	; 0x38
 800d314:	332a      	adds	r3, #42	; 0x2a
 800d316:	4618      	mov	r0, r3
 800d318:	f7fd ffc0 	bl	800b29c <ld_word>
 800d31c:	4603      	mov	r3, r0
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d001      	beq.n	800d326 <find_volume+0x38e>
 800d322:	230d      	movs	r3, #13
 800d324:	e0b1      	b.n	800d48a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d328:	891b      	ldrh	r3, [r3, #8]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d001      	beq.n	800d332 <find_volume+0x39a>
 800d32e:	230d      	movs	r3, #13
 800d330:	e0ab      	b.n	800d48a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d334:	3338      	adds	r3, #56	; 0x38
 800d336:	332c      	adds	r3, #44	; 0x2c
 800d338:	4618      	mov	r0, r3
 800d33a:	f7fd ffc7 	bl	800b2cc <ld_dword>
 800d33e:	4602      	mov	r2, r0
 800d340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d342:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d346:	69db      	ldr	r3, [r3, #28]
 800d348:	009b      	lsls	r3, r3, #2
 800d34a:	647b      	str	r3, [r7, #68]	; 0x44
 800d34c:	e01f      	b.n	800d38e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d350:	891b      	ldrh	r3, [r3, #8]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d101      	bne.n	800d35a <find_volume+0x3c2>
 800d356:	230d      	movs	r3, #13
 800d358:	e097      	b.n	800d48a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d35c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d35e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d360:	441a      	add	r2, r3
 800d362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d364:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d366:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d36a:	2b02      	cmp	r3, #2
 800d36c:	d103      	bne.n	800d376 <find_volume+0x3de>
 800d36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d370:	69db      	ldr	r3, [r3, #28]
 800d372:	005b      	lsls	r3, r3, #1
 800d374:	e00a      	b.n	800d38c <find_volume+0x3f4>
 800d376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d378:	69da      	ldr	r2, [r3, #28]
 800d37a:	4613      	mov	r3, r2
 800d37c:	005b      	lsls	r3, r3, #1
 800d37e:	4413      	add	r3, r2
 800d380:	085a      	lsrs	r2, r3, #1
 800d382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d384:	69db      	ldr	r3, [r3, #28]
 800d386:	f003 0301 	and.w	r3, r3, #1
 800d38a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d38c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d390:	6a1a      	ldr	r2, [r3, #32]
 800d392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d394:	899b      	ldrh	r3, [r3, #12]
 800d396:	4619      	mov	r1, r3
 800d398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d39a:	440b      	add	r3, r1
 800d39c:	3b01      	subs	r3, #1
 800d39e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d3a0:	8989      	ldrh	r1, [r1, #12]
 800d3a2:	fbb3 f3f1 	udiv	r3, r3, r1
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	d201      	bcs.n	800d3ae <find_volume+0x416>
 800d3aa:	230d      	movs	r3, #13
 800d3ac:	e06d      	b.n	800d48a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3b0:	f04f 32ff 	mov.w	r2, #4294967295
 800d3b4:	619a      	str	r2, [r3, #24]
 800d3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3b8:	699a      	ldr	r2, [r3, #24]
 800d3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3bc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800d3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c0:	2280      	movs	r2, #128	; 0x80
 800d3c2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d3c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d3c8:	2b03      	cmp	r3, #3
 800d3ca:	d149      	bne.n	800d460 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ce:	3338      	adds	r3, #56	; 0x38
 800d3d0:	3330      	adds	r3, #48	; 0x30
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f7fd ff62 	bl	800b29c <ld_word>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	2b01      	cmp	r3, #1
 800d3dc:	d140      	bne.n	800d460 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d3de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3e0:	3301      	adds	r3, #1
 800d3e2:	4619      	mov	r1, r3
 800d3e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d3e6:	f7fe fa09 	bl	800b7fc <move_window>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d137      	bne.n	800d460 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800d3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3f8:	3338      	adds	r3, #56	; 0x38
 800d3fa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d3fe:	4618      	mov	r0, r3
 800d400:	f7fd ff4c 	bl	800b29c <ld_word>
 800d404:	4603      	mov	r3, r0
 800d406:	461a      	mov	r2, r3
 800d408:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d127      	bne.n	800d460 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d412:	3338      	adds	r3, #56	; 0x38
 800d414:	4618      	mov	r0, r3
 800d416:	f7fd ff59 	bl	800b2cc <ld_dword>
 800d41a:	4603      	mov	r3, r0
 800d41c:	4a1d      	ldr	r2, [pc, #116]	; (800d494 <find_volume+0x4fc>)
 800d41e:	4293      	cmp	r3, r2
 800d420:	d11e      	bne.n	800d460 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d424:	3338      	adds	r3, #56	; 0x38
 800d426:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d42a:	4618      	mov	r0, r3
 800d42c:	f7fd ff4e 	bl	800b2cc <ld_dword>
 800d430:	4603      	mov	r3, r0
 800d432:	4a19      	ldr	r2, [pc, #100]	; (800d498 <find_volume+0x500>)
 800d434:	4293      	cmp	r3, r2
 800d436:	d113      	bne.n	800d460 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d43a:	3338      	adds	r3, #56	; 0x38
 800d43c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d440:	4618      	mov	r0, r3
 800d442:	f7fd ff43 	bl	800b2cc <ld_dword>
 800d446:	4602      	mov	r2, r0
 800d448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d44a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d44e:	3338      	adds	r3, #56	; 0x38
 800d450:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d454:	4618      	mov	r0, r3
 800d456:	f7fd ff39 	bl	800b2cc <ld_dword>
 800d45a:	4602      	mov	r2, r0
 800d45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d45e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d462:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d466:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d468:	4b0c      	ldr	r3, [pc, #48]	; (800d49c <find_volume+0x504>)
 800d46a:	881b      	ldrh	r3, [r3, #0]
 800d46c:	3301      	adds	r3, #1
 800d46e:	b29a      	uxth	r2, r3
 800d470:	4b0a      	ldr	r3, [pc, #40]	; (800d49c <find_volume+0x504>)
 800d472:	801a      	strh	r2, [r3, #0]
 800d474:	4b09      	ldr	r3, [pc, #36]	; (800d49c <find_volume+0x504>)
 800d476:	881a      	ldrh	r2, [r3, #0]
 800d478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d47a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800d47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d47e:	4a08      	ldr	r2, [pc, #32]	; (800d4a0 <find_volume+0x508>)
 800d480:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d482:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d484:	f7fe f952 	bl	800b72c <clear_lock>
#endif
	return FR_OK;
 800d488:	2300      	movs	r3, #0
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3758      	adds	r7, #88	; 0x58
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}
 800d492:	bf00      	nop
 800d494:	41615252 	.word	0x41615252
 800d498:	61417272 	.word	0x61417272
 800d49c:	200025b0 	.word	0x200025b0
 800d4a0:	200025d4 	.word	0x200025d4

0800d4a4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b084      	sub	sp, #16
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
 800d4ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d4ae:	2309      	movs	r3, #9
 800d4b0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d01c      	beq.n	800d4f2 <validate+0x4e>
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d018      	beq.n	800d4f2 <validate+0x4e>
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	781b      	ldrb	r3, [r3, #0]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d013      	beq.n	800d4f2 <validate+0x4e>
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	889a      	ldrh	r2, [r3, #4]
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	88db      	ldrh	r3, [r3, #6]
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	d10c      	bne.n	800d4f2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	785b      	ldrb	r3, [r3, #1]
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f7fd fe3e 	bl	800b160 <disk_status>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	f003 0301 	and.w	r3, r3, #1
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d101      	bne.n	800d4f2 <validate+0x4e>
			res = FR_OK;
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d4f2:	7bfb      	ldrb	r3, [r7, #15]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d102      	bne.n	800d4fe <validate+0x5a>
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	e000      	b.n	800d500 <validate+0x5c>
 800d4fe:	2300      	movs	r3, #0
 800d500:	683a      	ldr	r2, [r7, #0]
 800d502:	6013      	str	r3, [r2, #0]
	return res;
 800d504:	7bfb      	ldrb	r3, [r7, #15]
}
 800d506:	4618      	mov	r0, r3
 800d508:	3710      	adds	r7, #16
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}
	...

0800d510 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b088      	sub	sp, #32
 800d514:	af00      	add	r7, sp, #0
 800d516:	60f8      	str	r0, [r7, #12]
 800d518:	60b9      	str	r1, [r7, #8]
 800d51a:	4613      	mov	r3, r2
 800d51c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d522:	f107 0310 	add.w	r3, r7, #16
 800d526:	4618      	mov	r0, r3
 800d528:	f7ff fc9c 	bl	800ce64 <get_ldnumber>
 800d52c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d52e:	69fb      	ldr	r3, [r7, #28]
 800d530:	2b00      	cmp	r3, #0
 800d532:	da01      	bge.n	800d538 <f_mount+0x28>
 800d534:	230b      	movs	r3, #11
 800d536:	e02b      	b.n	800d590 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d538:	4a17      	ldr	r2, [pc, #92]	; (800d598 <f_mount+0x88>)
 800d53a:	69fb      	ldr	r3, [r7, #28]
 800d53c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d540:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d542:	69bb      	ldr	r3, [r7, #24]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d005      	beq.n	800d554 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d548:	69b8      	ldr	r0, [r7, #24]
 800d54a:	f7fe f8ef 	bl	800b72c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d54e:	69bb      	ldr	r3, [r7, #24]
 800d550:	2200      	movs	r2, #0
 800d552:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d002      	beq.n	800d560 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	2200      	movs	r2, #0
 800d55e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d560:	68fa      	ldr	r2, [r7, #12]
 800d562:	490d      	ldr	r1, [pc, #52]	; (800d598 <f_mount+0x88>)
 800d564:	69fb      	ldr	r3, [r7, #28]
 800d566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d002      	beq.n	800d576 <f_mount+0x66>
 800d570:	79fb      	ldrb	r3, [r7, #7]
 800d572:	2b01      	cmp	r3, #1
 800d574:	d001      	beq.n	800d57a <f_mount+0x6a>
 800d576:	2300      	movs	r3, #0
 800d578:	e00a      	b.n	800d590 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d57a:	f107 010c 	add.w	r1, r7, #12
 800d57e:	f107 0308 	add.w	r3, r7, #8
 800d582:	2200      	movs	r2, #0
 800d584:	4618      	mov	r0, r3
 800d586:	f7ff fd07 	bl	800cf98 <find_volume>
 800d58a:	4603      	mov	r3, r0
 800d58c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d58e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d590:	4618      	mov	r0, r3
 800d592:	3720      	adds	r7, #32
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}
 800d598:	200025ac 	.word	0x200025ac

0800d59c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b09a      	sub	sp, #104	; 0x68
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	60f8      	str	r0, [r7, #12]
 800d5a4:	60b9      	str	r1, [r7, #8]
 800d5a6:	4613      	mov	r3, r2
 800d5a8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d101      	bne.n	800d5b4 <f_open+0x18>
 800d5b0:	2309      	movs	r3, #9
 800d5b2:	e1bb      	b.n	800d92c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d5b4:	79fb      	ldrb	r3, [r7, #7]
 800d5b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d5ba:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d5bc:	79fa      	ldrb	r2, [r7, #7]
 800d5be:	f107 0114 	add.w	r1, r7, #20
 800d5c2:	f107 0308 	add.w	r3, r7, #8
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7ff fce6 	bl	800cf98 <find_volume>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800d5d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	f040 819f 	bne.w	800d91a <f_open+0x37e>
		dj.obj.fs = fs;
 800d5dc:	697b      	ldr	r3, [r7, #20]
 800d5de:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d5e0:	68ba      	ldr	r2, [r7, #8]
 800d5e2:	f107 0318 	add.w	r3, r7, #24
 800d5e6:	4611      	mov	r1, r2
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f7ff fbc5 	bl	800cd78 <follow_path>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d5f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d11a      	bne.n	800d632 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d5fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d600:	b25b      	sxtb	r3, r3
 800d602:	2b00      	cmp	r3, #0
 800d604:	da03      	bge.n	800d60e <f_open+0x72>
				res = FR_INVALID_NAME;
 800d606:	2306      	movs	r3, #6
 800d608:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d60c:	e011      	b.n	800d632 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d60e:	79fb      	ldrb	r3, [r7, #7]
 800d610:	f023 0301 	bic.w	r3, r3, #1
 800d614:	2b00      	cmp	r3, #0
 800d616:	bf14      	ite	ne
 800d618:	2301      	movne	r3, #1
 800d61a:	2300      	moveq	r3, #0
 800d61c:	b2db      	uxtb	r3, r3
 800d61e:	461a      	mov	r2, r3
 800d620:	f107 0318 	add.w	r3, r7, #24
 800d624:	4611      	mov	r1, r2
 800d626:	4618      	mov	r0, r3
 800d628:	f7fd ff38 	bl	800b49c <chk_lock>
 800d62c:	4603      	mov	r3, r0
 800d62e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d632:	79fb      	ldrb	r3, [r7, #7]
 800d634:	f003 031c 	and.w	r3, r3, #28
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d07f      	beq.n	800d73c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d63c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d640:	2b00      	cmp	r3, #0
 800d642:	d017      	beq.n	800d674 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d644:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d648:	2b04      	cmp	r3, #4
 800d64a:	d10e      	bne.n	800d66a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d64c:	f7fd ff82 	bl	800b554 <enq_lock>
 800d650:	4603      	mov	r3, r0
 800d652:	2b00      	cmp	r3, #0
 800d654:	d006      	beq.n	800d664 <f_open+0xc8>
 800d656:	f107 0318 	add.w	r3, r7, #24
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7ff f8dc 	bl	800c818 <dir_register>
 800d660:	4603      	mov	r3, r0
 800d662:	e000      	b.n	800d666 <f_open+0xca>
 800d664:	2312      	movs	r3, #18
 800d666:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d66a:	79fb      	ldrb	r3, [r7, #7]
 800d66c:	f043 0308 	orr.w	r3, r3, #8
 800d670:	71fb      	strb	r3, [r7, #7]
 800d672:	e010      	b.n	800d696 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d674:	7fbb      	ldrb	r3, [r7, #30]
 800d676:	f003 0311 	and.w	r3, r3, #17
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d003      	beq.n	800d686 <f_open+0xea>
					res = FR_DENIED;
 800d67e:	2307      	movs	r3, #7
 800d680:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d684:	e007      	b.n	800d696 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d686:	79fb      	ldrb	r3, [r7, #7]
 800d688:	f003 0304 	and.w	r3, r3, #4
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d002      	beq.n	800d696 <f_open+0xfa>
 800d690:	2308      	movs	r3, #8
 800d692:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d696:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d168      	bne.n	800d770 <f_open+0x1d4>
 800d69e:	79fb      	ldrb	r3, [r7, #7]
 800d6a0:	f003 0308 	and.w	r3, r3, #8
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d063      	beq.n	800d770 <f_open+0x1d4>
				dw = GET_FATTIME();
 800d6a8:	f7fd fcfc 	bl	800b0a4 <get_fattime>
 800d6ac:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b0:	330e      	adds	r3, #14
 800d6b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f7fd fe47 	bl	800b348 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6bc:	3316      	adds	r3, #22
 800d6be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f7fd fe41 	bl	800b348 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6c8:	330b      	adds	r3, #11
 800d6ca:	2220      	movs	r2, #32
 800d6cc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d6ce:	697b      	ldr	r3, [r7, #20]
 800d6d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d6d2:	4611      	mov	r1, r2
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f7fe fe17 	bl	800c308 <ld_clust>
 800d6da:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f7fe fe2f 	bl	800c346 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ea:	331c      	adds	r3, #28
 800d6ec:	2100      	movs	r1, #0
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f7fd fe2a 	bl	800b348 <st_dword>
					fs->wflag = 1;
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	2201      	movs	r2, #1
 800d6f8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d6fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d037      	beq.n	800d770 <f_open+0x1d4>
						dw = fs->winsect;
 800d700:	697b      	ldr	r3, [r7, #20]
 800d702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d704:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800d706:	f107 0318 	add.w	r3, r7, #24
 800d70a:	2200      	movs	r2, #0
 800d70c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d70e:	4618      	mov	r0, r3
 800d710:	f7fe fb1f 	bl	800bd52 <remove_chain>
 800d714:	4603      	mov	r3, r0
 800d716:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800d71a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d126      	bne.n	800d770 <f_open+0x1d4>
							res = move_window(fs, dw);
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d726:	4618      	mov	r0, r3
 800d728:	f7fe f868 	bl	800b7fc <move_window>
 800d72c:	4603      	mov	r3, r0
 800d72e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d732:	697b      	ldr	r3, [r7, #20]
 800d734:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d736:	3a01      	subs	r2, #1
 800d738:	615a      	str	r2, [r3, #20]
 800d73a:	e019      	b.n	800d770 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d73c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d740:	2b00      	cmp	r3, #0
 800d742:	d115      	bne.n	800d770 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d744:	7fbb      	ldrb	r3, [r7, #30]
 800d746:	f003 0310 	and.w	r3, r3, #16
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d003      	beq.n	800d756 <f_open+0x1ba>
					res = FR_NO_FILE;
 800d74e:	2304      	movs	r3, #4
 800d750:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d754:	e00c      	b.n	800d770 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d756:	79fb      	ldrb	r3, [r7, #7]
 800d758:	f003 0302 	and.w	r3, r3, #2
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d007      	beq.n	800d770 <f_open+0x1d4>
 800d760:	7fbb      	ldrb	r3, [r7, #30]
 800d762:	f003 0301 	and.w	r3, r3, #1
 800d766:	2b00      	cmp	r3, #0
 800d768:	d002      	beq.n	800d770 <f_open+0x1d4>
						res = FR_DENIED;
 800d76a:	2307      	movs	r3, #7
 800d76c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800d770:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d774:	2b00      	cmp	r3, #0
 800d776:	d128      	bne.n	800d7ca <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d778:	79fb      	ldrb	r3, [r7, #7]
 800d77a:	f003 0308 	and.w	r3, r3, #8
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d003      	beq.n	800d78a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d782:	79fb      	ldrb	r3, [r7, #7]
 800d784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d788:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d792:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d798:	79fb      	ldrb	r3, [r7, #7]
 800d79a:	f023 0301 	bic.w	r3, r3, #1
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	bf14      	ite	ne
 800d7a2:	2301      	movne	r3, #1
 800d7a4:	2300      	moveq	r3, #0
 800d7a6:	b2db      	uxtb	r3, r3
 800d7a8:	461a      	mov	r2, r3
 800d7aa:	f107 0318 	add.w	r3, r7, #24
 800d7ae:	4611      	mov	r1, r2
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f7fd fef1 	bl	800b598 <inc_lock>
 800d7b6:	4602      	mov	r2, r0
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	691b      	ldr	r3, [r3, #16]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d102      	bne.n	800d7ca <f_open+0x22e>
 800d7c4:	2302      	movs	r3, #2
 800d7c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d7ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	f040 80a3 	bne.w	800d91a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d7d4:	697b      	ldr	r3, [r7, #20]
 800d7d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d7d8:	4611      	mov	r1, r2
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f7fe fd94 	bl	800c308 <ld_clust>
 800d7e0:	4602      	mov	r2, r0
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e8:	331c      	adds	r3, #28
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f7fd fd6e 	bl	800b2cc <ld_dword>
 800d7f0:	4602      	mov	r2, r0
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d7fc:	697a      	ldr	r2, [r7, #20]
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	88da      	ldrh	r2, [r3, #6]
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	79fa      	ldrb	r2, [r7, #7]
 800d80e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	2200      	movs	r2, #0
 800d814:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	2200      	movs	r2, #0
 800d81a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	2200      	movs	r2, #0
 800d820:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	3330      	adds	r3, #48	; 0x30
 800d826:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d82a:	2100      	movs	r1, #0
 800d82c:	4618      	mov	r0, r3
 800d82e:	f7fd fdd8 	bl	800b3e2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d832:	79fb      	ldrb	r3, [r7, #7]
 800d834:	f003 0320 	and.w	r3, r3, #32
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d06e      	beq.n	800d91a <f_open+0x37e>
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	68db      	ldr	r3, [r3, #12]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d06a      	beq.n	800d91a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	68da      	ldr	r2, [r3, #12]
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d84c:	697b      	ldr	r3, [r7, #20]
 800d84e:	895b      	ldrh	r3, [r3, #10]
 800d850:	461a      	mov	r2, r3
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	899b      	ldrh	r3, [r3, #12]
 800d856:	fb02 f303 	mul.w	r3, r2, r3
 800d85a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	689b      	ldr	r3, [r3, #8]
 800d860:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	68db      	ldr	r3, [r3, #12]
 800d866:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d868:	e016      	b.n	800d898 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d86e:	4618      	mov	r0, r3
 800d870:	f7fe f881 	bl	800b976 <get_fat>
 800d874:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800d876:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d878:	2b01      	cmp	r3, #1
 800d87a:	d802      	bhi.n	800d882 <f_open+0x2e6>
 800d87c:	2302      	movs	r3, #2
 800d87e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d882:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d884:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d888:	d102      	bne.n	800d890 <f_open+0x2f4>
 800d88a:	2301      	movs	r3, #1
 800d88c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d890:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d894:	1ad3      	subs	r3, r2, r3
 800d896:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d898:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d103      	bne.n	800d8a8 <f_open+0x30c>
 800d8a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d8a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8a4:	429a      	cmp	r2, r3
 800d8a6:	d8e0      	bhi.n	800d86a <f_open+0x2ce>
				}
				fp->clust = clst;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d8ac:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d8ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d131      	bne.n	800d91a <f_open+0x37e>
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	899b      	ldrh	r3, [r3, #12]
 800d8ba:	461a      	mov	r2, r3
 800d8bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8be:	fbb3 f1f2 	udiv	r1, r3, r2
 800d8c2:	fb01 f202 	mul.w	r2, r1, r2
 800d8c6:	1a9b      	subs	r3, r3, r2
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d026      	beq.n	800d91a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d8cc:	697b      	ldr	r3, [r7, #20]
 800d8ce:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7fe f831 	bl	800b938 <clust2sect>
 800d8d6:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d8d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d103      	bne.n	800d8e6 <f_open+0x34a>
						res = FR_INT_ERR;
 800d8de:	2302      	movs	r3, #2
 800d8e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d8e4:	e019      	b.n	800d91a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	899b      	ldrh	r3, [r3, #12]
 800d8ea:	461a      	mov	r2, r3
 800d8ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8ee:	fbb3 f2f2 	udiv	r2, r3, r2
 800d8f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8f4:	441a      	add	r2, r3
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	7858      	ldrb	r0, [r3, #1]
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	6a1a      	ldr	r2, [r3, #32]
 800d908:	2301      	movs	r3, #1
 800d90a:	f7fd fc69 	bl	800b1e0 <disk_read>
 800d90e:	4603      	mov	r3, r0
 800d910:	2b00      	cmp	r3, #0
 800d912:	d002      	beq.n	800d91a <f_open+0x37e>
 800d914:	2301      	movs	r3, #1
 800d916:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d91a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d002      	beq.n	800d928 <f_open+0x38c>
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	2200      	movs	r2, #0
 800d926:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d928:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d92c:	4618      	mov	r0, r3
 800d92e:	3768      	adds	r7, #104	; 0x68
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}

0800d934 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b08c      	sub	sp, #48	; 0x30
 800d938:	af00      	add	r7, sp, #0
 800d93a:	60f8      	str	r0, [r7, #12]
 800d93c:	60b9      	str	r1, [r7, #8]
 800d93e:	607a      	str	r2, [r7, #4]
 800d940:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	2200      	movs	r2, #0
 800d94a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	f107 0210 	add.w	r2, r7, #16
 800d952:	4611      	mov	r1, r2
 800d954:	4618      	mov	r0, r3
 800d956:	f7ff fda5 	bl	800d4a4 <validate>
 800d95a:	4603      	mov	r3, r0
 800d95c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d960:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d964:	2b00      	cmp	r3, #0
 800d966:	d107      	bne.n	800d978 <f_write+0x44>
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	7d5b      	ldrb	r3, [r3, #21]
 800d96c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d970:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d974:	2b00      	cmp	r3, #0
 800d976:	d002      	beq.n	800d97e <f_write+0x4a>
 800d978:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d97c:	e16a      	b.n	800dc54 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	7d1b      	ldrb	r3, [r3, #20]
 800d982:	f003 0302 	and.w	r3, r3, #2
 800d986:	2b00      	cmp	r3, #0
 800d988:	d101      	bne.n	800d98e <f_write+0x5a>
 800d98a:	2307      	movs	r3, #7
 800d98c:	e162      	b.n	800dc54 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	699a      	ldr	r2, [r3, #24]
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	441a      	add	r2, r3
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	699b      	ldr	r3, [r3, #24]
 800d99a:	429a      	cmp	r2, r3
 800d99c:	f080 814c 	bcs.w	800dc38 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	699b      	ldr	r3, [r3, #24]
 800d9a4:	43db      	mvns	r3, r3
 800d9a6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d9a8:	e146      	b.n	800dc38 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	699b      	ldr	r3, [r3, #24]
 800d9ae:	693a      	ldr	r2, [r7, #16]
 800d9b0:	8992      	ldrh	r2, [r2, #12]
 800d9b2:	fbb3 f1f2 	udiv	r1, r3, r2
 800d9b6:	fb01 f202 	mul.w	r2, r1, r2
 800d9ba:	1a9b      	subs	r3, r3, r2
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	f040 80f1 	bne.w	800dba4 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	699b      	ldr	r3, [r3, #24]
 800d9c6:	693a      	ldr	r2, [r7, #16]
 800d9c8:	8992      	ldrh	r2, [r2, #12]
 800d9ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800d9ce:	693a      	ldr	r2, [r7, #16]
 800d9d0:	8952      	ldrh	r2, [r2, #10]
 800d9d2:	3a01      	subs	r2, #1
 800d9d4:	4013      	ands	r3, r2
 800d9d6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d9d8:	69bb      	ldr	r3, [r7, #24]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d143      	bne.n	800da66 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	699b      	ldr	r3, [r3, #24]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d10c      	bne.n	800da00 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	689b      	ldr	r3, [r3, #8]
 800d9ea:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d11a      	bne.n	800da28 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	2100      	movs	r1, #0
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f7fe fa10 	bl	800be1c <create_chain>
 800d9fc:	62b8      	str	r0, [r7, #40]	; 0x28
 800d9fe:	e013      	b.n	800da28 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da04:	2b00      	cmp	r3, #0
 800da06:	d007      	beq.n	800da18 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	699b      	ldr	r3, [r3, #24]
 800da0c:	4619      	mov	r1, r3
 800da0e:	68f8      	ldr	r0, [r7, #12]
 800da10:	f7fe fa9c 	bl	800bf4c <clmt_clust>
 800da14:	62b8      	str	r0, [r7, #40]	; 0x28
 800da16:	e007      	b.n	800da28 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800da18:	68fa      	ldr	r2, [r7, #12]
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	69db      	ldr	r3, [r3, #28]
 800da1e:	4619      	mov	r1, r3
 800da20:	4610      	mov	r0, r2
 800da22:	f7fe f9fb 	bl	800be1c <create_chain>
 800da26:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800da28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	f000 8109 	beq.w	800dc42 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800da30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da32:	2b01      	cmp	r3, #1
 800da34:	d104      	bne.n	800da40 <f_write+0x10c>
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	2202      	movs	r2, #2
 800da3a:	755a      	strb	r2, [r3, #21]
 800da3c:	2302      	movs	r3, #2
 800da3e:	e109      	b.n	800dc54 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800da40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da46:	d104      	bne.n	800da52 <f_write+0x11e>
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	2201      	movs	r2, #1
 800da4c:	755a      	strb	r2, [r3, #21]
 800da4e:	2301      	movs	r3, #1
 800da50:	e100      	b.n	800dc54 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da56:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	689b      	ldr	r3, [r3, #8]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d102      	bne.n	800da66 <f_write+0x132>
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da64:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	7d1b      	ldrb	r3, [r3, #20]
 800da6a:	b25b      	sxtb	r3, r3
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	da18      	bge.n	800daa2 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800da70:	693b      	ldr	r3, [r7, #16]
 800da72:	7858      	ldrb	r0, [r3, #1]
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	6a1a      	ldr	r2, [r3, #32]
 800da7e:	2301      	movs	r3, #1
 800da80:	f7fd fbce 	bl	800b220 <disk_write>
 800da84:	4603      	mov	r3, r0
 800da86:	2b00      	cmp	r3, #0
 800da88:	d004      	beq.n	800da94 <f_write+0x160>
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	2201      	movs	r2, #1
 800da8e:	755a      	strb	r2, [r3, #21]
 800da90:	2301      	movs	r3, #1
 800da92:	e0df      	b.n	800dc54 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	7d1b      	ldrb	r3, [r3, #20]
 800da98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da9c:	b2da      	uxtb	r2, r3
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800daa2:	693a      	ldr	r2, [r7, #16]
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	69db      	ldr	r3, [r3, #28]
 800daa8:	4619      	mov	r1, r3
 800daaa:	4610      	mov	r0, r2
 800daac:	f7fd ff44 	bl	800b938 <clust2sect>
 800dab0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d104      	bne.n	800dac2 <f_write+0x18e>
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	2202      	movs	r2, #2
 800dabc:	755a      	strb	r2, [r3, #21]
 800dabe:	2302      	movs	r3, #2
 800dac0:	e0c8      	b.n	800dc54 <f_write+0x320>
			sect += csect;
 800dac2:	697a      	ldr	r2, [r7, #20]
 800dac4:	69bb      	ldr	r3, [r7, #24]
 800dac6:	4413      	add	r3, r2
 800dac8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800daca:	693b      	ldr	r3, [r7, #16]
 800dacc:	899b      	ldrh	r3, [r3, #12]
 800dace:	461a      	mov	r2, r3
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	fbb3 f3f2 	udiv	r3, r3, r2
 800dad6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800dad8:	6a3b      	ldr	r3, [r7, #32]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d043      	beq.n	800db66 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800dade:	69ba      	ldr	r2, [r7, #24]
 800dae0:	6a3b      	ldr	r3, [r7, #32]
 800dae2:	4413      	add	r3, r2
 800dae4:	693a      	ldr	r2, [r7, #16]
 800dae6:	8952      	ldrh	r2, [r2, #10]
 800dae8:	4293      	cmp	r3, r2
 800daea:	d905      	bls.n	800daf8 <f_write+0x1c4>
					cc = fs->csize - csect;
 800daec:	693b      	ldr	r3, [r7, #16]
 800daee:	895b      	ldrh	r3, [r3, #10]
 800daf0:	461a      	mov	r2, r3
 800daf2:	69bb      	ldr	r3, [r7, #24]
 800daf4:	1ad3      	subs	r3, r2, r3
 800daf6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800daf8:	693b      	ldr	r3, [r7, #16]
 800dafa:	7858      	ldrb	r0, [r3, #1]
 800dafc:	6a3b      	ldr	r3, [r7, #32]
 800dafe:	697a      	ldr	r2, [r7, #20]
 800db00:	69f9      	ldr	r1, [r7, #28]
 800db02:	f7fd fb8d 	bl	800b220 <disk_write>
 800db06:	4603      	mov	r3, r0
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d004      	beq.n	800db16 <f_write+0x1e2>
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	2201      	movs	r2, #1
 800db10:	755a      	strb	r2, [r3, #21]
 800db12:	2301      	movs	r3, #1
 800db14:	e09e      	b.n	800dc54 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	6a1a      	ldr	r2, [r3, #32]
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	1ad3      	subs	r3, r2, r3
 800db1e:	6a3a      	ldr	r2, [r7, #32]
 800db20:	429a      	cmp	r2, r3
 800db22:	d918      	bls.n	800db56 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	6a1a      	ldr	r2, [r3, #32]
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	1ad3      	subs	r3, r2, r3
 800db32:	693a      	ldr	r2, [r7, #16]
 800db34:	8992      	ldrh	r2, [r2, #12]
 800db36:	fb02 f303 	mul.w	r3, r2, r3
 800db3a:	69fa      	ldr	r2, [r7, #28]
 800db3c:	18d1      	adds	r1, r2, r3
 800db3e:	693b      	ldr	r3, [r7, #16]
 800db40:	899b      	ldrh	r3, [r3, #12]
 800db42:	461a      	mov	r2, r3
 800db44:	f7fd fc2c 	bl	800b3a0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	7d1b      	ldrb	r3, [r3, #20]
 800db4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db50:	b2da      	uxtb	r2, r3
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800db56:	693b      	ldr	r3, [r7, #16]
 800db58:	899b      	ldrh	r3, [r3, #12]
 800db5a:	461a      	mov	r2, r3
 800db5c:	6a3b      	ldr	r3, [r7, #32]
 800db5e:	fb02 f303 	mul.w	r3, r2, r3
 800db62:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800db64:	e04b      	b.n	800dbfe <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	6a1b      	ldr	r3, [r3, #32]
 800db6a:	697a      	ldr	r2, [r7, #20]
 800db6c:	429a      	cmp	r2, r3
 800db6e:	d016      	beq.n	800db9e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	699a      	ldr	r2, [r3, #24]
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800db78:	429a      	cmp	r2, r3
 800db7a:	d210      	bcs.n	800db9e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	7858      	ldrb	r0, [r3, #1]
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800db86:	2301      	movs	r3, #1
 800db88:	697a      	ldr	r2, [r7, #20]
 800db8a:	f7fd fb29 	bl	800b1e0 <disk_read>
 800db8e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800db90:	2b00      	cmp	r3, #0
 800db92:	d004      	beq.n	800db9e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	2201      	movs	r2, #1
 800db98:	755a      	strb	r2, [r3, #21]
 800db9a:	2301      	movs	r3, #1
 800db9c:	e05a      	b.n	800dc54 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	697a      	ldr	r2, [r7, #20]
 800dba2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	899b      	ldrh	r3, [r3, #12]
 800dba8:	4618      	mov	r0, r3
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	699b      	ldr	r3, [r3, #24]
 800dbae:	693a      	ldr	r2, [r7, #16]
 800dbb0:	8992      	ldrh	r2, [r2, #12]
 800dbb2:	fbb3 f1f2 	udiv	r1, r3, r2
 800dbb6:	fb01 f202 	mul.w	r2, r1, r2
 800dbba:	1a9b      	subs	r3, r3, r2
 800dbbc:	1ac3      	subs	r3, r0, r3
 800dbbe:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800dbc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d901      	bls.n	800dbcc <f_write+0x298>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	699b      	ldr	r3, [r3, #24]
 800dbd6:	693a      	ldr	r2, [r7, #16]
 800dbd8:	8992      	ldrh	r2, [r2, #12]
 800dbda:	fbb3 f0f2 	udiv	r0, r3, r2
 800dbde:	fb00 f202 	mul.w	r2, r0, r2
 800dbe2:	1a9b      	subs	r3, r3, r2
 800dbe4:	440b      	add	r3, r1
 800dbe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbe8:	69f9      	ldr	r1, [r7, #28]
 800dbea:	4618      	mov	r0, r3
 800dbec:	f7fd fbd8 	bl	800b3a0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	7d1b      	ldrb	r3, [r3, #20]
 800dbf4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dbf8:	b2da      	uxtb	r2, r3
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800dbfe:	69fa      	ldr	r2, [r7, #28]
 800dc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc02:	4413      	add	r3, r2
 800dc04:	61fb      	str	r3, [r7, #28]
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	699a      	ldr	r2, [r3, #24]
 800dc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc0c:	441a      	add	r2, r3
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	619a      	str	r2, [r3, #24]
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	68da      	ldr	r2, [r3, #12]
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	699b      	ldr	r3, [r3, #24]
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	bf38      	it	cc
 800dc1e:	461a      	movcc	r2, r3
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	60da      	str	r2, [r3, #12]
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	681a      	ldr	r2, [r3, #0]
 800dc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc2a:	441a      	add	r2, r3
 800dc2c:	683b      	ldr	r3, [r7, #0]
 800dc2e:	601a      	str	r2, [r3, #0]
 800dc30:	687a      	ldr	r2, [r7, #4]
 800dc32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc34:	1ad3      	subs	r3, r2, r3
 800dc36:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	f47f aeb5 	bne.w	800d9aa <f_write+0x76>
 800dc40:	e000      	b.n	800dc44 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800dc42:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	7d1b      	ldrb	r3, [r3, #20]
 800dc48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc4c:	b2da      	uxtb	r2, r3
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800dc52:	2300      	movs	r3, #0
}
 800dc54:	4618      	mov	r0, r3
 800dc56:	3730      	adds	r7, #48	; 0x30
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}

0800dc5c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b086      	sub	sp, #24
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f107 0208 	add.w	r2, r7, #8
 800dc6a:	4611      	mov	r1, r2
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f7ff fc19 	bl	800d4a4 <validate>
 800dc72:	4603      	mov	r3, r0
 800dc74:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dc76:	7dfb      	ldrb	r3, [r7, #23]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d168      	bne.n	800dd4e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	7d1b      	ldrb	r3, [r3, #20]
 800dc80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d062      	beq.n	800dd4e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	7d1b      	ldrb	r3, [r3, #20]
 800dc8c:	b25b      	sxtb	r3, r3
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	da15      	bge.n	800dcbe <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	7858      	ldrb	r0, [r3, #1]
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6a1a      	ldr	r2, [r3, #32]
 800dca0:	2301      	movs	r3, #1
 800dca2:	f7fd fabd 	bl	800b220 <disk_write>
 800dca6:	4603      	mov	r3, r0
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d001      	beq.n	800dcb0 <f_sync+0x54>
 800dcac:	2301      	movs	r3, #1
 800dcae:	e04f      	b.n	800dd50 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	7d1b      	ldrb	r3, [r3, #20]
 800dcb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dcb8:	b2da      	uxtb	r2, r3
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800dcbe:	f7fd f9f1 	bl	800b0a4 <get_fattime>
 800dcc2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800dcc4:	68ba      	ldr	r2, [r7, #8]
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcca:	4619      	mov	r1, r3
 800dccc:	4610      	mov	r0, r2
 800dcce:	f7fd fd95 	bl	800b7fc <move_window>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800dcd6:	7dfb      	ldrb	r3, [r7, #23]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d138      	bne.n	800dd4e <f_sync+0xf2>
					dir = fp->dir_ptr;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dce0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	330b      	adds	r3, #11
 800dce6:	781a      	ldrb	r2, [r3, #0]
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	330b      	adds	r3, #11
 800dcec:	f042 0220 	orr.w	r2, r2, #32
 800dcf0:	b2d2      	uxtb	r2, r2
 800dcf2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6818      	ldr	r0, [r3, #0]
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	689b      	ldr	r3, [r3, #8]
 800dcfc:	461a      	mov	r2, r3
 800dcfe:	68f9      	ldr	r1, [r7, #12]
 800dd00:	f7fe fb21 	bl	800c346 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	f103 021c 	add.w	r2, r3, #28
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	68db      	ldr	r3, [r3, #12]
 800dd0e:	4619      	mov	r1, r3
 800dd10:	4610      	mov	r0, r2
 800dd12:	f7fd fb19 	bl	800b348 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	3316      	adds	r3, #22
 800dd1a:	6939      	ldr	r1, [r7, #16]
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f7fd fb13 	bl	800b348 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	3312      	adds	r3, #18
 800dd26:	2100      	movs	r1, #0
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f7fd faf2 	bl	800b312 <st_word>
					fs->wflag = 1;
 800dd2e:	68bb      	ldr	r3, [r7, #8]
 800dd30:	2201      	movs	r2, #1
 800dd32:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	4618      	mov	r0, r3
 800dd38:	f7fd fd8e 	bl	800b858 <sync_fs>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	7d1b      	ldrb	r3, [r3, #20]
 800dd44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dd48:	b2da      	uxtb	r2, r3
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800dd4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd50:	4618      	mov	r0, r3
 800dd52:	3718      	adds	r7, #24
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}

0800dd58 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b084      	sub	sp, #16
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f7ff ff7b 	bl	800dc5c <f_sync>
 800dd66:	4603      	mov	r3, r0
 800dd68:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800dd6a:	7bfb      	ldrb	r3, [r7, #15]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d118      	bne.n	800dda2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	f107 0208 	add.w	r2, r7, #8
 800dd76:	4611      	mov	r1, r2
 800dd78:	4618      	mov	r0, r3
 800dd7a:	f7ff fb93 	bl	800d4a4 <validate>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dd82:	7bfb      	ldrb	r3, [r7, #15]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d10c      	bne.n	800dda2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	691b      	ldr	r3, [r3, #16]
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f7fd fc91 	bl	800b6b4 <dec_lock>
 800dd92:	4603      	mov	r3, r0
 800dd94:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800dd96:	7bfb      	ldrb	r3, [r7, #15]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d102      	bne.n	800dda2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800dda2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	3710      	adds	r7, #16
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}

0800ddac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ddac:	b480      	push	{r7}
 800ddae:	b087      	sub	sp, #28
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	60f8      	str	r0, [r7, #12]
 800ddb4:	60b9      	str	r1, [r7, #8]
 800ddb6:	4613      	mov	r3, r2
 800ddb8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ddba:	2301      	movs	r3, #1
 800ddbc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ddc2:	4b1f      	ldr	r3, [pc, #124]	; (800de40 <FATFS_LinkDriverEx+0x94>)
 800ddc4:	7a5b      	ldrb	r3, [r3, #9]
 800ddc6:	b2db      	uxtb	r3, r3
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d131      	bne.n	800de30 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ddcc:	4b1c      	ldr	r3, [pc, #112]	; (800de40 <FATFS_LinkDriverEx+0x94>)
 800ddce:	7a5b      	ldrb	r3, [r3, #9]
 800ddd0:	b2db      	uxtb	r3, r3
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	4b1a      	ldr	r3, [pc, #104]	; (800de40 <FATFS_LinkDriverEx+0x94>)
 800ddd6:	2100      	movs	r1, #0
 800ddd8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ddda:	4b19      	ldr	r3, [pc, #100]	; (800de40 <FATFS_LinkDriverEx+0x94>)
 800dddc:	7a5b      	ldrb	r3, [r3, #9]
 800ddde:	b2db      	uxtb	r3, r3
 800dde0:	4a17      	ldr	r2, [pc, #92]	; (800de40 <FATFS_LinkDriverEx+0x94>)
 800dde2:	009b      	lsls	r3, r3, #2
 800dde4:	4413      	add	r3, r2
 800dde6:	68fa      	ldr	r2, [r7, #12]
 800dde8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ddea:	4b15      	ldr	r3, [pc, #84]	; (800de40 <FATFS_LinkDriverEx+0x94>)
 800ddec:	7a5b      	ldrb	r3, [r3, #9]
 800ddee:	b2db      	uxtb	r3, r3
 800ddf0:	461a      	mov	r2, r3
 800ddf2:	4b13      	ldr	r3, [pc, #76]	; (800de40 <FATFS_LinkDriverEx+0x94>)
 800ddf4:	4413      	add	r3, r2
 800ddf6:	79fa      	ldrb	r2, [r7, #7]
 800ddf8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ddfa:	4b11      	ldr	r3, [pc, #68]	; (800de40 <FATFS_LinkDriverEx+0x94>)
 800ddfc:	7a5b      	ldrb	r3, [r3, #9]
 800ddfe:	b2db      	uxtb	r3, r3
 800de00:	1c5a      	adds	r2, r3, #1
 800de02:	b2d1      	uxtb	r1, r2
 800de04:	4a0e      	ldr	r2, [pc, #56]	; (800de40 <FATFS_LinkDriverEx+0x94>)
 800de06:	7251      	strb	r1, [r2, #9]
 800de08:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800de0a:	7dbb      	ldrb	r3, [r7, #22]
 800de0c:	3330      	adds	r3, #48	; 0x30
 800de0e:	b2da      	uxtb	r2, r3
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	3301      	adds	r3, #1
 800de18:	223a      	movs	r2, #58	; 0x3a
 800de1a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	3302      	adds	r3, #2
 800de20:	222f      	movs	r2, #47	; 0x2f
 800de22:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	3303      	adds	r3, #3
 800de28:	2200      	movs	r2, #0
 800de2a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800de2c:	2300      	movs	r3, #0
 800de2e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800de30:	7dfb      	ldrb	r3, [r7, #23]
}
 800de32:	4618      	mov	r0, r3
 800de34:	371c      	adds	r7, #28
 800de36:	46bd      	mov	sp, r7
 800de38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3c:	4770      	bx	lr
 800de3e:	bf00      	nop
 800de40:	200027d4 	.word	0x200027d4

0800de44 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b082      	sub	sp, #8
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
 800de4c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800de4e:	2200      	movs	r2, #0
 800de50:	6839      	ldr	r1, [r7, #0]
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	f7ff ffaa 	bl	800ddac <FATFS_LinkDriverEx>
 800de58:	4603      	mov	r3, r0
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	3708      	adds	r7, #8
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}
	...

0800de64 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800de64:	b480      	push	{r7}
 800de66:	b085      	sub	sp, #20
 800de68:	af00      	add	r7, sp, #0
 800de6a:	4603      	mov	r3, r0
 800de6c:	6039      	str	r1, [r7, #0]
 800de6e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800de70:	88fb      	ldrh	r3, [r7, #6]
 800de72:	2b7f      	cmp	r3, #127	; 0x7f
 800de74:	d802      	bhi.n	800de7c <ff_convert+0x18>
		c = chr;
 800de76:	88fb      	ldrh	r3, [r7, #6]
 800de78:	81fb      	strh	r3, [r7, #14]
 800de7a:	e025      	b.n	800dec8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d00b      	beq.n	800de9a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800de82:	88fb      	ldrh	r3, [r7, #6]
 800de84:	2bff      	cmp	r3, #255	; 0xff
 800de86:	d805      	bhi.n	800de94 <ff_convert+0x30>
 800de88:	88fb      	ldrh	r3, [r7, #6]
 800de8a:	3b80      	subs	r3, #128	; 0x80
 800de8c:	4a12      	ldr	r2, [pc, #72]	; (800ded8 <ff_convert+0x74>)
 800de8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de92:	e000      	b.n	800de96 <ff_convert+0x32>
 800de94:	2300      	movs	r3, #0
 800de96:	81fb      	strh	r3, [r7, #14]
 800de98:	e016      	b.n	800dec8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800de9a:	2300      	movs	r3, #0
 800de9c:	81fb      	strh	r3, [r7, #14]
 800de9e:	e009      	b.n	800deb4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800dea0:	89fb      	ldrh	r3, [r7, #14]
 800dea2:	4a0d      	ldr	r2, [pc, #52]	; (800ded8 <ff_convert+0x74>)
 800dea4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dea8:	88fa      	ldrh	r2, [r7, #6]
 800deaa:	429a      	cmp	r2, r3
 800deac:	d006      	beq.n	800debc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800deae:	89fb      	ldrh	r3, [r7, #14]
 800deb0:	3301      	adds	r3, #1
 800deb2:	81fb      	strh	r3, [r7, #14]
 800deb4:	89fb      	ldrh	r3, [r7, #14]
 800deb6:	2b7f      	cmp	r3, #127	; 0x7f
 800deb8:	d9f2      	bls.n	800dea0 <ff_convert+0x3c>
 800deba:	e000      	b.n	800debe <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800debc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800debe:	89fb      	ldrh	r3, [r7, #14]
 800dec0:	3380      	adds	r3, #128	; 0x80
 800dec2:	b29b      	uxth	r3, r3
 800dec4:	b2db      	uxtb	r3, r3
 800dec6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800dec8:	89fb      	ldrh	r3, [r7, #14]
}
 800deca:	4618      	mov	r0, r3
 800decc:	3714      	adds	r7, #20
 800dece:	46bd      	mov	sp, r7
 800ded0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded4:	4770      	bx	lr
 800ded6:	bf00      	nop
 800ded8:	0800eb40 	.word	0x0800eb40

0800dedc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800dedc:	b480      	push	{r7}
 800dede:	b087      	sub	sp, #28
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	4603      	mov	r3, r0
 800dee4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800dee6:	88fb      	ldrh	r3, [r7, #6]
 800dee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800deec:	d201      	bcs.n	800def2 <ff_wtoupper+0x16>
 800deee:	4b3e      	ldr	r3, [pc, #248]	; (800dfe8 <ff_wtoupper+0x10c>)
 800def0:	e000      	b.n	800def4 <ff_wtoupper+0x18>
 800def2:	4b3e      	ldr	r3, [pc, #248]	; (800dfec <ff_wtoupper+0x110>)
 800def4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	1c9a      	adds	r2, r3, #2
 800defa:	617a      	str	r2, [r7, #20]
 800defc:	881b      	ldrh	r3, [r3, #0]
 800defe:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800df00:	8a7b      	ldrh	r3, [r7, #18]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d068      	beq.n	800dfd8 <ff_wtoupper+0xfc>
 800df06:	88fa      	ldrh	r2, [r7, #6]
 800df08:	8a7b      	ldrh	r3, [r7, #18]
 800df0a:	429a      	cmp	r2, r3
 800df0c:	d364      	bcc.n	800dfd8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	1c9a      	adds	r2, r3, #2
 800df12:	617a      	str	r2, [r7, #20]
 800df14:	881b      	ldrh	r3, [r3, #0]
 800df16:	823b      	strh	r3, [r7, #16]
 800df18:	8a3b      	ldrh	r3, [r7, #16]
 800df1a:	0a1b      	lsrs	r3, r3, #8
 800df1c:	81fb      	strh	r3, [r7, #14]
 800df1e:	8a3b      	ldrh	r3, [r7, #16]
 800df20:	b2db      	uxtb	r3, r3
 800df22:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800df24:	88fa      	ldrh	r2, [r7, #6]
 800df26:	8a79      	ldrh	r1, [r7, #18]
 800df28:	8a3b      	ldrh	r3, [r7, #16]
 800df2a:	440b      	add	r3, r1
 800df2c:	429a      	cmp	r2, r3
 800df2e:	da49      	bge.n	800dfc4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800df30:	89fb      	ldrh	r3, [r7, #14]
 800df32:	2b08      	cmp	r3, #8
 800df34:	d84f      	bhi.n	800dfd6 <ff_wtoupper+0xfa>
 800df36:	a201      	add	r2, pc, #4	; (adr r2, 800df3c <ff_wtoupper+0x60>)
 800df38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df3c:	0800df61 	.word	0x0800df61
 800df40:	0800df73 	.word	0x0800df73
 800df44:	0800df89 	.word	0x0800df89
 800df48:	0800df91 	.word	0x0800df91
 800df4c:	0800df99 	.word	0x0800df99
 800df50:	0800dfa1 	.word	0x0800dfa1
 800df54:	0800dfa9 	.word	0x0800dfa9
 800df58:	0800dfb1 	.word	0x0800dfb1
 800df5c:	0800dfb9 	.word	0x0800dfb9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800df60:	88fa      	ldrh	r2, [r7, #6]
 800df62:	8a7b      	ldrh	r3, [r7, #18]
 800df64:	1ad3      	subs	r3, r2, r3
 800df66:	005b      	lsls	r3, r3, #1
 800df68:	697a      	ldr	r2, [r7, #20]
 800df6a:	4413      	add	r3, r2
 800df6c:	881b      	ldrh	r3, [r3, #0]
 800df6e:	80fb      	strh	r3, [r7, #6]
 800df70:	e027      	b.n	800dfc2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800df72:	88fa      	ldrh	r2, [r7, #6]
 800df74:	8a7b      	ldrh	r3, [r7, #18]
 800df76:	1ad3      	subs	r3, r2, r3
 800df78:	b29b      	uxth	r3, r3
 800df7a:	f003 0301 	and.w	r3, r3, #1
 800df7e:	b29b      	uxth	r3, r3
 800df80:	88fa      	ldrh	r2, [r7, #6]
 800df82:	1ad3      	subs	r3, r2, r3
 800df84:	80fb      	strh	r3, [r7, #6]
 800df86:	e01c      	b.n	800dfc2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800df88:	88fb      	ldrh	r3, [r7, #6]
 800df8a:	3b10      	subs	r3, #16
 800df8c:	80fb      	strh	r3, [r7, #6]
 800df8e:	e018      	b.n	800dfc2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800df90:	88fb      	ldrh	r3, [r7, #6]
 800df92:	3b20      	subs	r3, #32
 800df94:	80fb      	strh	r3, [r7, #6]
 800df96:	e014      	b.n	800dfc2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800df98:	88fb      	ldrh	r3, [r7, #6]
 800df9a:	3b30      	subs	r3, #48	; 0x30
 800df9c:	80fb      	strh	r3, [r7, #6]
 800df9e:	e010      	b.n	800dfc2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800dfa0:	88fb      	ldrh	r3, [r7, #6]
 800dfa2:	3b1a      	subs	r3, #26
 800dfa4:	80fb      	strh	r3, [r7, #6]
 800dfa6:	e00c      	b.n	800dfc2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800dfa8:	88fb      	ldrh	r3, [r7, #6]
 800dfaa:	3308      	adds	r3, #8
 800dfac:	80fb      	strh	r3, [r7, #6]
 800dfae:	e008      	b.n	800dfc2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800dfb0:	88fb      	ldrh	r3, [r7, #6]
 800dfb2:	3b50      	subs	r3, #80	; 0x50
 800dfb4:	80fb      	strh	r3, [r7, #6]
 800dfb6:	e004      	b.n	800dfc2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800dfb8:	88fb      	ldrh	r3, [r7, #6]
 800dfba:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800dfbe:	80fb      	strh	r3, [r7, #6]
 800dfc0:	bf00      	nop
			}
			break;
 800dfc2:	e008      	b.n	800dfd6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800dfc4:	89fb      	ldrh	r3, [r7, #14]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d195      	bne.n	800def6 <ff_wtoupper+0x1a>
 800dfca:	8a3b      	ldrh	r3, [r7, #16]
 800dfcc:	005b      	lsls	r3, r3, #1
 800dfce:	697a      	ldr	r2, [r7, #20]
 800dfd0:	4413      	add	r3, r2
 800dfd2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800dfd4:	e78f      	b.n	800def6 <ff_wtoupper+0x1a>
			break;
 800dfd6:	bf00      	nop
	}

	return chr;
 800dfd8:	88fb      	ldrh	r3, [r7, #6]
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	371c      	adds	r7, #28
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe4:	4770      	bx	lr
 800dfe6:	bf00      	nop
 800dfe8:	0800ec40 	.word	0x0800ec40
 800dfec:	0800ee34 	.word	0x0800ee34

0800dff0 <siprintf>:
 800dff0:	b40e      	push	{r1, r2, r3}
 800dff2:	b500      	push	{lr}
 800dff4:	b09c      	sub	sp, #112	; 0x70
 800dff6:	ab1d      	add	r3, sp, #116	; 0x74
 800dff8:	9002      	str	r0, [sp, #8]
 800dffa:	9006      	str	r0, [sp, #24]
 800dffc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e000:	4809      	ldr	r0, [pc, #36]	; (800e028 <siprintf+0x38>)
 800e002:	9107      	str	r1, [sp, #28]
 800e004:	9104      	str	r1, [sp, #16]
 800e006:	4909      	ldr	r1, [pc, #36]	; (800e02c <siprintf+0x3c>)
 800e008:	f853 2b04 	ldr.w	r2, [r3], #4
 800e00c:	9105      	str	r1, [sp, #20]
 800e00e:	6800      	ldr	r0, [r0, #0]
 800e010:	9301      	str	r3, [sp, #4]
 800e012:	a902      	add	r1, sp, #8
 800e014:	f000 f992 	bl	800e33c <_svfiprintf_r>
 800e018:	9b02      	ldr	r3, [sp, #8]
 800e01a:	2200      	movs	r2, #0
 800e01c:	701a      	strb	r2, [r3, #0]
 800e01e:	b01c      	add	sp, #112	; 0x70
 800e020:	f85d eb04 	ldr.w	lr, [sp], #4
 800e024:	b003      	add	sp, #12
 800e026:	4770      	bx	lr
 800e028:	20000130 	.word	0x20000130
 800e02c:	ffff0208 	.word	0xffff0208

0800e030 <memset>:
 800e030:	4402      	add	r2, r0
 800e032:	4603      	mov	r3, r0
 800e034:	4293      	cmp	r3, r2
 800e036:	d100      	bne.n	800e03a <memset+0xa>
 800e038:	4770      	bx	lr
 800e03a:	f803 1b01 	strb.w	r1, [r3], #1
 800e03e:	e7f9      	b.n	800e034 <memset+0x4>

0800e040 <__errno>:
 800e040:	4b01      	ldr	r3, [pc, #4]	; (800e048 <__errno+0x8>)
 800e042:	6818      	ldr	r0, [r3, #0]
 800e044:	4770      	bx	lr
 800e046:	bf00      	nop
 800e048:	20000130 	.word	0x20000130

0800e04c <__libc_init_array>:
 800e04c:	b570      	push	{r4, r5, r6, lr}
 800e04e:	4d0d      	ldr	r5, [pc, #52]	; (800e084 <__libc_init_array+0x38>)
 800e050:	4c0d      	ldr	r4, [pc, #52]	; (800e088 <__libc_init_array+0x3c>)
 800e052:	1b64      	subs	r4, r4, r5
 800e054:	10a4      	asrs	r4, r4, #2
 800e056:	2600      	movs	r6, #0
 800e058:	42a6      	cmp	r6, r4
 800e05a:	d109      	bne.n	800e070 <__libc_init_array+0x24>
 800e05c:	4d0b      	ldr	r5, [pc, #44]	; (800e08c <__libc_init_array+0x40>)
 800e05e:	4c0c      	ldr	r4, [pc, #48]	; (800e090 <__libc_init_array+0x44>)
 800e060:	f000 fc6a 	bl	800e938 <_init>
 800e064:	1b64      	subs	r4, r4, r5
 800e066:	10a4      	asrs	r4, r4, #2
 800e068:	2600      	movs	r6, #0
 800e06a:	42a6      	cmp	r6, r4
 800e06c:	d105      	bne.n	800e07a <__libc_init_array+0x2e>
 800e06e:	bd70      	pop	{r4, r5, r6, pc}
 800e070:	f855 3b04 	ldr.w	r3, [r5], #4
 800e074:	4798      	blx	r3
 800e076:	3601      	adds	r6, #1
 800e078:	e7ee      	b.n	800e058 <__libc_init_array+0xc>
 800e07a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e07e:	4798      	blx	r3
 800e080:	3601      	adds	r6, #1
 800e082:	e7f2      	b.n	800e06a <__libc_init_array+0x1e>
 800e084:	0800ef2c 	.word	0x0800ef2c
 800e088:	0800ef2c 	.word	0x0800ef2c
 800e08c:	0800ef2c 	.word	0x0800ef2c
 800e090:	0800ef30 	.word	0x0800ef30

0800e094 <__retarget_lock_acquire_recursive>:
 800e094:	4770      	bx	lr

0800e096 <__retarget_lock_release_recursive>:
 800e096:	4770      	bx	lr

0800e098 <_free_r>:
 800e098:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e09a:	2900      	cmp	r1, #0
 800e09c:	d044      	beq.n	800e128 <_free_r+0x90>
 800e09e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0a2:	9001      	str	r0, [sp, #4]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	f1a1 0404 	sub.w	r4, r1, #4
 800e0aa:	bfb8      	it	lt
 800e0ac:	18e4      	addlt	r4, r4, r3
 800e0ae:	f000 f8df 	bl	800e270 <__malloc_lock>
 800e0b2:	4a1e      	ldr	r2, [pc, #120]	; (800e12c <_free_r+0x94>)
 800e0b4:	9801      	ldr	r0, [sp, #4]
 800e0b6:	6813      	ldr	r3, [r2, #0]
 800e0b8:	b933      	cbnz	r3, 800e0c8 <_free_r+0x30>
 800e0ba:	6063      	str	r3, [r4, #4]
 800e0bc:	6014      	str	r4, [r2, #0]
 800e0be:	b003      	add	sp, #12
 800e0c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e0c4:	f000 b8da 	b.w	800e27c <__malloc_unlock>
 800e0c8:	42a3      	cmp	r3, r4
 800e0ca:	d908      	bls.n	800e0de <_free_r+0x46>
 800e0cc:	6825      	ldr	r5, [r4, #0]
 800e0ce:	1961      	adds	r1, r4, r5
 800e0d0:	428b      	cmp	r3, r1
 800e0d2:	bf01      	itttt	eq
 800e0d4:	6819      	ldreq	r1, [r3, #0]
 800e0d6:	685b      	ldreq	r3, [r3, #4]
 800e0d8:	1949      	addeq	r1, r1, r5
 800e0da:	6021      	streq	r1, [r4, #0]
 800e0dc:	e7ed      	b.n	800e0ba <_free_r+0x22>
 800e0de:	461a      	mov	r2, r3
 800e0e0:	685b      	ldr	r3, [r3, #4]
 800e0e2:	b10b      	cbz	r3, 800e0e8 <_free_r+0x50>
 800e0e4:	42a3      	cmp	r3, r4
 800e0e6:	d9fa      	bls.n	800e0de <_free_r+0x46>
 800e0e8:	6811      	ldr	r1, [r2, #0]
 800e0ea:	1855      	adds	r5, r2, r1
 800e0ec:	42a5      	cmp	r5, r4
 800e0ee:	d10b      	bne.n	800e108 <_free_r+0x70>
 800e0f0:	6824      	ldr	r4, [r4, #0]
 800e0f2:	4421      	add	r1, r4
 800e0f4:	1854      	adds	r4, r2, r1
 800e0f6:	42a3      	cmp	r3, r4
 800e0f8:	6011      	str	r1, [r2, #0]
 800e0fa:	d1e0      	bne.n	800e0be <_free_r+0x26>
 800e0fc:	681c      	ldr	r4, [r3, #0]
 800e0fe:	685b      	ldr	r3, [r3, #4]
 800e100:	6053      	str	r3, [r2, #4]
 800e102:	440c      	add	r4, r1
 800e104:	6014      	str	r4, [r2, #0]
 800e106:	e7da      	b.n	800e0be <_free_r+0x26>
 800e108:	d902      	bls.n	800e110 <_free_r+0x78>
 800e10a:	230c      	movs	r3, #12
 800e10c:	6003      	str	r3, [r0, #0]
 800e10e:	e7d6      	b.n	800e0be <_free_r+0x26>
 800e110:	6825      	ldr	r5, [r4, #0]
 800e112:	1961      	adds	r1, r4, r5
 800e114:	428b      	cmp	r3, r1
 800e116:	bf04      	itt	eq
 800e118:	6819      	ldreq	r1, [r3, #0]
 800e11a:	685b      	ldreq	r3, [r3, #4]
 800e11c:	6063      	str	r3, [r4, #4]
 800e11e:	bf04      	itt	eq
 800e120:	1949      	addeq	r1, r1, r5
 800e122:	6021      	streq	r1, [r4, #0]
 800e124:	6054      	str	r4, [r2, #4]
 800e126:	e7ca      	b.n	800e0be <_free_r+0x26>
 800e128:	b003      	add	sp, #12
 800e12a:	bd30      	pop	{r4, r5, pc}
 800e12c:	20002920 	.word	0x20002920

0800e130 <sbrk_aligned>:
 800e130:	b570      	push	{r4, r5, r6, lr}
 800e132:	4e0e      	ldr	r6, [pc, #56]	; (800e16c <sbrk_aligned+0x3c>)
 800e134:	460c      	mov	r4, r1
 800e136:	6831      	ldr	r1, [r6, #0]
 800e138:	4605      	mov	r5, r0
 800e13a:	b911      	cbnz	r1, 800e142 <sbrk_aligned+0x12>
 800e13c:	f000 fba6 	bl	800e88c <_sbrk_r>
 800e140:	6030      	str	r0, [r6, #0]
 800e142:	4621      	mov	r1, r4
 800e144:	4628      	mov	r0, r5
 800e146:	f000 fba1 	bl	800e88c <_sbrk_r>
 800e14a:	1c43      	adds	r3, r0, #1
 800e14c:	d00a      	beq.n	800e164 <sbrk_aligned+0x34>
 800e14e:	1cc4      	adds	r4, r0, #3
 800e150:	f024 0403 	bic.w	r4, r4, #3
 800e154:	42a0      	cmp	r0, r4
 800e156:	d007      	beq.n	800e168 <sbrk_aligned+0x38>
 800e158:	1a21      	subs	r1, r4, r0
 800e15a:	4628      	mov	r0, r5
 800e15c:	f000 fb96 	bl	800e88c <_sbrk_r>
 800e160:	3001      	adds	r0, #1
 800e162:	d101      	bne.n	800e168 <sbrk_aligned+0x38>
 800e164:	f04f 34ff 	mov.w	r4, #4294967295
 800e168:	4620      	mov	r0, r4
 800e16a:	bd70      	pop	{r4, r5, r6, pc}
 800e16c:	20002924 	.word	0x20002924

0800e170 <_malloc_r>:
 800e170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e174:	1ccd      	adds	r5, r1, #3
 800e176:	f025 0503 	bic.w	r5, r5, #3
 800e17a:	3508      	adds	r5, #8
 800e17c:	2d0c      	cmp	r5, #12
 800e17e:	bf38      	it	cc
 800e180:	250c      	movcc	r5, #12
 800e182:	2d00      	cmp	r5, #0
 800e184:	4607      	mov	r7, r0
 800e186:	db01      	blt.n	800e18c <_malloc_r+0x1c>
 800e188:	42a9      	cmp	r1, r5
 800e18a:	d905      	bls.n	800e198 <_malloc_r+0x28>
 800e18c:	230c      	movs	r3, #12
 800e18e:	603b      	str	r3, [r7, #0]
 800e190:	2600      	movs	r6, #0
 800e192:	4630      	mov	r0, r6
 800e194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e198:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e26c <_malloc_r+0xfc>
 800e19c:	f000 f868 	bl	800e270 <__malloc_lock>
 800e1a0:	f8d8 3000 	ldr.w	r3, [r8]
 800e1a4:	461c      	mov	r4, r3
 800e1a6:	bb5c      	cbnz	r4, 800e200 <_malloc_r+0x90>
 800e1a8:	4629      	mov	r1, r5
 800e1aa:	4638      	mov	r0, r7
 800e1ac:	f7ff ffc0 	bl	800e130 <sbrk_aligned>
 800e1b0:	1c43      	adds	r3, r0, #1
 800e1b2:	4604      	mov	r4, r0
 800e1b4:	d155      	bne.n	800e262 <_malloc_r+0xf2>
 800e1b6:	f8d8 4000 	ldr.w	r4, [r8]
 800e1ba:	4626      	mov	r6, r4
 800e1bc:	2e00      	cmp	r6, #0
 800e1be:	d145      	bne.n	800e24c <_malloc_r+0xdc>
 800e1c0:	2c00      	cmp	r4, #0
 800e1c2:	d048      	beq.n	800e256 <_malloc_r+0xe6>
 800e1c4:	6823      	ldr	r3, [r4, #0]
 800e1c6:	4631      	mov	r1, r6
 800e1c8:	4638      	mov	r0, r7
 800e1ca:	eb04 0903 	add.w	r9, r4, r3
 800e1ce:	f000 fb5d 	bl	800e88c <_sbrk_r>
 800e1d2:	4581      	cmp	r9, r0
 800e1d4:	d13f      	bne.n	800e256 <_malloc_r+0xe6>
 800e1d6:	6821      	ldr	r1, [r4, #0]
 800e1d8:	1a6d      	subs	r5, r5, r1
 800e1da:	4629      	mov	r1, r5
 800e1dc:	4638      	mov	r0, r7
 800e1de:	f7ff ffa7 	bl	800e130 <sbrk_aligned>
 800e1e2:	3001      	adds	r0, #1
 800e1e4:	d037      	beq.n	800e256 <_malloc_r+0xe6>
 800e1e6:	6823      	ldr	r3, [r4, #0]
 800e1e8:	442b      	add	r3, r5
 800e1ea:	6023      	str	r3, [r4, #0]
 800e1ec:	f8d8 3000 	ldr.w	r3, [r8]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d038      	beq.n	800e266 <_malloc_r+0xf6>
 800e1f4:	685a      	ldr	r2, [r3, #4]
 800e1f6:	42a2      	cmp	r2, r4
 800e1f8:	d12b      	bne.n	800e252 <_malloc_r+0xe2>
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	605a      	str	r2, [r3, #4]
 800e1fe:	e00f      	b.n	800e220 <_malloc_r+0xb0>
 800e200:	6822      	ldr	r2, [r4, #0]
 800e202:	1b52      	subs	r2, r2, r5
 800e204:	d41f      	bmi.n	800e246 <_malloc_r+0xd6>
 800e206:	2a0b      	cmp	r2, #11
 800e208:	d917      	bls.n	800e23a <_malloc_r+0xca>
 800e20a:	1961      	adds	r1, r4, r5
 800e20c:	42a3      	cmp	r3, r4
 800e20e:	6025      	str	r5, [r4, #0]
 800e210:	bf18      	it	ne
 800e212:	6059      	strne	r1, [r3, #4]
 800e214:	6863      	ldr	r3, [r4, #4]
 800e216:	bf08      	it	eq
 800e218:	f8c8 1000 	streq.w	r1, [r8]
 800e21c:	5162      	str	r2, [r4, r5]
 800e21e:	604b      	str	r3, [r1, #4]
 800e220:	4638      	mov	r0, r7
 800e222:	f104 060b 	add.w	r6, r4, #11
 800e226:	f000 f829 	bl	800e27c <__malloc_unlock>
 800e22a:	f026 0607 	bic.w	r6, r6, #7
 800e22e:	1d23      	adds	r3, r4, #4
 800e230:	1af2      	subs	r2, r6, r3
 800e232:	d0ae      	beq.n	800e192 <_malloc_r+0x22>
 800e234:	1b9b      	subs	r3, r3, r6
 800e236:	50a3      	str	r3, [r4, r2]
 800e238:	e7ab      	b.n	800e192 <_malloc_r+0x22>
 800e23a:	42a3      	cmp	r3, r4
 800e23c:	6862      	ldr	r2, [r4, #4]
 800e23e:	d1dd      	bne.n	800e1fc <_malloc_r+0x8c>
 800e240:	f8c8 2000 	str.w	r2, [r8]
 800e244:	e7ec      	b.n	800e220 <_malloc_r+0xb0>
 800e246:	4623      	mov	r3, r4
 800e248:	6864      	ldr	r4, [r4, #4]
 800e24a:	e7ac      	b.n	800e1a6 <_malloc_r+0x36>
 800e24c:	4634      	mov	r4, r6
 800e24e:	6876      	ldr	r6, [r6, #4]
 800e250:	e7b4      	b.n	800e1bc <_malloc_r+0x4c>
 800e252:	4613      	mov	r3, r2
 800e254:	e7cc      	b.n	800e1f0 <_malloc_r+0x80>
 800e256:	230c      	movs	r3, #12
 800e258:	603b      	str	r3, [r7, #0]
 800e25a:	4638      	mov	r0, r7
 800e25c:	f000 f80e 	bl	800e27c <__malloc_unlock>
 800e260:	e797      	b.n	800e192 <_malloc_r+0x22>
 800e262:	6025      	str	r5, [r4, #0]
 800e264:	e7dc      	b.n	800e220 <_malloc_r+0xb0>
 800e266:	605b      	str	r3, [r3, #4]
 800e268:	deff      	udf	#255	; 0xff
 800e26a:	bf00      	nop
 800e26c:	20002920 	.word	0x20002920

0800e270 <__malloc_lock>:
 800e270:	4801      	ldr	r0, [pc, #4]	; (800e278 <__malloc_lock+0x8>)
 800e272:	f7ff bf0f 	b.w	800e094 <__retarget_lock_acquire_recursive>
 800e276:	bf00      	nop
 800e278:	2000291c 	.word	0x2000291c

0800e27c <__malloc_unlock>:
 800e27c:	4801      	ldr	r0, [pc, #4]	; (800e284 <__malloc_unlock+0x8>)
 800e27e:	f7ff bf0a 	b.w	800e096 <__retarget_lock_release_recursive>
 800e282:	bf00      	nop
 800e284:	2000291c 	.word	0x2000291c

0800e288 <__ssputs_r>:
 800e288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e28c:	688e      	ldr	r6, [r1, #8]
 800e28e:	461f      	mov	r7, r3
 800e290:	42be      	cmp	r6, r7
 800e292:	680b      	ldr	r3, [r1, #0]
 800e294:	4682      	mov	sl, r0
 800e296:	460c      	mov	r4, r1
 800e298:	4690      	mov	r8, r2
 800e29a:	d82c      	bhi.n	800e2f6 <__ssputs_r+0x6e>
 800e29c:	898a      	ldrh	r2, [r1, #12]
 800e29e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e2a2:	d026      	beq.n	800e2f2 <__ssputs_r+0x6a>
 800e2a4:	6965      	ldr	r5, [r4, #20]
 800e2a6:	6909      	ldr	r1, [r1, #16]
 800e2a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e2ac:	eba3 0901 	sub.w	r9, r3, r1
 800e2b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e2b4:	1c7b      	adds	r3, r7, #1
 800e2b6:	444b      	add	r3, r9
 800e2b8:	106d      	asrs	r5, r5, #1
 800e2ba:	429d      	cmp	r5, r3
 800e2bc:	bf38      	it	cc
 800e2be:	461d      	movcc	r5, r3
 800e2c0:	0553      	lsls	r3, r2, #21
 800e2c2:	d527      	bpl.n	800e314 <__ssputs_r+0x8c>
 800e2c4:	4629      	mov	r1, r5
 800e2c6:	f7ff ff53 	bl	800e170 <_malloc_r>
 800e2ca:	4606      	mov	r6, r0
 800e2cc:	b360      	cbz	r0, 800e328 <__ssputs_r+0xa0>
 800e2ce:	6921      	ldr	r1, [r4, #16]
 800e2d0:	464a      	mov	r2, r9
 800e2d2:	f000 faeb 	bl	800e8ac <memcpy>
 800e2d6:	89a3      	ldrh	r3, [r4, #12]
 800e2d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e2dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2e0:	81a3      	strh	r3, [r4, #12]
 800e2e2:	6126      	str	r6, [r4, #16]
 800e2e4:	6165      	str	r5, [r4, #20]
 800e2e6:	444e      	add	r6, r9
 800e2e8:	eba5 0509 	sub.w	r5, r5, r9
 800e2ec:	6026      	str	r6, [r4, #0]
 800e2ee:	60a5      	str	r5, [r4, #8]
 800e2f0:	463e      	mov	r6, r7
 800e2f2:	42be      	cmp	r6, r7
 800e2f4:	d900      	bls.n	800e2f8 <__ssputs_r+0x70>
 800e2f6:	463e      	mov	r6, r7
 800e2f8:	6820      	ldr	r0, [r4, #0]
 800e2fa:	4632      	mov	r2, r6
 800e2fc:	4641      	mov	r1, r8
 800e2fe:	f000 faab 	bl	800e858 <memmove>
 800e302:	68a3      	ldr	r3, [r4, #8]
 800e304:	1b9b      	subs	r3, r3, r6
 800e306:	60a3      	str	r3, [r4, #8]
 800e308:	6823      	ldr	r3, [r4, #0]
 800e30a:	4433      	add	r3, r6
 800e30c:	6023      	str	r3, [r4, #0]
 800e30e:	2000      	movs	r0, #0
 800e310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e314:	462a      	mov	r2, r5
 800e316:	f000 fad7 	bl	800e8c8 <_realloc_r>
 800e31a:	4606      	mov	r6, r0
 800e31c:	2800      	cmp	r0, #0
 800e31e:	d1e0      	bne.n	800e2e2 <__ssputs_r+0x5a>
 800e320:	6921      	ldr	r1, [r4, #16]
 800e322:	4650      	mov	r0, sl
 800e324:	f7ff feb8 	bl	800e098 <_free_r>
 800e328:	230c      	movs	r3, #12
 800e32a:	f8ca 3000 	str.w	r3, [sl]
 800e32e:	89a3      	ldrh	r3, [r4, #12]
 800e330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e334:	81a3      	strh	r3, [r4, #12]
 800e336:	f04f 30ff 	mov.w	r0, #4294967295
 800e33a:	e7e9      	b.n	800e310 <__ssputs_r+0x88>

0800e33c <_svfiprintf_r>:
 800e33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e340:	4698      	mov	r8, r3
 800e342:	898b      	ldrh	r3, [r1, #12]
 800e344:	061b      	lsls	r3, r3, #24
 800e346:	b09d      	sub	sp, #116	; 0x74
 800e348:	4607      	mov	r7, r0
 800e34a:	460d      	mov	r5, r1
 800e34c:	4614      	mov	r4, r2
 800e34e:	d50e      	bpl.n	800e36e <_svfiprintf_r+0x32>
 800e350:	690b      	ldr	r3, [r1, #16]
 800e352:	b963      	cbnz	r3, 800e36e <_svfiprintf_r+0x32>
 800e354:	2140      	movs	r1, #64	; 0x40
 800e356:	f7ff ff0b 	bl	800e170 <_malloc_r>
 800e35a:	6028      	str	r0, [r5, #0]
 800e35c:	6128      	str	r0, [r5, #16]
 800e35e:	b920      	cbnz	r0, 800e36a <_svfiprintf_r+0x2e>
 800e360:	230c      	movs	r3, #12
 800e362:	603b      	str	r3, [r7, #0]
 800e364:	f04f 30ff 	mov.w	r0, #4294967295
 800e368:	e0d0      	b.n	800e50c <_svfiprintf_r+0x1d0>
 800e36a:	2340      	movs	r3, #64	; 0x40
 800e36c:	616b      	str	r3, [r5, #20]
 800e36e:	2300      	movs	r3, #0
 800e370:	9309      	str	r3, [sp, #36]	; 0x24
 800e372:	2320      	movs	r3, #32
 800e374:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e378:	f8cd 800c 	str.w	r8, [sp, #12]
 800e37c:	2330      	movs	r3, #48	; 0x30
 800e37e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e524 <_svfiprintf_r+0x1e8>
 800e382:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e386:	f04f 0901 	mov.w	r9, #1
 800e38a:	4623      	mov	r3, r4
 800e38c:	469a      	mov	sl, r3
 800e38e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e392:	b10a      	cbz	r2, 800e398 <_svfiprintf_r+0x5c>
 800e394:	2a25      	cmp	r2, #37	; 0x25
 800e396:	d1f9      	bne.n	800e38c <_svfiprintf_r+0x50>
 800e398:	ebba 0b04 	subs.w	fp, sl, r4
 800e39c:	d00b      	beq.n	800e3b6 <_svfiprintf_r+0x7a>
 800e39e:	465b      	mov	r3, fp
 800e3a0:	4622      	mov	r2, r4
 800e3a2:	4629      	mov	r1, r5
 800e3a4:	4638      	mov	r0, r7
 800e3a6:	f7ff ff6f 	bl	800e288 <__ssputs_r>
 800e3aa:	3001      	adds	r0, #1
 800e3ac:	f000 80a9 	beq.w	800e502 <_svfiprintf_r+0x1c6>
 800e3b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e3b2:	445a      	add	r2, fp
 800e3b4:	9209      	str	r2, [sp, #36]	; 0x24
 800e3b6:	f89a 3000 	ldrb.w	r3, [sl]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	f000 80a1 	beq.w	800e502 <_svfiprintf_r+0x1c6>
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	f04f 32ff 	mov.w	r2, #4294967295
 800e3c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e3ca:	f10a 0a01 	add.w	sl, sl, #1
 800e3ce:	9304      	str	r3, [sp, #16]
 800e3d0:	9307      	str	r3, [sp, #28]
 800e3d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e3d6:	931a      	str	r3, [sp, #104]	; 0x68
 800e3d8:	4654      	mov	r4, sl
 800e3da:	2205      	movs	r2, #5
 800e3dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3e0:	4850      	ldr	r0, [pc, #320]	; (800e524 <_svfiprintf_r+0x1e8>)
 800e3e2:	f7f1 ff15 	bl	8000210 <memchr>
 800e3e6:	9a04      	ldr	r2, [sp, #16]
 800e3e8:	b9d8      	cbnz	r0, 800e422 <_svfiprintf_r+0xe6>
 800e3ea:	06d0      	lsls	r0, r2, #27
 800e3ec:	bf44      	itt	mi
 800e3ee:	2320      	movmi	r3, #32
 800e3f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e3f4:	0711      	lsls	r1, r2, #28
 800e3f6:	bf44      	itt	mi
 800e3f8:	232b      	movmi	r3, #43	; 0x2b
 800e3fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e3fe:	f89a 3000 	ldrb.w	r3, [sl]
 800e402:	2b2a      	cmp	r3, #42	; 0x2a
 800e404:	d015      	beq.n	800e432 <_svfiprintf_r+0xf6>
 800e406:	9a07      	ldr	r2, [sp, #28]
 800e408:	4654      	mov	r4, sl
 800e40a:	2000      	movs	r0, #0
 800e40c:	f04f 0c0a 	mov.w	ip, #10
 800e410:	4621      	mov	r1, r4
 800e412:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e416:	3b30      	subs	r3, #48	; 0x30
 800e418:	2b09      	cmp	r3, #9
 800e41a:	d94d      	bls.n	800e4b8 <_svfiprintf_r+0x17c>
 800e41c:	b1b0      	cbz	r0, 800e44c <_svfiprintf_r+0x110>
 800e41e:	9207      	str	r2, [sp, #28]
 800e420:	e014      	b.n	800e44c <_svfiprintf_r+0x110>
 800e422:	eba0 0308 	sub.w	r3, r0, r8
 800e426:	fa09 f303 	lsl.w	r3, r9, r3
 800e42a:	4313      	orrs	r3, r2
 800e42c:	9304      	str	r3, [sp, #16]
 800e42e:	46a2      	mov	sl, r4
 800e430:	e7d2      	b.n	800e3d8 <_svfiprintf_r+0x9c>
 800e432:	9b03      	ldr	r3, [sp, #12]
 800e434:	1d19      	adds	r1, r3, #4
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	9103      	str	r1, [sp, #12]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	bfbb      	ittet	lt
 800e43e:	425b      	neglt	r3, r3
 800e440:	f042 0202 	orrlt.w	r2, r2, #2
 800e444:	9307      	strge	r3, [sp, #28]
 800e446:	9307      	strlt	r3, [sp, #28]
 800e448:	bfb8      	it	lt
 800e44a:	9204      	strlt	r2, [sp, #16]
 800e44c:	7823      	ldrb	r3, [r4, #0]
 800e44e:	2b2e      	cmp	r3, #46	; 0x2e
 800e450:	d10c      	bne.n	800e46c <_svfiprintf_r+0x130>
 800e452:	7863      	ldrb	r3, [r4, #1]
 800e454:	2b2a      	cmp	r3, #42	; 0x2a
 800e456:	d134      	bne.n	800e4c2 <_svfiprintf_r+0x186>
 800e458:	9b03      	ldr	r3, [sp, #12]
 800e45a:	1d1a      	adds	r2, r3, #4
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	9203      	str	r2, [sp, #12]
 800e460:	2b00      	cmp	r3, #0
 800e462:	bfb8      	it	lt
 800e464:	f04f 33ff 	movlt.w	r3, #4294967295
 800e468:	3402      	adds	r4, #2
 800e46a:	9305      	str	r3, [sp, #20]
 800e46c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e534 <_svfiprintf_r+0x1f8>
 800e470:	7821      	ldrb	r1, [r4, #0]
 800e472:	2203      	movs	r2, #3
 800e474:	4650      	mov	r0, sl
 800e476:	f7f1 fecb 	bl	8000210 <memchr>
 800e47a:	b138      	cbz	r0, 800e48c <_svfiprintf_r+0x150>
 800e47c:	9b04      	ldr	r3, [sp, #16]
 800e47e:	eba0 000a 	sub.w	r0, r0, sl
 800e482:	2240      	movs	r2, #64	; 0x40
 800e484:	4082      	lsls	r2, r0
 800e486:	4313      	orrs	r3, r2
 800e488:	3401      	adds	r4, #1
 800e48a:	9304      	str	r3, [sp, #16]
 800e48c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e490:	4825      	ldr	r0, [pc, #148]	; (800e528 <_svfiprintf_r+0x1ec>)
 800e492:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e496:	2206      	movs	r2, #6
 800e498:	f7f1 feba 	bl	8000210 <memchr>
 800e49c:	2800      	cmp	r0, #0
 800e49e:	d038      	beq.n	800e512 <_svfiprintf_r+0x1d6>
 800e4a0:	4b22      	ldr	r3, [pc, #136]	; (800e52c <_svfiprintf_r+0x1f0>)
 800e4a2:	bb1b      	cbnz	r3, 800e4ec <_svfiprintf_r+0x1b0>
 800e4a4:	9b03      	ldr	r3, [sp, #12]
 800e4a6:	3307      	adds	r3, #7
 800e4a8:	f023 0307 	bic.w	r3, r3, #7
 800e4ac:	3308      	adds	r3, #8
 800e4ae:	9303      	str	r3, [sp, #12]
 800e4b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4b2:	4433      	add	r3, r6
 800e4b4:	9309      	str	r3, [sp, #36]	; 0x24
 800e4b6:	e768      	b.n	800e38a <_svfiprintf_r+0x4e>
 800e4b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e4bc:	460c      	mov	r4, r1
 800e4be:	2001      	movs	r0, #1
 800e4c0:	e7a6      	b.n	800e410 <_svfiprintf_r+0xd4>
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	3401      	adds	r4, #1
 800e4c6:	9305      	str	r3, [sp, #20]
 800e4c8:	4619      	mov	r1, r3
 800e4ca:	f04f 0c0a 	mov.w	ip, #10
 800e4ce:	4620      	mov	r0, r4
 800e4d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4d4:	3a30      	subs	r2, #48	; 0x30
 800e4d6:	2a09      	cmp	r2, #9
 800e4d8:	d903      	bls.n	800e4e2 <_svfiprintf_r+0x1a6>
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d0c6      	beq.n	800e46c <_svfiprintf_r+0x130>
 800e4de:	9105      	str	r1, [sp, #20]
 800e4e0:	e7c4      	b.n	800e46c <_svfiprintf_r+0x130>
 800e4e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800e4e6:	4604      	mov	r4, r0
 800e4e8:	2301      	movs	r3, #1
 800e4ea:	e7f0      	b.n	800e4ce <_svfiprintf_r+0x192>
 800e4ec:	ab03      	add	r3, sp, #12
 800e4ee:	9300      	str	r3, [sp, #0]
 800e4f0:	462a      	mov	r2, r5
 800e4f2:	4b0f      	ldr	r3, [pc, #60]	; (800e530 <_svfiprintf_r+0x1f4>)
 800e4f4:	a904      	add	r1, sp, #16
 800e4f6:	4638      	mov	r0, r7
 800e4f8:	f3af 8000 	nop.w
 800e4fc:	1c42      	adds	r2, r0, #1
 800e4fe:	4606      	mov	r6, r0
 800e500:	d1d6      	bne.n	800e4b0 <_svfiprintf_r+0x174>
 800e502:	89ab      	ldrh	r3, [r5, #12]
 800e504:	065b      	lsls	r3, r3, #25
 800e506:	f53f af2d 	bmi.w	800e364 <_svfiprintf_r+0x28>
 800e50a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e50c:	b01d      	add	sp, #116	; 0x74
 800e50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e512:	ab03      	add	r3, sp, #12
 800e514:	9300      	str	r3, [sp, #0]
 800e516:	462a      	mov	r2, r5
 800e518:	4b05      	ldr	r3, [pc, #20]	; (800e530 <_svfiprintf_r+0x1f4>)
 800e51a:	a904      	add	r1, sp, #16
 800e51c:	4638      	mov	r0, r7
 800e51e:	f000 f879 	bl	800e614 <_printf_i>
 800e522:	e7eb      	b.n	800e4fc <_svfiprintf_r+0x1c0>
 800e524:	0800eef0 	.word	0x0800eef0
 800e528:	0800eefa 	.word	0x0800eefa
 800e52c:	00000000 	.word	0x00000000
 800e530:	0800e289 	.word	0x0800e289
 800e534:	0800eef6 	.word	0x0800eef6

0800e538 <_printf_common>:
 800e538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e53c:	4616      	mov	r6, r2
 800e53e:	4699      	mov	r9, r3
 800e540:	688a      	ldr	r2, [r1, #8]
 800e542:	690b      	ldr	r3, [r1, #16]
 800e544:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e548:	4293      	cmp	r3, r2
 800e54a:	bfb8      	it	lt
 800e54c:	4613      	movlt	r3, r2
 800e54e:	6033      	str	r3, [r6, #0]
 800e550:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e554:	4607      	mov	r7, r0
 800e556:	460c      	mov	r4, r1
 800e558:	b10a      	cbz	r2, 800e55e <_printf_common+0x26>
 800e55a:	3301      	adds	r3, #1
 800e55c:	6033      	str	r3, [r6, #0]
 800e55e:	6823      	ldr	r3, [r4, #0]
 800e560:	0699      	lsls	r1, r3, #26
 800e562:	bf42      	ittt	mi
 800e564:	6833      	ldrmi	r3, [r6, #0]
 800e566:	3302      	addmi	r3, #2
 800e568:	6033      	strmi	r3, [r6, #0]
 800e56a:	6825      	ldr	r5, [r4, #0]
 800e56c:	f015 0506 	ands.w	r5, r5, #6
 800e570:	d106      	bne.n	800e580 <_printf_common+0x48>
 800e572:	f104 0a19 	add.w	sl, r4, #25
 800e576:	68e3      	ldr	r3, [r4, #12]
 800e578:	6832      	ldr	r2, [r6, #0]
 800e57a:	1a9b      	subs	r3, r3, r2
 800e57c:	42ab      	cmp	r3, r5
 800e57e:	dc26      	bgt.n	800e5ce <_printf_common+0x96>
 800e580:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e584:	1e13      	subs	r3, r2, #0
 800e586:	6822      	ldr	r2, [r4, #0]
 800e588:	bf18      	it	ne
 800e58a:	2301      	movne	r3, #1
 800e58c:	0692      	lsls	r2, r2, #26
 800e58e:	d42b      	bmi.n	800e5e8 <_printf_common+0xb0>
 800e590:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e594:	4649      	mov	r1, r9
 800e596:	4638      	mov	r0, r7
 800e598:	47c0      	blx	r8
 800e59a:	3001      	adds	r0, #1
 800e59c:	d01e      	beq.n	800e5dc <_printf_common+0xa4>
 800e59e:	6823      	ldr	r3, [r4, #0]
 800e5a0:	6922      	ldr	r2, [r4, #16]
 800e5a2:	f003 0306 	and.w	r3, r3, #6
 800e5a6:	2b04      	cmp	r3, #4
 800e5a8:	bf02      	ittt	eq
 800e5aa:	68e5      	ldreq	r5, [r4, #12]
 800e5ac:	6833      	ldreq	r3, [r6, #0]
 800e5ae:	1aed      	subeq	r5, r5, r3
 800e5b0:	68a3      	ldr	r3, [r4, #8]
 800e5b2:	bf0c      	ite	eq
 800e5b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e5b8:	2500      	movne	r5, #0
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	bfc4      	itt	gt
 800e5be:	1a9b      	subgt	r3, r3, r2
 800e5c0:	18ed      	addgt	r5, r5, r3
 800e5c2:	2600      	movs	r6, #0
 800e5c4:	341a      	adds	r4, #26
 800e5c6:	42b5      	cmp	r5, r6
 800e5c8:	d11a      	bne.n	800e600 <_printf_common+0xc8>
 800e5ca:	2000      	movs	r0, #0
 800e5cc:	e008      	b.n	800e5e0 <_printf_common+0xa8>
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	4652      	mov	r2, sl
 800e5d2:	4649      	mov	r1, r9
 800e5d4:	4638      	mov	r0, r7
 800e5d6:	47c0      	blx	r8
 800e5d8:	3001      	adds	r0, #1
 800e5da:	d103      	bne.n	800e5e4 <_printf_common+0xac>
 800e5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e5e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5e4:	3501      	adds	r5, #1
 800e5e6:	e7c6      	b.n	800e576 <_printf_common+0x3e>
 800e5e8:	18e1      	adds	r1, r4, r3
 800e5ea:	1c5a      	adds	r2, r3, #1
 800e5ec:	2030      	movs	r0, #48	; 0x30
 800e5ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e5f2:	4422      	add	r2, r4
 800e5f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e5f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e5fc:	3302      	adds	r3, #2
 800e5fe:	e7c7      	b.n	800e590 <_printf_common+0x58>
 800e600:	2301      	movs	r3, #1
 800e602:	4622      	mov	r2, r4
 800e604:	4649      	mov	r1, r9
 800e606:	4638      	mov	r0, r7
 800e608:	47c0      	blx	r8
 800e60a:	3001      	adds	r0, #1
 800e60c:	d0e6      	beq.n	800e5dc <_printf_common+0xa4>
 800e60e:	3601      	adds	r6, #1
 800e610:	e7d9      	b.n	800e5c6 <_printf_common+0x8e>
	...

0800e614 <_printf_i>:
 800e614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e618:	7e0f      	ldrb	r7, [r1, #24]
 800e61a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e61c:	2f78      	cmp	r7, #120	; 0x78
 800e61e:	4691      	mov	r9, r2
 800e620:	4680      	mov	r8, r0
 800e622:	460c      	mov	r4, r1
 800e624:	469a      	mov	sl, r3
 800e626:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e62a:	d807      	bhi.n	800e63c <_printf_i+0x28>
 800e62c:	2f62      	cmp	r7, #98	; 0x62
 800e62e:	d80a      	bhi.n	800e646 <_printf_i+0x32>
 800e630:	2f00      	cmp	r7, #0
 800e632:	f000 80d4 	beq.w	800e7de <_printf_i+0x1ca>
 800e636:	2f58      	cmp	r7, #88	; 0x58
 800e638:	f000 80c0 	beq.w	800e7bc <_printf_i+0x1a8>
 800e63c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e640:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e644:	e03a      	b.n	800e6bc <_printf_i+0xa8>
 800e646:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e64a:	2b15      	cmp	r3, #21
 800e64c:	d8f6      	bhi.n	800e63c <_printf_i+0x28>
 800e64e:	a101      	add	r1, pc, #4	; (adr r1, 800e654 <_printf_i+0x40>)
 800e650:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e654:	0800e6ad 	.word	0x0800e6ad
 800e658:	0800e6c1 	.word	0x0800e6c1
 800e65c:	0800e63d 	.word	0x0800e63d
 800e660:	0800e63d 	.word	0x0800e63d
 800e664:	0800e63d 	.word	0x0800e63d
 800e668:	0800e63d 	.word	0x0800e63d
 800e66c:	0800e6c1 	.word	0x0800e6c1
 800e670:	0800e63d 	.word	0x0800e63d
 800e674:	0800e63d 	.word	0x0800e63d
 800e678:	0800e63d 	.word	0x0800e63d
 800e67c:	0800e63d 	.word	0x0800e63d
 800e680:	0800e7c5 	.word	0x0800e7c5
 800e684:	0800e6ed 	.word	0x0800e6ed
 800e688:	0800e77f 	.word	0x0800e77f
 800e68c:	0800e63d 	.word	0x0800e63d
 800e690:	0800e63d 	.word	0x0800e63d
 800e694:	0800e7e7 	.word	0x0800e7e7
 800e698:	0800e63d 	.word	0x0800e63d
 800e69c:	0800e6ed 	.word	0x0800e6ed
 800e6a0:	0800e63d 	.word	0x0800e63d
 800e6a4:	0800e63d 	.word	0x0800e63d
 800e6a8:	0800e787 	.word	0x0800e787
 800e6ac:	682b      	ldr	r3, [r5, #0]
 800e6ae:	1d1a      	adds	r2, r3, #4
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	602a      	str	r2, [r5, #0]
 800e6b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e6b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e6bc:	2301      	movs	r3, #1
 800e6be:	e09f      	b.n	800e800 <_printf_i+0x1ec>
 800e6c0:	6820      	ldr	r0, [r4, #0]
 800e6c2:	682b      	ldr	r3, [r5, #0]
 800e6c4:	0607      	lsls	r7, r0, #24
 800e6c6:	f103 0104 	add.w	r1, r3, #4
 800e6ca:	6029      	str	r1, [r5, #0]
 800e6cc:	d501      	bpl.n	800e6d2 <_printf_i+0xbe>
 800e6ce:	681e      	ldr	r6, [r3, #0]
 800e6d0:	e003      	b.n	800e6da <_printf_i+0xc6>
 800e6d2:	0646      	lsls	r6, r0, #25
 800e6d4:	d5fb      	bpl.n	800e6ce <_printf_i+0xba>
 800e6d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e6da:	2e00      	cmp	r6, #0
 800e6dc:	da03      	bge.n	800e6e6 <_printf_i+0xd2>
 800e6de:	232d      	movs	r3, #45	; 0x2d
 800e6e0:	4276      	negs	r6, r6
 800e6e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e6e6:	485a      	ldr	r0, [pc, #360]	; (800e850 <_printf_i+0x23c>)
 800e6e8:	230a      	movs	r3, #10
 800e6ea:	e012      	b.n	800e712 <_printf_i+0xfe>
 800e6ec:	682b      	ldr	r3, [r5, #0]
 800e6ee:	6820      	ldr	r0, [r4, #0]
 800e6f0:	1d19      	adds	r1, r3, #4
 800e6f2:	6029      	str	r1, [r5, #0]
 800e6f4:	0605      	lsls	r5, r0, #24
 800e6f6:	d501      	bpl.n	800e6fc <_printf_i+0xe8>
 800e6f8:	681e      	ldr	r6, [r3, #0]
 800e6fa:	e002      	b.n	800e702 <_printf_i+0xee>
 800e6fc:	0641      	lsls	r1, r0, #25
 800e6fe:	d5fb      	bpl.n	800e6f8 <_printf_i+0xe4>
 800e700:	881e      	ldrh	r6, [r3, #0]
 800e702:	4853      	ldr	r0, [pc, #332]	; (800e850 <_printf_i+0x23c>)
 800e704:	2f6f      	cmp	r7, #111	; 0x6f
 800e706:	bf0c      	ite	eq
 800e708:	2308      	moveq	r3, #8
 800e70a:	230a      	movne	r3, #10
 800e70c:	2100      	movs	r1, #0
 800e70e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e712:	6865      	ldr	r5, [r4, #4]
 800e714:	60a5      	str	r5, [r4, #8]
 800e716:	2d00      	cmp	r5, #0
 800e718:	bfa2      	ittt	ge
 800e71a:	6821      	ldrge	r1, [r4, #0]
 800e71c:	f021 0104 	bicge.w	r1, r1, #4
 800e720:	6021      	strge	r1, [r4, #0]
 800e722:	b90e      	cbnz	r6, 800e728 <_printf_i+0x114>
 800e724:	2d00      	cmp	r5, #0
 800e726:	d04b      	beq.n	800e7c0 <_printf_i+0x1ac>
 800e728:	4615      	mov	r5, r2
 800e72a:	fbb6 f1f3 	udiv	r1, r6, r3
 800e72e:	fb03 6711 	mls	r7, r3, r1, r6
 800e732:	5dc7      	ldrb	r7, [r0, r7]
 800e734:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e738:	4637      	mov	r7, r6
 800e73a:	42bb      	cmp	r3, r7
 800e73c:	460e      	mov	r6, r1
 800e73e:	d9f4      	bls.n	800e72a <_printf_i+0x116>
 800e740:	2b08      	cmp	r3, #8
 800e742:	d10b      	bne.n	800e75c <_printf_i+0x148>
 800e744:	6823      	ldr	r3, [r4, #0]
 800e746:	07de      	lsls	r6, r3, #31
 800e748:	d508      	bpl.n	800e75c <_printf_i+0x148>
 800e74a:	6923      	ldr	r3, [r4, #16]
 800e74c:	6861      	ldr	r1, [r4, #4]
 800e74e:	4299      	cmp	r1, r3
 800e750:	bfde      	ittt	le
 800e752:	2330      	movle	r3, #48	; 0x30
 800e754:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e758:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e75c:	1b52      	subs	r2, r2, r5
 800e75e:	6122      	str	r2, [r4, #16]
 800e760:	f8cd a000 	str.w	sl, [sp]
 800e764:	464b      	mov	r3, r9
 800e766:	aa03      	add	r2, sp, #12
 800e768:	4621      	mov	r1, r4
 800e76a:	4640      	mov	r0, r8
 800e76c:	f7ff fee4 	bl	800e538 <_printf_common>
 800e770:	3001      	adds	r0, #1
 800e772:	d14a      	bne.n	800e80a <_printf_i+0x1f6>
 800e774:	f04f 30ff 	mov.w	r0, #4294967295
 800e778:	b004      	add	sp, #16
 800e77a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e77e:	6823      	ldr	r3, [r4, #0]
 800e780:	f043 0320 	orr.w	r3, r3, #32
 800e784:	6023      	str	r3, [r4, #0]
 800e786:	4833      	ldr	r0, [pc, #204]	; (800e854 <_printf_i+0x240>)
 800e788:	2778      	movs	r7, #120	; 0x78
 800e78a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e78e:	6823      	ldr	r3, [r4, #0]
 800e790:	6829      	ldr	r1, [r5, #0]
 800e792:	061f      	lsls	r7, r3, #24
 800e794:	f851 6b04 	ldr.w	r6, [r1], #4
 800e798:	d402      	bmi.n	800e7a0 <_printf_i+0x18c>
 800e79a:	065f      	lsls	r7, r3, #25
 800e79c:	bf48      	it	mi
 800e79e:	b2b6      	uxthmi	r6, r6
 800e7a0:	07df      	lsls	r7, r3, #31
 800e7a2:	bf48      	it	mi
 800e7a4:	f043 0320 	orrmi.w	r3, r3, #32
 800e7a8:	6029      	str	r1, [r5, #0]
 800e7aa:	bf48      	it	mi
 800e7ac:	6023      	strmi	r3, [r4, #0]
 800e7ae:	b91e      	cbnz	r6, 800e7b8 <_printf_i+0x1a4>
 800e7b0:	6823      	ldr	r3, [r4, #0]
 800e7b2:	f023 0320 	bic.w	r3, r3, #32
 800e7b6:	6023      	str	r3, [r4, #0]
 800e7b8:	2310      	movs	r3, #16
 800e7ba:	e7a7      	b.n	800e70c <_printf_i+0xf8>
 800e7bc:	4824      	ldr	r0, [pc, #144]	; (800e850 <_printf_i+0x23c>)
 800e7be:	e7e4      	b.n	800e78a <_printf_i+0x176>
 800e7c0:	4615      	mov	r5, r2
 800e7c2:	e7bd      	b.n	800e740 <_printf_i+0x12c>
 800e7c4:	682b      	ldr	r3, [r5, #0]
 800e7c6:	6826      	ldr	r6, [r4, #0]
 800e7c8:	6961      	ldr	r1, [r4, #20]
 800e7ca:	1d18      	adds	r0, r3, #4
 800e7cc:	6028      	str	r0, [r5, #0]
 800e7ce:	0635      	lsls	r5, r6, #24
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	d501      	bpl.n	800e7d8 <_printf_i+0x1c4>
 800e7d4:	6019      	str	r1, [r3, #0]
 800e7d6:	e002      	b.n	800e7de <_printf_i+0x1ca>
 800e7d8:	0670      	lsls	r0, r6, #25
 800e7da:	d5fb      	bpl.n	800e7d4 <_printf_i+0x1c0>
 800e7dc:	8019      	strh	r1, [r3, #0]
 800e7de:	2300      	movs	r3, #0
 800e7e0:	6123      	str	r3, [r4, #16]
 800e7e2:	4615      	mov	r5, r2
 800e7e4:	e7bc      	b.n	800e760 <_printf_i+0x14c>
 800e7e6:	682b      	ldr	r3, [r5, #0]
 800e7e8:	1d1a      	adds	r2, r3, #4
 800e7ea:	602a      	str	r2, [r5, #0]
 800e7ec:	681d      	ldr	r5, [r3, #0]
 800e7ee:	6862      	ldr	r2, [r4, #4]
 800e7f0:	2100      	movs	r1, #0
 800e7f2:	4628      	mov	r0, r5
 800e7f4:	f7f1 fd0c 	bl	8000210 <memchr>
 800e7f8:	b108      	cbz	r0, 800e7fe <_printf_i+0x1ea>
 800e7fa:	1b40      	subs	r0, r0, r5
 800e7fc:	6060      	str	r0, [r4, #4]
 800e7fe:	6863      	ldr	r3, [r4, #4]
 800e800:	6123      	str	r3, [r4, #16]
 800e802:	2300      	movs	r3, #0
 800e804:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e808:	e7aa      	b.n	800e760 <_printf_i+0x14c>
 800e80a:	6923      	ldr	r3, [r4, #16]
 800e80c:	462a      	mov	r2, r5
 800e80e:	4649      	mov	r1, r9
 800e810:	4640      	mov	r0, r8
 800e812:	47d0      	blx	sl
 800e814:	3001      	adds	r0, #1
 800e816:	d0ad      	beq.n	800e774 <_printf_i+0x160>
 800e818:	6823      	ldr	r3, [r4, #0]
 800e81a:	079b      	lsls	r3, r3, #30
 800e81c:	d413      	bmi.n	800e846 <_printf_i+0x232>
 800e81e:	68e0      	ldr	r0, [r4, #12]
 800e820:	9b03      	ldr	r3, [sp, #12]
 800e822:	4298      	cmp	r0, r3
 800e824:	bfb8      	it	lt
 800e826:	4618      	movlt	r0, r3
 800e828:	e7a6      	b.n	800e778 <_printf_i+0x164>
 800e82a:	2301      	movs	r3, #1
 800e82c:	4632      	mov	r2, r6
 800e82e:	4649      	mov	r1, r9
 800e830:	4640      	mov	r0, r8
 800e832:	47d0      	blx	sl
 800e834:	3001      	adds	r0, #1
 800e836:	d09d      	beq.n	800e774 <_printf_i+0x160>
 800e838:	3501      	adds	r5, #1
 800e83a:	68e3      	ldr	r3, [r4, #12]
 800e83c:	9903      	ldr	r1, [sp, #12]
 800e83e:	1a5b      	subs	r3, r3, r1
 800e840:	42ab      	cmp	r3, r5
 800e842:	dcf2      	bgt.n	800e82a <_printf_i+0x216>
 800e844:	e7eb      	b.n	800e81e <_printf_i+0x20a>
 800e846:	2500      	movs	r5, #0
 800e848:	f104 0619 	add.w	r6, r4, #25
 800e84c:	e7f5      	b.n	800e83a <_printf_i+0x226>
 800e84e:	bf00      	nop
 800e850:	0800ef01 	.word	0x0800ef01
 800e854:	0800ef12 	.word	0x0800ef12

0800e858 <memmove>:
 800e858:	4288      	cmp	r0, r1
 800e85a:	b510      	push	{r4, lr}
 800e85c:	eb01 0402 	add.w	r4, r1, r2
 800e860:	d902      	bls.n	800e868 <memmove+0x10>
 800e862:	4284      	cmp	r4, r0
 800e864:	4623      	mov	r3, r4
 800e866:	d807      	bhi.n	800e878 <memmove+0x20>
 800e868:	1e43      	subs	r3, r0, #1
 800e86a:	42a1      	cmp	r1, r4
 800e86c:	d008      	beq.n	800e880 <memmove+0x28>
 800e86e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e872:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e876:	e7f8      	b.n	800e86a <memmove+0x12>
 800e878:	4402      	add	r2, r0
 800e87a:	4601      	mov	r1, r0
 800e87c:	428a      	cmp	r2, r1
 800e87e:	d100      	bne.n	800e882 <memmove+0x2a>
 800e880:	bd10      	pop	{r4, pc}
 800e882:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e886:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e88a:	e7f7      	b.n	800e87c <memmove+0x24>

0800e88c <_sbrk_r>:
 800e88c:	b538      	push	{r3, r4, r5, lr}
 800e88e:	4d06      	ldr	r5, [pc, #24]	; (800e8a8 <_sbrk_r+0x1c>)
 800e890:	2300      	movs	r3, #0
 800e892:	4604      	mov	r4, r0
 800e894:	4608      	mov	r0, r1
 800e896:	602b      	str	r3, [r5, #0]
 800e898:	f7f5 fb5a 	bl	8003f50 <_sbrk>
 800e89c:	1c43      	adds	r3, r0, #1
 800e89e:	d102      	bne.n	800e8a6 <_sbrk_r+0x1a>
 800e8a0:	682b      	ldr	r3, [r5, #0]
 800e8a2:	b103      	cbz	r3, 800e8a6 <_sbrk_r+0x1a>
 800e8a4:	6023      	str	r3, [r4, #0]
 800e8a6:	bd38      	pop	{r3, r4, r5, pc}
 800e8a8:	20002918 	.word	0x20002918

0800e8ac <memcpy>:
 800e8ac:	440a      	add	r2, r1
 800e8ae:	4291      	cmp	r1, r2
 800e8b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800e8b4:	d100      	bne.n	800e8b8 <memcpy+0xc>
 800e8b6:	4770      	bx	lr
 800e8b8:	b510      	push	{r4, lr}
 800e8ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e8c2:	4291      	cmp	r1, r2
 800e8c4:	d1f9      	bne.n	800e8ba <memcpy+0xe>
 800e8c6:	bd10      	pop	{r4, pc}

0800e8c8 <_realloc_r>:
 800e8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8cc:	4680      	mov	r8, r0
 800e8ce:	4614      	mov	r4, r2
 800e8d0:	460e      	mov	r6, r1
 800e8d2:	b921      	cbnz	r1, 800e8de <_realloc_r+0x16>
 800e8d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e8d8:	4611      	mov	r1, r2
 800e8da:	f7ff bc49 	b.w	800e170 <_malloc_r>
 800e8de:	b92a      	cbnz	r2, 800e8ec <_realloc_r+0x24>
 800e8e0:	f7ff fbda 	bl	800e098 <_free_r>
 800e8e4:	4625      	mov	r5, r4
 800e8e6:	4628      	mov	r0, r5
 800e8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8ec:	f000 f81b 	bl	800e926 <_malloc_usable_size_r>
 800e8f0:	4284      	cmp	r4, r0
 800e8f2:	4607      	mov	r7, r0
 800e8f4:	d802      	bhi.n	800e8fc <_realloc_r+0x34>
 800e8f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e8fa:	d812      	bhi.n	800e922 <_realloc_r+0x5a>
 800e8fc:	4621      	mov	r1, r4
 800e8fe:	4640      	mov	r0, r8
 800e900:	f7ff fc36 	bl	800e170 <_malloc_r>
 800e904:	4605      	mov	r5, r0
 800e906:	2800      	cmp	r0, #0
 800e908:	d0ed      	beq.n	800e8e6 <_realloc_r+0x1e>
 800e90a:	42bc      	cmp	r4, r7
 800e90c:	4622      	mov	r2, r4
 800e90e:	4631      	mov	r1, r6
 800e910:	bf28      	it	cs
 800e912:	463a      	movcs	r2, r7
 800e914:	f7ff ffca 	bl	800e8ac <memcpy>
 800e918:	4631      	mov	r1, r6
 800e91a:	4640      	mov	r0, r8
 800e91c:	f7ff fbbc 	bl	800e098 <_free_r>
 800e920:	e7e1      	b.n	800e8e6 <_realloc_r+0x1e>
 800e922:	4635      	mov	r5, r6
 800e924:	e7df      	b.n	800e8e6 <_realloc_r+0x1e>

0800e926 <_malloc_usable_size_r>:
 800e926:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e92a:	1f18      	subs	r0, r3, #4
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	bfbc      	itt	lt
 800e930:	580b      	ldrlt	r3, [r1, r0]
 800e932:	18c0      	addlt	r0, r0, r3
 800e934:	4770      	bx	lr
	...

0800e938 <_init>:
 800e938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e93a:	bf00      	nop
 800e93c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e93e:	bc08      	pop	{r3}
 800e940:	469e      	mov	lr, r3
 800e942:	4770      	bx	lr

0800e944 <_fini>:
 800e944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e946:	bf00      	nop
 800e948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e94a:	bc08      	pop	{r3}
 800e94c:	469e      	mov	lr, r3
 800e94e:	4770      	bx	lr
