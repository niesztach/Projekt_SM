
L06_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096f4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080098c4  080098c4  000198c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099c0  080099c0  000200d8  2**0
                  CONTENTS
  4 .ARM          00000008  080099c0  080099c0  000199c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099c8  080099c8  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099c8  080099c8  000199c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099cc  080099cc  000199cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  080099d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  200000d8  08009aa8  000200d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  08009aa8  00020504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018f54  00000000  00000000  0002014b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038a8  00000000  00000000  0003909f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001500  00000000  00000000  0003c948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001062  00000000  00000000  0003de48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002870e  00000000  00000000  0003eeaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c587  00000000  00000000  000675b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6734  00000000  00000000  00083b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e30  00000000  00000000  0017a274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001800a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000d8 	.word	0x200000d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080098ac 	.word	0x080098ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000dc 	.word	0x200000dc
 800020c:	080098ac 	.word	0x080098ac

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_d2f>:
 8000bec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf4:	bf24      	itt	cs
 8000bf6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfe:	d90d      	bls.n	8000c1c <__aeabi_d2f+0x30>
 8000c00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c14:	bf08      	it	eq
 8000c16:	f020 0001 	biceq.w	r0, r0, #1
 8000c1a:	4770      	bx	lr
 8000c1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c20:	d121      	bne.n	8000c66 <__aeabi_d2f+0x7a>
 8000c22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c26:	bfbc      	itt	lt
 8000c28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	4770      	bxlt	lr
 8000c2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c36:	f1c2 0218 	rsb	r2, r2, #24
 8000c3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c42:	fa20 f002 	lsr.w	r0, r0, r2
 8000c46:	bf18      	it	ne
 8000c48:	f040 0001 	orrne.w	r0, r0, #1
 8000c4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c58:	ea40 000c 	orr.w	r0, r0, ip
 8000c5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c64:	e7cc      	b.n	8000c00 <__aeabi_d2f+0x14>
 8000c66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6a:	d107      	bne.n	8000c7c <__aeabi_d2f+0x90>
 8000c6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c70:	bf1e      	ittt	ne
 8000c72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7a:	4770      	bxne	lr
 8000c7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <__aeabi_uldivmod>:
 8000c8c:	b953      	cbnz	r3, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c8e:	b94a      	cbnz	r2, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c90:	2900      	cmp	r1, #0
 8000c92:	bf08      	it	eq
 8000c94:	2800      	cmpeq	r0, #0
 8000c96:	bf1c      	itt	ne
 8000c98:	f04f 31ff 	movne.w	r1, #4294967295
 8000c9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca0:	f000 b970 	b.w	8000f84 <__aeabi_idiv0>
 8000ca4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cac:	f000 f806 	bl	8000cbc <__udivmoddi4>
 8000cb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb8:	b004      	add	sp, #16
 8000cba:	4770      	bx	lr

08000cbc <__udivmoddi4>:
 8000cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc0:	9e08      	ldr	r6, [sp, #32]
 8000cc2:	460d      	mov	r5, r1
 8000cc4:	4604      	mov	r4, r0
 8000cc6:	460f      	mov	r7, r1
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d14a      	bne.n	8000d62 <__udivmoddi4+0xa6>
 8000ccc:	428a      	cmp	r2, r1
 8000cce:	4694      	mov	ip, r2
 8000cd0:	d965      	bls.n	8000d9e <__udivmoddi4+0xe2>
 8000cd2:	fab2 f382 	clz	r3, r2
 8000cd6:	b143      	cbz	r3, 8000cea <__udivmoddi4+0x2e>
 8000cd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cdc:	f1c3 0220 	rsb	r2, r3, #32
 8000ce0:	409f      	lsls	r7, r3
 8000ce2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce6:	4317      	orrs	r7, r2
 8000ce8:	409c      	lsls	r4, r3
 8000cea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cee:	fa1f f58c 	uxth.w	r5, ip
 8000cf2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf6:	0c22      	lsrs	r2, r4, #16
 8000cf8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cfc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d00:	fb01 f005 	mul.w	r0, r1, r5
 8000d04:	4290      	cmp	r0, r2
 8000d06:	d90a      	bls.n	8000d1e <__udivmoddi4+0x62>
 8000d08:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d10:	f080 811c 	bcs.w	8000f4c <__udivmoddi4+0x290>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f240 8119 	bls.w	8000f4c <__udivmoddi4+0x290>
 8000d1a:	3902      	subs	r1, #2
 8000d1c:	4462      	add	r2, ip
 8000d1e:	1a12      	subs	r2, r2, r0
 8000d20:	b2a4      	uxth	r4, r4
 8000d22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2e:	fb00 f505 	mul.w	r5, r0, r5
 8000d32:	42a5      	cmp	r5, r4
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x90>
 8000d36:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3e:	f080 8107 	bcs.w	8000f50 <__udivmoddi4+0x294>
 8000d42:	42a5      	cmp	r5, r4
 8000d44:	f240 8104 	bls.w	8000f50 <__udivmoddi4+0x294>
 8000d48:	4464      	add	r4, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d50:	1b64      	subs	r4, r4, r5
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11e      	cbz	r6, 8000d5e <__udivmoddi4+0xa2>
 8000d56:	40dc      	lsrs	r4, r3
 8000d58:	2300      	movs	r3, #0
 8000d5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0xbc>
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	f000 80ed 	beq.w	8000f46 <__udivmoddi4+0x28a>
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000d72:	4608      	mov	r0, r1
 8000d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d78:	fab3 f183 	clz	r1, r3
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	d149      	bne.n	8000e14 <__udivmoddi4+0x158>
 8000d80:	42ab      	cmp	r3, r5
 8000d82:	d302      	bcc.n	8000d8a <__udivmoddi4+0xce>
 8000d84:	4282      	cmp	r2, r0
 8000d86:	f200 80f8 	bhi.w	8000f7a <__udivmoddi4+0x2be>
 8000d8a:	1a84      	subs	r4, r0, r2
 8000d8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000d90:	2001      	movs	r0, #1
 8000d92:	4617      	mov	r7, r2
 8000d94:	2e00      	cmp	r6, #0
 8000d96:	d0e2      	beq.n	8000d5e <__udivmoddi4+0xa2>
 8000d98:	e9c6 4700 	strd	r4, r7, [r6]
 8000d9c:	e7df      	b.n	8000d5e <__udivmoddi4+0xa2>
 8000d9e:	b902      	cbnz	r2, 8000da2 <__udivmoddi4+0xe6>
 8000da0:	deff      	udf	#255	; 0xff
 8000da2:	fab2 f382 	clz	r3, r2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x210>
 8000dac:	1a8a      	subs	r2, r1, r2
 8000dae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db2:	fa1f fe8c 	uxth.w	lr, ip
 8000db6:	2101      	movs	r1, #1
 8000db8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dbc:	fb07 2015 	mls	r0, r7, r5, r2
 8000dc0:	0c22      	lsrs	r2, r4, #16
 8000dc2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc6:	fb0e f005 	mul.w	r0, lr, r5
 8000dca:	4290      	cmp	r0, r2
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x124>
 8000dce:	eb1c 0202 	adds.w	r2, ip, r2
 8000dd2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x122>
 8000dd8:	4290      	cmp	r0, r2
 8000dda:	f200 80cb 	bhi.w	8000f74 <__udivmoddi4+0x2b8>
 8000dde:	4645      	mov	r5, r8
 8000de0:	1a12      	subs	r2, r2, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de8:	fb07 2210 	mls	r2, r7, r0, r2
 8000dec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000df0:	fb0e fe00 	mul.w	lr, lr, r0
 8000df4:	45a6      	cmp	lr, r4
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x14e>
 8000df8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dfc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e00:	d202      	bcs.n	8000e08 <__udivmoddi4+0x14c>
 8000e02:	45a6      	cmp	lr, r4
 8000e04:	f200 80bb 	bhi.w	8000f7e <__udivmoddi4+0x2c2>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e12:	e79f      	b.n	8000d54 <__udivmoddi4+0x98>
 8000e14:	f1c1 0720 	rsb	r7, r1, #32
 8000e18:	408b      	lsls	r3, r1
 8000e1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e22:	fa05 f401 	lsl.w	r4, r5, r1
 8000e26:	fa20 f307 	lsr.w	r3, r0, r7
 8000e2a:	40fd      	lsrs	r5, r7
 8000e2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e30:	4323      	orrs	r3, r4
 8000e32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e36:	fa1f fe8c 	uxth.w	lr, ip
 8000e3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3e:	0c1c      	lsrs	r4, r3, #16
 8000e40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e44:	fb08 f50e 	mul.w	r5, r8, lr
 8000e48:	42a5      	cmp	r5, r4
 8000e4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000e52:	d90b      	bls.n	8000e6c <__udivmoddi4+0x1b0>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e5c:	f080 8088 	bcs.w	8000f70 <__udivmoddi4+0x2b4>
 8000e60:	42a5      	cmp	r5, r4
 8000e62:	f240 8085 	bls.w	8000f70 <__udivmoddi4+0x2b4>
 8000e66:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6a:	4464      	add	r4, ip
 8000e6c:	1b64      	subs	r4, r4, r5
 8000e6e:	b29d      	uxth	r5, r3
 8000e70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e74:	fb09 4413 	mls	r4, r9, r3, r4
 8000e78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e80:	45a6      	cmp	lr, r4
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x1da>
 8000e84:	eb1c 0404 	adds.w	r4, ip, r4
 8000e88:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e8c:	d26c      	bcs.n	8000f68 <__udivmoddi4+0x2ac>
 8000e8e:	45a6      	cmp	lr, r4
 8000e90:	d96a      	bls.n	8000f68 <__udivmoddi4+0x2ac>
 8000e92:	3b02      	subs	r3, #2
 8000e94:	4464      	add	r4, ip
 8000e96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9e:	eba4 040e 	sub.w	r4, r4, lr
 8000ea2:	42ac      	cmp	r4, r5
 8000ea4:	46c8      	mov	r8, r9
 8000ea6:	46ae      	mov	lr, r5
 8000ea8:	d356      	bcc.n	8000f58 <__udivmoddi4+0x29c>
 8000eaa:	d053      	beq.n	8000f54 <__udivmoddi4+0x298>
 8000eac:	b156      	cbz	r6, 8000ec4 <__udivmoddi4+0x208>
 8000eae:	ebb0 0208 	subs.w	r2, r0, r8
 8000eb2:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb6:	fa04 f707 	lsl.w	r7, r4, r7
 8000eba:	40ca      	lsrs	r2, r1
 8000ebc:	40cc      	lsrs	r4, r1
 8000ebe:	4317      	orrs	r7, r2
 8000ec0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ecc:	f1c3 0120 	rsb	r1, r3, #32
 8000ed0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed8:	fa25 f101 	lsr.w	r1, r5, r1
 8000edc:	409d      	lsls	r5, r3
 8000ede:	432a      	orrs	r2, r5
 8000ee0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee4:	fa1f fe8c 	uxth.w	lr, ip
 8000ee8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eec:	fb07 1510 	mls	r5, r7, r0, r1
 8000ef0:	0c11      	lsrs	r1, r2, #16
 8000ef2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef6:	fb00 f50e 	mul.w	r5, r0, lr
 8000efa:	428d      	cmp	r5, r1
 8000efc:	fa04 f403 	lsl.w	r4, r4, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x258>
 8000f02:	eb1c 0101 	adds.w	r1, ip, r1
 8000f06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0a:	d22f      	bcs.n	8000f6c <__udivmoddi4+0x2b0>
 8000f0c:	428d      	cmp	r5, r1
 8000f0e:	d92d      	bls.n	8000f6c <__udivmoddi4+0x2b0>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4461      	add	r1, ip
 8000f14:	1b49      	subs	r1, r1, r5
 8000f16:	b292      	uxth	r2, r2
 8000f18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000f20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f24:	fb05 f10e 	mul.w	r1, r5, lr
 8000f28:	4291      	cmp	r1, r2
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x282>
 8000f2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000f30:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f34:	d216      	bcs.n	8000f64 <__udivmoddi4+0x2a8>
 8000f36:	4291      	cmp	r1, r2
 8000f38:	d914      	bls.n	8000f64 <__udivmoddi4+0x2a8>
 8000f3a:	3d02      	subs	r5, #2
 8000f3c:	4462      	add	r2, ip
 8000f3e:	1a52      	subs	r2, r2, r1
 8000f40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f44:	e738      	b.n	8000db8 <__udivmoddi4+0xfc>
 8000f46:	4631      	mov	r1, r6
 8000f48:	4630      	mov	r0, r6
 8000f4a:	e708      	b.n	8000d5e <__udivmoddi4+0xa2>
 8000f4c:	4639      	mov	r1, r7
 8000f4e:	e6e6      	b.n	8000d1e <__udivmoddi4+0x62>
 8000f50:	4610      	mov	r0, r2
 8000f52:	e6fb      	b.n	8000d4c <__udivmoddi4+0x90>
 8000f54:	4548      	cmp	r0, r9
 8000f56:	d2a9      	bcs.n	8000eac <__udivmoddi4+0x1f0>
 8000f58:	ebb9 0802 	subs.w	r8, r9, r2
 8000f5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f60:	3b01      	subs	r3, #1
 8000f62:	e7a3      	b.n	8000eac <__udivmoddi4+0x1f0>
 8000f64:	4645      	mov	r5, r8
 8000f66:	e7ea      	b.n	8000f3e <__udivmoddi4+0x282>
 8000f68:	462b      	mov	r3, r5
 8000f6a:	e794      	b.n	8000e96 <__udivmoddi4+0x1da>
 8000f6c:	4640      	mov	r0, r8
 8000f6e:	e7d1      	b.n	8000f14 <__udivmoddi4+0x258>
 8000f70:	46d0      	mov	r8, sl
 8000f72:	e77b      	b.n	8000e6c <__udivmoddi4+0x1b0>
 8000f74:	3d02      	subs	r5, #2
 8000f76:	4462      	add	r2, ip
 8000f78:	e732      	b.n	8000de0 <__udivmoddi4+0x124>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e70a      	b.n	8000d94 <__udivmoddi4+0xd8>
 8000f7e:	4464      	add	r4, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e742      	b.n	8000e0a <__udivmoddi4+0x14e>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f000 fa47 	bl	8001424 <null_ptr_check>
 8000f96:	4603      	mov	r3, r0
 8000f98:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 8000f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d117      	bne.n	8000fd2 <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	20d0      	movs	r0, #208	; 0xd0
 8000faa:	f000 f818 	bl	8000fde <bmp2_get_regs>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 8000fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10b      	bne.n	8000fd2 <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b58      	cmp	r3, #88	; 0x58
 8000fc0:	d105      	bne.n	8000fce <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 fa79 	bl	80014ba <get_calib_param>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	73fb      	strb	r3, [r7, #15]
 8000fcc:	e001      	b.n	8000fd2 <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 8000fce:	23fc      	movs	r3, #252	; 0xfc
 8000fd0:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8000fde:	b590      	push	{r4, r7, lr}
 8000fe0:	b087      	sub	sp, #28
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	603b      	str	r3, [r7, #0]
 8000fea:	4603      	mov	r3, r0
 8000fec:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000fee:	6838      	ldr	r0, [r7, #0]
 8000ff0:	f000 fa18 	bl	8001424 <null_ptr_check>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 8000ff8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d11e      	bne.n	800103e <bmp2_get_regs+0x60>
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d01b      	beq.n	800103e <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	785b      	ldrb	r3, [r3, #1]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d103      	bne.n	8001016 <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001014:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	68dc      	ldr	r4, [r3, #12]
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	7bf8      	ldrb	r0, [r7, #15]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	68b9      	ldr	r1, [r7, #8]
 8001024:	47a0      	blx	r4
 8001026:	4603      	mov	r3, r0
 8001028:	461a      	mov	r2, r3
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d004      	beq.n	8001042 <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 8001038:	23fe      	movs	r3, #254	; 0xfe
 800103a:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 800103c:	e001      	b.n	8001042 <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800103e:	23ff      	movs	r3, #255	; 0xff
 8001040:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001042:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001046:	4618      	mov	r0, r3
 8001048:	371c      	adds	r7, #28
 800104a:	46bd      	mov	sp, r7
 800104c:	bd90      	pop	{r4, r7, pc}

0800104e <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 800104e:	b590      	push	{r4, r7, lr}
 8001050:	b08b      	sub	sp, #44	; 0x2c
 8001052:	af00      	add	r7, sp, #0
 8001054:	60f8      	str	r0, [r7, #12]
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
 800105a:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b04      	cmp	r3, #4
 8001060:	d901      	bls.n	8001066 <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 8001062:	2304      	movs	r3, #4
 8001064:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 8001066:	6838      	ldr	r0, [r7, #0]
 8001068:	f000 f9dc 	bl	8001424 <null_ptr_check>
 800106c:	4603      	mov	r3, r0
 800106e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001072:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001076:	2b00      	cmp	r3, #0
 8001078:	d150      	bne.n	800111c <bmp2_set_regs+0xce>
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d04d      	beq.n	800111c <bmp2_set_regs+0xce>
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d04a      	beq.n	800111c <bmp2_set_regs+0xce>
    {
        if (len > 0)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d043      	beq.n	8001114 <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	785b      	ldrb	r3, [r3, #1]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d114      	bne.n	80010c4 <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800109a:	2300      	movs	r3, #0
 800109c:	77fb      	strb	r3, [r7, #31]
 800109e:	e00d      	b.n	80010bc <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 80010a0:	7ffb      	ldrb	r3, [r7, #31]
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	4413      	add	r3, r2
 80010a6:	781a      	ldrb	r2, [r3, #0]
 80010a8:	7ffb      	ldrb	r3, [r7, #31]
 80010aa:	68f9      	ldr	r1, [r7, #12]
 80010ac:	440b      	add	r3, r1
 80010ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80010b6:	7ffb      	ldrb	r3, [r7, #31]
 80010b8:	3301      	adds	r3, #1
 80010ba:	77fb      	strb	r3, [r7, #31]
 80010bc:	7ffb      	ldrb	r3, [r7, #31]
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d8ed      	bhi.n	80010a0 <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d90b      	bls.n	80010e2 <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 80010ca:	f107 0114 	add.w	r1, r7, #20
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68ba      	ldr	r2, [r7, #8]
 80010d2:	68f8      	ldr	r0, [r7, #12]
 80010d4:	f000 f9c6 	bl	8001464 <interleave_data>
                temp_len = ((len * 2) - 1);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	3b01      	subs	r3, #1
 80010de:	623b      	str	r3, [r7, #32]
 80010e0:	e001      	b.n	80010e6 <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	691c      	ldr	r4, [r3, #16]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	7818      	ldrb	r0, [r3, #0]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f107 0114 	add.w	r1, r7, #20
 80010f6:	6a3a      	ldr	r2, [r7, #32]
 80010f8:	47a0      	blx	r4
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d00b      	beq.n	8001124 <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 800110c:	23fe      	movs	r3, #254	; 0xfe
 800110e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 8001112:	e007      	b.n	8001124 <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 8001114:	23fd      	movs	r3, #253	; 0xfd
 8001116:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 800111a:	e003      	b.n	8001124 <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800111c:	23ff      	movs	r3, #255	; 0xff
 800111e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001122:	e000      	b.n	8001126 <bmp2_set_regs+0xd8>
        if (len > 0)
 8001124:	bf00      	nop
    }

    return rslt;
 8001126:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800112a:	4618      	mov	r0, r3
 800112c:	372c      	adds	r7, #44	; 0x2c
 800112e:	46bd      	mov	sp, r7
 8001130:	bd90      	pop	{r4, r7, pc}

08001132 <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b084      	sub	sp, #16
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 800113a:	23e0      	movs	r3, #224	; 0xe0
 800113c:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 800113e:	23b6      	movs	r3, #182	; 0xb6
 8001140:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001142:	f107 010d 	add.w	r1, r7, #13
 8001146:	f107 000e 	add.w	r0, r7, #14
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2201      	movs	r2, #1
 800114e:	f7ff ff7e 	bl	800104e <bmp2_set_regs>
 8001152:	4603      	mov	r3, r0
 8001154:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8001156:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b084      	sub	sp, #16
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800116c:	2300      	movs	r3, #0
 800116e:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d02d      	beq.n	80011d2 <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8001176:	f107 010c 	add.w	r1, r7, #12
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	2202      	movs	r2, #2
 800117e:	20f4      	movs	r0, #244	; 0xf4
 8001180:	f7ff ff2d 	bl	8000fde <bmp2_get_regs>
 8001184:	4603      	mov	r3, r0
 8001186:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001188:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d122      	bne.n	80011d6 <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 8001190:	7b3b      	ldrb	r3, [r7, #12]
 8001192:	095b      	lsrs	r3, r3, #5
 8001194:	b2da      	uxtb	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 800119a:	7b3b      	ldrb	r3, [r7, #12]
 800119c:	109b      	asrs	r3, r3, #2
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	f003 0307 	and.w	r3, r3, #7
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 80011aa:	7b7b      	ldrb	r3, [r7, #13]
 80011ac:	095b      	lsrs	r3, r3, #5
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 80011b4:	7b7b      	ldrb	r3, [r7, #13]
 80011b6:	109b      	asrs	r3, r3, #2
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 80011c4:	7b7b      	ldrb	r3, [r7, #13]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	715a      	strb	r2, [r3, #5]
 80011d0:	e001      	b.n	80011d6 <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80011d2:	23ff      	movs	r3, #255	; 0xff
 80011d4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80011d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	2000      	movs	r0, #0
 80011f2:	f000 f9fd 	bl	80015f0 <conf_sensor>
 80011f6:	4603      	mov	r3, r0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d01b      	beq.n	8001248 <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 8001210:	f107 010e 	add.w	r1, r7, #14
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	2201      	movs	r2, #1
 8001218:	20f3      	movs	r0, #243	; 0xf3
 800121a:	f7ff fee0 	bl	8000fde <bmp2_get_regs>
 800121e:	4603      	mov	r3, r0
 8001220:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d110      	bne.n	800124c <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 800122a:	7bbb      	ldrb	r3, [r7, #14]
 800122c:	10db      	asrs	r3, r3, #3
 800122e:	b2db      	uxtb	r3, r3
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	b2da      	uxtb	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 800123a:	7bbb      	ldrb	r3, [r7, #14]
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	b2da      	uxtb	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	705a      	strb	r2, [r3, #1]
 8001246:	e001      	b.n	800124c <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001248:	23ff      	movs	r3, #255	; 0xff
 800124a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800124c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
 8001264:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 8001266:	7bfb      	ldrb	r3, [r7, #15]
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	68b9      	ldr	r1, [r7, #8]
 800126c:	4618      	mov	r0, r3
 800126e:	f000 f9bf 	bl	80015f0 <conf_sensor>
 8001272:	4603      	mov	r3, r0
 8001274:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8001276:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	2300      	movs	r3, #0
 8001292:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 8001294:	f107 0308 	add.w	r3, r7, #8
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d024      	beq.n	80012ee <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 80012a4:	f107 0110 	add.w	r1, r7, #16
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	2206      	movs	r2, #6
 80012ac:	20f7      	movs	r0, #247	; 0xf7
 80012ae:	f7ff fe96 	bl	8000fde <bmp2_get_regs>
 80012b2:	4603      	mov	r3, r0
 80012b4:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80012b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d119      	bne.n	80012f2 <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 80012be:	f107 0208 	add.w	r2, r7, #8
 80012c2:	f107 0310 	add.w	r3, r7, #16
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 fab9 	bl	8001840 <parse_sensor_data>
 80012ce:	4603      	mov	r3, r0
 80012d0:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 80012d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d10b      	bne.n	80012f2 <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 80012da:	f107 0308 	add.w	r3, r7, #8
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	6879      	ldr	r1, [r7, #4]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 f80b 	bl	80012fe <bmp2_compensate_data>
 80012e8:	4603      	mov	r3, r0
 80012ea:	75fb      	strb	r3, [r7, #23]
 80012ec:	e001      	b.n	80012f2 <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80012ee:	23ff      	movs	r3, #255	; 0xff
 80012f0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80012f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af00      	add	r7, sp, #0
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 f88a 	bl	8001424 <null_ptr_check>
 8001310:	4603      	mov	r3, r0
 8001312:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 8001314:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d129      	bne.n	8001370 <bmp2_compensate_data+0x72>
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d026      	beq.n	8001370 <bmp2_compensate_data+0x72>
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d023      	beq.n	8001370 <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8001328:	68b9      	ldr	r1, [r7, #8]
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	f04f 0300 	mov.w	r3, #0
 8001332:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 8001336:	68b9      	ldr	r1, [r7, #8]
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	f04f 0300 	mov.w	r3, #0
 8001340:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	3308      	adds	r3, #8
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	68f9      	ldr	r1, [r7, #12]
 800134c:	4618      	mov	r0, r3
 800134e:	f000 fabb 	bl	80018c8 <compensate_temperature>
 8001352:	4603      	mov	r3, r0
 8001354:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001356:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10a      	bne.n	8001374 <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	68f9      	ldr	r1, [r7, #12]
 8001364:	4618      	mov	r0, r3
 8001366:	f000 fba7 	bl	8001ab8 <compensate_pressure>
 800136a:	4603      	mov	r3, r0
 800136c:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 800136e:	e001      	b.n	8001374 <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001370:	23ff      	movs	r3, #255	; 0xff
 8001372:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001374:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 8001380:	b5b0      	push	{r4, r5, r7, lr}
 8001382:	b092      	sub	sp, #72	; 0x48
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 800138c:	4b23      	ldr	r3, [pc, #140]	; (800141c <bmp2_compute_meas_time+0x9c>)
 800138e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001392:	461d      	mov	r5, r3
 8001394:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001398:	682b      	ldr	r3, [r5, #0]
 800139a:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 800139c:	4b20      	ldr	r3, [pc, #128]	; (8001420 <bmp2_compute_meas_time+0xa0>)
 800139e:	f107 0410 	add.w	r4, r7, #16
 80013a2:	461d      	mov	r5, r3
 80013a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80013ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 f837 	bl	8001424 <null_ptr_check>
 80013b6:	4603      	mov	r3, r0
 80013b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 80013bc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d122      	bne.n	800140a <bmp2_compute_meas_time+0x8a>
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d01f      	beq.n	800140a <bmp2_compute_meas_time+0x8a>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	7e1b      	ldrb	r3, [r3, #24]
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d111      	bne.n	80013f6 <bmp2_compute_meas_time+0x76>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	78db      	ldrb	r3, [r3, #3]
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	3348      	adds	r3, #72	; 0x48
 80013da:	443b      	add	r3, r7
 80013dc:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	789b      	ldrb	r3, [r3, #2]
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	3348      	adds	r3, #72	; 0x48
 80013e8:	443b      	add	r3, r7
 80013ea:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80013ee:	441a      	add	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80013f4:	e00c      	b.n	8001410 <bmp2_compute_meas_time+0x90>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	78db      	ldrb	r3, [r3, #3]
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	3348      	adds	r3, #72	; 0x48
 80013fe:	443b      	add	r3, r7
 8001400:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8001408:	e002      	b.n	8001410 <bmp2_compute_meas_time+0x90>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800140a:	23ff      	movs	r3, #255	; 0xff
 800140c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return rslt;
 8001410:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8001414:	4618      	mov	r0, r3
 8001416:	3748      	adds	r7, #72	; 0x48
 8001418:	46bd      	mov	sp, r7
 800141a:	bdb0      	pop	{r4, r5, r7, pc}
 800141c:	080098c4 	.word	0x080098c4
 8001420:	080098d8 	.word	0x080098d8

08001424 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d00b      	beq.n	800144a <null_ptr_check+0x26>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d007      	beq.n	800144a <null_ptr_check+0x26>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <null_ptr_check+0x26>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d102      	bne.n	8001450 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 800144a:	23ff      	movs	r3, #255	; 0xff
 800144c:	73fb      	strb	r3, [r7, #15]
 800144e:	e001      	b.n	8001454 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 8001450:	2300      	movs	r3, #0
 8001452:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001454:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8001464:	b480      	push	{r7}
 8001466:	b087      	sub	sp, #28
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8001472:	2301      	movs	r3, #1
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	e015      	b.n	80014a4 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	441a      	add	r2, r3
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	3b01      	subs	r3, #1
 8001484:	68b9      	ldr	r1, [r7, #8]
 8001486:	440b      	add	r3, r1
 8001488:	7812      	ldrb	r2, [r2, #0]
 800148a:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	441a      	add	r2, r3
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	68b9      	ldr	r1, [r7, #8]
 8001498:	440b      	add	r3, r1
 800149a:	7812      	ldrb	r2, [r2, #0]
 800149c:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	3301      	adds	r3, #1
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	697a      	ldr	r2, [r7, #20]
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d3e5      	bcc.n	8001478 <interleave_data+0x14>
    }
}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	371c      	adds	r7, #28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b08a      	sub	sp, #40	; 0x28
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	f107 0310 	add.w	r3, r7, #16
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
 80014d4:	611a      	str	r2, [r3, #16]
 80014d6:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 80014d8:	f107 010c 	add.w	r1, r7, #12
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2219      	movs	r2, #25
 80014e0:	2088      	movs	r0, #136	; 0x88
 80014e2:	f7ff fd7c 	bl	8000fde <bmp2_get_regs>
 80014e6:	4603      	mov	r3, r0
 80014e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BMP2_OK)
 80014ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d177      	bne.n	80015e4 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 80014f4:	7b7b      	ldrb	r3, [r7, #13]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	b21a      	sxth	r2, r3
 80014fa:	7b3b      	ldrb	r3, [r7, #12]
 80014fc:	b21b      	sxth	r3, r3
 80014fe:	4313      	orrs	r3, r2
 8001500:	b21b      	sxth	r3, r3
 8001502:	b29a      	uxth	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	b21a      	sxth	r2, r3
 800150e:	7bbb      	ldrb	r3, [r7, #14]
 8001510:	b21b      	sxth	r3, r3
 8001512:	4313      	orrs	r3, r2
 8001514:	b21a      	sxth	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 800151a:	7c7b      	ldrb	r3, [r7, #17]
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	b21a      	sxth	r2, r3
 8001520:	7c3b      	ldrb	r3, [r7, #16]
 8001522:	b21b      	sxth	r3, r3
 8001524:	4313      	orrs	r3, r2
 8001526:	b21a      	sxth	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 800152c:	7cfb      	ldrb	r3, [r7, #19]
 800152e:	021b      	lsls	r3, r3, #8
 8001530:	b21a      	sxth	r2, r3
 8001532:	7cbb      	ldrb	r3, [r7, #18]
 8001534:	b21b      	sxth	r3, r3
 8001536:	4313      	orrs	r3, r2
 8001538:	b21b      	sxth	r3, r3
 800153a:	b29a      	uxth	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	845a      	strh	r2, [r3, #34]	; 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 8001540:	7d7b      	ldrb	r3, [r7, #21]
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	b21a      	sxth	r2, r3
 8001546:	7d3b      	ldrb	r3, [r7, #20]
 8001548:	b21b      	sxth	r3, r3
 800154a:	4313      	orrs	r3, r2
 800154c:	b21a      	sxth	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	849a      	strh	r2, [r3, #36]	; 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 8001552:	7dfb      	ldrb	r3, [r7, #23]
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	b21a      	sxth	r2, r3
 8001558:	7dbb      	ldrb	r3, [r7, #22]
 800155a:	b21b      	sxth	r3, r3
 800155c:	4313      	orrs	r3, r2
 800155e:	b21a      	sxth	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	84da      	strh	r2, [r3, #38]	; 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 8001564:	7e7b      	ldrb	r3, [r7, #25]
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b21a      	sxth	r2, r3
 800156a:	7e3b      	ldrb	r3, [r7, #24]
 800156c:	b21b      	sxth	r3, r3
 800156e:	4313      	orrs	r3, r2
 8001570:	b21a      	sxth	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	851a      	strh	r2, [r3, #40]	; 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 8001576:	7efb      	ldrb	r3, [r7, #27]
 8001578:	021b      	lsls	r3, r3, #8
 800157a:	b21a      	sxth	r2, r3
 800157c:	7ebb      	ldrb	r3, [r7, #26]
 800157e:	b21b      	sxth	r3, r3
 8001580:	4313      	orrs	r3, r2
 8001582:	b21a      	sxth	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	855a      	strh	r2, [r3, #42]	; 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 8001588:	7f7b      	ldrb	r3, [r7, #29]
 800158a:	021b      	lsls	r3, r3, #8
 800158c:	b21a      	sxth	r2, r3
 800158e:	7f3b      	ldrb	r3, [r7, #28]
 8001590:	b21b      	sxth	r3, r3
 8001592:	4313      	orrs	r3, r2
 8001594:	b21a      	sxth	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	859a      	strh	r2, [r3, #44]	; 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 800159a:	7ffb      	ldrb	r3, [r7, #31]
 800159c:	021b      	lsls	r3, r3, #8
 800159e:	b21a      	sxth	r2, r3
 80015a0:	7fbb      	ldrb	r3, [r7, #30]
 80015a2:	b21b      	sxth	r3, r3
 80015a4:	4313      	orrs	r3, r2
 80015a6:	b21a      	sxth	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	85da      	strh	r2, [r3, #46]	; 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 80015ac:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	b21a      	sxth	r2, r3
 80015b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	4313      	orrs	r3, r2
 80015bc:	b21a      	sxth	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	861a      	strh	r2, [r3, #48]	; 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 80015c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015c6:	021b      	lsls	r3, r3, #8
 80015c8:	b21a      	sxth	r2, r3
 80015ca:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80015ce:	b21b      	sxth	r3, r3
 80015d0:	4313      	orrs	r3, r2
 80015d2:	b21a      	sxth	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	865a      	strh	r2, [r3, #50]	; 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 80015d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015dc:	b25a      	sxtb	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    return rslt;
 80015e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3728      	adds	r7, #40	; 0x28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
 80015fc:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 80015fe:	2300      	movs	r3, #0
 8001600:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 8001602:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 8001606:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d074      	beq.n	80016f8 <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 800160e:	f107 0114 	add.w	r1, r7, #20
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2202      	movs	r2, #2
 8001616:	20f4      	movs	r0, #244	; 0xf4
 8001618:	f7ff fce1 	bl	8000fde <bmp2_get_regs>
 800161c:	4603      	mov	r3, r0
 800161e:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001620:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d169      	bne.n	80016fc <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff fd82 	bl	8001132 <bmp2_soft_reset>
 800162e:	4603      	mov	r3, r0
 8001630:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8001632:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d160      	bne.n	80016fc <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	68b9      	ldr	r1, [r7, #8]
 8001640:	4618      	mov	r0, r3
 8001642:	f000 f861 	bl	8001708 <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 8001646:	7d7b      	ldrb	r3, [r7, #21]
 8001648:	b25b      	sxtb	r3, r3
 800164a:	f003 031f 	and.w	r3, r3, #31
 800164e:	b25a      	sxtb	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	789b      	ldrb	r3, [r3, #2]
 8001654:	015b      	lsls	r3, r3, #5
 8001656:	b25b      	sxtb	r3, r3
 8001658:	4313      	orrs	r3, r2
 800165a:	b25b      	sxtb	r3, r3
 800165c:	b2db      	uxtb	r3, r3
 800165e:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 8001660:	7d7b      	ldrb	r3, [r7, #21]
 8001662:	b25b      	sxtb	r3, r3
 8001664:	f023 031c 	bic.w	r3, r3, #28
 8001668:	b25a      	sxtb	r2, r3
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	791b      	ldrb	r3, [r3, #4]
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	b25b      	sxtb	r3, r3
 8001672:	f003 031c 	and.w	r3, r3, #28
 8001676:	b25b      	sxtb	r3, r3
 8001678:	4313      	orrs	r3, r2
 800167a:	b25b      	sxtb	r3, r3
 800167c:	b2db      	uxtb	r3, r3
 800167e:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 8001680:	7d7b      	ldrb	r3, [r7, #21]
 8001682:	b25b      	sxtb	r3, r3
 8001684:	f023 0301 	bic.w	r3, r3, #1
 8001688:	b25a      	sxtb	r2, r3
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	795b      	ldrb	r3, [r3, #5]
 800168e:	b25b      	sxtb	r3, r3
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	b25b      	sxtb	r3, r3
 8001696:	4313      	orrs	r3, r2
 8001698:	b25b      	sxtb	r3, r3
 800169a:	b2db      	uxtb	r3, r3
 800169c:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 800169e:	f107 0114 	add.w	r1, r7, #20
 80016a2:	f107 0010 	add.w	r0, r7, #16
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2202      	movs	r2, #2
 80016aa:	f7ff fcd0 	bl	800104e <bmp2_set_regs>
 80016ae:	4603      	mov	r3, r0
 80016b0:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 80016b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d120      	bne.n	80016fc <conf_sensor+0x10c>
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d01d      	beq.n	80016fc <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	7bfa      	ldrb	r2, [r7, #15]
 80016c4:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 80016c6:	7d3b      	ldrb	r3, [r7, #20]
 80016c8:	b25b      	sxtb	r3, r3
 80016ca:	f023 0303 	bic.w	r3, r3, #3
 80016ce:	b25a      	sxtb	r2, r3
 80016d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	b25b      	sxtb	r3, r3
 80016da:	4313      	orrs	r3, r2
 80016dc:	b25b      	sxtb	r3, r3
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 80016e2:	f107 0114 	add.w	r1, r7, #20
 80016e6:	f107 0010 	add.w	r0, r7, #16
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f7ff fcae 	bl	800104e <bmp2_set_regs>
 80016f2:	4603      	mov	r3, r0
 80016f4:	75fb      	strb	r3, [r7, #23]
 80016f6:	e001      	b.n	80016fc <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80016f8:	23ff      	movs	r3, #255	; 0xff
 80016fa:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80016fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	78db      	ldrb	r3, [r3, #3]
 8001716:	2b04      	cmp	r3, #4
 8001718:	f200 808b 	bhi.w	8001832 <set_os_mode+0x12a>
 800171c:	a201      	add	r2, pc, #4	; (adr r2, 8001724 <set_os_mode+0x1c>)
 800171e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001722:	bf00      	nop
 8001724:	08001739 	.word	0x08001739
 8001728:	0800176b 	.word	0x0800176b
 800172c:	0800179d 	.word	0x0800179d
 8001730:	080017cf 	.word	0x080017cf
 8001734:	08001801 	.word	0x08001801
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	b25b      	sxtb	r3, r3
 800173e:	f003 031f 	and.w	r3, r3, #31
 8001742:	b25b      	sxtb	r3, r3
 8001744:	f043 0320 	orr.w	r3, r3, #32
 8001748:	b25b      	sxtb	r3, r3
 800174a:	b2da      	uxtb	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	b25b      	sxtb	r3, r3
 8001756:	f023 031c 	bic.w	r3, r3, #28
 800175a:	b25b      	sxtb	r3, r3
 800175c:	f043 0304 	orr.w	r3, r3, #4
 8001760:	b25b      	sxtb	r3, r3
 8001762:	b2da      	uxtb	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	701a      	strb	r2, [r3, #0]
            break;
 8001768:	e064      	b.n	8001834 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	b25b      	sxtb	r3, r3
 8001770:	f003 031f 	and.w	r3, r3, #31
 8001774:	b25b      	sxtb	r3, r3
 8001776:	f043 0320 	orr.w	r3, r3, #32
 800177a:	b25b      	sxtb	r3, r3
 800177c:	b2da      	uxtb	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	b25b      	sxtb	r3, r3
 8001788:	f023 031c 	bic.w	r3, r3, #28
 800178c:	b25b      	sxtb	r3, r3
 800178e:	f043 0308 	orr.w	r3, r3, #8
 8001792:	b25b      	sxtb	r3, r3
 8001794:	b2da      	uxtb	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	701a      	strb	r2, [r3, #0]
            break;
 800179a:	e04b      	b.n	8001834 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	b25b      	sxtb	r3, r3
 80017a2:	f003 031f 	and.w	r3, r3, #31
 80017a6:	b25b      	sxtb	r3, r3
 80017a8:	f043 0320 	orr.w	r3, r3, #32
 80017ac:	b25b      	sxtb	r3, r3
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	b25b      	sxtb	r3, r3
 80017ba:	f023 031c 	bic.w	r3, r3, #28
 80017be:	b25b      	sxtb	r3, r3
 80017c0:	f043 030c 	orr.w	r3, r3, #12
 80017c4:	b25b      	sxtb	r3, r3
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	701a      	strb	r2, [r3, #0]
            break;
 80017cc:	e032      	b.n	8001834 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	b25b      	sxtb	r3, r3
 80017d4:	f003 031f 	and.w	r3, r3, #31
 80017d8:	b25b      	sxtb	r3, r3
 80017da:	f043 0320 	orr.w	r3, r3, #32
 80017de:	b25b      	sxtb	r3, r3
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	b25b      	sxtb	r3, r3
 80017ec:	f023 031c 	bic.w	r3, r3, #28
 80017f0:	b25b      	sxtb	r3, r3
 80017f2:	f043 0310 	orr.w	r3, r3, #16
 80017f6:	b25b      	sxtb	r3, r3
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	701a      	strb	r2, [r3, #0]
            break;
 80017fe:	e019      	b.n	8001834 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	b25b      	sxtb	r3, r3
 8001806:	f003 031f 	and.w	r3, r3, #31
 800180a:	b25b      	sxtb	r3, r3
 800180c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001810:	b25b      	sxtb	r3, r3
 8001812:	b2da      	uxtb	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b25b      	sxtb	r3, r3
 800181e:	f023 031c 	bic.w	r3, r3, #28
 8001822:	b25b      	sxtb	r3, r3
 8001824:	f043 0314 	orr.w	r3, r3, #20
 8001828:	b25b      	sxtb	r3, r3
 800182a:	b2da      	uxtb	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	701a      	strb	r2, [r3, #0]
            break;
 8001830:	e000      	b.n	8001834 <set_os_mode+0x12c>
        default:
            break;
 8001832:	bf00      	nop
    }
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	031b      	lsls	r3, r3, #12
 8001850:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3301      	adds	r3, #1
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	011b      	lsls	r3, r3, #4
 800185a:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3302      	adds	r3, #2
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	091b      	lsrs	r3, r3, #4
 8001864:	b2db      	uxtb	r3, r3
 8001866:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	431a      	orrs	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	431a      	orrs	r2, r3
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	3303      	adds	r3, #3
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	031b      	lsls	r3, r3, #12
 800187e:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3304      	adds	r3, #4
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	011b      	lsls	r3, r3, #4
 8001888:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3305      	adds	r3, #5
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	091b      	lsrs	r3, r3, #4
 8001892:	b2db      	uxtb	r3, r3
 8001894:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	431a      	orrs	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4313      	orrs	r3, r2
 80018a0:	461a      	mov	r2, r3
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	4619      	mov	r1, r3
 80018b0:	4610      	mov	r0, r2
 80018b2:	f000 fae5 	bl	8001e80 <st_check_boundaries>
 80018b6:	4603      	mov	r3, r0
 80018b8:	72fb      	strb	r3, [r7, #11]

    return rslt;
 80018ba:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 80018c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018cc:	b08c      	sub	sp, #48	; 0x30
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7fe fe37 	bl	8000554 <__aeabi_i2d>
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	4b6c      	ldr	r3, [pc, #432]	; (8001a9c <compensate_temperature+0x1d4>)
 80018ec:	f7fe ffc6 	bl	800087c <__aeabi_ddiv>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4614      	mov	r4, r2
 80018f6:	461d      	mov	r5, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	8b9b      	ldrh	r3, [r3, #28]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe fe19 	bl	8000534 <__aeabi_ui2d>
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	4b66      	ldr	r3, [pc, #408]	; (8001aa0 <compensate_temperature+0x1d8>)
 8001908:	f7fe ffb8 	bl	800087c <__aeabi_ddiv>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4620      	mov	r0, r4
 8001912:	4629      	mov	r1, r5
 8001914:	f7fe fcd0 	bl	80002b8 <__aeabi_dsub>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4614      	mov	r4, r2
 800191e:	461d      	mov	r5, r3
           ((double) dev->calib_param.dig_t2);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fe14 	bl	8000554 <__aeabi_i2d>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001930:	4620      	mov	r0, r4
 8001932:	4629      	mov	r1, r5
 8001934:	f7fe fe78 	bl	8000628 <__aeabi_dmul>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fe05 	bl	8000554 <__aeabi_i2d>
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001952:	f7fe ff93 	bl	800087c <__aeabi_ddiv>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4614      	mov	r4, r2
 800195c:	461d      	mov	r5, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	8b9b      	ldrh	r3, [r3, #28]
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe fde6 	bl	8000534 <__aeabi_ui2d>
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	4b4d      	ldr	r3, [pc, #308]	; (8001aa4 <compensate_temperature+0x1dc>)
 800196e:	f7fe ff85 	bl	800087c <__aeabi_ddiv>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4620      	mov	r0, r4
 8001978:	4629      	mov	r1, r5
 800197a:	f7fe fc9d 	bl	80002b8 <__aeabi_dsub>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4614      	mov	r4, r2
 8001984:	461d      	mov	r5, r3
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe fde2 	bl	8000554 <__aeabi_i2d>
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001998:	f7fe ff70 	bl	800087c <__aeabi_ddiv>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4690      	mov	r8, r2
 80019a2:	4699      	mov	r9, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	8b9b      	ldrh	r3, [r3, #28]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7fe fdc3 	bl	8000534 <__aeabi_ui2d>
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	4b3c      	ldr	r3, [pc, #240]	; (8001aa4 <compensate_temperature+0x1dc>)
 80019b4:	f7fe ff62 	bl	800087c <__aeabi_ddiv>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4640      	mov	r0, r8
 80019be:	4649      	mov	r1, r9
 80019c0:	f7fe fc7a 	bl	80002b8 <__aeabi_dsub>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80019c8:	4620      	mov	r0, r4
 80019ca:	4629      	mov	r1, r5
 80019cc:	f7fe fe2c 	bl	8000628 <__aeabi_dmul>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4614      	mov	r4, r2
 80019d6:	461d      	mov	r5, r3
        ((double) dev->calib_param.dig_t3);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe fdb8 	bl	8000554 <__aeabi_i2d>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
    var2 =
 80019e8:	4620      	mov	r0, r4
 80019ea:	4629      	mov	r1, r5
 80019ec:	f7fe fe1c 	bl	8000628 <__aeabi_dmul>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 80019f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a00:	f7fe fc5c 	bl	80002bc <__adddf3>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f7ff f8a6 	bl	8000b5c <__aeabi_d2iz>
 8001a10:	4602      	mov	r2, r0
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	639a      	str	r2, [r3, #56]	; 0x38
    temperature = (var1 + var2) / 5120.0;
 8001a16:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a1a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a1e:	f7fe fc4d 	bl	80002bc <__adddf3>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4610      	mov	r0, r2
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	4b1e      	ldr	r3, [pc, #120]	; (8001aa8 <compensate_temperature+0x1e0>)
 8001a30:	f7fe ff24 	bl	800087c <__aeabi_ddiv>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <compensate_temperature+0x1e4>)
 8001a42:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a46:	f7ff f861 	bl	8000b0c <__aeabi_dcmplt>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d007      	beq.n	8001a60 <compensate_temperature+0x198>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	4b15      	ldr	r3, [pc, #84]	; (8001aac <compensate_temperature+0x1e4>)
 8001a56:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <compensate_temperature+0x1e8>)
 8001a66:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a6a:	f7ff f86d 	bl	8000b48 <__aeabi_dcmpgt>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d007      	beq.n	8001a84 <compensate_temperature+0x1bc>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <compensate_temperature+0x1e8>)
 8001a7a:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*comp_temperature) = temperature;
 8001a84:	68f9      	ldr	r1, [r7, #12]
 8001a86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a8a:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8001a8e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3730      	adds	r7, #48	; 0x30
 8001a96:	46bd      	mov	sp, r7
 8001a98:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a9c:	40d00000 	.word	0x40d00000
 8001aa0:	40900000 	.word	0x40900000
 8001aa4:	40c00000 	.word	0x40c00000
 8001aa8:	40b40000 	.word	0x40b40000
 8001aac:	c0440000 	.word	0xc0440000
 8001ab0:	40554000 	.word	0x40554000
 8001ab4:	00000000 	.word	0x00000000

08001ab8 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001ab8:	b5b0      	push	{r4, r5, r7, lr}
 8001aba:	b08c      	sub	sp, #48	; 0x30
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double pressure = 0.0;
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fd3a 	bl	8000554 <__aeabi_i2d>
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ae8:	f7fe fec8 	bl	800087c <__aeabi_ddiv>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	4bcb      	ldr	r3, [pc, #812]	; (8001e28 <compensate_pressure+0x370>)
 8001afa:	f7fe fbdd 	bl	80002b8 <__aeabi_dsub>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001b06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b0e:	f7fe fd8b 	bl	8000628 <__aeabi_dmul>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4614      	mov	r4, r2
 8001b18:	461d      	mov	r5, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fd17 	bl	8000554 <__aeabi_i2d>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	4629      	mov	r1, r5
 8001b2e:	f7fe fd7b 	bl	8000628 <__aeabi_dmul>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4610      	mov	r0, r2
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	4bbb      	ldr	r3, [pc, #748]	; (8001e2c <compensate_pressure+0x374>)
 8001b40:	f7fe fe9c 	bl	800087c <__aeabi_ddiv>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fcfe 	bl	8000554 <__aeabi_i2d>
 8001b58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b5c:	f7fe fd64 	bl	8000628 <__aeabi_dmul>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	f7fe fba6 	bl	80002bc <__adddf3>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b78:	f7fe fba0 	bl	80002bc <__adddf3>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	4ba9      	ldr	r3, [pc, #676]	; (8001e30 <compensate_pressure+0x378>)
 8001b8a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b8e:	f7fe fe75 	bl	800087c <__aeabi_ddiv>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4614      	mov	r4, r2
 8001b98:	461d      	mov	r5, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fcd7 	bl	8000554 <__aeabi_i2d>
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	4ba2      	ldr	r3, [pc, #648]	; (8001e34 <compensate_pressure+0x37c>)
 8001bac:	f7fe fd3c 	bl	8000628 <__aeabi_dmul>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	4629      	mov	r1, r5
 8001bb8:	f7fe fb80 	bl	80002bc <__adddf3>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fcc2 	bl	8000554 <__aeabi_i2d>
 8001bd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bd4:	f7fe fd28 	bl	8000628 <__aeabi_dmul>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001be4:	f7fe fd20 	bl	8000628 <__aeabi_dmul>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	4b90      	ldr	r3, [pc, #576]	; (8001e38 <compensate_pressure+0x380>)
 8001bf6:	f7fe fe41 	bl	800087c <__aeabi_ddiv>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4614      	mov	r4, r2
 8001c00:	461d      	mov	r5, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe fca3 	bl	8000554 <__aeabi_i2d>
 8001c0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c12:	f7fe fd09 	bl	8000628 <__aeabi_dmul>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	4629      	mov	r1, r5
 8001c1e:	f7fe fb4d 	bl	80002bc <__adddf3>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	4610      	mov	r0, r2
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	4b82      	ldr	r3, [pc, #520]	; (8001e38 <compensate_pressure+0x380>)
 8001c30:	f7fe fe24 	bl	800087c <__aeabi_ddiv>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	e9c7 2306 	strd	r2, r3, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001c3c:	f04f 0200 	mov.w	r2, #0
 8001c40:	4b7a      	ldr	r3, [pc, #488]	; (8001e2c <compensate_pressure+0x374>)
 8001c42:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c46:	f7fe fe19 	bl	800087c <__aeabi_ddiv>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	4b79      	ldr	r3, [pc, #484]	; (8001e3c <compensate_pressure+0x384>)
 8001c58:	f7fe fb30 	bl	80002bc <__adddf3>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4614      	mov	r4, r2
 8001c62:	461d      	mov	r5, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fc63 	bl	8000534 <__aeabi_ui2d>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4620      	mov	r0, r4
 8001c74:	4629      	mov	r1, r5
 8001c76:	f7fe fcd7 	bl	8000628 <__aeabi_dmul>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c8e:	f7fe ff3d 	bl	8000b0c <__aeabi_dcmplt>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10b      	bne.n	8001cb0 <compensate_pressure+0x1f8>
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	f04f 0300 	mov.w	r3, #0
 8001ca0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ca4:	f7fe ff50 	bl	8000b48 <__aeabi_dcmpgt>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 80de 	beq.w	8001e6c <compensate_pressure+0x3b4>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe fc3d 	bl	8000534 <__aeabi_ui2d>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	f04f 0000 	mov.w	r0, #0
 8001cc2:	495f      	ldr	r1, [pc, #380]	; (8001e40 <compensate_pressure+0x388>)
 8001cc4:	f7fe faf8 	bl	80002b8 <__aeabi_dsub>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	e9c7 2308 	strd	r2, r3, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	4b5b      	ldr	r3, [pc, #364]	; (8001e44 <compensate_pressure+0x38c>)
 8001cd6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cda:	f7fe fdcf 	bl	800087c <__aeabi_ddiv>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ce6:	f7fe fae7 	bl	80002b8 <__aeabi_dsub>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4610      	mov	r0, r2
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	a347      	add	r3, pc, #284	; (adr r3, 8001e10 <compensate_pressure+0x358>)
 8001cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf8:	f7fe fc96 	bl	8000628 <__aeabi_dmul>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d08:	f7fe fdb8 	bl	800087c <__aeabi_ddiv>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	e9c7 2308 	strd	r2, r3, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe fc1a 	bl	8000554 <__aeabi_i2d>
 8001d20:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d24:	f7fe fc80 	bl	8000628 <__aeabi_dmul>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	4619      	mov	r1, r3
 8001d30:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d34:	f7fe fc78 	bl	8000628 <__aeabi_dmul>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	4b40      	ldr	r3, [pc, #256]	; (8001e48 <compensate_pressure+0x390>)
 8001d46:	f7fe fd99 	bl	800087c <__aeabi_ddiv>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe fbfb 	bl	8000554 <__aeabi_i2d>
 8001d5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d62:	f7fe fc61 	bl	8000628 <__aeabi_dmul>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	4b2e      	ldr	r3, [pc, #184]	; (8001e2c <compensate_pressure+0x374>)
 8001d74:	f7fe fd82 	bl	800087c <__aeabi_ddiv>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	e9c7 2304 	strd	r2, r3, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8001d80:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d84:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d88:	f7fe fa98 	bl	80002bc <__adddf3>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4614      	mov	r4, r2
 8001d92:	461d      	mov	r5, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fbda 	bl	8000554 <__aeabi_i2d>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4620      	mov	r0, r4
 8001da6:	4629      	mov	r1, r5
 8001da8:	f7fe fa88 	bl	80002bc <__adddf3>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <compensate_pressure+0x394>)
 8001dba:	f7fe fd5f 	bl	800087c <__aeabi_ddiv>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001dc6:	f7fe fa79 	bl	80002bc <__adddf3>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 8001dd2:	a311      	add	r3, pc, #68	; (adr r3, 8001e18 <compensate_pressure+0x360>)
 8001dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ddc:	f7fe fe96 	bl	8000b0c <__aeabi_dcmplt>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d007      	beq.n	8001df6 <compensate_pressure+0x33e>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 8001de6:	a30c      	add	r3, pc, #48	; (adr r3, 8001e18 <compensate_pressure+0x360>)
 8001de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dec:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 8001df0:	2303      	movs	r3, #3
 8001df2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 8001df6:	a30a      	add	r3, pc, #40	; (adr r3, 8001e20 <compensate_pressure+0x368>)
 8001df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e00:	f7fe fea2 	bl	8000b48 <__aeabi_dcmpgt>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	e022      	b.n	8001e50 <compensate_pressure+0x398>
 8001e0a:	bf00      	nop
 8001e0c:	f3af 8000 	nop.w
 8001e10:	00000000 	.word	0x00000000
 8001e14:	40b86a00 	.word	0x40b86a00
 8001e18:	00000000 	.word	0x00000000
 8001e1c:	40dd4c00 	.word	0x40dd4c00
 8001e20:	00000000 	.word	0x00000000
 8001e24:	40fadb00 	.word	0x40fadb00
 8001e28:	40ef4000 	.word	0x40ef4000
 8001e2c:	40e00000 	.word	0x40e00000
 8001e30:	40100000 	.word	0x40100000
 8001e34:	40f00000 	.word	0x40f00000
 8001e38:	41200000 	.word	0x41200000
 8001e3c:	3ff00000 	.word	0x3ff00000
 8001e40:	41300000 	.word	0x41300000
 8001e44:	40b00000 	.word	0x40b00000
 8001e48:	41e00000 	.word	0x41e00000
 8001e4c:	40300000 	.word	0x40300000
 8001e50:	d007      	beq.n	8001e62 <compensate_pressure+0x3aa>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 8001e52:	a309      	add	r3, pc, #36	; (adr r3, 8001e78 <compensate_pressure+0x3c0>)
 8001e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e58:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        (*comp_pressure) = pressure;
 8001e62:	68f9      	ldr	r1, [r7, #12]
 8001e64:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e68:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 8001e6c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3730      	adds	r7, #48	; 0x30
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bdb0      	pop	{r4, r5, r7, pc}
 8001e78:	00000000 	.word	0x00000000
 8001e7c:	40fadb00 	.word	0x40fadb00

08001e80 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	db03      	blt.n	8001e9c <st_check_boundaries+0x1c>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	4a1c      	ldr	r2, [pc, #112]	; (8001f08 <st_check_boundaries+0x88>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	dd09      	ble.n	8001eb0 <st_check_boundaries+0x30>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	db06      	blt.n	8001eb0 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a18      	ldr	r2, [pc, #96]	; (8001f08 <st_check_boundaries+0x88>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	dc02      	bgt.n	8001eb0 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 8001eaa:	23fa      	movs	r3, #250	; 0xfa
 8001eac:	73fb      	strb	r3, [r7, #15]
 8001eae:	e023      	b.n	8001ef8 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	db03      	blt.n	8001ebe <st_check_boundaries+0x3e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a13      	ldr	r2, [pc, #76]	; (8001f08 <st_check_boundaries+0x88>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	dd09      	ble.n	8001ed2 <st_check_boundaries+0x52>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	db06      	blt.n	8001ed2 <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	4a10      	ldr	r2, [pc, #64]	; (8001f08 <st_check_boundaries+0x88>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	dc02      	bgt.n	8001ed2 <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 8001ecc:	23fb      	movs	r3, #251	; 0xfb
 8001ece:	73fb      	strb	r3, [r7, #15]
 8001ed0:	e012      	b.n	8001ef8 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	db03      	blt.n	8001ee0 <st_check_boundaries+0x60>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	4a0b      	ldr	r2, [pc, #44]	; (8001f08 <st_check_boundaries+0x88>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	dd09      	ble.n	8001ef4 <st_check_boundaries+0x74>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	db03      	blt.n	8001eee <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a07      	ldr	r2, [pc, #28]	; (8001f08 <st_check_boundaries+0x88>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	dd02      	ble.n	8001ef4 <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001eee:	23f9      	movs	r3, #249	; 0xf9
 8001ef0:	73fb      	strb	r3, [r7, #15]
 8001ef2:	e001      	b.n	8001ef8 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	000ffff0 	.word	0x000ffff0

08001f0c <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff f837 	bl	8000f88 <bmp2_init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 8001f1e:	f107 0308 	add.w	r3, r7, #8
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff f91c 	bl	8001162 <bmp2_get_config>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_COEFF_8;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 8001f32:	2300      	movs	r3, #0
 8001f34:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 8001f36:	2303      	movs	r3, #3
 8001f38:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 8001f3a:	f107 0308 	add.w	r3, r7, #8
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff f94e 	bl	80011e2 <bmp2_set_config>
 8001f46:	4603      	mov	r3, r0
 8001f48:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 8001f4a:	f107 0308 	add.w	r3, r7, #8
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	4619      	mov	r1, r3
 8001f52:	2003      	movs	r0, #3
 8001f54:	f7ff f980 	bl	8001258 <bmp2_set_power_mode>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 8001f5c:	f107 0108 	add.w	r1, r7, #8
 8001f60:	f107 0310 	add.w	r3, r7, #16
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fa0a 	bl	8001380 <bmp2_compute_meas_time>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8001f70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	607a      	str	r2, [r7, #4]
 8001f86:	603b      	str	r3, [r7, #0]
 8001f88:	4603      	mov	r3, r0
 8001f8a:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001f90:	2300      	movs	r3, #0
 8001f92:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	6858      	ldr	r0, [r3, #4]
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	891b      	ldrh	r3, [r3, #8]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f001 fea4 	bl	8003cf0 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI , &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	6818      	ldr	r0, [r3, #0]
 8001fac:	f107 010f 	add.w	r1, r7, #15
 8001fb0:	2305      	movs	r3, #5
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f003 fc89 	bl	80058ca <HAL_SPI_Transmit>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Receive( hbmp2->SPI,  reg_data, length,            BMP2_TIMEOUT);
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	6818      	ldr	r0, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	2305      	movs	r3, #5
 8001fc6:	68b9      	ldr	r1, [r7, #8]
 8001fc8:	f003 fded 	bl	8005ba6 <HAL_SPI_Receive>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	461a      	mov	r2, r3
 8001fd0:	7dbb      	ldrb	r3, [r7, #22]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	6858      	ldr	r0, [r3, #4]
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	891b      	ldrh	r3, [r3, #8]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f001 fe85 	bl	8003cf0 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8001fe6:	7dbb      	ldrb	r3, [r7, #22]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <bmp2_spi_read+0x74>
    iError = -1;
 8001fec:	23ff      	movs	r3, #255	; 0xff
 8001fee:	75fb      	strb	r3, [r7, #23]

  return iError;
 8001ff0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	603b      	str	r3, [r7, #0]
 8002008:	4603      	mov	r3, r0
 800200a:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 800200c:	2300      	movs	r3, #0
 800200e:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8002010:	2300      	movs	r3, #0
 8002012:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	6858      	ldr	r0, [r3, #4]
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	891b      	ldrh	r3, [r3, #8]
 8002020:	2200      	movs	r2, #0
 8002022:	4619      	mov	r1, r3
 8002024:	f001 fe64 	bl	8003cf0 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI, &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	6818      	ldr	r0, [r3, #0]
 800202c:	f107 010f 	add.w	r1, r7, #15
 8002030:	2305      	movs	r3, #5
 8002032:	2201      	movs	r2, #1
 8002034:	f003 fc49 	bl	80058ca <HAL_SPI_Transmit>
 8002038:	4603      	mov	r3, r0
 800203a:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Transmit(hbmp2->SPI, (uint8_t*)reg_data, length,   BMP2_TIMEOUT);
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	6818      	ldr	r0, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	b29a      	uxth	r2, r3
 8002044:	2305      	movs	r3, #5
 8002046:	68b9      	ldr	r1, [r7, #8]
 8002048:	f003 fc3f 	bl	80058ca <HAL_SPI_Transmit>
 800204c:	4603      	mov	r3, r0
 800204e:	461a      	mov	r2, r3
 8002050:	7dbb      	ldrb	r3, [r7, #22]
 8002052:	4413      	add	r3, r2
 8002054:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	6858      	ldr	r0, [r3, #4]
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	891b      	ldrh	r3, [r3, #8]
 800205e:	2201      	movs	r2, #1
 8002060:	4619      	mov	r1, r3
 8002062:	f001 fe45 	bl	8003cf0 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8002066:	7dbb      	ldrb	r3, [r7, #22]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <bmp2_spi_write+0x74>
    iError = -1;
 800206c:	23ff      	movs	r3, #255	; 0xff
 800206e:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002070:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a05      	ldr	r2, [pc, #20]	; (80020a0 <bmp2_delay_us+0x24>)
 800208a:	fba2 2303 	umull	r2, r3, r2, r3
 800208e:	099b      	lsrs	r3, r3, #6
 8002090:	4618      	mov	r0, r3
 8002092:	f001 fab9 	bl	8003608 <HAL_Delay>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	10624dd3 	.word	0x10624dd3

080020a4 <BMP2_ReadData>:
 *  @retval 0 -> Success.
 *  @retval <0 -> Failure.
 *
 */
int8_t BMP2_ReadData(struct bmp2_dev *dev, double* press, double* temp)
{
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b08b      	sub	sp, #44	; 0x2c
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
  int8_t rslt = BMP2_E_NULL_PTR;
 80020b0:	23ff      	movs	r3, #255	; 0xff
 80020b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  struct bmp2_status status;
  struct bmp2_data comp_data;
  int8_t try = BMP2_GET_MAX_RETRY(dev);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	899b      	ldrh	r3, [r3, #12]
 80020bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  do {
    /* Read sensor status */
    rslt = bmp2_get_status(&status, dev);
 80020c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c4:	68f9      	ldr	r1, [r7, #12]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff f89a 	bl	8001200 <bmp2_get_status>
 80020cc:	4603      	mov	r3, r0
 80020ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* Read compensated data */
    rslt = bmp2_get_sensor_data(&comp_data, dev);
 80020d2:	f107 0310 	add.w	r3, r7, #16
 80020d6:	68f9      	ldr	r1, [r7, #12]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff f8d2 	bl	8001282 <bmp2_get_sensor_data>
 80020de:	4603      	mov	r3, r0
 80020e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    *temp = comp_data.temperature;
 80020e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	e9c1 2300 	strd	r2, r3, [r1]
    *press = comp_data.pressure / 100.0;
 80020ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	4b1c      	ldr	r3, [pc, #112]	; (8002168 <BMP2_ReadData+0xc4>)
 80020f8:	f7fe fbc0 	bl	800087c <__aeabi_ddiv>
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	68b9      	ldr	r1, [r7, #8]
 8002102:	e9c1 2300 	strd	r2, r3, [r1]
    try--;
 8002106:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800210a:	b2db      	uxtb	r3, r3
 800210c:	3b01      	subs	r3, #1
 800210e:	b2db      	uxtb	r3, r3
 8002110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 8002114:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <BMP2_ReadData+0x80>
 800211c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002120:	2b00      	cmp	r3, #0
 8002122:	dccd      	bgt.n	80020c0 <BMP2_ReadData+0x1c>

  /* Save reading result in sensor handler */
  BMP2_GET_PRESS(dev) = *press;
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212a:	68f9      	ldr	r1, [r7, #12]
 800212c:	684c      	ldr	r4, [r1, #4]
 800212e:	4610      	mov	r0, r2
 8002130:	4619      	mov	r1, r3
 8002132:	f7fe fd5b 	bl	8000bec <__aeabi_d2f>
 8002136:	4603      	mov	r3, r0
 8002138:	6163      	str	r3, [r4, #20]
  BMP2_GET_TEMP(dev) = *temp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002140:	68f9      	ldr	r1, [r7, #12]
 8002142:	684c      	ldr	r4, [r1, #4]
 8002144:	4610      	mov	r0, r2
 8002146:	4619      	mov	r1, r3
 8002148:	f7fe fd50 	bl	8000bec <__aeabi_d2f>
 800214c:	4603      	mov	r3, r0
 800214e:	6123      	str	r3, [r4, #16]
  BMP2_GET_STATUS(dev) = rslt;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002158:	729a      	strb	r2, [r3, #10]

  return rslt;
 800215a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 800215e:	4618      	mov	r0, r3
 8002160:	372c      	adds	r7, #44	; 0x2c
 8002162:	46bd      	mov	sp, r7
 8002164:	bd90      	pop	{r4, r7, pc}
 8002166:	bf00      	nop
 8002168:	40590000 	.word	0x40590000

0800216c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08e      	sub	sp, #56	; 0x38
 8002170:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	605a      	str	r2, [r3, #4]
 800217c:	609a      	str	r2, [r3, #8]
 800217e:	60da      	str	r2, [r3, #12]
 8002180:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002182:	4bac      	ldr	r3, [pc, #688]	; (8002434 <MX_GPIO_Init+0x2c8>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4aab      	ldr	r2, [pc, #684]	; (8002434 <MX_GPIO_Init+0x2c8>)
 8002188:	f043 0310 	orr.w	r3, r3, #16
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4ba9      	ldr	r3, [pc, #676]	; (8002434 <MX_GPIO_Init+0x2c8>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0310 	and.w	r3, r3, #16
 8002196:	623b      	str	r3, [r7, #32]
 8002198:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800219a:	4ba6      	ldr	r3, [pc, #664]	; (8002434 <MX_GPIO_Init+0x2c8>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	4aa5      	ldr	r2, [pc, #660]	; (8002434 <MX_GPIO_Init+0x2c8>)
 80021a0:	f043 0304 	orr.w	r3, r3, #4
 80021a4:	6313      	str	r3, [r2, #48]	; 0x30
 80021a6:	4ba3      	ldr	r3, [pc, #652]	; (8002434 <MX_GPIO_Init+0x2c8>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f003 0304 	and.w	r3, r3, #4
 80021ae:	61fb      	str	r3, [r7, #28]
 80021b0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021b2:	4ba0      	ldr	r3, [pc, #640]	; (8002434 <MX_GPIO_Init+0x2c8>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	4a9f      	ldr	r2, [pc, #636]	; (8002434 <MX_GPIO_Init+0x2c8>)
 80021b8:	f043 0320 	orr.w	r3, r3, #32
 80021bc:	6313      	str	r3, [r2, #48]	; 0x30
 80021be:	4b9d      	ldr	r3, [pc, #628]	; (8002434 <MX_GPIO_Init+0x2c8>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	f003 0320 	and.w	r3, r3, #32
 80021c6:	61bb      	str	r3, [r7, #24]
 80021c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021ca:	4b9a      	ldr	r3, [pc, #616]	; (8002434 <MX_GPIO_Init+0x2c8>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	4a99      	ldr	r2, [pc, #612]	; (8002434 <MX_GPIO_Init+0x2c8>)
 80021d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021d4:	6313      	str	r3, [r2, #48]	; 0x30
 80021d6:	4b97      	ldr	r3, [pc, #604]	; (8002434 <MX_GPIO_Init+0x2c8>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e2:	4b94      	ldr	r3, [pc, #592]	; (8002434 <MX_GPIO_Init+0x2c8>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	4a93      	ldr	r2, [pc, #588]	; (8002434 <MX_GPIO_Init+0x2c8>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6313      	str	r3, [r2, #48]	; 0x30
 80021ee:	4b91      	ldr	r3, [pc, #580]	; (8002434 <MX_GPIO_Init+0x2c8>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fa:	4b8e      	ldr	r3, [pc, #568]	; (8002434 <MX_GPIO_Init+0x2c8>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	4a8d      	ldr	r2, [pc, #564]	; (8002434 <MX_GPIO_Init+0x2c8>)
 8002200:	f043 0302 	orr.w	r3, r3, #2
 8002204:	6313      	str	r3, [r2, #48]	; 0x30
 8002206:	4b8b      	ldr	r3, [pc, #556]	; (8002434 <MX_GPIO_Init+0x2c8>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002212:	4b88      	ldr	r3, [pc, #544]	; (8002434 <MX_GPIO_Init+0x2c8>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	4a87      	ldr	r2, [pc, #540]	; (8002434 <MX_GPIO_Init+0x2c8>)
 8002218:	f043 0308 	orr.w	r3, r3, #8
 800221c:	6313      	str	r3, [r2, #48]	; 0x30
 800221e:	4b85      	ldr	r3, [pc, #532]	; (8002434 <MX_GPIO_Init+0x2c8>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800222a:	4b82      	ldr	r3, [pc, #520]	; (8002434 <MX_GPIO_Init+0x2c8>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	4a81      	ldr	r2, [pc, #516]	; (8002434 <MX_GPIO_Init+0x2c8>)
 8002230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002234:	6313      	str	r3, [r2, #48]	; 0x30
 8002236:	4b7f      	ldr	r3, [pc, #508]	; (8002434 <MX_GPIO_Init+0x2c8>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800223e:	607b      	str	r3, [r7, #4]
 8002240:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMP2_CSB_GPIO_Port, BMP2_CSB_Pin, GPIO_PIN_RESET);
 8002242:	2200      	movs	r2, #0
 8002244:	2110      	movs	r1, #16
 8002246:	487c      	ldr	r0, [pc, #496]	; (8002438 <MX_GPIO_Init+0x2cc>)
 8002248:	f001 fd52 	bl	8003cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800224c:	2200      	movs	r2, #0
 800224e:	f244 0181 	movw	r1, #16513	; 0x4081
 8002252:	487a      	ldr	r0, [pc, #488]	; (800243c <MX_GPIO_Init+0x2d0>)
 8002254:	f001 fd4c 	bl	8003cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 8002258:	2200      	movs	r2, #0
 800225a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800225e:	4878      	ldr	r0, [pc, #480]	; (8002440 <MX_GPIO_Init+0x2d4>)
 8002260:	f001 fd46 	bl	8003cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|LD4_Pin|LD5_Pin, GPIO_PIN_RESET);
 8002264:	2200      	movs	r2, #0
 8002266:	f244 2140 	movw	r1, #16960	; 0x4240
 800226a:	4876      	ldr	r0, [pc, #472]	; (8002444 <MX_GPIO_Init+0x2d8>)
 800226c:	f001 fd40 	bl	8003cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMP2_CSB_Pin;
 8002270:	2310      	movs	r3, #16
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002274:	2301      	movs	r3, #1
 8002276:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227c:	2303      	movs	r3, #3
 800227e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BMP2_CSB_GPIO_Port, &GPIO_InitStruct);
 8002280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002284:	4619      	mov	r1, r3
 8002286:	486c      	ldr	r0, [pc, #432]	; (8002438 <MX_GPIO_Init+0x2cc>)
 8002288:	f001 fb86 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800228c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002292:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002296:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800229c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a0:	4619      	mov	r1, r3
 80022a2:	4869      	ldr	r0, [pc, #420]	; (8002448 <MX_GPIO_Init+0x2dc>)
 80022a4:	f001 fb78 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = test_Pin;
 80022a8:	2308      	movs	r3, #8
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ac:	2300      	movs	r3, #0
 80022ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(test_GPIO_Port, &GPIO_InitStruct);
 80022b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b8:	4619      	mov	r1, r3
 80022ba:	4861      	ldr	r0, [pc, #388]	; (8002440 <MX_GPIO_Init+0x2d4>)
 80022bc:	f001 fb6c 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80022c0:	2332      	movs	r3, #50	; 0x32
 80022c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c4:	2302      	movs	r3, #2
 80022c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022cc:	2303      	movs	r3, #3
 80022ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022d0:	230b      	movs	r3, #11
 80022d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d8:	4619      	mov	r1, r3
 80022da:	485b      	ldr	r0, [pc, #364]	; (8002448 <MX_GPIO_Init+0x2dc>)
 80022dc:	f001 fb5c 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80022e0:	2386      	movs	r3, #134	; 0x86
 80022e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e4:	2302      	movs	r3, #2
 80022e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ec:	2303      	movs	r3, #3
 80022ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022f0:	230b      	movs	r3, #11
 80022f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f8:	4619      	mov	r1, r3
 80022fa:	4854      	ldr	r0, [pc, #336]	; (800244c <MX_GPIO_Init+0x2e0>)
 80022fc:	f001 fb4c 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002300:	f244 0381 	movw	r3, #16513	; 0x4081
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002306:	2301      	movs	r3, #1
 8002308:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230a:	2300      	movs	r3, #0
 800230c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230e:	2300      	movs	r3, #0
 8002310:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002316:	4619      	mov	r1, r3
 8002318:	4848      	ldr	r0, [pc, #288]	; (800243c <MX_GPIO_Init+0x2d0>)
 800231a:	f001 fb3d 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ON_Btn_Pin;
 800231e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002324:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002328:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800232a:	2301      	movs	r3, #1
 800232c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ON_Btn_GPIO_Port, &GPIO_InitStruct);
 800232e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002332:	4619      	mov	r1, r3
 8002334:	4842      	ldr	r0, [pc, #264]	; (8002440 <MX_GPIO_Init+0x2d4>)
 8002336:	f001 fb2f 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800233a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002340:	2301      	movs	r3, #1
 8002342:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002348:	2300      	movs	r3, #0
 800234a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800234c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002350:	4619      	mov	r1, r3
 8002352:	483b      	ldr	r0, [pc, #236]	; (8002440 <MX_GPIO_Init+0x2d4>)
 8002354:	f001 fb20 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OFF_Btn_Pin;
 8002358:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800235e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002362:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002364:	2302      	movs	r3, #2
 8002366:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OFF_Btn_GPIO_Port, &GPIO_InitStruct);
 8002368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800236c:	4619      	mov	r1, r3
 800236e:	4832      	ldr	r0, [pc, #200]	; (8002438 <MX_GPIO_Init+0x2cc>)
 8002370:	f001 fb12 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002374:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237a:	2302      	movs	r3, #2
 800237c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002382:	2303      	movs	r3, #3
 8002384:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002386:	230b      	movs	r3, #11
 8002388:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800238a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800238e:	4619      	mov	r1, r3
 8002390:	482a      	ldr	r0, [pc, #168]	; (800243c <MX_GPIO_Init+0x2d0>)
 8002392:	f001 fb01 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|LD4_Pin|LD5_Pin;
 8002396:	f244 2340 	movw	r3, #16960	; 0x4240
 800239a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800239c:	2301      	movs	r3, #1
 800239e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a4:	2300      	movs	r3, #0
 80023a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ac:	4619      	mov	r1, r3
 80023ae:	4825      	ldr	r0, [pc, #148]	; (8002444 <MX_GPIO_Init+0x2d8>)
 80023b0:	f001 faf2 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80023b4:	2380      	movs	r3, #128	; 0x80
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023b8:	2300      	movs	r3, #0
 80023ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80023c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023c4:	4619      	mov	r1, r3
 80023c6:	481f      	ldr	r0, [pc, #124]	; (8002444 <MX_GPIO_Init+0x2d8>)
 80023c8:	f001 fae6 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80023cc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	2302      	movs	r3, #2
 80023d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023da:	2303      	movs	r3, #3
 80023dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80023de:	230a      	movs	r3, #10
 80023e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023e6:	4619      	mov	r1, r3
 80023e8:	4818      	ldr	r0, [pc, #96]	; (800244c <MX_GPIO_Init+0x2e0>)
 80023ea:	f001 fad5 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80023ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023f4:	2300      	movs	r3, #0
 80023f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80023fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002400:	4619      	mov	r1, r3
 8002402:	4812      	ldr	r0, [pc, #72]	; (800244c <MX_GPIO_Init+0x2e0>)
 8002404:	f001 fac8 	bl	8003998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002408:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800240c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240e:	2302      	movs	r3, #2
 8002410:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	2300      	movs	r3, #0
 8002414:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002416:	2303      	movs	r3, #3
 8002418:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800241a:	230b      	movs	r3, #11
 800241c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800241e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002422:	4619      	mov	r1, r3
 8002424:	4807      	ldr	r0, [pc, #28]	; (8002444 <MX_GPIO_Init+0x2d8>)
 8002426:	f001 fab7 	bl	8003998 <HAL_GPIO_Init>

}
 800242a:	bf00      	nop
 800242c:	3738      	adds	r7, #56	; 0x38
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40023800 	.word	0x40023800
 8002438:	40021000 	.word	0x40021000
 800243c:	40020400 	.word	0x40020400
 8002440:	40021400 	.word	0x40021400
 8002444:	40021800 	.word	0x40021800
 8002448:	40020800 	.word	0x40020800
 800244c:	40020000 	.word	0x40020000

08002450 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002454:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <MX_I2C1_Init+0x74>)
 8002456:	4a1c      	ldr	r2, [pc, #112]	; (80024c8 <MX_I2C1_Init+0x78>)
 8002458:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800245a:	4b1a      	ldr	r3, [pc, #104]	; (80024c4 <MX_I2C1_Init+0x74>)
 800245c:	4a1b      	ldr	r2, [pc, #108]	; (80024cc <MX_I2C1_Init+0x7c>)
 800245e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002460:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <MX_I2C1_Init+0x74>)
 8002462:	2200      	movs	r2, #0
 8002464:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002466:	4b17      	ldr	r3, [pc, #92]	; (80024c4 <MX_I2C1_Init+0x74>)
 8002468:	2201      	movs	r2, #1
 800246a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800246c:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <MX_I2C1_Init+0x74>)
 800246e:	2200      	movs	r2, #0
 8002470:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002472:	4b14      	ldr	r3, [pc, #80]	; (80024c4 <MX_I2C1_Init+0x74>)
 8002474:	2200      	movs	r2, #0
 8002476:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002478:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <MX_I2C1_Init+0x74>)
 800247a:	2200      	movs	r2, #0
 800247c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800247e:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <MX_I2C1_Init+0x74>)
 8002480:	2200      	movs	r2, #0
 8002482:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002484:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <MX_I2C1_Init+0x74>)
 8002486:	2200      	movs	r2, #0
 8002488:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800248a:	480e      	ldr	r0, [pc, #56]	; (80024c4 <MX_I2C1_Init+0x74>)
 800248c:	f001 fc4a 	bl	8003d24 <HAL_I2C_Init>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002496:	f000 fb6d 	bl	8002b74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800249a:	2100      	movs	r1, #0
 800249c:	4809      	ldr	r0, [pc, #36]	; (80024c4 <MX_I2C1_Init+0x74>)
 800249e:	f001 ffb7 	bl	8004410 <HAL_I2CEx_ConfigAnalogFilter>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80024a8:	f000 fb64 	bl	8002b74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80024ac:	2100      	movs	r1, #0
 80024ae:	4805      	ldr	r0, [pc, #20]	; (80024c4 <MX_I2C1_Init+0x74>)
 80024b0:	f001 fff9 	bl	80044a6 <HAL_I2CEx_ConfigDigitalFilter>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80024ba:	f000 fb5b 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	200000f4 	.word	0x200000f4
 80024c8:	40005400 	.word	0x40005400
 80024cc:	20404768 	.word	0x20404768

080024d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b0aa      	sub	sp, #168	; 0xa8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024e8:	f107 0310 	add.w	r3, r7, #16
 80024ec:	2284      	movs	r2, #132	; 0x84
 80024ee:	2100      	movs	r1, #0
 80024f0:	4618      	mov	r0, r3
 80024f2:	f006 fd57 	bl	8008fa4 <memset>
  if(i2cHandle->Instance==I2C1)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a22      	ldr	r2, [pc, #136]	; (8002584 <HAL_I2C_MspInit+0xb4>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d13c      	bne.n	800257a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002500:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002504:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002506:	2300      	movs	r3, #0
 8002508:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800250a:	f107 0310 	add.w	r3, r7, #16
 800250e:	4618      	mov	r0, r3
 8002510:	f002 fd40 	bl	8004f94 <HAL_RCCEx_PeriphCLKConfig>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800251a:	f000 fb2b 	bl	8002b74 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800251e:	4b1a      	ldr	r3, [pc, #104]	; (8002588 <HAL_I2C_MspInit+0xb8>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	4a19      	ldr	r2, [pc, #100]	; (8002588 <HAL_I2C_MspInit+0xb8>)
 8002524:	f043 0302 	orr.w	r3, r3, #2
 8002528:	6313      	str	r3, [r2, #48]	; 0x30
 800252a:	4b17      	ldr	r3, [pc, #92]	; (8002588 <HAL_I2C_MspInit+0xb8>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002536:	f44f 7340 	mov.w	r3, #768	; 0x300
 800253a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800253e:	2312      	movs	r3, #18
 8002540:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254a:	2303      	movs	r3, #3
 800254c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002550:	2304      	movs	r3, #4
 8002552:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002556:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800255a:	4619      	mov	r1, r3
 800255c:	480b      	ldr	r0, [pc, #44]	; (800258c <HAL_I2C_MspInit+0xbc>)
 800255e:	f001 fa1b 	bl	8003998 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002562:	4b09      	ldr	r3, [pc, #36]	; (8002588 <HAL_I2C_MspInit+0xb8>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	4a08      	ldr	r2, [pc, #32]	; (8002588 <HAL_I2C_MspInit+0xb8>)
 8002568:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800256c:	6413      	str	r3, [r2, #64]	; 0x40
 800256e:	4b06      	ldr	r3, [pc, #24]	; (8002588 <HAL_I2C_MspInit+0xb8>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002576:	60bb      	str	r3, [r7, #8]
 8002578:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800257a:	bf00      	nop
 800257c:	37a8      	adds	r7, #168	; 0xa8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40005400 	.word	0x40005400
 8002588:	40023800 	.word	0x40023800
 800258c:	40020400 	.word	0x40020400

08002590 <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8002598:	2300      	movs	r3, #0
 800259a:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 80025a6:	2308      	movs	r3, #8
 80025a8:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 80025aa:	2028      	movs	r0, #40	; 0x28
 80025ac:	f001 f82c 	bl	8003608 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	7bfa      	ldrb	r2, [r7, #15]
 80025b6:	2130      	movs	r1, #48	; 0x30
 80025b8:	4618      	mov	r0, r3
 80025ba:	f000 f829 	bl	8002610 <lcd_write>
	HAL_Delay(5);
 80025be:	2005      	movs	r0, #5
 80025c0:	f001 f822 	bl	8003608 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	7bfa      	ldrb	r2, [r7, #15]
 80025ca:	2130      	movs	r1, #48	; 0x30
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 f81f 	bl	8002610 <lcd_write>
	HAL_Delay(1);
 80025d2:	2001      	movs	r0, #1
 80025d4:	f001 f818 	bl	8003608 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	7bfa      	ldrb	r2, [r7, #15]
 80025de:	2130      	movs	r1, #48	; 0x30
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 f815 	bl	8002610 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	7bfa      	ldrb	r2, [r7, #15]
 80025ec:	2102      	movs	r1, #2
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 f80e 	bl	8002610 <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	7bfa      	ldrb	r2, [r7, #15]
 80025fa:	210c      	movs	r1, #12
 80025fc:	4618      	mov	r0, r3
 80025fe:	f000 f807 	bl	8002610 <lcd_write>

	/* clear */
	lcd_clear(lcd);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f84a 	bl	800269c <lcd_clear>

}
 8002608:	bf00      	nop
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af02      	add	r7, sp, #8
 8002616:	4603      	mov	r3, r0
 8002618:	71fb      	strb	r3, [r7, #7]
 800261a:	460b      	mov	r3, r1
 800261c:	71bb      	strb	r3, [r7, #6]
 800261e:	4613      	mov	r3, r2
 8002620:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 8002622:	79bb      	ldrb	r3, [r7, #6]
 8002624:	f023 030f 	bic.w	r3, r3, #15
 8002628:	b2da      	uxtb	r2, r3
 800262a:	797b      	ldrb	r3, [r7, #5]
 800262c:	4313      	orrs	r3, r2
 800262e:	b2db      	uxtb	r3, r3
 8002630:	f043 0304 	orr.w	r3, r3, #4
 8002634:	b2db      	uxtb	r3, r3
 8002636:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 8002638:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800263c:	f023 030f 	bic.w	r3, r3, #15
 8002640:	b25a      	sxtb	r2, r3
 8002642:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002646:	4313      	orrs	r3, r2
 8002648:	b25b      	sxtb	r3, r3
 800264a:	b2db      	uxtb	r3, r3
 800264c:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 800264e:	79bb      	ldrb	r3, [r7, #6]
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	b2da      	uxtb	r2, r3
 8002654:	797b      	ldrb	r3, [r7, #5]
 8002656:	4313      	orrs	r3, r2
 8002658:	b2db      	uxtb	r3, r3
 800265a:	f043 0304 	orr.w	r3, r3, #4
 800265e:	b2db      	uxtb	r3, r3
 8002660:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 8002662:	79bb      	ldrb	r3, [r7, #6]
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	b25a      	sxtb	r2, r3
 8002668:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800266c:	4313      	orrs	r3, r2
 800266e:	b25b      	sxtb	r3, r3
 8002670:	b2db      	uxtb	r3, r3
 8002672:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	b299      	uxth	r1, r3
 8002678:	f107 020c 	add.w	r2, r7, #12
 800267c:	2364      	movs	r3, #100	; 0x64
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	2304      	movs	r3, #4
 8002682:	4805      	ldr	r0, [pc, #20]	; (8002698 <lcd_write+0x88>)
 8002684:	f001 fbde 	bl	8003e44 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8002688:	2005      	movs	r0, #5
 800268a:	f000 ffbd 	bl	8003608 <HAL_Delay>
}
 800268e:	bf00      	nop
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	200000f4 	.word	0x200000f4

0800269c <lcd_clear>:
		i++;
	}
}

void lcd_clear(struct lcd_disp * lcd)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 80026b2:	2308      	movs	r3, #8
 80026b4:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	7bfa      	ldrb	r2, [r7, #15]
 80026bc:	2101      	movs	r1, #1
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff ffa6 	bl	8002610 <lcd_write>
}
 80026c4:	bf00      	nop
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	0000      	movs	r0, r0
	...

080026d0 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim TIM handle
  * @retval None
  */
pid_t2 pid1={.param.Kp=1.2,.param.Ki=0.002, .param.Kd=0,.param.dt=1.0, .previous_error=0, .previous_integral=0};
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026d0:	b5b0      	push	{r4, r5, r7, lr}
 80026d2:	b0a8      	sub	sp, #160	; 0xa0
 80026d4:	af02      	add	r7, sp, #8
 80026d6:	6078      	str	r0, [r7, #4]
  if(htim == &htim2)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a7b      	ldr	r2, [pc, #492]	; (80028c8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d168      	bne.n	80027b2 <HAL_TIM_PeriodElapsedCallback+0xe2>
  {
    static unsigned int cnt = 0;
    cnt++;
 80026e0:	4b7a      	ldr	r3, [pc, #488]	; (80028cc <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	3301      	adds	r3, #1
 80026e6:	4a79      	ldr	r2, [pc, #484]	; (80028cc <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80026e8:	6013      	str	r3, [r2, #0]
    BMP2_ReadData(&bmp2dev, &press, &temp);
 80026ea:	4a79      	ldr	r2, [pc, #484]	; (80028d0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80026ec:	4979      	ldr	r1, [pc, #484]	; (80028d4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80026ee:	487a      	ldr	r0, [pc, #488]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80026f0:	f7ff fcd8 	bl	80020a4 <BMP2_ReadData>

    temp_int = 1000*temp;
 80026f4:	4b76      	ldr	r3, [pc, #472]	; (80028d0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80026f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	4b77      	ldr	r3, [pc, #476]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002700:	f7fd ff92 	bl	8000628 <__aeabi_dmul>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4610      	mov	r0, r2
 800270a:	4619      	mov	r1, r3
 800270c:	f7fe fa4e 	bl	8000bac <__aeabi_d2uiz>
 8002710:	4603      	mov	r3, r0
 8002712:	4a73      	ldr	r2, [pc, #460]	; (80028e0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002714:	6013      	str	r3, [r2, #0]
    press_int = 100*press;
 8002716:	4b6f      	ldr	r3, [pc, #444]	; (80028d4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002718:	e9d3 0100 	ldrd	r0, r1, [r3]
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	4b70      	ldr	r3, [pc, #448]	; (80028e4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002722:	f7fd ff81 	bl	8000628 <__aeabi_dmul>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	4610      	mov	r0, r2
 800272c:	4619      	mov	r1, r3
 800272e:	f7fe fa3d 	bl	8000bac <__aeabi_d2uiz>
 8002732:	4603      	mov	r3, r0
 8002734:	4a6c      	ldr	r2, [pc, #432]	; (80028e8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002736:	6013      	str	r3, [r2, #0]

    if(cnt == 4)
 8002738:	4b64      	ldr	r3, [pc, #400]	; (80028cc <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b04      	cmp	r3, #4
 800273e:	d138      	bne.n	80027b2 <HAL_TIM_PeriodElapsedCallback+0xe2>
    {
      uint8_t tx_buffer[128];
      int tx_msg_len = sprintf((char*)tx_buffer,
 8002740:	4b67      	ldr	r3, [pc, #412]	; (80028e0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a69      	ldr	r2, [pc, #420]	; (80028ec <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002746:	fba2 2303 	umull	r2, r3, r2, r3
 800274a:	099d      	lsrs	r5, r3, #6
 800274c:	4b64      	ldr	r3, [pc, #400]	; (80028e0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a66      	ldr	r2, [pc, #408]	; (80028ec <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002752:	fba2 1203 	umull	r1, r2, r2, r3
 8002756:	0992      	lsrs	r2, r2, #6
 8002758:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800275c:	fb01 f202 	mul.w	r2, r1, r2
 8002760:	1a9a      	subs	r2, r3, r2
 8002762:	4b61      	ldr	r3, [pc, #388]	; (80028e8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4962      	ldr	r1, [pc, #392]	; (80028f0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002768:	fba1 1303 	umull	r1, r3, r1, r3
 800276c:	0958      	lsrs	r0, r3, #5
 800276e:	4b5e      	ldr	r3, [pc, #376]	; (80028e8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002770:	6819      	ldr	r1, [r3, #0]
 8002772:	4b5f      	ldr	r3, [pc, #380]	; (80028f0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002774:	fba3 4301 	umull	r4, r3, r3, r1
 8002778:	095b      	lsrs	r3, r3, #5
 800277a:	2464      	movs	r4, #100	; 0x64
 800277c:	fb04 f303 	mul.w	r3, r4, r3
 8002780:	1acb      	subs	r3, r1, r3
 8002782:	f107 040c 	add.w	r4, r7, #12
 8002786:	9301      	str	r3, [sp, #4]
 8002788:	9000      	str	r0, [sp, #0]
 800278a:	4613      	mov	r3, r2
 800278c:	462a      	mov	r2, r5
 800278e:	4959      	ldr	r1, [pc, #356]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002790:	4620      	mov	r0, r4
 8002792:	f006 fbe7 	bl	8008f64 <siprintf>
 8002796:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    		  "Temperature: %2u.%03u degC; Pressure: %5u.%02u hPa\r",
    		  temp_int / 1000, temp_int % 1000,
			  press_int / 100, press_int % 100);
      HAL_UART_Transmit(&huart3, tx_buffer, tx_msg_len, 100);
 800279a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800279e:	b29a      	uxth	r2, r3
 80027a0:	f107 010c 	add.w	r1, r7, #12
 80027a4:	2364      	movs	r3, #100	; 0x64
 80027a6:	4854      	ldr	r0, [pc, #336]	; (80028f8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80027a8:	f005 f94e 	bl	8007a48 <HAL_UART_Transmit>
      cnt = 0;
 80027ac:	4b47      	ldr	r3, [pc, #284]	; (80028cc <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
    }
  }
  //pid
  if(htim == &htim7){
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a51      	ldr	r2, [pc, #324]	; (80028fc <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d109      	bne.n	80027ce <HAL_TIM_PeriodElapsedCallback+0xfe>

  		 current_temp = temp_int;
 80027ba:	4b49      	ldr	r3, [pc, #292]	; (80028e0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	ee07 3a90 	vmov	s15, r3
 80027c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027c6:	4b4e      	ldr	r3, [pc, #312]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80027c8:	edc3 7a00 	vstr	s15, [r3]
  		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,pwm_duty);

  	}


}
 80027cc:	e071      	b.n	80028b2 <HAL_TIM_PeriodElapsedCallback+0x1e2>
  		float pwm_duty_f= (999.0*calculate_discrete_pid(&pid1,zadane_obiektu,current_temp));
 80027ce:	4b4d      	ldr	r3, [pc, #308]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	ee07 3a90 	vmov	s15, r3
 80027d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027da:	4b49      	ldr	r3, [pc, #292]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80027dc:	ed93 7a00 	vldr	s14, [r3]
 80027e0:	eef0 0a47 	vmov.f32	s1, s14
 80027e4:	eeb0 0a67 	vmov.f32	s0, s15
 80027e8:	4847      	ldr	r0, [pc, #284]	; (8002908 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80027ea:	f000 f9c8 	bl	8002b7e <calculate_discrete_pid>
 80027ee:	ee10 3a10 	vmov	r3, s0
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fd fec0 	bl	8000578 <__aeabi_f2d>
 80027f8:	a331      	add	r3, pc, #196	; (adr r3, 80028c0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80027fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fe:	f7fd ff13 	bl	8000628 <__aeabi_dmul>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4610      	mov	r0, r2
 8002808:	4619      	mov	r1, r3
 800280a:	f7fe f9ef 	bl	8000bec <__aeabi_d2f>
 800280e:	4603      	mov	r3, r0
 8002810:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  		fanControlTest=pwm_duty_f;
 8002814:	4a3d      	ldr	r2, [pc, #244]	; (800290c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002816:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800281a:	6013      	str	r3, [r2, #0]
  		uint16_t pwm_duty=0;
 800281c:	2300      	movs	r3, #0
 800281e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
  		if(pwm_duty_f<0)pwm_duty=0;else
 8002822:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002826:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800282a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800282e:	d503      	bpl.n	8002838 <HAL_TIM_PeriodElapsedCallback+0x168>
 8002830:	2300      	movs	r3, #0
 8002832:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8002836:	e015      	b.n	8002864 <HAL_TIM_PeriodElapsedCallback+0x194>
  		if(pwm_duty_f>999.0)pwm_duty=999;else
 8002838:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800283c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002910 <HAL_TIM_PeriodElapsedCallback+0x240>
 8002840:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002848:	dd04      	ble.n	8002854 <HAL_TIM_PeriodElapsedCallback+0x184>
 800284a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800284e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8002852:	e007      	b.n	8002864 <HAL_TIM_PeriodElapsedCallback+0x194>
  			pwm_duty=(uint16_t)pwm_duty_f;
 8002854:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002858:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800285c:	ee17 3a90 	vmov	r3, s15
 8002860:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
  		fanControlTestDriven = pwm_duty;
 8002864:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002868:	ee07 3a90 	vmov	s15, r3
 800286c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002870:	4b28      	ldr	r3, [pc, #160]	; (8002914 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002872:	edc3 7a00 	vstr	s15, [r3]
  		if(temp_int -600 > zadane_obiektu) __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 700);
 8002876:	4b1a      	ldr	r3, [pc, #104]	; (80028e0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 800287e:	4b21      	ldr	r3, [pc, #132]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d904      	bls.n	8002890 <HAL_TIM_PeriodElapsedCallback+0x1c0>
 8002886:	4b24      	ldr	r3, [pc, #144]	; (8002918 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800288e:	639a      	str	r2, [r3, #56]	; 0x38
  		if(temp_int -200 < zadane_obiektu)__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0);
 8002890:	4b13      	ldr	r3, [pc, #76]	; (80028e0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f1a3 02c8 	sub.w	r2, r3, #200	; 0xc8
 8002898:	4b1a      	ldr	r3, [pc, #104]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	429a      	cmp	r2, r3
 800289e:	d203      	bcs.n	80028a8 <HAL_TIM_PeriodElapsedCallback+0x1d8>
 80028a0:	4b1d      	ldr	r3, [pc, #116]	; (8002918 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2200      	movs	r2, #0
 80028a6:	639a      	str	r2, [r3, #56]	; 0x38
  		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,pwm_duty);
 80028a8:	4b1b      	ldr	r3, [pc, #108]	; (8002918 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80028b0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80028b2:	bf00      	nop
 80028b4:	3798      	adds	r7, #152	; 0x98
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bdb0      	pop	{r4, r5, r7, pc}
 80028ba:	bf00      	nop
 80028bc:	f3af 8000 	nop.w
 80028c0:	00000000 	.word	0x00000000
 80028c4:	408f3800 	.word	0x408f3800
 80028c8:	20000200 	.word	0x20000200
 80028cc:	20000194 	.word	0x20000194
 80028d0:	20000148 	.word	0x20000148
 80028d4:	20000158 	.word	0x20000158
 80028d8:	20000018 	.word	0x20000018
 80028dc:	408f4000 	.word	0x408f4000
 80028e0:	20000150 	.word	0x20000150
 80028e4:	40590000 	.word	0x40590000
 80028e8:	20000160 	.word	0x20000160
 80028ec:	10624dd3 	.word	0x10624dd3
 80028f0:	51eb851f 	.word	0x51eb851f
 80028f4:	080098f8 	.word	0x080098f8
 80028f8:	20000330 	.word	0x20000330
 80028fc:	200002e4 	.word	0x200002e4
 8002900:	2000016c 	.word	0x2000016c
 8002904:	20000060 	.word	0x20000060
 8002908:	20000064 	.word	0x20000064
 800290c:	20000058 	.word	0x20000058
 8002910:	4479c000 	.word	0x4479c000
 8002914:	2000005c 	.word	0x2000005c
 8002918:	2000024c 	.word	0x2000024c

0800291c <wypelnienie1>:

void wypelnienie1(uint16_t duty)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	80fb      	strh	r3, [r7, #6]
	duty = duty*10;
 8002926:	88fb      	ldrh	r3, [r7, #6]
 8002928:	461a      	mov	r2, r3
 800292a:	0092      	lsls	r2, r2, #2
 800292c:	4413      	add	r3, r2
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	80fb      	strh	r3, [r7, #6]
	zadane_rezystora=duty;
 8002932:	88fb      	ldrh	r3, [r7, #6]
 8002934:	4a03      	ldr	r2, [pc, #12]	; (8002944 <wypelnienie1+0x28>)
 8002936:	6013      	str	r3, [r2, #0]
	//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty);
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	20000164 	.word	0x20000164

08002948 <wypelnienie2>:

void wypelnienie2(uint16_t duty)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	80fb      	strh	r3, [r7, #6]
	duty = duty*10;
 8002952:	88fb      	ldrh	r3, [r7, #6]
 8002954:	461a      	mov	r2, r3
 8002956:	0092      	lsls	r2, r2, #2
 8002958:	4413      	add	r3, r2
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	80fb      	strh	r3, [r7, #6]
	zadane_wiatraka=duty;
 800295e:	88fb      	ldrh	r3, [r7, #6]
 8002960:	4a03      	ldr	r2, [pc, #12]	; (8002970 <wypelnienie2+0x28>)
 8002962:	6013      	str	r3, [r2, #0]
	//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty);
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	20000168 	.word	0x20000168

08002974 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
	uint8_t fill=0;
 800297c:	2300      	movs	r3, #0
 800297e:	73fb      	strb	r3, [r7, #15]

	if(word[0] == 'r')
 8002980:	4b1c      	ldr	r3, [pc, #112]	; (80029f4 <HAL_UART_RxCpltCallback+0x80>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b72      	cmp	r3, #114	; 0x72
 8002986:	d113      	bne.n	80029b0 <HAL_UART_RxCpltCallback+0x3c>
	{
		fill = ((word[1] - '0') * 10 + (word[2] - '0'));
 8002988:	4b1a      	ldr	r3, [pc, #104]	; (80029f4 <HAL_UART_RxCpltCallback+0x80>)
 800298a:	785b      	ldrb	r3, [r3, #1]
 800298c:	3b30      	subs	r3, #48	; 0x30
 800298e:	b2db      	uxtb	r3, r3
 8002990:	461a      	mov	r2, r3
 8002992:	0092      	lsls	r2, r2, #2
 8002994:	4413      	add	r3, r2
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	b2da      	uxtb	r2, r3
 800299a:	4b16      	ldr	r3, [pc, #88]	; (80029f4 <HAL_UART_RxCpltCallback+0x80>)
 800299c:	789b      	ldrb	r3, [r3, #2]
 800299e:	4413      	add	r3, r2
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	3b30      	subs	r3, #48	; 0x30
 80029a4:	73fb      	strb	r3, [r7, #15]
		wypelnienie1(fill);
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff ffb6 	bl	800291c <wypelnienie1>
	}

	if(word[0] == 'w')
 80029b0:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <HAL_UART_RxCpltCallback+0x80>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b77      	cmp	r3, #119	; 0x77
 80029b6:	d113      	bne.n	80029e0 <HAL_UART_RxCpltCallback+0x6c>
	{
		fill = ((word[1] - '0') * 10 + (word[2] - '0'));
 80029b8:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <HAL_UART_RxCpltCallback+0x80>)
 80029ba:	785b      	ldrb	r3, [r3, #1]
 80029bc:	3b30      	subs	r3, #48	; 0x30
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	461a      	mov	r2, r3
 80029c2:	0092      	lsls	r2, r2, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <HAL_UART_RxCpltCallback+0x80>)
 80029cc:	789b      	ldrb	r3, [r3, #2]
 80029ce:	4413      	add	r3, r2
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	3b30      	subs	r3, #48	; 0x30
 80029d4:	73fb      	strb	r3, [r7, #15]
		wypelnienie2(fill);
 80029d6:	7bfb      	ldrb	r3, [r7, #15]
 80029d8:	b29b      	uxth	r3, r3
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff ffb4 	bl	8002948 <wypelnienie2>
	}
	HAL_UART_Receive_IT(&huart3, word, 3);
 80029e0:	2203      	movs	r2, #3
 80029e2:	4904      	ldr	r1, [pc, #16]	; (80029f4 <HAL_UART_RxCpltCallback+0x80>)
 80029e4:	4804      	ldr	r0, [pc, #16]	; (80029f8 <HAL_UART_RxCpltCallback+0x84>)
 80029e6:	f005 f8b2 	bl	8007b4e <HAL_UART_Receive_IT>
}
 80029ea:	bf00      	nop
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20000054 	.word	0x20000054
 80029f8:	20000330 	.word	0x20000330

080029fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a00:	f000 fda5 	bl	800354e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a04:	f000 f848 	bl	8002a98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a08:	f7ff fbb0 	bl	800216c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002a0c:	f000 fcde 	bl	80033cc <MX_USART3_UART_Init>
  MX_SPI4_Init();
 8002a10:	f000 f936 	bl	8002c80 <MX_SPI4_Init>
  MX_TIM2_Init();
 8002a14:	f000 fa7e 	bl	8002f14 <MX_TIM2_Init>
  MX_TIM4_Init();
 8002a18:	f000 fb50 	bl	80030bc <MX_TIM4_Init>
  MX_TIM3_Init();
 8002a1c:	f000 fac8 	bl	8002fb0 <MX_TIM3_Init>
  MX_TIM7_Init();
 8002a20:	f000 fbc4 	bl	80031ac <MX_TIM7_Init>
  MX_I2C1_Init();
 8002a24:	f7ff fd14 	bl	8002450 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  BMP2_Init(&bmp2dev);// inicjalizacja czujnika
 8002a28:	4814      	ldr	r0, [pc, #80]	; (8002a7c <main+0x80>)
 8002a2a:	f7ff fa6f 	bl	8001f0c <BMP2_Init>
  HAL_TIM_Base_Start_IT(&htim2);// uruchomienie timerow
 8002a2e:	4814      	ldr	r0, [pc, #80]	; (8002a80 <main+0x84>)
 8002a30:	f003 fe58 	bl	80066e4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);// uruchomienie timerow
 8002a34:	4813      	ldr	r0, [pc, #76]	; (8002a84 <main+0x88>)
 8002a36:	f003 fe55 	bl	80066e4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002a3a:	2108      	movs	r1, #8
 8002a3c:	4812      	ldr	r0, [pc, #72]	; (8002a88 <main+0x8c>)
 8002a3e:	f003 ff2b 	bl	8006898 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002a42:	2104      	movs	r1, #4
 8002a44:	4810      	ldr	r0, [pc, #64]	; (8002a88 <main+0x8c>)
 8002a46:	f003 ff27 	bl	8006898 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8002a4a:	4b0f      	ldr	r3, [pc, #60]	; (8002a88 <main+0x8c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8002a52:	4b0d      	ldr	r3, [pc, #52]	; (8002a88 <main+0x8c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2200      	movs	r2, #0
 8002a58:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_UART_Receive_IT(&huart3, word, 3);
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	490b      	ldr	r1, [pc, #44]	; (8002a8c <main+0x90>)
 8002a5e:	480c      	ldr	r0, [pc, #48]	; (8002a90 <main+0x94>)
 8002a60:	f005 f875 	bl	8007b4e <HAL_UART_Receive_IT>
//wyswietlacz
  disp.addr = (0x27 << 1);
 8002a64:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <main+0x98>)
 8002a66:	224e      	movs	r2, #78	; 0x4e
 8002a68:	701a      	strb	r2, [r3, #0]
  disp.bl = true;
 8002a6a:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <main+0x98>)
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  lcd_init(&disp);
 8002a72:	4808      	ldr	r0, [pc, #32]	; (8002a94 <main+0x98>)
 8002a74:	f7ff fd8c 	bl	8002590 <lcd_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002a78:	e7fe      	b.n	8002a78 <main+0x7c>
 8002a7a:	bf00      	nop
 8002a7c:	20000018 	.word	0x20000018
 8002a80:	20000200 	.word	0x20000200
 8002a84:	200002e4 	.word	0x200002e4
 8002a88:	2000024c 	.word	0x2000024c
 8002a8c:	20000054 	.word	0x20000054
 8002a90:	20000330 	.word	0x20000330
 8002a94:	20000170 	.word	0x20000170

08002a98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b094      	sub	sp, #80	; 0x50
 8002a9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a9e:	f107 0320 	add.w	r3, r7, #32
 8002aa2:	2230      	movs	r2, #48	; 0x30
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f006 fa7c 	bl	8008fa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002aac:	f107 030c 	add.w	r3, r7, #12
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002abc:	f001 fd40 	bl	8004540 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ac0:	4b2a      	ldr	r3, [pc, #168]	; (8002b6c <SystemClock_Config+0xd4>)
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	4a29      	ldr	r2, [pc, #164]	; (8002b6c <SystemClock_Config+0xd4>)
 8002ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aca:	6413      	str	r3, [r2, #64]	; 0x40
 8002acc:	4b27      	ldr	r3, [pc, #156]	; (8002b6c <SystemClock_Config+0xd4>)
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ad8:	4b25      	ldr	r3, [pc, #148]	; (8002b70 <SystemClock_Config+0xd8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a24      	ldr	r2, [pc, #144]	; (8002b70 <SystemClock_Config+0xd8>)
 8002ade:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ae2:	6013      	str	r3, [r2, #0]
 8002ae4:	4b22      	ldr	r3, [pc, #136]	; (8002b70 <SystemClock_Config+0xd8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002aec:	607b      	str	r3, [r7, #4]
 8002aee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002af0:	2301      	movs	r3, #1
 8002af2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002af4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002afa:	2302      	movs	r3, #2
 8002afc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002afe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002b04:	2304      	movs	r3, #4
 8002b06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002b08:	23d8      	movs	r3, #216	; 0xd8
 8002b0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002b10:	2303      	movs	r3, #3
 8002b12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b14:	f107 0320 	add.w	r3, r7, #32
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f001 fd71 	bl	8004600 <HAL_RCC_OscConfig>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002b24:	f000 f826 	bl	8002b74 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002b28:	f001 fd1a 	bl	8004560 <HAL_PWREx_EnableOverDrive>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002b32:	f000 f81f 	bl	8002b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b36:	230f      	movs	r3, #15
 8002b38:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002b42:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002b46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002b48:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002b4c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002b4e:	f107 030c 	add.w	r3, r7, #12
 8002b52:	2107      	movs	r1, #7
 8002b54:	4618      	mov	r0, r3
 8002b56:	f001 fff7 	bl	8004b48 <HAL_RCC_ClockConfig>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002b60:	f000 f808 	bl	8002b74 <Error_Handler>
  }
}
 8002b64:	bf00      	nop
 8002b66:	3750      	adds	r7, #80	; 0x50
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	40007000 	.word	0x40007000

08002b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b78:	b672      	cpsid	i
}
 8002b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b7c:	e7fe      	b.n	8002b7c <Error_Handler+0x8>

08002b7e <calculate_discrete_pid>:

#include "pid_regulator.h"

float32_t calculate_discrete_pid(pid_t2* pid, float32_t setpoint, float32_t measured){
 8002b7e:	b5b0      	push	{r4, r5, r7, lr}
 8002b80:	b08c      	sub	sp, #48	; 0x30
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	60f8      	str	r0, [r7, #12]
 8002b86:	ed87 0a02 	vstr	s0, [r7, #8]
 8002b8a:	edc7 0a01 	vstr	s1, [r7, #4]
	float32_t u=0, P, I, D, error, integral, derivative;
 8002b8e:	f04f 0300 	mov.w	r3, #0
 8002b92:	62fb      	str	r3, [r7, #44]	; 0x2c

	error = setpoint-measured;
 8002b94:	ed97 7a02 	vldr	s14, [r7, #8]
 8002b98:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ba0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	//proportional part
	P = pid->param.Kp * error;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	edd3 7a00 	vldr	s15, [r3]
 8002baa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bb2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	//integral part
	integral = pid->previous_integral + (error+pid->previous_error) ; //numerical integrator without anti-windup
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	ed93 7a05 	vldr	s14, [r3, #20]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	edd3 6a04 	vldr	s13, [r3, #16]
 8002bc2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bce:	edc7 7a08 	vstr	s15, [r7, #32]
	pid->previous_integral = integral;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6a3a      	ldr	r2, [r7, #32]
 8002bd6:	615a      	str	r2, [r3, #20]
	I = pid->param.Ki*integral*(pid->param.dt/2.0);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	ed93 7a01 	vldr	s14, [r3, #4]
 8002bde:	edd7 7a08 	vldr	s15, [r7, #32]
 8002be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002be6:	ee17 0a90 	vmov	r0, s15
 8002bea:	f7fd fcc5 	bl	8000578 <__aeabi_f2d>
 8002bee:	4604      	mov	r4, r0
 8002bf0:	460d      	mov	r5, r1
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fd fcbe 	bl	8000578 <__aeabi_f2d>
 8002bfc:	f04f 0200 	mov.w	r2, #0
 8002c00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c04:	f7fd fe3a 	bl	800087c <__aeabi_ddiv>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4620      	mov	r0, r4
 8002c0e:	4629      	mov	r1, r5
 8002c10:	f7fd fd0a 	bl	8000628 <__aeabi_dmul>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	4610      	mov	r0, r2
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	f7fd ffe6 	bl	8000bec <__aeabi_d2f>
 8002c20:	4603      	mov	r3, r0
 8002c22:	61fb      	str	r3, [r7, #28]

	//derivative part
	derivative = (error - pid->previous_error)/pid->param.dt; //numerical derivative without filter
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c2a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002c2e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	ed93 7a03 	vldr	s14, [r3, #12]
 8002c38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c3c:	edc7 7a06 	vstr	s15, [r7, #24]
	pid->previous_error = error;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c44:	611a      	str	r2, [r3, #16]
	D = pid->param.Kd*derivative;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c4c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c54:	edc7 7a05 	vstr	s15, [r7, #20]

	//sum of all parts
	u = P  + I + D; //without saturation
 8002c58:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002c5c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c64:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c6c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c


	return u;
 8002c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c72:	ee07 3a90 	vmov	s15, r3
}
 8002c76:	eeb0 0a67 	vmov.f32	s0, s15
 8002c7a:	3730      	adds	r7, #48	; 0x30
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bdb0      	pop	{r4, r5, r7, pc}

08002c80 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002c84:	4b1b      	ldr	r3, [pc, #108]	; (8002cf4 <MX_SPI4_Init+0x74>)
 8002c86:	4a1c      	ldr	r2, [pc, #112]	; (8002cf8 <MX_SPI4_Init+0x78>)
 8002c88:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002c8a:	4b1a      	ldr	r3, [pc, #104]	; (8002cf4 <MX_SPI4_Init+0x74>)
 8002c8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c90:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002c92:	4b18      	ldr	r3, [pc, #96]	; (8002cf4 <MX_SPI4_Init+0x74>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c98:	4b16      	ldr	r3, [pc, #88]	; (8002cf4 <MX_SPI4_Init+0x74>)
 8002c9a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c9e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002ca0:	4b14      	ldr	r3, [pc, #80]	; (8002cf4 <MX_SPI4_Init+0x74>)
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002ca6:	4b13      	ldr	r3, [pc, #76]	; (8002cf4 <MX_SPI4_Init+0x74>)
 8002ca8:	2201      	movs	r2, #1
 8002caa:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002cac:	4b11      	ldr	r3, [pc, #68]	; (8002cf4 <MX_SPI4_Init+0x74>)
 8002cae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cb2:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002cb4:	4b0f      	ldr	r3, [pc, #60]	; (8002cf4 <MX_SPI4_Init+0x74>)
 8002cb6:	2218      	movs	r2, #24
 8002cb8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cba:	4b0e      	ldr	r3, [pc, #56]	; (8002cf4 <MX_SPI4_Init+0x74>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cc0:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <MX_SPI4_Init+0x74>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cc6:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <MX_SPI4_Init+0x74>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002ccc:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <MX_SPI4_Init+0x74>)
 8002cce:	2207      	movs	r2, #7
 8002cd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002cd2:	4b08      	ldr	r3, [pc, #32]	; (8002cf4 <MX_SPI4_Init+0x74>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002cd8:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <MX_SPI4_Init+0x74>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002cde:	4805      	ldr	r0, [pc, #20]	; (8002cf4 <MX_SPI4_Init+0x74>)
 8002ce0:	f002 fd48 	bl	8005774 <HAL_SPI_Init>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8002cea:	f7ff ff43 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20000198 	.word	0x20000198
 8002cf8:	40013400 	.word	0x40013400

08002cfc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b08a      	sub	sp, #40	; 0x28
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d04:	f107 0314 	add.w	r3, r7, #20
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	605a      	str	r2, [r3, #4]
 8002d0e:	609a      	str	r2, [r3, #8]
 8002d10:	60da      	str	r2, [r3, #12]
 8002d12:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a17      	ldr	r2, [pc, #92]	; (8002d78 <HAL_SPI_MspInit+0x7c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d127      	bne.n	8002d6e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002d1e:	4b17      	ldr	r3, [pc, #92]	; (8002d7c <HAL_SPI_MspInit+0x80>)
 8002d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d22:	4a16      	ldr	r2, [pc, #88]	; (8002d7c <HAL_SPI_MspInit+0x80>)
 8002d24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d28:	6453      	str	r3, [r2, #68]	; 0x44
 8002d2a:	4b14      	ldr	r3, [pc, #80]	; (8002d7c <HAL_SPI_MspInit+0x80>)
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d32:	613b      	str	r3, [r7, #16]
 8002d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d36:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <HAL_SPI_MspInit+0x80>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	4a10      	ldr	r2, [pc, #64]	; (8002d7c <HAL_SPI_MspInit+0x80>)
 8002d3c:	f043 0310 	orr.w	r3, r3, #16
 8002d40:	6313      	str	r3, [r2, #48]	; 0x30
 8002d42:	4b0e      	ldr	r3, [pc, #56]	; (8002d7c <HAL_SPI_MspInit+0x80>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	f003 0310 	and.w	r3, r3, #16
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = BMP2_SCK_Pin|BMP2_SDO_Pin|BMP2_SDA_Pin;
 8002d4e:	2364      	movs	r3, #100	; 0x64
 8002d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d52:	2302      	movs	r3, #2
 8002d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002d5e:	2305      	movs	r3, #5
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d62:	f107 0314 	add.w	r3, r7, #20
 8002d66:	4619      	mov	r1, r3
 8002d68:	4805      	ldr	r0, [pc, #20]	; (8002d80 <HAL_SPI_MspInit+0x84>)
 8002d6a:	f000 fe15 	bl	8003998 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002d6e:	bf00      	nop
 8002d70:	3728      	adds	r7, #40	; 0x28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40013400 	.word	0x40013400
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	40021000 	.word	0x40021000

08002d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d8a:	4b0f      	ldr	r3, [pc, #60]	; (8002dc8 <HAL_MspInit+0x44>)
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	4a0e      	ldr	r2, [pc, #56]	; (8002dc8 <HAL_MspInit+0x44>)
 8002d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d94:	6413      	str	r3, [r2, #64]	; 0x40
 8002d96:	4b0c      	ldr	r3, [pc, #48]	; (8002dc8 <HAL_MspInit+0x44>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9e:	607b      	str	r3, [r7, #4]
 8002da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da2:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <HAL_MspInit+0x44>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	4a08      	ldr	r2, [pc, #32]	; (8002dc8 <HAL_MspInit+0x44>)
 8002da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dac:	6453      	str	r3, [r2, #68]	; 0x44
 8002dae:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <HAL_MspInit+0x44>)
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002db6:	603b      	str	r3, [r7, #0]
 8002db8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40023800 	.word	0x40023800

08002dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dd0:	e7fe      	b.n	8002dd0 <NMI_Handler+0x4>

08002dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dd6:	e7fe      	b.n	8002dd6 <HardFault_Handler+0x4>

08002dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ddc:	e7fe      	b.n	8002ddc <MemManage_Handler+0x4>

08002dde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dde:	b480      	push	{r7}
 8002de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002de2:	e7fe      	b.n	8002de2 <BusFault_Handler+0x4>

08002de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002de8:	e7fe      	b.n	8002de8 <UsageFault_Handler+0x4>

08002dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dea:	b480      	push	{r7}
 8002dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dee:	bf00      	nop
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dfc:	bf00      	nop
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e06:	b480      	push	{r7}
 8002e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e0a:	bf00      	nop
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e18:	f000 fbd6 	bl	80035c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e1c:	bf00      	nop
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e24:	4802      	ldr	r0, [pc, #8]	; (8002e30 <TIM2_IRQHandler+0x10>)
 8002e26:	f003 fe31 	bl	8006a8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000200 	.word	0x20000200

08002e34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e38:	4802      	ldr	r0, [pc, #8]	; (8002e44 <TIM3_IRQHandler+0x10>)
 8002e3a:	f003 fe27 	bl	8006a8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e3e:	bf00      	nop
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	2000024c 	.word	0x2000024c

08002e48 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002e4c:	4802      	ldr	r0, [pc, #8]	; (8002e58 <TIM4_IRQHandler+0x10>)
 8002e4e:	f003 fe1d 	bl	8006a8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002e52:	bf00      	nop
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20000298 	.word	0x20000298

08002e5c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002e60:	4802      	ldr	r0, [pc, #8]	; (8002e6c <USART3_IRQHandler+0x10>)
 8002e62:	f004 feb9 	bl	8007bd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000330 	.word	0x20000330

08002e70 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002e74:	4802      	ldr	r0, [pc, #8]	; (8002e80 <TIM7_IRQHandler+0x10>)
 8002e76:	f003 fe09 	bl	8006a8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	200002e4 	.word	0x200002e4

08002e84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e8c:	4a14      	ldr	r2, [pc, #80]	; (8002ee0 <_sbrk+0x5c>)
 8002e8e:	4b15      	ldr	r3, [pc, #84]	; (8002ee4 <_sbrk+0x60>)
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e98:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <_sbrk+0x64>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d102      	bne.n	8002ea6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ea0:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <_sbrk+0x64>)
 8002ea2:	4a12      	ldr	r2, [pc, #72]	; (8002eec <_sbrk+0x68>)
 8002ea4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ea6:	4b10      	ldr	r3, [pc, #64]	; (8002ee8 <_sbrk+0x64>)
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4413      	add	r3, r2
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d207      	bcs.n	8002ec4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002eb4:	f006 f87e 	bl	8008fb4 <__errno>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	220c      	movs	r2, #12
 8002ebc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec2:	e009      	b.n	8002ed8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ec4:	4b08      	ldr	r3, [pc, #32]	; (8002ee8 <_sbrk+0x64>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002eca:	4b07      	ldr	r3, [pc, #28]	; (8002ee8 <_sbrk+0x64>)
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	4a05      	ldr	r2, [pc, #20]	; (8002ee8 <_sbrk+0x64>)
 8002ed4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	20050000 	.word	0x20050000
 8002ee4:	00000400 	.word	0x00000400
 8002ee8:	200001fc 	.word	0x200001fc
 8002eec:	20000508 	.word	0x20000508

08002ef0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ef4:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <SystemInit+0x20>)
 8002ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efa:	4a05      	ldr	r2, [pc, #20]	; (8002f10 <SystemInit+0x20>)
 8002efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f04:	bf00      	nop
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	e000ed00 	.word	0xe000ed00

08002f14 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b088      	sub	sp, #32
 8002f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f1a:	f107 0310 	add.w	r3, r7, #16
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	605a      	str	r2, [r3, #4]
 8002f24:	609a      	str	r2, [r3, #8]
 8002f26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f28:	1d3b      	adds	r3, r7, #4
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	605a      	str	r2, [r3, #4]
 8002f30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002f32:	4b1e      	ldr	r3, [pc, #120]	; (8002fac <MX_TIM2_Init+0x98>)
 8002f34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f38:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1079;
 8002f3a:	4b1c      	ldr	r3, [pc, #112]	; (8002fac <MX_TIM2_Init+0x98>)
 8002f3c:	f240 4237 	movw	r2, #1079	; 0x437
 8002f40:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f42:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <MX_TIM2_Init+0x98>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24999;
 8002f48:	4b18      	ldr	r3, [pc, #96]	; (8002fac <MX_TIM2_Init+0x98>)
 8002f4a:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8002f4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f50:	4b16      	ldr	r3, [pc, #88]	; (8002fac <MX_TIM2_Init+0x98>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f56:	4b15      	ldr	r3, [pc, #84]	; (8002fac <MX_TIM2_Init+0x98>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002f5c:	4813      	ldr	r0, [pc, #76]	; (8002fac <MX_TIM2_Init+0x98>)
 8002f5e:	f003 fb69 	bl	8006634 <HAL_TIM_Base_Init>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002f68:	f7ff fe04 	bl	8002b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f72:	f107 0310 	add.w	r3, r7, #16
 8002f76:	4619      	mov	r1, r3
 8002f78:	480c      	ldr	r0, [pc, #48]	; (8002fac <MX_TIM2_Init+0x98>)
 8002f7a:	f003 ffbb 	bl	8006ef4 <HAL_TIM_ConfigClockSource>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002f84:	f7ff fdf6 	bl	8002b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f90:	1d3b      	adds	r3, r7, #4
 8002f92:	4619      	mov	r1, r3
 8002f94:	4805      	ldr	r0, [pc, #20]	; (8002fac <MX_TIM2_Init+0x98>)
 8002f96:	f004 fc5d 	bl	8007854 <HAL_TIMEx_MasterConfigSynchronization>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002fa0:	f7ff fde8 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002fa4:	bf00      	nop
 8002fa6:	3720      	adds	r7, #32
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	20000200 	.word	0x20000200

08002fb0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08e      	sub	sp, #56	; 0x38
 8002fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	605a      	str	r2, [r3, #4]
 8002fc0:	609a      	str	r2, [r3, #8]
 8002fc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fc4:	f107 031c 	add.w	r3, r7, #28
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fd0:	463b      	mov	r3, r7
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	605a      	str	r2, [r3, #4]
 8002fd8:	609a      	str	r2, [r3, #8]
 8002fda:	60da      	str	r2, [r3, #12]
 8002fdc:	611a      	str	r2, [r3, #16]
 8002fde:	615a      	str	r2, [r3, #20]
 8002fe0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002fe2:	4b34      	ldr	r3, [pc, #208]	; (80030b4 <MX_TIM3_Init+0x104>)
 8002fe4:	4a34      	ldr	r2, [pc, #208]	; (80030b8 <MX_TIM3_Init+0x108>)
 8002fe6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8002fe8:	4b32      	ldr	r3, [pc, #200]	; (80030b4 <MX_TIM3_Init+0x104>)
 8002fea:	2247      	movs	r2, #71	; 0x47
 8002fec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fee:	4b31      	ldr	r3, [pc, #196]	; (80030b4 <MX_TIM3_Init+0x104>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002ff4:	4b2f      	ldr	r3, [pc, #188]	; (80030b4 <MX_TIM3_Init+0x104>)
 8002ff6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ffa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ffc:	4b2d      	ldr	r3, [pc, #180]	; (80030b4 <MX_TIM3_Init+0x104>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003002:	4b2c      	ldr	r3, [pc, #176]	; (80030b4 <MX_TIM3_Init+0x104>)
 8003004:	2200      	movs	r2, #0
 8003006:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003008:	482a      	ldr	r0, [pc, #168]	; (80030b4 <MX_TIM3_Init+0x104>)
 800300a:	f003 fb13 	bl	8006634 <HAL_TIM_Base_Init>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003014:	f7ff fdae 	bl	8002b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003018:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800301c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800301e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003022:	4619      	mov	r1, r3
 8003024:	4823      	ldr	r0, [pc, #140]	; (80030b4 <MX_TIM3_Init+0x104>)
 8003026:	f003 ff65 	bl	8006ef4 <HAL_TIM_ConfigClockSource>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003030:	f7ff fda0 	bl	8002b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003034:	481f      	ldr	r0, [pc, #124]	; (80030b4 <MX_TIM3_Init+0x104>)
 8003036:	f003 fbcd 	bl	80067d4 <HAL_TIM_PWM_Init>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003040:	f7ff fd98 	bl	8002b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003044:	2300      	movs	r3, #0
 8003046:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003048:	2300      	movs	r3, #0
 800304a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800304c:	f107 031c 	add.w	r3, r7, #28
 8003050:	4619      	mov	r1, r3
 8003052:	4818      	ldr	r0, [pc, #96]	; (80030b4 <MX_TIM3_Init+0x104>)
 8003054:	f004 fbfe 	bl	8007854 <HAL_TIMEx_MasterConfigSynchronization>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800305e:	f7ff fd89 	bl	8002b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003062:	2360      	movs	r3, #96	; 0x60
 8003064:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003066:	2300      	movs	r3, #0
 8003068:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800306a:	2300      	movs	r3, #0
 800306c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800306e:	2300      	movs	r3, #0
 8003070:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003072:	463b      	mov	r3, r7
 8003074:	2204      	movs	r2, #4
 8003076:	4619      	mov	r1, r3
 8003078:	480e      	ldr	r0, [pc, #56]	; (80030b4 <MX_TIM3_Init+0x104>)
 800307a:	f003 fe27 	bl	8006ccc <HAL_TIM_PWM_ConfigChannel>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003084:	f7ff fd76 	bl	8002b74 <Error_Handler>
  }
  sConfigOC.Pulse = 500;
 8003088:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800308c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800308e:	463b      	mov	r3, r7
 8003090:	2208      	movs	r2, #8
 8003092:	4619      	mov	r1, r3
 8003094:	4807      	ldr	r0, [pc, #28]	; (80030b4 <MX_TIM3_Init+0x104>)
 8003096:	f003 fe19 	bl	8006ccc <HAL_TIM_PWM_ConfigChannel>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 80030a0:	f7ff fd68 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80030a4:	4803      	ldr	r0, [pc, #12]	; (80030b4 <MX_TIM3_Init+0x104>)
 80030a6:	f000 f931 	bl	800330c <HAL_TIM_MspPostInit>

}
 80030aa:	bf00      	nop
 80030ac:	3738      	adds	r7, #56	; 0x38
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	2000024c 	.word	0x2000024c
 80030b8:	40000400 	.word	0x40000400

080030bc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08e      	sub	sp, #56	; 0x38
 80030c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	605a      	str	r2, [r3, #4]
 80030cc:	609a      	str	r2, [r3, #8]
 80030ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030d0:	f107 031c 	add.w	r3, r7, #28
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	605a      	str	r2, [r3, #4]
 80030da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030dc:	463b      	mov	r3, r7
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	605a      	str	r2, [r3, #4]
 80030e4:	609a      	str	r2, [r3, #8]
 80030e6:	60da      	str	r2, [r3, #12]
 80030e8:	611a      	str	r2, [r3, #16]
 80030ea:	615a      	str	r2, [r3, #20]
 80030ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80030ee:	4b2d      	ldr	r3, [pc, #180]	; (80031a4 <MX_TIM4_Init+0xe8>)
 80030f0:	4a2d      	ldr	r2, [pc, #180]	; (80031a8 <MX_TIM4_Init+0xec>)
 80030f2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 107;
 80030f4:	4b2b      	ldr	r3, [pc, #172]	; (80031a4 <MX_TIM4_Init+0xe8>)
 80030f6:	226b      	movs	r2, #107	; 0x6b
 80030f8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030fa:	4b2a      	ldr	r3, [pc, #168]	; (80031a4 <MX_TIM4_Init+0xe8>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8003100:	4b28      	ldr	r3, [pc, #160]	; (80031a4 <MX_TIM4_Init+0xe8>)
 8003102:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003106:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003108:	4b26      	ldr	r3, [pc, #152]	; (80031a4 <MX_TIM4_Init+0xe8>)
 800310a:	2200      	movs	r2, #0
 800310c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800310e:	4b25      	ldr	r3, [pc, #148]	; (80031a4 <MX_TIM4_Init+0xe8>)
 8003110:	2200      	movs	r2, #0
 8003112:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003114:	4823      	ldr	r0, [pc, #140]	; (80031a4 <MX_TIM4_Init+0xe8>)
 8003116:	f003 fa8d 	bl	8006634 <HAL_TIM_Base_Init>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8003120:	f7ff fd28 	bl	8002b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003124:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003128:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800312a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800312e:	4619      	mov	r1, r3
 8003130:	481c      	ldr	r0, [pc, #112]	; (80031a4 <MX_TIM4_Init+0xe8>)
 8003132:	f003 fedf 	bl	8006ef4 <HAL_TIM_ConfigClockSource>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800313c:	f7ff fd1a 	bl	8002b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003140:	4818      	ldr	r0, [pc, #96]	; (80031a4 <MX_TIM4_Init+0xe8>)
 8003142:	f003 fb47 	bl	80067d4 <HAL_TIM_PWM_Init>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800314c:	f7ff fd12 	bl	8002b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003150:	2300      	movs	r3, #0
 8003152:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003154:	2300      	movs	r3, #0
 8003156:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003158:	f107 031c 	add.w	r3, r7, #28
 800315c:	4619      	mov	r1, r3
 800315e:	4811      	ldr	r0, [pc, #68]	; (80031a4 <MX_TIM4_Init+0xe8>)
 8003160:	f004 fb78 	bl	8007854 <HAL_TIMEx_MasterConfigSynchronization>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800316a:	f7ff fd03 	bl	8002b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800316e:	2360      	movs	r3, #96	; 0x60
 8003170:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003172:	2300      	movs	r3, #0
 8003174:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003176:	2300      	movs	r3, #0
 8003178:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800317a:	2300      	movs	r3, #0
 800317c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800317e:	463b      	mov	r3, r7
 8003180:	2200      	movs	r2, #0
 8003182:	4619      	mov	r1, r3
 8003184:	4807      	ldr	r0, [pc, #28]	; (80031a4 <MX_TIM4_Init+0xe8>)
 8003186:	f003 fda1 	bl	8006ccc <HAL_TIM_PWM_ConfigChannel>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8003190:	f7ff fcf0 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003194:	4803      	ldr	r0, [pc, #12]	; (80031a4 <MX_TIM4_Init+0xe8>)
 8003196:	f000 f8b9 	bl	800330c <HAL_TIM_MspPostInit>

}
 800319a:	bf00      	nop
 800319c:	3738      	adds	r7, #56	; 0x38
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20000298 	.word	0x20000298
 80031a8:	40000800 	.word	0x40000800

080031ac <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031b2:	1d3b      	adds	r3, r7, #4
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	605a      	str	r2, [r3, #4]
 80031ba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80031bc:	4b15      	ldr	r3, [pc, #84]	; (8003214 <MX_TIM7_Init+0x68>)
 80031be:	4a16      	ldr	r2, [pc, #88]	; (8003218 <MX_TIM7_Init+0x6c>)
 80031c0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10799;
 80031c2:	4b14      	ldr	r3, [pc, #80]	; (8003214 <MX_TIM7_Init+0x68>)
 80031c4:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80031c8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031ca:	4b12      	ldr	r3, [pc, #72]	; (8003214 <MX_TIM7_Init+0x68>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 80031d0:	4b10      	ldr	r3, [pc, #64]	; (8003214 <MX_TIM7_Init+0x68>)
 80031d2:	f242 720f 	movw	r2, #9999	; 0x270f
 80031d6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031d8:	4b0e      	ldr	r3, [pc, #56]	; (8003214 <MX_TIM7_Init+0x68>)
 80031da:	2200      	movs	r2, #0
 80031dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80031de:	480d      	ldr	r0, [pc, #52]	; (8003214 <MX_TIM7_Init+0x68>)
 80031e0:	f003 fa28 	bl	8006634 <HAL_TIM_Base_Init>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80031ea:	f7ff fcc3 	bl	8002b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031ee:	2300      	movs	r3, #0
 80031f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80031f6:	1d3b      	adds	r3, r7, #4
 80031f8:	4619      	mov	r1, r3
 80031fa:	4806      	ldr	r0, [pc, #24]	; (8003214 <MX_TIM7_Init+0x68>)
 80031fc:	f004 fb2a 	bl	8007854 <HAL_TIMEx_MasterConfigSynchronization>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8003206:	f7ff fcb5 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800320a:	bf00      	nop
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	200002e4 	.word	0x200002e4
 8003218:	40001400 	.word	0x40001400

0800321c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800322c:	d114      	bne.n	8003258 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800322e:	4b33      	ldr	r3, [pc, #204]	; (80032fc <HAL_TIM_Base_MspInit+0xe0>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	4a32      	ldr	r2, [pc, #200]	; (80032fc <HAL_TIM_Base_MspInit+0xe0>)
 8003234:	f043 0301 	orr.w	r3, r3, #1
 8003238:	6413      	str	r3, [r2, #64]	; 0x40
 800323a:	4b30      	ldr	r3, [pc, #192]	; (80032fc <HAL_TIM_Base_MspInit+0xe0>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	617b      	str	r3, [r7, #20]
 8003244:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003246:	2200      	movs	r2, #0
 8003248:	2100      	movs	r1, #0
 800324a:	201c      	movs	r0, #28
 800324c:	f000 fadb 	bl	8003806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003250:	201c      	movs	r0, #28
 8003252:	f000 faf4 	bl	800383e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003256:	e04c      	b.n	80032f2 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a28      	ldr	r2, [pc, #160]	; (8003300 <HAL_TIM_Base_MspInit+0xe4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d114      	bne.n	800328c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003262:	4b26      	ldr	r3, [pc, #152]	; (80032fc <HAL_TIM_Base_MspInit+0xe0>)
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	4a25      	ldr	r2, [pc, #148]	; (80032fc <HAL_TIM_Base_MspInit+0xe0>)
 8003268:	f043 0302 	orr.w	r3, r3, #2
 800326c:	6413      	str	r3, [r2, #64]	; 0x40
 800326e:	4b23      	ldr	r3, [pc, #140]	; (80032fc <HAL_TIM_Base_MspInit+0xe0>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800327a:	2200      	movs	r2, #0
 800327c:	2100      	movs	r1, #0
 800327e:	201d      	movs	r0, #29
 8003280:	f000 fac1 	bl	8003806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003284:	201d      	movs	r0, #29
 8003286:	f000 fada 	bl	800383e <HAL_NVIC_EnableIRQ>
}
 800328a:	e032      	b.n	80032f2 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a1c      	ldr	r2, [pc, #112]	; (8003304 <HAL_TIM_Base_MspInit+0xe8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d114      	bne.n	80032c0 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003296:	4b19      	ldr	r3, [pc, #100]	; (80032fc <HAL_TIM_Base_MspInit+0xe0>)
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	4a18      	ldr	r2, [pc, #96]	; (80032fc <HAL_TIM_Base_MspInit+0xe0>)
 800329c:	f043 0304 	orr.w	r3, r3, #4
 80032a0:	6413      	str	r3, [r2, #64]	; 0x40
 80032a2:	4b16      	ldr	r3, [pc, #88]	; (80032fc <HAL_TIM_Base_MspInit+0xe0>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	f003 0304 	and.w	r3, r3, #4
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80032ae:	2200      	movs	r2, #0
 80032b0:	2100      	movs	r1, #0
 80032b2:	201e      	movs	r0, #30
 80032b4:	f000 faa7 	bl	8003806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80032b8:	201e      	movs	r0, #30
 80032ba:	f000 fac0 	bl	800383e <HAL_NVIC_EnableIRQ>
}
 80032be:	e018      	b.n	80032f2 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM7)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a10      	ldr	r2, [pc, #64]	; (8003308 <HAL_TIM_Base_MspInit+0xec>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d113      	bne.n	80032f2 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80032ca:	4b0c      	ldr	r3, [pc, #48]	; (80032fc <HAL_TIM_Base_MspInit+0xe0>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	4a0b      	ldr	r2, [pc, #44]	; (80032fc <HAL_TIM_Base_MspInit+0xe0>)
 80032d0:	f043 0320 	orr.w	r3, r3, #32
 80032d4:	6413      	str	r3, [r2, #64]	; 0x40
 80032d6:	4b09      	ldr	r3, [pc, #36]	; (80032fc <HAL_TIM_Base_MspInit+0xe0>)
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f003 0320 	and.w	r3, r3, #32
 80032de:	60bb      	str	r3, [r7, #8]
 80032e0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80032e2:	2200      	movs	r2, #0
 80032e4:	2100      	movs	r1, #0
 80032e6:	2037      	movs	r0, #55	; 0x37
 80032e8:	f000 fa8d 	bl	8003806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80032ec:	2037      	movs	r0, #55	; 0x37
 80032ee:	f000 faa6 	bl	800383e <HAL_NVIC_EnableIRQ>
}
 80032f2:	bf00      	nop
 80032f4:	3718      	adds	r7, #24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40023800 	.word	0x40023800
 8003300:	40000400 	.word	0x40000400
 8003304:	40000800 	.word	0x40000800
 8003308:	40001400 	.word	0x40001400

0800330c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b08a      	sub	sp, #40	; 0x28
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003314:	f107 0314 	add.w	r3, r7, #20
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	609a      	str	r2, [r3, #8]
 8003320:	60da      	str	r2, [r3, #12]
 8003322:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a23      	ldr	r2, [pc, #140]	; (80033b8 <HAL_TIM_MspPostInit+0xac>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d11d      	bne.n	800336a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800332e:	4b23      	ldr	r3, [pc, #140]	; (80033bc <HAL_TIM_MspPostInit+0xb0>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	4a22      	ldr	r2, [pc, #136]	; (80033bc <HAL_TIM_MspPostInit+0xb0>)
 8003334:	f043 0304 	orr.w	r3, r3, #4
 8003338:	6313      	str	r3, [r2, #48]	; 0x30
 800333a:	4b20      	ldr	r3, [pc, #128]	; (80033bc <HAL_TIM_MspPostInit+0xb0>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	f003 0304 	and.w	r3, r3, #4
 8003342:	613b      	str	r3, [r7, #16]
 8003344:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003346:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800334a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334c:	2302      	movs	r3, #2
 800334e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003350:	2300      	movs	r3, #0
 8003352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003354:	2300      	movs	r3, #0
 8003356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003358:	2302      	movs	r3, #2
 800335a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800335c:	f107 0314 	add.w	r3, r7, #20
 8003360:	4619      	mov	r1, r3
 8003362:	4817      	ldr	r0, [pc, #92]	; (80033c0 <HAL_TIM_MspPostInit+0xb4>)
 8003364:	f000 fb18 	bl	8003998 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003368:	e021      	b.n	80033ae <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM4)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a15      	ldr	r2, [pc, #84]	; (80033c4 <HAL_TIM_MspPostInit+0xb8>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d11c      	bne.n	80033ae <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003374:	4b11      	ldr	r3, [pc, #68]	; (80033bc <HAL_TIM_MspPostInit+0xb0>)
 8003376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003378:	4a10      	ldr	r2, [pc, #64]	; (80033bc <HAL_TIM_MspPostInit+0xb0>)
 800337a:	f043 0308 	orr.w	r3, r3, #8
 800337e:	6313      	str	r3, [r2, #48]	; 0x30
 8003380:	4b0e      	ldr	r3, [pc, #56]	; (80033bc <HAL_TIM_MspPostInit+0xb0>)
 8003382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800338c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003392:	2302      	movs	r3, #2
 8003394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003396:	2300      	movs	r3, #0
 8003398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339a:	2300      	movs	r3, #0
 800339c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800339e:	2302      	movs	r3, #2
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033a2:	f107 0314 	add.w	r3, r7, #20
 80033a6:	4619      	mov	r1, r3
 80033a8:	4807      	ldr	r0, [pc, #28]	; (80033c8 <HAL_TIM_MspPostInit+0xbc>)
 80033aa:	f000 faf5 	bl	8003998 <HAL_GPIO_Init>
}
 80033ae:	bf00      	nop
 80033b0:	3728      	adds	r7, #40	; 0x28
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	40000400 	.word	0x40000400
 80033bc:	40023800 	.word	0x40023800
 80033c0:	40020800 	.word	0x40020800
 80033c4:	40000800 	.word	0x40000800
 80033c8:	40020c00 	.word	0x40020c00

080033cc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80033d0:	4b14      	ldr	r3, [pc, #80]	; (8003424 <MX_USART3_UART_Init+0x58>)
 80033d2:	4a15      	ldr	r2, [pc, #84]	; (8003428 <MX_USART3_UART_Init+0x5c>)
 80033d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80033d6:	4b13      	ldr	r3, [pc, #76]	; (8003424 <MX_USART3_UART_Init+0x58>)
 80033d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80033de:	4b11      	ldr	r3, [pc, #68]	; (8003424 <MX_USART3_UART_Init+0x58>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80033e4:	4b0f      	ldr	r3, [pc, #60]	; (8003424 <MX_USART3_UART_Init+0x58>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80033ea:	4b0e      	ldr	r3, [pc, #56]	; (8003424 <MX_USART3_UART_Init+0x58>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80033f0:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <MX_USART3_UART_Init+0x58>)
 80033f2:	220c      	movs	r2, #12
 80033f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033f6:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <MX_USART3_UART_Init+0x58>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80033fc:	4b09      	ldr	r3, [pc, #36]	; (8003424 <MX_USART3_UART_Init+0x58>)
 80033fe:	2200      	movs	r2, #0
 8003400:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003402:	4b08      	ldr	r3, [pc, #32]	; (8003424 <MX_USART3_UART_Init+0x58>)
 8003404:	2200      	movs	r2, #0
 8003406:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003408:	4b06      	ldr	r3, [pc, #24]	; (8003424 <MX_USART3_UART_Init+0x58>)
 800340a:	2200      	movs	r2, #0
 800340c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800340e:	4805      	ldr	r0, [pc, #20]	; (8003424 <MX_USART3_UART_Init+0x58>)
 8003410:	f004 facc 	bl	80079ac <HAL_UART_Init>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800341a:	f7ff fbab 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800341e:	bf00      	nop
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	20000330 	.word	0x20000330
 8003428:	40004800 	.word	0x40004800

0800342c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b0aa      	sub	sp, #168	; 0xa8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003434:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	605a      	str	r2, [r3, #4]
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	60da      	str	r2, [r3, #12]
 8003442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003444:	f107 0310 	add.w	r3, r7, #16
 8003448:	2284      	movs	r2, #132	; 0x84
 800344a:	2100      	movs	r1, #0
 800344c:	4618      	mov	r0, r3
 800344e:	f005 fda9 	bl	8008fa4 <memset>
  if(uartHandle->Instance==USART3)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a26      	ldr	r2, [pc, #152]	; (80034f0 <HAL_UART_MspInit+0xc4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d144      	bne.n	80034e6 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800345c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003460:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003462:	2300      	movs	r3, #0
 8003464:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003466:	f107 0310 	add.w	r3, r7, #16
 800346a:	4618      	mov	r0, r3
 800346c:	f001 fd92 	bl	8004f94 <HAL_RCCEx_PeriphCLKConfig>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003476:	f7ff fb7d 	bl	8002b74 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800347a:	4b1e      	ldr	r3, [pc, #120]	; (80034f4 <HAL_UART_MspInit+0xc8>)
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	4a1d      	ldr	r2, [pc, #116]	; (80034f4 <HAL_UART_MspInit+0xc8>)
 8003480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003484:	6413      	str	r3, [r2, #64]	; 0x40
 8003486:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <HAL_UART_MspInit+0xc8>)
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003492:	4b18      	ldr	r3, [pc, #96]	; (80034f4 <HAL_UART_MspInit+0xc8>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	4a17      	ldr	r2, [pc, #92]	; (80034f4 <HAL_UART_MspInit+0xc8>)
 8003498:	f043 0308 	orr.w	r3, r3, #8
 800349c:	6313      	str	r3, [r2, #48]	; 0x30
 800349e:	4b15      	ldr	r3, [pc, #84]	; (80034f4 <HAL_UART_MspInit+0xc8>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	f003 0308 	and.w	r3, r3, #8
 80034a6:	60bb      	str	r3, [r7, #8]
 80034a8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80034aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80034ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b2:	2302      	movs	r3, #2
 80034b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034b8:	2301      	movs	r3, #1
 80034ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034be:	2303      	movs	r3, #3
 80034c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80034c4:	2307      	movs	r3, #7
 80034c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034ca:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80034ce:	4619      	mov	r1, r3
 80034d0:	4809      	ldr	r0, [pc, #36]	; (80034f8 <HAL_UART_MspInit+0xcc>)
 80034d2:	f000 fa61 	bl	8003998 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80034d6:	2200      	movs	r2, #0
 80034d8:	2100      	movs	r1, #0
 80034da:	2027      	movs	r0, #39	; 0x27
 80034dc:	f000 f993 	bl	8003806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80034e0:	2027      	movs	r0, #39	; 0x27
 80034e2:	f000 f9ac 	bl	800383e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80034e6:	bf00      	nop
 80034e8:	37a8      	adds	r7, #168	; 0xa8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40004800 	.word	0x40004800
 80034f4:	40023800 	.word	0x40023800
 80034f8:	40020c00 	.word	0x40020c00

080034fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80034fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003534 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003500:	480d      	ldr	r0, [pc, #52]	; (8003538 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003502:	490e      	ldr	r1, [pc, #56]	; (800353c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003504:	4a0e      	ldr	r2, [pc, #56]	; (8003540 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003508:	e002      	b.n	8003510 <LoopCopyDataInit>

0800350a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800350a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800350c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800350e:	3304      	adds	r3, #4

08003510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003514:	d3f9      	bcc.n	800350a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003516:	4a0b      	ldr	r2, [pc, #44]	; (8003544 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003518:	4c0b      	ldr	r4, [pc, #44]	; (8003548 <LoopFillZerobss+0x26>)
  movs r3, #0
 800351a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800351c:	e001      	b.n	8003522 <LoopFillZerobss>

0800351e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800351e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003520:	3204      	adds	r2, #4

08003522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003524:	d3fb      	bcc.n	800351e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003526:	f7ff fce3 	bl	8002ef0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800352a:	f005 fd49 	bl	8008fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800352e:	f7ff fa65 	bl	80029fc <main>
  bx  lr    
 8003532:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003534:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800353c:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8003540:	080099d0 	.word	0x080099d0
  ldr r2, =_sbss
 8003544:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8003548:	20000504 	.word	0x20000504

0800354c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800354c:	e7fe      	b.n	800354c <ADC_IRQHandler>

0800354e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003552:	2003      	movs	r0, #3
 8003554:	f000 f94c 	bl	80037f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003558:	2000      	movs	r0, #0
 800355a:	f000 f805 	bl	8003568 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800355e:	f7ff fc11 	bl	8002d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	bd80      	pop	{r7, pc}

08003568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003570:	4b12      	ldr	r3, [pc, #72]	; (80035bc <HAL_InitTick+0x54>)
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	4b12      	ldr	r3, [pc, #72]	; (80035c0 <HAL_InitTick+0x58>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	4619      	mov	r1, r3
 800357a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800357e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003582:	fbb2 f3f3 	udiv	r3, r2, r3
 8003586:	4618      	mov	r0, r3
 8003588:	f000 f967 	bl	800385a <HAL_SYSTICK_Config>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e00e      	b.n	80035b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b0f      	cmp	r3, #15
 800359a:	d80a      	bhi.n	80035b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800359c:	2200      	movs	r2, #0
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	f04f 30ff 	mov.w	r0, #4294967295
 80035a4:	f000 f92f 	bl	8003806 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035a8:	4a06      	ldr	r2, [pc, #24]	; (80035c4 <HAL_InitTick+0x5c>)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
 80035b0:	e000      	b.n	80035b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	2000007c 	.word	0x2000007c
 80035c0:	20000084 	.word	0x20000084
 80035c4:	20000080 	.word	0x20000080

080035c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035cc:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <HAL_IncTick+0x20>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	461a      	mov	r2, r3
 80035d2:	4b06      	ldr	r3, [pc, #24]	; (80035ec <HAL_IncTick+0x24>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4413      	add	r3, r2
 80035d8:	4a04      	ldr	r2, [pc, #16]	; (80035ec <HAL_IncTick+0x24>)
 80035da:	6013      	str	r3, [r2, #0]
}
 80035dc:	bf00      	nop
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	20000084 	.word	0x20000084
 80035ec:	200003b8 	.word	0x200003b8

080035f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  return uwTick;
 80035f4:	4b03      	ldr	r3, [pc, #12]	; (8003604 <HAL_GetTick+0x14>)
 80035f6:	681b      	ldr	r3, [r3, #0]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	200003b8 	.word	0x200003b8

08003608 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003610:	f7ff ffee 	bl	80035f0 <HAL_GetTick>
 8003614:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003620:	d005      	beq.n	800362e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003622:	4b0a      	ldr	r3, [pc, #40]	; (800364c <HAL_Delay+0x44>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4413      	add	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800362e:	bf00      	nop
 8003630:	f7ff ffde 	bl	80035f0 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	429a      	cmp	r2, r3
 800363e:	d8f7      	bhi.n	8003630 <HAL_Delay+0x28>
  {
  }
}
 8003640:	bf00      	nop
 8003642:	bf00      	nop
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	20000084 	.word	0x20000084

08003650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003660:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <__NVIC_SetPriorityGrouping+0x40>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800366c:	4013      	ands	r3, r2
 800366e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003678:	4b06      	ldr	r3, [pc, #24]	; (8003694 <__NVIC_SetPriorityGrouping+0x44>)
 800367a:	4313      	orrs	r3, r2
 800367c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800367e:	4a04      	ldr	r2, [pc, #16]	; (8003690 <__NVIC_SetPriorityGrouping+0x40>)
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	60d3      	str	r3, [r2, #12]
}
 8003684:	bf00      	nop
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	e000ed00 	.word	0xe000ed00
 8003694:	05fa0000 	.word	0x05fa0000

08003698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800369c:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <__NVIC_GetPriorityGrouping+0x18>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	0a1b      	lsrs	r3, r3, #8
 80036a2:	f003 0307 	and.w	r3, r3, #7
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	e000ed00 	.word	0xe000ed00

080036b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	4603      	mov	r3, r0
 80036bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	db0b      	blt.n	80036de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036c6:	79fb      	ldrb	r3, [r7, #7]
 80036c8:	f003 021f 	and.w	r2, r3, #31
 80036cc:	4907      	ldr	r1, [pc, #28]	; (80036ec <__NVIC_EnableIRQ+0x38>)
 80036ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	2001      	movs	r0, #1
 80036d6:	fa00 f202 	lsl.w	r2, r0, r2
 80036da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	e000e100 	.word	0xe000e100

080036f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	6039      	str	r1, [r7, #0]
 80036fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003700:	2b00      	cmp	r3, #0
 8003702:	db0a      	blt.n	800371a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	b2da      	uxtb	r2, r3
 8003708:	490c      	ldr	r1, [pc, #48]	; (800373c <__NVIC_SetPriority+0x4c>)
 800370a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370e:	0112      	lsls	r2, r2, #4
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	440b      	add	r3, r1
 8003714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003718:	e00a      	b.n	8003730 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	b2da      	uxtb	r2, r3
 800371e:	4908      	ldr	r1, [pc, #32]	; (8003740 <__NVIC_SetPriority+0x50>)
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	3b04      	subs	r3, #4
 8003728:	0112      	lsls	r2, r2, #4
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	440b      	add	r3, r1
 800372e:	761a      	strb	r2, [r3, #24]
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	e000e100 	.word	0xe000e100
 8003740:	e000ed00 	.word	0xe000ed00

08003744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003744:	b480      	push	{r7}
 8003746:	b089      	sub	sp, #36	; 0x24
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f1c3 0307 	rsb	r3, r3, #7
 800375e:	2b04      	cmp	r3, #4
 8003760:	bf28      	it	cs
 8003762:	2304      	movcs	r3, #4
 8003764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	3304      	adds	r3, #4
 800376a:	2b06      	cmp	r3, #6
 800376c:	d902      	bls.n	8003774 <NVIC_EncodePriority+0x30>
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	3b03      	subs	r3, #3
 8003772:	e000      	b.n	8003776 <NVIC_EncodePriority+0x32>
 8003774:	2300      	movs	r3, #0
 8003776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003778:	f04f 32ff 	mov.w	r2, #4294967295
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	fa02 f303 	lsl.w	r3, r2, r3
 8003782:	43da      	mvns	r2, r3
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	401a      	ands	r2, r3
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800378c:	f04f 31ff 	mov.w	r1, #4294967295
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	fa01 f303 	lsl.w	r3, r1, r3
 8003796:	43d9      	mvns	r1, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800379c:	4313      	orrs	r3, r2
         );
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3724      	adds	r7, #36	; 0x24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
	...

080037ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037bc:	d301      	bcc.n	80037c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037be:	2301      	movs	r3, #1
 80037c0:	e00f      	b.n	80037e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037c2:	4a0a      	ldr	r2, [pc, #40]	; (80037ec <SysTick_Config+0x40>)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3b01      	subs	r3, #1
 80037c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037ca:	210f      	movs	r1, #15
 80037cc:	f04f 30ff 	mov.w	r0, #4294967295
 80037d0:	f7ff ff8e 	bl	80036f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037d4:	4b05      	ldr	r3, [pc, #20]	; (80037ec <SysTick_Config+0x40>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037da:	4b04      	ldr	r3, [pc, #16]	; (80037ec <SysTick_Config+0x40>)
 80037dc:	2207      	movs	r2, #7
 80037de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	e000e010 	.word	0xe000e010

080037f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff ff29 	bl	8003650 <__NVIC_SetPriorityGrouping>
}
 80037fe:	bf00      	nop
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003806:	b580      	push	{r7, lr}
 8003808:	b086      	sub	sp, #24
 800380a:	af00      	add	r7, sp, #0
 800380c:	4603      	mov	r3, r0
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	607a      	str	r2, [r7, #4]
 8003812:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003814:	2300      	movs	r3, #0
 8003816:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003818:	f7ff ff3e 	bl	8003698 <__NVIC_GetPriorityGrouping>
 800381c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	68b9      	ldr	r1, [r7, #8]
 8003822:	6978      	ldr	r0, [r7, #20]
 8003824:	f7ff ff8e 	bl	8003744 <NVIC_EncodePriority>
 8003828:	4602      	mov	r2, r0
 800382a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800382e:	4611      	mov	r1, r2
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff ff5d 	bl	80036f0 <__NVIC_SetPriority>
}
 8003836:	bf00      	nop
 8003838:	3718      	adds	r7, #24
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b082      	sub	sp, #8
 8003842:	af00      	add	r7, sp, #0
 8003844:	4603      	mov	r3, r0
 8003846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff ff31 	bl	80036b4 <__NVIC_EnableIRQ>
}
 8003852:	bf00      	nop
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b082      	sub	sp, #8
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7ff ffa2 	bl	80037ac <SysTick_Config>
 8003868:	4603      	mov	r3, r0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b084      	sub	sp, #16
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003880:	f7ff feb6 	bl	80035f0 <HAL_GetTick>
 8003884:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d008      	beq.n	80038a4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2280      	movs	r2, #128	; 0x80
 8003896:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e052      	b.n	800394a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 0216 	bic.w	r2, r2, #22
 80038b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	695a      	ldr	r2, [r3, #20]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038c2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d103      	bne.n	80038d4 <HAL_DMA_Abort+0x62>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d007      	beq.n	80038e4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0208 	bic.w	r2, r2, #8
 80038e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0201 	bic.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038f4:	e013      	b.n	800391e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038f6:	f7ff fe7b 	bl	80035f0 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b05      	cmp	r3, #5
 8003902:	d90c      	bls.n	800391e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2203      	movs	r2, #3
 800390e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e015      	b.n	800394a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1e4      	bne.n	80038f6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003930:	223f      	movs	r2, #63	; 0x3f
 8003932:	409a      	lsls	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d004      	beq.n	8003970 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2280      	movs	r2, #128	; 0x80
 800396a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e00c      	b.n	800398a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2205      	movs	r2, #5
 8003974:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 0201 	bic.w	r2, r2, #1
 8003986:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
	...

08003998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003998:	b480      	push	{r7}
 800399a:	b089      	sub	sp, #36	; 0x24
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80039a2:	2300      	movs	r3, #0
 80039a4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80039a6:	2300      	movs	r3, #0
 80039a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80039aa:	2300      	movs	r3, #0
 80039ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80039ae:	2300      	movs	r3, #0
 80039b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80039b2:	2300      	movs	r3, #0
 80039b4:	61fb      	str	r3, [r7, #28]
 80039b6:	e175      	b.n	8003ca4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80039b8:	2201      	movs	r2, #1
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	4013      	ands	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	f040 8164 	bne.w	8003c9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d005      	beq.n	80039ee <HAL_GPIO_Init+0x56>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f003 0303 	and.w	r3, r3, #3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d130      	bne.n	8003a50 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	2203      	movs	r2, #3
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43db      	mvns	r3, r3
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	4013      	ands	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	68da      	ldr	r2, [r3, #12]
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a24:	2201      	movs	r2, #1
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	4013      	ands	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	091b      	lsrs	r3, r3, #4
 8003a3a:	f003 0201 	and.w	r2, r3, #1
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f003 0303 	and.w	r3, r3, #3
 8003a58:	2b03      	cmp	r3, #3
 8003a5a:	d017      	beq.n	8003a8c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	2203      	movs	r2, #3
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	43db      	mvns	r3, r3
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	4013      	ands	r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f003 0303 	and.w	r3, r3, #3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d123      	bne.n	8003ae0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	08da      	lsrs	r2, r3, #3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3208      	adds	r2, #8
 8003aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	220f      	movs	r2, #15
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	43db      	mvns	r3, r3
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	691a      	ldr	r2, [r3, #16]
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	08da      	lsrs	r2, r3, #3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	3208      	adds	r2, #8
 8003ada:	69b9      	ldr	r1, [r7, #24]
 8003adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	2203      	movs	r2, #3
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	43db      	mvns	r3, r3
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	4013      	ands	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f003 0203 	and.w	r2, r3, #3
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 80be 	beq.w	8003c9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b22:	4b66      	ldr	r3, [pc, #408]	; (8003cbc <HAL_GPIO_Init+0x324>)
 8003b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b26:	4a65      	ldr	r2, [pc, #404]	; (8003cbc <HAL_GPIO_Init+0x324>)
 8003b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b2e:	4b63      	ldr	r3, [pc, #396]	; (8003cbc <HAL_GPIO_Init+0x324>)
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003b3a:	4a61      	ldr	r2, [pc, #388]	; (8003cc0 <HAL_GPIO_Init+0x328>)
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	089b      	lsrs	r3, r3, #2
 8003b40:	3302      	adds	r3, #2
 8003b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f003 0303 	and.w	r3, r3, #3
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	220f      	movs	r2, #15
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	43db      	mvns	r3, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a58      	ldr	r2, [pc, #352]	; (8003cc4 <HAL_GPIO_Init+0x32c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d037      	beq.n	8003bd6 <HAL_GPIO_Init+0x23e>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a57      	ldr	r2, [pc, #348]	; (8003cc8 <HAL_GPIO_Init+0x330>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d031      	beq.n	8003bd2 <HAL_GPIO_Init+0x23a>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a56      	ldr	r2, [pc, #344]	; (8003ccc <HAL_GPIO_Init+0x334>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d02b      	beq.n	8003bce <HAL_GPIO_Init+0x236>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a55      	ldr	r2, [pc, #340]	; (8003cd0 <HAL_GPIO_Init+0x338>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d025      	beq.n	8003bca <HAL_GPIO_Init+0x232>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a54      	ldr	r2, [pc, #336]	; (8003cd4 <HAL_GPIO_Init+0x33c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d01f      	beq.n	8003bc6 <HAL_GPIO_Init+0x22e>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a53      	ldr	r2, [pc, #332]	; (8003cd8 <HAL_GPIO_Init+0x340>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d019      	beq.n	8003bc2 <HAL_GPIO_Init+0x22a>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a52      	ldr	r2, [pc, #328]	; (8003cdc <HAL_GPIO_Init+0x344>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d013      	beq.n	8003bbe <HAL_GPIO_Init+0x226>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a51      	ldr	r2, [pc, #324]	; (8003ce0 <HAL_GPIO_Init+0x348>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d00d      	beq.n	8003bba <HAL_GPIO_Init+0x222>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a50      	ldr	r2, [pc, #320]	; (8003ce4 <HAL_GPIO_Init+0x34c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d007      	beq.n	8003bb6 <HAL_GPIO_Init+0x21e>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a4f      	ldr	r2, [pc, #316]	; (8003ce8 <HAL_GPIO_Init+0x350>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d101      	bne.n	8003bb2 <HAL_GPIO_Init+0x21a>
 8003bae:	2309      	movs	r3, #9
 8003bb0:	e012      	b.n	8003bd8 <HAL_GPIO_Init+0x240>
 8003bb2:	230a      	movs	r3, #10
 8003bb4:	e010      	b.n	8003bd8 <HAL_GPIO_Init+0x240>
 8003bb6:	2308      	movs	r3, #8
 8003bb8:	e00e      	b.n	8003bd8 <HAL_GPIO_Init+0x240>
 8003bba:	2307      	movs	r3, #7
 8003bbc:	e00c      	b.n	8003bd8 <HAL_GPIO_Init+0x240>
 8003bbe:	2306      	movs	r3, #6
 8003bc0:	e00a      	b.n	8003bd8 <HAL_GPIO_Init+0x240>
 8003bc2:	2305      	movs	r3, #5
 8003bc4:	e008      	b.n	8003bd8 <HAL_GPIO_Init+0x240>
 8003bc6:	2304      	movs	r3, #4
 8003bc8:	e006      	b.n	8003bd8 <HAL_GPIO_Init+0x240>
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e004      	b.n	8003bd8 <HAL_GPIO_Init+0x240>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e002      	b.n	8003bd8 <HAL_GPIO_Init+0x240>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <HAL_GPIO_Init+0x240>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	69fa      	ldr	r2, [r7, #28]
 8003bda:	f002 0203 	and.w	r2, r2, #3
 8003bde:	0092      	lsls	r2, r2, #2
 8003be0:	4093      	lsls	r3, r2
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003be8:	4935      	ldr	r1, [pc, #212]	; (8003cc0 <HAL_GPIO_Init+0x328>)
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	089b      	lsrs	r3, r3, #2
 8003bee:	3302      	adds	r3, #2
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bf6:	4b3d      	ldr	r3, [pc, #244]	; (8003cec <HAL_GPIO_Init+0x354>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	43db      	mvns	r3, r3
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4013      	ands	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c1a:	4a34      	ldr	r2, [pc, #208]	; (8003cec <HAL_GPIO_Init+0x354>)
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c20:	4b32      	ldr	r3, [pc, #200]	; (8003cec <HAL_GPIO_Init+0x354>)
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c44:	4a29      	ldr	r2, [pc, #164]	; (8003cec <HAL_GPIO_Init+0x354>)
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c4a:	4b28      	ldr	r3, [pc, #160]	; (8003cec <HAL_GPIO_Init+0x354>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	43db      	mvns	r3, r3
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	4013      	ands	r3, r2
 8003c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c6e:	4a1f      	ldr	r2, [pc, #124]	; (8003cec <HAL_GPIO_Init+0x354>)
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c74:	4b1d      	ldr	r3, [pc, #116]	; (8003cec <HAL_GPIO_Init+0x354>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	4013      	ands	r3, r2
 8003c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c98:	4a14      	ldr	r2, [pc, #80]	; (8003cec <HAL_GPIO_Init+0x354>)
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	61fb      	str	r3, [r7, #28]
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	2b0f      	cmp	r3, #15
 8003ca8:	f67f ae86 	bls.w	80039b8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003cac:	bf00      	nop
 8003cae:	bf00      	nop
 8003cb0:	3724      	adds	r7, #36	; 0x24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	40013800 	.word	0x40013800
 8003cc4:	40020000 	.word	0x40020000
 8003cc8:	40020400 	.word	0x40020400
 8003ccc:	40020800 	.word	0x40020800
 8003cd0:	40020c00 	.word	0x40020c00
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	40021400 	.word	0x40021400
 8003cdc:	40021800 	.word	0x40021800
 8003ce0:	40021c00 	.word	0x40021c00
 8003ce4:	40022000 	.word	0x40022000
 8003ce8:	40022400 	.word	0x40022400
 8003cec:	40013c00 	.word	0x40013c00

08003cf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	807b      	strh	r3, [r7, #2]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d00:	787b      	ldrb	r3, [r7, #1]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d06:	887a      	ldrh	r2, [r7, #2]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003d0c:	e003      	b.n	8003d16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003d0e:	887b      	ldrh	r3, [r7, #2]
 8003d10:	041a      	lsls	r2, r3, #16
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	619a      	str	r2, [r3, #24]
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
	...

08003d24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e07f      	b.n	8003e36 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d106      	bne.n	8003d50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fe fbc0 	bl	80024d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2224      	movs	r2, #36	; 0x24
 8003d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0201 	bic.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d107      	bne.n	8003d9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d9a:	609a      	str	r2, [r3, #8]
 8003d9c:	e006      	b.n	8003dac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689a      	ldr	r2, [r3, #8]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003daa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d104      	bne.n	8003dbe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dbc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6859      	ldr	r1, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	4b1d      	ldr	r3, [pc, #116]	; (8003e40 <HAL_I2C_Init+0x11c>)
 8003dca:	430b      	orrs	r3, r1
 8003dcc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ddc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691a      	ldr	r2, [r3, #16]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	69d9      	ldr	r1, [r3, #28]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a1a      	ldr	r2, [r3, #32]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0201 	orr.w	r2, r2, #1
 8003e16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2220      	movs	r2, #32
 8003e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	02008000 	.word	0x02008000

08003e44 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b088      	sub	sp, #32
 8003e48:	af02      	add	r7, sp, #8
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	607a      	str	r2, [r7, #4]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	460b      	mov	r3, r1
 8003e52:	817b      	strh	r3, [r7, #10]
 8003e54:	4613      	mov	r3, r2
 8003e56:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b20      	cmp	r3, #32
 8003e62:	f040 80da 	bne.w	800401a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_I2C_Master_Transmit+0x30>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e0d3      	b.n	800401c <HAL_I2C_Master_Transmit+0x1d8>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e7c:	f7ff fbb8 	bl	80035f0 <HAL_GetTick>
 8003e80:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	2319      	movs	r3, #25
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 f8f0 	bl	8004074 <I2C_WaitOnFlagUntilTimeout>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e0be      	b.n	800401c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2221      	movs	r2, #33	; 0x21
 8003ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2210      	movs	r2, #16
 8003eaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	893a      	ldrh	r2, [r7, #8]
 8003ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	2bff      	cmp	r3, #255	; 0xff
 8003ece:	d90e      	bls.n	8003eee <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	22ff      	movs	r2, #255	; 0xff
 8003ed4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	8979      	ldrh	r1, [r7, #10]
 8003ede:	4b51      	ldr	r3, [pc, #324]	; (8004024 <HAL_I2C_Master_Transmit+0x1e0>)
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 fa60 	bl	80043ac <I2C_TransferConfig>
 8003eec:	e06c      	b.n	8003fc8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efc:	b2da      	uxtb	r2, r3
 8003efe:	8979      	ldrh	r1, [r7, #10]
 8003f00:	4b48      	ldr	r3, [pc, #288]	; (8004024 <HAL_I2C_Master_Transmit+0x1e0>)
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 fa4f 	bl	80043ac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003f0e:	e05b      	b.n	8003fc8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	6a39      	ldr	r1, [r7, #32]
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 f8ed 	bl	80040f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e07b      	b.n	800401c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	781a      	ldrb	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d034      	beq.n	8003fc8 <HAL_I2C_Master_Transmit+0x184>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d130      	bne.n	8003fc8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	2180      	movs	r1, #128	; 0x80
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f000 f87f 	bl	8004074 <I2C_WaitOnFlagUntilTimeout>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e04d      	b.n	800401c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	2bff      	cmp	r3, #255	; 0xff
 8003f88:	d90e      	bls.n	8003fa8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	22ff      	movs	r2, #255	; 0xff
 8003f8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	8979      	ldrh	r1, [r7, #10]
 8003f98:	2300      	movs	r3, #0
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f000 fa03 	bl	80043ac <I2C_TransferConfig>
 8003fa6:	e00f      	b.n	8003fc8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	8979      	ldrh	r1, [r7, #10]
 8003fba:	2300      	movs	r3, #0
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 f9f2 	bl	80043ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d19e      	bne.n	8003f10 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	6a39      	ldr	r1, [r7, #32]
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 f8cc 	bl	8004174 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e01a      	b.n	800401c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2220      	movs	r2, #32
 8003fec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6859      	ldr	r1, [r3, #4]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <HAL_I2C_Master_Transmit+0x1e4>)
 8003ffa:	400b      	ands	r3, r1
 8003ffc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2220      	movs	r2, #32
 8004002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004016:	2300      	movs	r3, #0
 8004018:	e000      	b.n	800401c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800401a:	2302      	movs	r3, #2
  }
}
 800401c:	4618      	mov	r0, r3
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	80002000 	.word	0x80002000
 8004028:	fe00e800 	.word	0xfe00e800

0800402c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b02      	cmp	r3, #2
 8004040:	d103      	bne.n	800404a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2200      	movs	r2, #0
 8004048:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b01      	cmp	r3, #1
 8004056:	d007      	beq.n	8004068 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699a      	ldr	r2, [r3, #24]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0201 	orr.w	r2, r2, #1
 8004066:	619a      	str	r2, [r3, #24]
  }
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	603b      	str	r3, [r7, #0]
 8004080:	4613      	mov	r3, r2
 8004082:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004084:	e022      	b.n	80040cc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408c:	d01e      	beq.n	80040cc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800408e:	f7ff faaf 	bl	80035f0 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	429a      	cmp	r2, r3
 800409c:	d302      	bcc.n	80040a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d113      	bne.n	80040cc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a8:	f043 0220 	orr.w	r2, r3, #32
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e00f      	b.n	80040ec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	699a      	ldr	r2, [r3, #24]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	4013      	ands	r3, r2
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	429a      	cmp	r2, r3
 80040da:	bf0c      	ite	eq
 80040dc:	2301      	moveq	r3, #1
 80040de:	2300      	movne	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	461a      	mov	r2, r3
 80040e4:	79fb      	ldrb	r3, [r7, #7]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d0cd      	beq.n	8004086 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004100:	e02c      	b.n	800415c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	68b9      	ldr	r1, [r7, #8]
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 f870 	bl	80041ec <I2C_IsErrorOccurred>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e02a      	b.n	800416c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800411c:	d01e      	beq.n	800415c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800411e:	f7ff fa67 	bl	80035f0 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	429a      	cmp	r2, r3
 800412c:	d302      	bcc.n	8004134 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d113      	bne.n	800415c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004138:	f043 0220 	orr.w	r2, r3, #32
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e007      	b.n	800416c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b02      	cmp	r3, #2
 8004168:	d1cb      	bne.n	8004102 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004180:	e028      	b.n	80041d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	68b9      	ldr	r1, [r7, #8]
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 f830 	bl	80041ec <I2C_IsErrorOccurred>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e026      	b.n	80041e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004196:	f7ff fa2b 	bl	80035f0 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	68ba      	ldr	r2, [r7, #8]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d302      	bcc.n	80041ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d113      	bne.n	80041d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b0:	f043 0220 	orr.w	r2, r3, #32
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2220      	movs	r2, #32
 80041bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e007      	b.n	80041e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	f003 0320 	and.w	r3, r3, #32
 80041de:	2b20      	cmp	r3, #32
 80041e0:	d1cf      	bne.n	8004182 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b08a      	sub	sp, #40	; 0x28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041f8:	2300      	movs	r3, #0
 80041fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004206:	2300      	movs	r3, #0
 8004208:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	f003 0310 	and.w	r3, r3, #16
 8004214:	2b00      	cmp	r3, #0
 8004216:	d068      	beq.n	80042ea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2210      	movs	r2, #16
 800421e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004220:	e049      	b.n	80042b6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004228:	d045      	beq.n	80042b6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800422a:	f7ff f9e1 	bl	80035f0 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	429a      	cmp	r2, r3
 8004238:	d302      	bcc.n	8004240 <I2C_IsErrorOccurred+0x54>
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d13a      	bne.n	80042b6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800424a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004252:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800425e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004262:	d121      	bne.n	80042a8 <I2C_IsErrorOccurred+0xbc>
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800426a:	d01d      	beq.n	80042a8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800426c:	7cfb      	ldrb	r3, [r7, #19]
 800426e:	2b20      	cmp	r3, #32
 8004270:	d01a      	beq.n	80042a8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004280:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004282:	f7ff f9b5 	bl	80035f0 <HAL_GetTick>
 8004286:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004288:	e00e      	b.n	80042a8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800428a:	f7ff f9b1 	bl	80035f0 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b19      	cmp	r3, #25
 8004296:	d907      	bls.n	80042a8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	f043 0320 	orr.w	r3, r3, #32
 800429e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80042a6:	e006      	b.n	80042b6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	f003 0320 	and.w	r3, r3, #32
 80042b2:	2b20      	cmp	r3, #32
 80042b4:	d1e9      	bne.n	800428a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	f003 0320 	and.w	r3, r3, #32
 80042c0:	2b20      	cmp	r3, #32
 80042c2:	d003      	beq.n	80042cc <I2C_IsErrorOccurred+0xe0>
 80042c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0aa      	beq.n	8004222 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80042cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d103      	bne.n	80042dc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2220      	movs	r2, #32
 80042da:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	f043 0304 	orr.w	r3, r3, #4
 80042e2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00b      	beq.n	8004314 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	f043 0301 	orr.w	r3, r3, #1
 8004302:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f44f 7280 	mov.w	r2, #256	; 0x100
 800430c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00b      	beq.n	8004336 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800431e:	6a3b      	ldr	r3, [r7, #32]
 8004320:	f043 0308 	orr.w	r3, r3, #8
 8004324:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800432e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00b      	beq.n	8004358 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004340:	6a3b      	ldr	r3, [r7, #32]
 8004342:	f043 0302 	orr.w	r3, r3, #2
 8004346:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004350:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800435c:	2b00      	cmp	r3, #0
 800435e:	d01c      	beq.n	800439a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f7ff fe63 	bl	800402c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6859      	ldr	r1, [r3, #4]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	4b0d      	ldr	r3, [pc, #52]	; (80043a8 <I2C_IsErrorOccurred+0x1bc>)
 8004372:	400b      	ands	r3, r1
 8004374:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800437a:	6a3b      	ldr	r3, [r7, #32]
 800437c:	431a      	orrs	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2220      	movs	r2, #32
 8004386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800439a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3728      	adds	r7, #40	; 0x28
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	fe00e800 	.word	0xfe00e800

080043ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	607b      	str	r3, [r7, #4]
 80043b6:	460b      	mov	r3, r1
 80043b8:	817b      	strh	r3, [r7, #10]
 80043ba:	4613      	mov	r3, r2
 80043bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043be:	897b      	ldrh	r3, [r7, #10]
 80043c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80043c4:	7a7b      	ldrb	r3, [r7, #9]
 80043c6:	041b      	lsls	r3, r3, #16
 80043c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043cc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80043da:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	0d5b      	lsrs	r3, r3, #21
 80043e6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80043ea:	4b08      	ldr	r3, [pc, #32]	; (800440c <I2C_TransferConfig+0x60>)
 80043ec:	430b      	orrs	r3, r1
 80043ee:	43db      	mvns	r3, r3
 80043f0:	ea02 0103 	and.w	r1, r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80043fe:	bf00      	nop
 8004400:	371c      	adds	r7, #28
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	03ff63ff 	.word	0x03ff63ff

08004410 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b20      	cmp	r3, #32
 8004424:	d138      	bne.n	8004498 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004430:	2302      	movs	r3, #2
 8004432:	e032      	b.n	800449a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2224      	movs	r2, #36	; 0x24
 8004440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 0201 	bic.w	r2, r2, #1
 8004452:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004462:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6819      	ldr	r1, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0201 	orr.w	r2, r2, #1
 8004482:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2220      	movs	r2, #32
 8004488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004494:	2300      	movs	r3, #0
 8004496:	e000      	b.n	800449a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004498:	2302      	movs	r3, #2
  }
}
 800449a:	4618      	mov	r0, r3
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b085      	sub	sp, #20
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
 80044ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	2b20      	cmp	r3, #32
 80044ba:	d139      	bne.n	8004530 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d101      	bne.n	80044ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80044c6:	2302      	movs	r3, #2
 80044c8:	e033      	b.n	8004532 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2224      	movs	r2, #36	; 0x24
 80044d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0201 	bic.w	r2, r2, #1
 80044e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80044f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	021b      	lsls	r3, r3, #8
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	4313      	orrs	r3, r2
 8004502:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0201 	orr.w	r2, r2, #1
 800451a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2220      	movs	r2, #32
 8004520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800452c:	2300      	movs	r3, #0
 800452e:	e000      	b.n	8004532 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004530:	2302      	movs	r3, #2
  }
}
 8004532:	4618      	mov	r0, r3
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
	...

08004540 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004544:	4b05      	ldr	r3, [pc, #20]	; (800455c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a04      	ldr	r2, [pc, #16]	; (800455c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800454a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800454e:	6013      	str	r3, [r2, #0]
}
 8004550:	bf00      	nop
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	40007000 	.word	0x40007000

08004560 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004566:	2300      	movs	r3, #0
 8004568:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800456a:	4b23      	ldr	r3, [pc, #140]	; (80045f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	4a22      	ldr	r2, [pc, #136]	; (80045f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004574:	6413      	str	r3, [r2, #64]	; 0x40
 8004576:	4b20      	ldr	r3, [pc, #128]	; (80045f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800457e:	603b      	str	r3, [r7, #0]
 8004580:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004582:	4b1e      	ldr	r3, [pc, #120]	; (80045fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a1d      	ldr	r2, [pc, #116]	; (80045fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800458c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800458e:	f7ff f82f 	bl	80035f0 <HAL_GetTick>
 8004592:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004594:	e009      	b.n	80045aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004596:	f7ff f82b 	bl	80035f0 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045a4:	d901      	bls.n	80045aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e022      	b.n	80045f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80045aa:	4b14      	ldr	r3, [pc, #80]	; (80045fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b6:	d1ee      	bne.n	8004596 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80045b8:	4b10      	ldr	r3, [pc, #64]	; (80045fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a0f      	ldr	r2, [pc, #60]	; (80045fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80045be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045c4:	f7ff f814 	bl	80035f0 <HAL_GetTick>
 80045c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80045ca:	e009      	b.n	80045e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80045cc:	f7ff f810 	bl	80035f0 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045da:	d901      	bls.n	80045e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e007      	b.n	80045f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80045e0:	4b06      	ldr	r3, [pc, #24]	; (80045fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045ec:	d1ee      	bne.n	80045cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40023800 	.word	0x40023800
 80045fc:	40007000 	.word	0x40007000

08004600 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004608:	2300      	movs	r3, #0
 800460a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e291      	b.n	8004b3a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 8087 	beq.w	8004732 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004624:	4b96      	ldr	r3, [pc, #600]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f003 030c 	and.w	r3, r3, #12
 800462c:	2b04      	cmp	r3, #4
 800462e:	d00c      	beq.n	800464a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004630:	4b93      	ldr	r3, [pc, #588]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f003 030c 	and.w	r3, r3, #12
 8004638:	2b08      	cmp	r3, #8
 800463a:	d112      	bne.n	8004662 <HAL_RCC_OscConfig+0x62>
 800463c:	4b90      	ldr	r3, [pc, #576]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004644:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004648:	d10b      	bne.n	8004662 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800464a:	4b8d      	ldr	r3, [pc, #564]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d06c      	beq.n	8004730 <HAL_RCC_OscConfig+0x130>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d168      	bne.n	8004730 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e26b      	b.n	8004b3a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800466a:	d106      	bne.n	800467a <HAL_RCC_OscConfig+0x7a>
 800466c:	4b84      	ldr	r3, [pc, #528]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a83      	ldr	r2, [pc, #524]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 8004672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004676:	6013      	str	r3, [r2, #0]
 8004678:	e02e      	b.n	80046d8 <HAL_RCC_OscConfig+0xd8>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10c      	bne.n	800469c <HAL_RCC_OscConfig+0x9c>
 8004682:	4b7f      	ldr	r3, [pc, #508]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a7e      	ldr	r2, [pc, #504]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 8004688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	4b7c      	ldr	r3, [pc, #496]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a7b      	ldr	r2, [pc, #492]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 8004694:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	e01d      	b.n	80046d8 <HAL_RCC_OscConfig+0xd8>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046a4:	d10c      	bne.n	80046c0 <HAL_RCC_OscConfig+0xc0>
 80046a6:	4b76      	ldr	r3, [pc, #472]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a75      	ldr	r2, [pc, #468]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 80046ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	4b73      	ldr	r3, [pc, #460]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a72      	ldr	r2, [pc, #456]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 80046b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	e00b      	b.n	80046d8 <HAL_RCC_OscConfig+0xd8>
 80046c0:	4b6f      	ldr	r3, [pc, #444]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a6e      	ldr	r2, [pc, #440]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 80046c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ca:	6013      	str	r3, [r2, #0]
 80046cc:	4b6c      	ldr	r3, [pc, #432]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a6b      	ldr	r2, [pc, #428]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 80046d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d013      	beq.n	8004708 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e0:	f7fe ff86 	bl	80035f0 <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046e8:	f7fe ff82 	bl	80035f0 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b64      	cmp	r3, #100	; 0x64
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e21f      	b.n	8004b3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046fa:	4b61      	ldr	r3, [pc, #388]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0f0      	beq.n	80046e8 <HAL_RCC_OscConfig+0xe8>
 8004706:	e014      	b.n	8004732 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004708:	f7fe ff72 	bl	80035f0 <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004710:	f7fe ff6e 	bl	80035f0 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b64      	cmp	r3, #100	; 0x64
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e20b      	b.n	8004b3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004722:	4b57      	ldr	r3, [pc, #348]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1f0      	bne.n	8004710 <HAL_RCC_OscConfig+0x110>
 800472e:	e000      	b.n	8004732 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d069      	beq.n	8004812 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800473e:	4b50      	ldr	r3, [pc, #320]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 030c 	and.w	r3, r3, #12
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00b      	beq.n	8004762 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800474a:	4b4d      	ldr	r3, [pc, #308]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 030c 	and.w	r3, r3, #12
 8004752:	2b08      	cmp	r3, #8
 8004754:	d11c      	bne.n	8004790 <HAL_RCC_OscConfig+0x190>
 8004756:	4b4a      	ldr	r3, [pc, #296]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d116      	bne.n	8004790 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004762:	4b47      	ldr	r3, [pc, #284]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d005      	beq.n	800477a <HAL_RCC_OscConfig+0x17a>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d001      	beq.n	800477a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e1df      	b.n	8004b3a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800477a:	4b41      	ldr	r3, [pc, #260]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	493d      	ldr	r1, [pc, #244]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 800478a:	4313      	orrs	r3, r2
 800478c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800478e:	e040      	b.n	8004812 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d023      	beq.n	80047e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004798:	4b39      	ldr	r3, [pc, #228]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a38      	ldr	r2, [pc, #224]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 800479e:	f043 0301 	orr.w	r3, r3, #1
 80047a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a4:	f7fe ff24 	bl	80035f0 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047ac:	f7fe ff20 	bl	80035f0 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e1bd      	b.n	8004b3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047be:	4b30      	ldr	r3, [pc, #192]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0f0      	beq.n	80047ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ca:	4b2d      	ldr	r3, [pc, #180]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	4929      	ldr	r1, [pc, #164]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	600b      	str	r3, [r1, #0]
 80047de:	e018      	b.n	8004812 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047e0:	4b27      	ldr	r3, [pc, #156]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a26      	ldr	r2, [pc, #152]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 80047e6:	f023 0301 	bic.w	r3, r3, #1
 80047ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ec:	f7fe ff00 	bl	80035f0 <HAL_GetTick>
 80047f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047f2:	e008      	b.n	8004806 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047f4:	f7fe fefc 	bl	80035f0 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e199      	b.n	8004b3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004806:	4b1e      	ldr	r3, [pc, #120]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1f0      	bne.n	80047f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0308 	and.w	r3, r3, #8
 800481a:	2b00      	cmp	r3, #0
 800481c:	d038      	beq.n	8004890 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d019      	beq.n	800485a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004826:	4b16      	ldr	r3, [pc, #88]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 8004828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800482a:	4a15      	ldr	r2, [pc, #84]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 800482c:	f043 0301 	orr.w	r3, r3, #1
 8004830:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004832:	f7fe fedd 	bl	80035f0 <HAL_GetTick>
 8004836:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004838:	e008      	b.n	800484c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800483a:	f7fe fed9 	bl	80035f0 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e176      	b.n	8004b3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800484c:	4b0c      	ldr	r3, [pc, #48]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 800484e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d0f0      	beq.n	800483a <HAL_RCC_OscConfig+0x23a>
 8004858:	e01a      	b.n	8004890 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800485a:	4b09      	ldr	r3, [pc, #36]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 800485c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800485e:	4a08      	ldr	r2, [pc, #32]	; (8004880 <HAL_RCC_OscConfig+0x280>)
 8004860:	f023 0301 	bic.w	r3, r3, #1
 8004864:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004866:	f7fe fec3 	bl	80035f0 <HAL_GetTick>
 800486a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800486c:	e00a      	b.n	8004884 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800486e:	f7fe febf 	bl	80035f0 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d903      	bls.n	8004884 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e15c      	b.n	8004b3a <HAL_RCC_OscConfig+0x53a>
 8004880:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004884:	4b91      	ldr	r3, [pc, #580]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1ee      	bne.n	800486e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b00      	cmp	r3, #0
 800489a:	f000 80a4 	beq.w	80049e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800489e:	4b8b      	ldr	r3, [pc, #556]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10d      	bne.n	80048c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80048aa:	4b88      	ldr	r3, [pc, #544]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	4a87      	ldr	r2, [pc, #540]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 80048b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b4:	6413      	str	r3, [r2, #64]	; 0x40
 80048b6:	4b85      	ldr	r3, [pc, #532]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048be:	60bb      	str	r3, [r7, #8]
 80048c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048c2:	2301      	movs	r3, #1
 80048c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048c6:	4b82      	ldr	r3, [pc, #520]	; (8004ad0 <HAL_RCC_OscConfig+0x4d0>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d118      	bne.n	8004904 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80048d2:	4b7f      	ldr	r3, [pc, #508]	; (8004ad0 <HAL_RCC_OscConfig+0x4d0>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a7e      	ldr	r2, [pc, #504]	; (8004ad0 <HAL_RCC_OscConfig+0x4d0>)
 80048d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048de:	f7fe fe87 	bl	80035f0 <HAL_GetTick>
 80048e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048e4:	e008      	b.n	80048f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048e6:	f7fe fe83 	bl	80035f0 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b64      	cmp	r3, #100	; 0x64
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e120      	b.n	8004b3a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048f8:	4b75      	ldr	r3, [pc, #468]	; (8004ad0 <HAL_RCC_OscConfig+0x4d0>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004900:	2b00      	cmp	r3, #0
 8004902:	d0f0      	beq.n	80048e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d106      	bne.n	800491a <HAL_RCC_OscConfig+0x31a>
 800490c:	4b6f      	ldr	r3, [pc, #444]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 800490e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004910:	4a6e      	ldr	r2, [pc, #440]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004912:	f043 0301 	orr.w	r3, r3, #1
 8004916:	6713      	str	r3, [r2, #112]	; 0x70
 8004918:	e02d      	b.n	8004976 <HAL_RCC_OscConfig+0x376>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10c      	bne.n	800493c <HAL_RCC_OscConfig+0x33c>
 8004922:	4b6a      	ldr	r3, [pc, #424]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004926:	4a69      	ldr	r2, [pc, #420]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004928:	f023 0301 	bic.w	r3, r3, #1
 800492c:	6713      	str	r3, [r2, #112]	; 0x70
 800492e:	4b67      	ldr	r3, [pc, #412]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004932:	4a66      	ldr	r2, [pc, #408]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004934:	f023 0304 	bic.w	r3, r3, #4
 8004938:	6713      	str	r3, [r2, #112]	; 0x70
 800493a:	e01c      	b.n	8004976 <HAL_RCC_OscConfig+0x376>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	2b05      	cmp	r3, #5
 8004942:	d10c      	bne.n	800495e <HAL_RCC_OscConfig+0x35e>
 8004944:	4b61      	ldr	r3, [pc, #388]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004948:	4a60      	ldr	r2, [pc, #384]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 800494a:	f043 0304 	orr.w	r3, r3, #4
 800494e:	6713      	str	r3, [r2, #112]	; 0x70
 8004950:	4b5e      	ldr	r3, [pc, #376]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004954:	4a5d      	ldr	r2, [pc, #372]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004956:	f043 0301 	orr.w	r3, r3, #1
 800495a:	6713      	str	r3, [r2, #112]	; 0x70
 800495c:	e00b      	b.n	8004976 <HAL_RCC_OscConfig+0x376>
 800495e:	4b5b      	ldr	r3, [pc, #364]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004962:	4a5a      	ldr	r2, [pc, #360]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004964:	f023 0301 	bic.w	r3, r3, #1
 8004968:	6713      	str	r3, [r2, #112]	; 0x70
 800496a:	4b58      	ldr	r3, [pc, #352]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 800496c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496e:	4a57      	ldr	r2, [pc, #348]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004970:	f023 0304 	bic.w	r3, r3, #4
 8004974:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d015      	beq.n	80049aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497e:	f7fe fe37 	bl	80035f0 <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004984:	e00a      	b.n	800499c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004986:	f7fe fe33 	bl	80035f0 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	f241 3288 	movw	r2, #5000	; 0x1388
 8004994:	4293      	cmp	r3, r2
 8004996:	d901      	bls.n	800499c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e0ce      	b.n	8004b3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800499c:	4b4b      	ldr	r3, [pc, #300]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 800499e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d0ee      	beq.n	8004986 <HAL_RCC_OscConfig+0x386>
 80049a8:	e014      	b.n	80049d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049aa:	f7fe fe21 	bl	80035f0 <HAL_GetTick>
 80049ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049b0:	e00a      	b.n	80049c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049b2:	f7fe fe1d 	bl	80035f0 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e0b8      	b.n	8004b3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049c8:	4b40      	ldr	r3, [pc, #256]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 80049ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1ee      	bne.n	80049b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80049d4:	7dfb      	ldrb	r3, [r7, #23]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d105      	bne.n	80049e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049da:	4b3c      	ldr	r3, [pc, #240]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	4a3b      	ldr	r2, [pc, #236]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 80049e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 80a4 	beq.w	8004b38 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049f0:	4b36      	ldr	r3, [pc, #216]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f003 030c 	and.w	r3, r3, #12
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d06b      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d149      	bne.n	8004a98 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a04:	4b31      	ldr	r3, [pc, #196]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a30      	ldr	r2, [pc, #192]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004a0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a10:	f7fe fdee 	bl	80035f0 <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a16:	e008      	b.n	8004a2a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a18:	f7fe fdea 	bl	80035f0 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e087      	b.n	8004b3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a2a:	4b28      	ldr	r3, [pc, #160]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1f0      	bne.n	8004a18 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	69da      	ldr	r2, [r3, #28]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	019b      	lsls	r3, r3, #6
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4c:	085b      	lsrs	r3, r3, #1
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	041b      	lsls	r3, r3, #16
 8004a52:	431a      	orrs	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a58:	061b      	lsls	r3, r3, #24
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	4a1b      	ldr	r2, [pc, #108]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004a5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a62:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a64:	4b19      	ldr	r3, [pc, #100]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a18      	ldr	r2, [pc, #96]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a70:	f7fe fdbe 	bl	80035f0 <HAL_GetTick>
 8004a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a78:	f7fe fdba 	bl	80035f0 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e057      	b.n	8004b3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a8a:	4b10      	ldr	r3, [pc, #64]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0f0      	beq.n	8004a78 <HAL_RCC_OscConfig+0x478>
 8004a96:	e04f      	b.n	8004b38 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a98:	4b0c      	ldr	r3, [pc, #48]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a0b      	ldr	r2, [pc, #44]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004a9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa4:	f7fe fda4 	bl	80035f0 <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aac:	f7fe fda0 	bl	80035f0 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e03d      	b.n	8004b3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004abe:	4b03      	ldr	r3, [pc, #12]	; (8004acc <HAL_RCC_OscConfig+0x4cc>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1f0      	bne.n	8004aac <HAL_RCC_OscConfig+0x4ac>
 8004aca:	e035      	b.n	8004b38 <HAL_RCC_OscConfig+0x538>
 8004acc:	40023800 	.word	0x40023800
 8004ad0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004ad4:	4b1b      	ldr	r3, [pc, #108]	; (8004b44 <HAL_RCC_OscConfig+0x544>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d028      	beq.n	8004b34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d121      	bne.n	8004b34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d11a      	bne.n	8004b34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b04:	4013      	ands	r3, r2
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b0a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d111      	bne.n	8004b34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1a:	085b      	lsrs	r3, r3, #1
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d107      	bne.n	8004b34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d001      	beq.n	8004b38 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e000      	b.n	8004b3a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3718      	adds	r7, #24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	40023800 	.word	0x40023800

08004b48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004b52:	2300      	movs	r3, #0
 8004b54:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e0d0      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b60:	4b6a      	ldr	r3, [pc, #424]	; (8004d0c <HAL_RCC_ClockConfig+0x1c4>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 030f 	and.w	r3, r3, #15
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d910      	bls.n	8004b90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b6e:	4b67      	ldr	r3, [pc, #412]	; (8004d0c <HAL_RCC_ClockConfig+0x1c4>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f023 020f 	bic.w	r2, r3, #15
 8004b76:	4965      	ldr	r1, [pc, #404]	; (8004d0c <HAL_RCC_ClockConfig+0x1c4>)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b7e:	4b63      	ldr	r3, [pc, #396]	; (8004d0c <HAL_RCC_ClockConfig+0x1c4>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 030f 	and.w	r3, r3, #15
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d001      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e0b8      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d020      	beq.n	8004bde <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d005      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ba8:	4b59      	ldr	r3, [pc, #356]	; (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	4a58      	ldr	r2, [pc, #352]	; (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004bae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bb2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0308 	and.w	r3, r3, #8
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d005      	beq.n	8004bcc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bc0:	4b53      	ldr	r3, [pc, #332]	; (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	4a52      	ldr	r2, [pc, #328]	; (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004bc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bcc:	4b50      	ldr	r3, [pc, #320]	; (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	494d      	ldr	r1, [pc, #308]	; (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d040      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d107      	bne.n	8004c02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bf2:	4b47      	ldr	r3, [pc, #284]	; (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d115      	bne.n	8004c2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e07f      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d107      	bne.n	8004c1a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c0a:	4b41      	ldr	r3, [pc, #260]	; (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d109      	bne.n	8004c2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e073      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c1a:	4b3d      	ldr	r3, [pc, #244]	; (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e06b      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c2a:	4b39      	ldr	r3, [pc, #228]	; (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f023 0203 	bic.w	r2, r3, #3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	4936      	ldr	r1, [pc, #216]	; (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c3c:	f7fe fcd8 	bl	80035f0 <HAL_GetTick>
 8004c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c42:	e00a      	b.n	8004c5a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c44:	f7fe fcd4 	bl	80035f0 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e053      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c5a:	4b2d      	ldr	r3, [pc, #180]	; (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 020c 	and.w	r2, r3, #12
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d1eb      	bne.n	8004c44 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c6c:	4b27      	ldr	r3, [pc, #156]	; (8004d0c <HAL_RCC_ClockConfig+0x1c4>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 030f 	and.w	r3, r3, #15
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d210      	bcs.n	8004c9c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c7a:	4b24      	ldr	r3, [pc, #144]	; (8004d0c <HAL_RCC_ClockConfig+0x1c4>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f023 020f 	bic.w	r2, r3, #15
 8004c82:	4922      	ldr	r1, [pc, #136]	; (8004d0c <HAL_RCC_ClockConfig+0x1c4>)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c8a:	4b20      	ldr	r3, [pc, #128]	; (8004d0c <HAL_RCC_ClockConfig+0x1c4>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d001      	beq.n	8004c9c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e032      	b.n	8004d02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d008      	beq.n	8004cba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ca8:	4b19      	ldr	r3, [pc, #100]	; (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	4916      	ldr	r1, [pc, #88]	; (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0308 	and.w	r3, r3, #8
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d009      	beq.n	8004cda <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004cc6:	4b12      	ldr	r3, [pc, #72]	; (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	490e      	ldr	r1, [pc, #56]	; (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004cda:	f000 f821 	bl	8004d20 <HAL_RCC_GetSysClockFreq>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	4b0b      	ldr	r3, [pc, #44]	; (8004d10 <HAL_RCC_ClockConfig+0x1c8>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	091b      	lsrs	r3, r3, #4
 8004ce6:	f003 030f 	and.w	r3, r3, #15
 8004cea:	490a      	ldr	r1, [pc, #40]	; (8004d14 <HAL_RCC_ClockConfig+0x1cc>)
 8004cec:	5ccb      	ldrb	r3, [r1, r3]
 8004cee:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf2:	4a09      	ldr	r2, [pc, #36]	; (8004d18 <HAL_RCC_ClockConfig+0x1d0>)
 8004cf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004cf6:	4b09      	ldr	r3, [pc, #36]	; (8004d1c <HAL_RCC_ClockConfig+0x1d4>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fe fc34 	bl	8003568 <HAL_InitTick>

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	40023c00 	.word	0x40023c00
 8004d10:	40023800 	.word	0x40023800
 8004d14:	08009974 	.word	0x08009974
 8004d18:	2000007c 	.word	0x2000007c
 8004d1c:	20000080 	.word	0x20000080

08004d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d24:	b094      	sub	sp, #80	; 0x50
 8004d26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d30:	2300      	movs	r3, #0
 8004d32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004d34:	2300      	movs	r3, #0
 8004d36:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d38:	4b79      	ldr	r3, [pc, #484]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f003 030c 	and.w	r3, r3, #12
 8004d40:	2b08      	cmp	r3, #8
 8004d42:	d00d      	beq.n	8004d60 <HAL_RCC_GetSysClockFreq+0x40>
 8004d44:	2b08      	cmp	r3, #8
 8004d46:	f200 80e1 	bhi.w	8004f0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <HAL_RCC_GetSysClockFreq+0x34>
 8004d4e:	2b04      	cmp	r3, #4
 8004d50:	d003      	beq.n	8004d5a <HAL_RCC_GetSysClockFreq+0x3a>
 8004d52:	e0db      	b.n	8004f0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d54:	4b73      	ldr	r3, [pc, #460]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d58:	e0db      	b.n	8004f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d5a:	4b73      	ldr	r3, [pc, #460]	; (8004f28 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d5e:	e0d8      	b.n	8004f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d60:	4b6f      	ldr	r3, [pc, #444]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d68:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004d6a:	4b6d      	ldr	r3, [pc, #436]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d063      	beq.n	8004e3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d76:	4b6a      	ldr	r3, [pc, #424]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	099b      	lsrs	r3, r3, #6
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d88:	633b      	str	r3, [r7, #48]	; 0x30
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004d92:	4622      	mov	r2, r4
 8004d94:	462b      	mov	r3, r5
 8004d96:	f04f 0000 	mov.w	r0, #0
 8004d9a:	f04f 0100 	mov.w	r1, #0
 8004d9e:	0159      	lsls	r1, r3, #5
 8004da0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004da4:	0150      	lsls	r0, r2, #5
 8004da6:	4602      	mov	r2, r0
 8004da8:	460b      	mov	r3, r1
 8004daa:	4621      	mov	r1, r4
 8004dac:	1a51      	subs	r1, r2, r1
 8004dae:	6139      	str	r1, [r7, #16]
 8004db0:	4629      	mov	r1, r5
 8004db2:	eb63 0301 	sbc.w	r3, r3, r1
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	f04f 0200 	mov.w	r2, #0
 8004dbc:	f04f 0300 	mov.w	r3, #0
 8004dc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004dc4:	4659      	mov	r1, fp
 8004dc6:	018b      	lsls	r3, r1, #6
 8004dc8:	4651      	mov	r1, sl
 8004dca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004dce:	4651      	mov	r1, sl
 8004dd0:	018a      	lsls	r2, r1, #6
 8004dd2:	4651      	mov	r1, sl
 8004dd4:	ebb2 0801 	subs.w	r8, r2, r1
 8004dd8:	4659      	mov	r1, fp
 8004dda:	eb63 0901 	sbc.w	r9, r3, r1
 8004dde:	f04f 0200 	mov.w	r2, #0
 8004de2:	f04f 0300 	mov.w	r3, #0
 8004de6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004df2:	4690      	mov	r8, r2
 8004df4:	4699      	mov	r9, r3
 8004df6:	4623      	mov	r3, r4
 8004df8:	eb18 0303 	adds.w	r3, r8, r3
 8004dfc:	60bb      	str	r3, [r7, #8]
 8004dfe:	462b      	mov	r3, r5
 8004e00:	eb49 0303 	adc.w	r3, r9, r3
 8004e04:	60fb      	str	r3, [r7, #12]
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	f04f 0300 	mov.w	r3, #0
 8004e0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e12:	4629      	mov	r1, r5
 8004e14:	024b      	lsls	r3, r1, #9
 8004e16:	4621      	mov	r1, r4
 8004e18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e1c:	4621      	mov	r1, r4
 8004e1e:	024a      	lsls	r2, r1, #9
 8004e20:	4610      	mov	r0, r2
 8004e22:	4619      	mov	r1, r3
 8004e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e26:	2200      	movs	r2, #0
 8004e28:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e30:	f7fb ff2c 	bl	8000c8c <__aeabi_uldivmod>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4613      	mov	r3, r2
 8004e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e3c:	e058      	b.n	8004ef0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e3e:	4b38      	ldr	r3, [pc, #224]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	099b      	lsrs	r3, r3, #6
 8004e44:	2200      	movs	r2, #0
 8004e46:	4618      	mov	r0, r3
 8004e48:	4611      	mov	r1, r2
 8004e4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e4e:	623b      	str	r3, [r7, #32]
 8004e50:	2300      	movs	r3, #0
 8004e52:	627b      	str	r3, [r7, #36]	; 0x24
 8004e54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e58:	4642      	mov	r2, r8
 8004e5a:	464b      	mov	r3, r9
 8004e5c:	f04f 0000 	mov.w	r0, #0
 8004e60:	f04f 0100 	mov.w	r1, #0
 8004e64:	0159      	lsls	r1, r3, #5
 8004e66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e6a:	0150      	lsls	r0, r2, #5
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4641      	mov	r1, r8
 8004e72:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e76:	4649      	mov	r1, r9
 8004e78:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e7c:	f04f 0200 	mov.w	r2, #0
 8004e80:	f04f 0300 	mov.w	r3, #0
 8004e84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e90:	ebb2 040a 	subs.w	r4, r2, sl
 8004e94:	eb63 050b 	sbc.w	r5, r3, fp
 8004e98:	f04f 0200 	mov.w	r2, #0
 8004e9c:	f04f 0300 	mov.w	r3, #0
 8004ea0:	00eb      	lsls	r3, r5, #3
 8004ea2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ea6:	00e2      	lsls	r2, r4, #3
 8004ea8:	4614      	mov	r4, r2
 8004eaa:	461d      	mov	r5, r3
 8004eac:	4643      	mov	r3, r8
 8004eae:	18e3      	adds	r3, r4, r3
 8004eb0:	603b      	str	r3, [r7, #0]
 8004eb2:	464b      	mov	r3, r9
 8004eb4:	eb45 0303 	adc.w	r3, r5, r3
 8004eb8:	607b      	str	r3, [r7, #4]
 8004eba:	f04f 0200 	mov.w	r2, #0
 8004ebe:	f04f 0300 	mov.w	r3, #0
 8004ec2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ec6:	4629      	mov	r1, r5
 8004ec8:	028b      	lsls	r3, r1, #10
 8004eca:	4621      	mov	r1, r4
 8004ecc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ed0:	4621      	mov	r1, r4
 8004ed2:	028a      	lsls	r2, r1, #10
 8004ed4:	4610      	mov	r0, r2
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eda:	2200      	movs	r2, #0
 8004edc:	61bb      	str	r3, [r7, #24]
 8004ede:	61fa      	str	r2, [r7, #28]
 8004ee0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ee4:	f7fb fed2 	bl	8000c8c <__aeabi_uldivmod>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	4613      	mov	r3, r2
 8004eee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004ef0:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	0c1b      	lsrs	r3, r3, #16
 8004ef6:	f003 0303 	and.w	r3, r3, #3
 8004efa:	3301      	adds	r3, #1
 8004efc:	005b      	lsls	r3, r3, #1
 8004efe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004f00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f0a:	e002      	b.n	8004f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f0c:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3750      	adds	r7, #80	; 0x50
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f1e:	bf00      	nop
 8004f20:	40023800 	.word	0x40023800
 8004f24:	00f42400 	.word	0x00f42400
 8004f28:	007a1200 	.word	0x007a1200

08004f2c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f30:	4b03      	ldr	r3, [pc, #12]	; (8004f40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f32:	681b      	ldr	r3, [r3, #0]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	2000007c 	.word	0x2000007c

08004f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f48:	f7ff fff0 	bl	8004f2c <HAL_RCC_GetHCLKFreq>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	4b05      	ldr	r3, [pc, #20]	; (8004f64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	0a9b      	lsrs	r3, r3, #10
 8004f54:	f003 0307 	and.w	r3, r3, #7
 8004f58:	4903      	ldr	r1, [pc, #12]	; (8004f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f5a:	5ccb      	ldrb	r3, [r1, r3]
 8004f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	40023800 	.word	0x40023800
 8004f68:	08009984 	.word	0x08009984

08004f6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f70:	f7ff ffdc 	bl	8004f2c <HAL_RCC_GetHCLKFreq>
 8004f74:	4602      	mov	r2, r0
 8004f76:	4b05      	ldr	r3, [pc, #20]	; (8004f8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	0b5b      	lsrs	r3, r3, #13
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	4903      	ldr	r1, [pc, #12]	; (8004f90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f82:	5ccb      	ldrb	r3, [r1, r3]
 8004f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	40023800 	.word	0x40023800
 8004f90:	08009984 	.word	0x08009984

08004f94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b088      	sub	sp, #32
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004fac:	2300      	movs	r3, #0
 8004fae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d012      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004fbc:	4b69      	ldr	r3, [pc, #420]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	4a68      	ldr	r2, [pc, #416]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fc2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004fc6:	6093      	str	r3, [r2, #8]
 8004fc8:	4b66      	ldr	r3, [pc, #408]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fca:	689a      	ldr	r2, [r3, #8]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd0:	4964      	ldr	r1, [pc, #400]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d017      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fee:	4b5d      	ldr	r3, [pc, #372]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ff4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffc:	4959      	ldr	r1, [pc, #356]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005008:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800500c:	d101      	bne.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800500e:	2301      	movs	r3, #1
 8005010:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800501a:	2301      	movs	r3, #1
 800501c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d017      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800502a:	4b4e      	ldr	r3, [pc, #312]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800502c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005030:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005038:	494a      	ldr	r1, [pc, #296]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800503a:	4313      	orrs	r3, r2
 800503c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005044:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005048:	d101      	bne.n	800504e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800504a:	2301      	movs	r3, #1
 800504c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005056:	2301      	movs	r3, #1
 8005058:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005066:	2301      	movs	r3, #1
 8005068:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0320 	and.w	r3, r3, #32
 8005072:	2b00      	cmp	r3, #0
 8005074:	f000 808b 	beq.w	800518e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005078:	4b3a      	ldr	r3, [pc, #232]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800507a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507c:	4a39      	ldr	r2, [pc, #228]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800507e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005082:	6413      	str	r3, [r2, #64]	; 0x40
 8005084:	4b37      	ldr	r3, [pc, #220]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800508c:	60bb      	str	r3, [r7, #8]
 800508e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005090:	4b35      	ldr	r3, [pc, #212]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a34      	ldr	r2, [pc, #208]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800509a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800509c:	f7fe faa8 	bl	80035f0 <HAL_GetTick>
 80050a0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80050a2:	e008      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050a4:	f7fe faa4 	bl	80035f0 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b64      	cmp	r3, #100	; 0x64
 80050b0:	d901      	bls.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e357      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80050b6:	4b2c      	ldr	r3, [pc, #176]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d0f0      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050c2:	4b28      	ldr	r3, [pc, #160]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d035      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d02e      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050e0:	4b20      	ldr	r3, [pc, #128]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050e8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050ea:	4b1e      	ldr	r3, [pc, #120]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ee:	4a1d      	ldr	r2, [pc, #116]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050f6:	4b1b      	ldr	r3, [pc, #108]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fa:	4a1a      	ldr	r2, [pc, #104]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005100:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005102:	4a18      	ldr	r2, [pc, #96]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005108:	4b16      	ldr	r3, [pc, #88]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800510a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b01      	cmp	r3, #1
 8005112:	d114      	bne.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005114:	f7fe fa6c 	bl	80035f0 <HAL_GetTick>
 8005118:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800511a:	e00a      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800511c:	f7fe fa68 	bl	80035f0 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	f241 3288 	movw	r2, #5000	; 0x1388
 800512a:	4293      	cmp	r3, r2
 800512c:	d901      	bls.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e319      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005132:	4b0c      	ldr	r3, [pc, #48]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d0ee      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005146:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800514a:	d111      	bne.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800514c:	4b05      	ldr	r3, [pc, #20]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005158:	4b04      	ldr	r3, [pc, #16]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800515a:	400b      	ands	r3, r1
 800515c:	4901      	ldr	r1, [pc, #4]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800515e:	4313      	orrs	r3, r2
 8005160:	608b      	str	r3, [r1, #8]
 8005162:	e00b      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005164:	40023800 	.word	0x40023800
 8005168:	40007000 	.word	0x40007000
 800516c:	0ffffcff 	.word	0x0ffffcff
 8005170:	4baa      	ldr	r3, [pc, #680]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	4aa9      	ldr	r2, [pc, #676]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005176:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800517a:	6093      	str	r3, [r2, #8]
 800517c:	4ba7      	ldr	r3, [pc, #668]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800517e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005188:	49a4      	ldr	r1, [pc, #656]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800518a:	4313      	orrs	r3, r2
 800518c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0310 	and.w	r3, r3, #16
 8005196:	2b00      	cmp	r3, #0
 8005198:	d010      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800519a:	4ba0      	ldr	r3, [pc, #640]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800519c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051a0:	4a9e      	ldr	r2, [pc, #632]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80051aa:	4b9c      	ldr	r3, [pc, #624]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051ac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b4:	4999      	ldr	r1, [pc, #612]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00a      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051c8:	4b94      	ldr	r3, [pc, #592]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051d6:	4991      	ldr	r1, [pc, #580]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051ea:	4b8c      	ldr	r3, [pc, #560]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051f8:	4988      	ldr	r1, [pc, #544]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00a      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800520c:	4b83      	ldr	r3, [pc, #524]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800520e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005212:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800521a:	4980      	ldr	r1, [pc, #512]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800521c:	4313      	orrs	r3, r2
 800521e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800522e:	4b7b      	ldr	r3, [pc, #492]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005234:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523c:	4977      	ldr	r1, [pc, #476]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800523e:	4313      	orrs	r3, r2
 8005240:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00a      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005250:	4b72      	ldr	r3, [pc, #456]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005256:	f023 0203 	bic.w	r2, r3, #3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800525e:	496f      	ldr	r1, [pc, #444]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005260:	4313      	orrs	r3, r2
 8005262:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00a      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005272:	4b6a      	ldr	r3, [pc, #424]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005278:	f023 020c 	bic.w	r2, r3, #12
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005280:	4966      	ldr	r1, [pc, #408]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005282:	4313      	orrs	r3, r2
 8005284:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00a      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005294:	4b61      	ldr	r3, [pc, #388]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052a2:	495e      	ldr	r1, [pc, #376]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00a      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052b6:	4b59      	ldr	r3, [pc, #356]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052bc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052c4:	4955      	ldr	r1, [pc, #340]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00a      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052d8:	4b50      	ldr	r3, [pc, #320]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e6:	494d      	ldr	r1, [pc, #308]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00a      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80052fa:	4b48      	ldr	r3, [pc, #288]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005300:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005308:	4944      	ldr	r1, [pc, #272]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800530a:	4313      	orrs	r3, r2
 800530c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00a      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800531c:	4b3f      	ldr	r3, [pc, #252]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800531e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005322:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800532a:	493c      	ldr	r1, [pc, #240]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800532c:	4313      	orrs	r3, r2
 800532e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00a      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800533e:	4b37      	ldr	r3, [pc, #220]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005344:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800534c:	4933      	ldr	r1, [pc, #204]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800534e:	4313      	orrs	r3, r2
 8005350:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00a      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005360:	4b2e      	ldr	r3, [pc, #184]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005366:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800536e:	492b      	ldr	r1, [pc, #172]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005370:	4313      	orrs	r3, r2
 8005372:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d011      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005382:	4b26      	ldr	r3, [pc, #152]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005388:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005390:	4922      	ldr	r1, [pc, #136]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005392:	4313      	orrs	r3, r2
 8005394:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800539c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053a0:	d101      	bne.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80053a2:	2301      	movs	r3, #1
 80053a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0308 	and.w	r3, r3, #8
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80053b2:	2301      	movs	r3, #1
 80053b4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00a      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053c2:	4b16      	ldr	r3, [pc, #88]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053d0:	4912      	ldr	r1, [pc, #72]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00b      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80053e4:	4b0d      	ldr	r3, [pc, #52]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053f4:	4909      	ldr	r1, [pc, #36]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d006      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 80d9 	beq.w	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005410:	4b02      	ldr	r3, [pc, #8]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a01      	ldr	r2, [pc, #4]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005416:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800541a:	e001      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800541c:	40023800 	.word	0x40023800
 8005420:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005422:	f7fe f8e5 	bl	80035f0 <HAL_GetTick>
 8005426:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005428:	e008      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800542a:	f7fe f8e1 	bl	80035f0 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b64      	cmp	r3, #100	; 0x64
 8005436:	d901      	bls.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e194      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800543c:	4b6c      	ldr	r3, [pc, #432]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1f0      	bne.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b00      	cmp	r3, #0
 8005452:	d021      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005458:	2b00      	cmp	r3, #0
 800545a:	d11d      	bne.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800545c:	4b64      	ldr	r3, [pc, #400]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800545e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005462:	0c1b      	lsrs	r3, r3, #16
 8005464:	f003 0303 	and.w	r3, r3, #3
 8005468:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800546a:	4b61      	ldr	r3, [pc, #388]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800546c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005470:	0e1b      	lsrs	r3, r3, #24
 8005472:	f003 030f 	and.w	r3, r3, #15
 8005476:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	019a      	lsls	r2, r3, #6
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	041b      	lsls	r3, r3, #16
 8005482:	431a      	orrs	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	061b      	lsls	r3, r3, #24
 8005488:	431a      	orrs	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	071b      	lsls	r3, r3, #28
 8005490:	4957      	ldr	r1, [pc, #348]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005492:	4313      	orrs	r3, r2
 8005494:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d004      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054ac:	d00a      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d02e      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054c2:	d129      	bne.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80054c4:	4b4a      	ldr	r3, [pc, #296]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054ca:	0c1b      	lsrs	r3, r3, #16
 80054cc:	f003 0303 	and.w	r3, r3, #3
 80054d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80054d2:	4b47      	ldr	r3, [pc, #284]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054d8:	0f1b      	lsrs	r3, r3, #28
 80054da:	f003 0307 	and.w	r3, r3, #7
 80054de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	019a      	lsls	r2, r3, #6
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	041b      	lsls	r3, r3, #16
 80054ea:	431a      	orrs	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	061b      	lsls	r3, r3, #24
 80054f2:	431a      	orrs	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	071b      	lsls	r3, r3, #28
 80054f8:	493d      	ldr	r1, [pc, #244]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005500:	4b3b      	ldr	r3, [pc, #236]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005502:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005506:	f023 021f 	bic.w	r2, r3, #31
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550e:	3b01      	subs	r3, #1
 8005510:	4937      	ldr	r1, [pc, #220]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005512:	4313      	orrs	r3, r2
 8005514:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d01d      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005524:	4b32      	ldr	r3, [pc, #200]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005526:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800552a:	0e1b      	lsrs	r3, r3, #24
 800552c:	f003 030f 	and.w	r3, r3, #15
 8005530:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005532:	4b2f      	ldr	r3, [pc, #188]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005538:	0f1b      	lsrs	r3, r3, #28
 800553a:	f003 0307 	and.w	r3, r3, #7
 800553e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	019a      	lsls	r2, r3, #6
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	041b      	lsls	r3, r3, #16
 800554c:	431a      	orrs	r2, r3
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	061b      	lsls	r3, r3, #24
 8005552:	431a      	orrs	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	071b      	lsls	r3, r3, #28
 8005558:	4925      	ldr	r1, [pc, #148]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800555a:	4313      	orrs	r3, r2
 800555c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d011      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	019a      	lsls	r2, r3, #6
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	041b      	lsls	r3, r3, #16
 8005578:	431a      	orrs	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	061b      	lsls	r3, r3, #24
 8005580:	431a      	orrs	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	071b      	lsls	r3, r3, #28
 8005588:	4919      	ldr	r1, [pc, #100]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800558a:	4313      	orrs	r3, r2
 800558c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005590:	4b17      	ldr	r3, [pc, #92]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a16      	ldr	r2, [pc, #88]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005596:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800559a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800559c:	f7fe f828 	bl	80035f0 <HAL_GetTick>
 80055a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055a2:	e008      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055a4:	f7fe f824 	bl	80035f0 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	2b64      	cmp	r3, #100	; 0x64
 80055b0:	d901      	bls.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e0d7      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055b6:	4b0e      	ldr	r3, [pc, #56]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d0f0      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	f040 80cd 	bne.w	8005764 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80055ca:	4b09      	ldr	r3, [pc, #36]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a08      	ldr	r2, [pc, #32]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055d6:	f7fe f80b 	bl	80035f0 <HAL_GetTick>
 80055da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80055dc:	e00a      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80055de:	f7fe f807 	bl	80035f0 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	2b64      	cmp	r3, #100	; 0x64
 80055ea:	d903      	bls.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e0ba      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80055f0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80055f4:	4b5e      	ldr	r3, [pc, #376]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005600:	d0ed      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005612:	2b00      	cmp	r3, #0
 8005614:	d009      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800561e:	2b00      	cmp	r3, #0
 8005620:	d02e      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	2b00      	cmp	r3, #0
 8005628:	d12a      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800562a:	4b51      	ldr	r3, [pc, #324]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800562c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005630:	0c1b      	lsrs	r3, r3, #16
 8005632:	f003 0303 	and.w	r3, r3, #3
 8005636:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005638:	4b4d      	ldr	r3, [pc, #308]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800563a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563e:	0f1b      	lsrs	r3, r3, #28
 8005640:	f003 0307 	and.w	r3, r3, #7
 8005644:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	019a      	lsls	r2, r3, #6
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	041b      	lsls	r3, r3, #16
 8005650:	431a      	orrs	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	061b      	lsls	r3, r3, #24
 8005658:	431a      	orrs	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	071b      	lsls	r3, r3, #28
 800565e:	4944      	ldr	r1, [pc, #272]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005660:	4313      	orrs	r3, r2
 8005662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005666:	4b42      	ldr	r3, [pc, #264]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800566c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005674:	3b01      	subs	r3, #1
 8005676:	021b      	lsls	r3, r3, #8
 8005678:	493d      	ldr	r1, [pc, #244]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800567a:	4313      	orrs	r3, r2
 800567c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d022      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005690:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005694:	d11d      	bne.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005696:	4b36      	ldr	r3, [pc, #216]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800569c:	0e1b      	lsrs	r3, r3, #24
 800569e:	f003 030f 	and.w	r3, r3, #15
 80056a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80056a4:	4b32      	ldr	r3, [pc, #200]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056aa:	0f1b      	lsrs	r3, r3, #28
 80056ac:	f003 0307 	and.w	r3, r3, #7
 80056b0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	019a      	lsls	r2, r3, #6
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	041b      	lsls	r3, r3, #16
 80056be:	431a      	orrs	r2, r3
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	061b      	lsls	r3, r3, #24
 80056c4:	431a      	orrs	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	071b      	lsls	r3, r3, #28
 80056ca:	4929      	ldr	r1, [pc, #164]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0308 	and.w	r3, r3, #8
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d028      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80056de:	4b24      	ldr	r3, [pc, #144]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e4:	0e1b      	lsrs	r3, r3, #24
 80056e6:	f003 030f 	and.w	r3, r3, #15
 80056ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80056ec:	4b20      	ldr	r3, [pc, #128]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f2:	0c1b      	lsrs	r3, r3, #16
 80056f4:	f003 0303 	and.w	r3, r3, #3
 80056f8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	019a      	lsls	r2, r3, #6
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	041b      	lsls	r3, r3, #16
 8005704:	431a      	orrs	r2, r3
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	061b      	lsls	r3, r3, #24
 800570a:	431a      	orrs	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	071b      	lsls	r3, r3, #28
 8005712:	4917      	ldr	r1, [pc, #92]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005714:	4313      	orrs	r3, r2
 8005716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800571a:	4b15      	ldr	r3, [pc, #84]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800571c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005720:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005728:	4911      	ldr	r1, [pc, #68]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800572a:	4313      	orrs	r3, r2
 800572c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005730:	4b0f      	ldr	r3, [pc, #60]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a0e      	ldr	r2, [pc, #56]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800573a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800573c:	f7fd ff58 	bl	80035f0 <HAL_GetTick>
 8005740:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005742:	e008      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005744:	f7fd ff54 	bl	80035f0 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b64      	cmp	r3, #100	; 0x64
 8005750:	d901      	bls.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e007      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005756:	4b06      	ldr	r3, [pc, #24]	; (8005770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800575e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005762:	d1ef      	bne.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3720      	adds	r7, #32
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	40023800 	.word	0x40023800

08005774 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e09d      	b.n	80058c2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578a:	2b00      	cmp	r3, #0
 800578c:	d108      	bne.n	80057a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005796:	d009      	beq.n	80057ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	61da      	str	r2, [r3, #28]
 800579e:	e005      	b.n	80057ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d106      	bne.n	80057cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7fd fa98 	bl	8002cfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057ec:	d902      	bls.n	80057f4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80057ee:	2300      	movs	r3, #0
 80057f0:	60fb      	str	r3, [r7, #12]
 80057f2:	e002      	b.n	80057fa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80057f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057f8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005802:	d007      	beq.n	8005814 <HAL_SPI_Init+0xa0>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800580c:	d002      	beq.n	8005814 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005824:	431a      	orrs	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	431a      	orrs	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	f003 0301 	and.w	r3, r3, #1
 8005838:	431a      	orrs	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005842:	431a      	orrs	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800584c:	431a      	orrs	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005856:	ea42 0103 	orr.w	r1, r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	0c1b      	lsrs	r3, r3, #16
 8005870:	f003 0204 	and.w	r2, r3, #4
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	f003 0310 	and.w	r3, r3, #16
 800587c:	431a      	orrs	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005882:	f003 0308 	and.w	r3, r3, #8
 8005886:	431a      	orrs	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005890:	ea42 0103 	orr.w	r1, r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	69da      	ldr	r2, [r3, #28]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b088      	sub	sp, #32
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	60f8      	str	r0, [r7, #12]
 80058d2:	60b9      	str	r1, [r7, #8]
 80058d4:	603b      	str	r3, [r7, #0]
 80058d6:	4613      	mov	r3, r2
 80058d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058da:	2300      	movs	r3, #0
 80058dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d101      	bne.n	80058ec <HAL_SPI_Transmit+0x22>
 80058e8:	2302      	movs	r3, #2
 80058ea:	e158      	b.n	8005b9e <HAL_SPI_Transmit+0x2d4>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058f4:	f7fd fe7c 	bl	80035f0 <HAL_GetTick>
 80058f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80058fa:	88fb      	ldrh	r3, [r7, #6]
 80058fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b01      	cmp	r3, #1
 8005908:	d002      	beq.n	8005910 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800590a:	2302      	movs	r3, #2
 800590c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800590e:	e13d      	b.n	8005b8c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d002      	beq.n	800591c <HAL_SPI_Transmit+0x52>
 8005916:	88fb      	ldrh	r3, [r7, #6]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d102      	bne.n	8005922 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005920:	e134      	b.n	8005b8c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2203      	movs	r2, #3
 8005926:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	88fa      	ldrh	r2, [r7, #6]
 800593a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	88fa      	ldrh	r2, [r7, #6]
 8005940:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800596c:	d10f      	bne.n	800598e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800597c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800598c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005998:	2b40      	cmp	r3, #64	; 0x40
 800599a:	d007      	beq.n	80059ac <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059b4:	d94b      	bls.n	8005a4e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d002      	beq.n	80059c4 <HAL_SPI_Transmit+0xfa>
 80059be:	8afb      	ldrh	r3, [r7, #22]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d13e      	bne.n	8005a42 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c8:	881a      	ldrh	r2, [r3, #0]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d4:	1c9a      	adds	r2, r3, #2
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059de:	b29b      	uxth	r3, r3
 80059e0:	3b01      	subs	r3, #1
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80059e8:	e02b      	b.n	8005a42 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d112      	bne.n	8005a1e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fc:	881a      	ldrh	r2, [r3, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a08:	1c9a      	adds	r2, r3, #2
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	3b01      	subs	r3, #1
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a1c:	e011      	b.n	8005a42 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a1e:	f7fd fde7 	bl	80035f0 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	683a      	ldr	r2, [r7, #0]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d803      	bhi.n	8005a36 <HAL_SPI_Transmit+0x16c>
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a34:	d102      	bne.n	8005a3c <HAL_SPI_Transmit+0x172>
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d102      	bne.n	8005a42 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a40:	e0a4      	b.n	8005b8c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1ce      	bne.n	80059ea <HAL_SPI_Transmit+0x120>
 8005a4c:	e07c      	b.n	8005b48 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d002      	beq.n	8005a5c <HAL_SPI_Transmit+0x192>
 8005a56:	8afb      	ldrh	r3, [r7, #22]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d170      	bne.n	8005b3e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d912      	bls.n	8005a8c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6a:	881a      	ldrh	r2, [r3, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a76:	1c9a      	adds	r2, r3, #2
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	3b02      	subs	r3, #2
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a8a:	e058      	b.n	8005b3e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	330c      	adds	r3, #12
 8005a96:	7812      	ldrb	r2, [r2, #0]
 8005a98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9e:	1c5a      	adds	r2, r3, #1
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005ab2:	e044      	b.n	8005b3e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f003 0302 	and.w	r3, r3, #2
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d12b      	bne.n	8005b1a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d912      	bls.n	8005af2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad0:	881a      	ldrh	r2, [r3, #0]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005adc:	1c9a      	adds	r2, r3, #2
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	3b02      	subs	r3, #2
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005af0:	e025      	b.n	8005b3e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	330c      	adds	r3, #12
 8005afc:	7812      	ldrb	r2, [r2, #0]
 8005afe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b04:	1c5a      	adds	r2, r3, #1
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	3b01      	subs	r3, #1
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b18:	e011      	b.n	8005b3e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b1a:	f7fd fd69 	bl	80035f0 <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	683a      	ldr	r2, [r7, #0]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d803      	bhi.n	8005b32 <HAL_SPI_Transmit+0x268>
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b30:	d102      	bne.n	8005b38 <HAL_SPI_Transmit+0x26e>
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d102      	bne.n	8005b3e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b3c:	e026      	b.n	8005b8c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1b5      	bne.n	8005ab4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	6839      	ldr	r1, [r7, #0]
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 fd07 	bl	8006560 <SPI_EndRxTxTransaction>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d002      	beq.n	8005b5e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10a      	bne.n	8005b7c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b66:	2300      	movs	r3, #0
 8005b68:	613b      	str	r3, [r7, #16]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	613b      	str	r3, [r7, #16]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	613b      	str	r3, [r7, #16]
 8005b7a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d002      	beq.n	8005b8a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	77fb      	strb	r3, [r7, #31]
 8005b88:	e000      	b.n	8005b8c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005b8a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005b9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3720      	adds	r7, #32
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b088      	sub	sp, #32
 8005baa:	af02      	add	r7, sp, #8
 8005bac:	60f8      	str	r0, [r7, #12]
 8005bae:	60b9      	str	r1, [r7, #8]
 8005bb0:	603b      	str	r3, [r7, #0]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bc2:	d112      	bne.n	8005bea <HAL_SPI_Receive+0x44>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10e      	bne.n	8005bea <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2204      	movs	r2, #4
 8005bd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005bd4:	88fa      	ldrh	r2, [r7, #6]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	68b9      	ldr	r1, [r7, #8]
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f000 f910 	bl	8005e06 <HAL_SPI_TransmitReceive>
 8005be6:	4603      	mov	r3, r0
 8005be8:	e109      	b.n	8005dfe <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d101      	bne.n	8005bf8 <HAL_SPI_Receive+0x52>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e102      	b.n	8005dfe <HAL_SPI_Receive+0x258>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c00:	f7fd fcf6 	bl	80035f0 <HAL_GetTick>
 8005c04:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d002      	beq.n	8005c18 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005c12:	2302      	movs	r3, #2
 8005c14:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c16:	e0e9      	b.n	8005dec <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d002      	beq.n	8005c24 <HAL_SPI_Receive+0x7e>
 8005c1e:	88fb      	ldrh	r3, [r7, #6]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d102      	bne.n	8005c2a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c28:	e0e0      	b.n	8005dec <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2204      	movs	r2, #4
 8005c2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	88fa      	ldrh	r2, [r7, #6]
 8005c42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	88fa      	ldrh	r2, [r7, #6]
 8005c4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c74:	d908      	bls.n	8005c88 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	685a      	ldr	r2, [r3, #4]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c84:	605a      	str	r2, [r3, #4]
 8005c86:	e007      	b.n	8005c98 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c96:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ca0:	d10f      	bne.n	8005cc2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cb0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005cc0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ccc:	2b40      	cmp	r3, #64	; 0x40
 8005cce:	d007      	beq.n	8005ce0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cde:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ce8:	d867      	bhi.n	8005dba <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005cea:	e030      	b.n	8005d4e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d117      	bne.n	8005d2a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f103 020c 	add.w	r2, r3, #12
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	7812      	ldrb	r2, [r2, #0]
 8005d08:	b2d2      	uxtb	r2, r2
 8005d0a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d10:	1c5a      	adds	r2, r3, #1
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005d28:	e011      	b.n	8005d4e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d2a:	f7fd fc61 	bl	80035f0 <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d803      	bhi.n	8005d42 <HAL_SPI_Receive+0x19c>
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d40:	d102      	bne.n	8005d48 <HAL_SPI_Receive+0x1a2>
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d102      	bne.n	8005d4e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005d4c:	e04e      	b.n	8005dec <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1c8      	bne.n	8005cec <HAL_SPI_Receive+0x146>
 8005d5a:	e034      	b.n	8005dc6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d115      	bne.n	8005d96 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68da      	ldr	r2, [r3, #12]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d74:	b292      	uxth	r2, r2
 8005d76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7c:	1c9a      	adds	r2, r3, #2
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005d94:	e011      	b.n	8005dba <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d96:	f7fd fc2b 	bl	80035f0 <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d803      	bhi.n	8005dae <HAL_SPI_Receive+0x208>
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dac:	d102      	bne.n	8005db4 <HAL_SPI_Receive+0x20e>
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d102      	bne.n	8005dba <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005db8:	e018      	b.n	8005dec <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1ca      	bne.n	8005d5c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	6839      	ldr	r1, [r7, #0]
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f000 fb4c 	bl	8006468 <SPI_EndRxTransaction>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d002      	beq.n	8005ddc <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2220      	movs	r2, #32
 8005dda:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d002      	beq.n	8005dea <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	75fb      	strb	r3, [r7, #23]
 8005de8:	e000      	b.n	8005dec <HAL_SPI_Receive+0x246>
  }

error :
 8005dea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3718      	adds	r7, #24
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b08a      	sub	sp, #40	; 0x28
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	60f8      	str	r0, [r7, #12]
 8005e0e:	60b9      	str	r1, [r7, #8]
 8005e10:	607a      	str	r2, [r7, #4]
 8005e12:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e14:	2301      	movs	r3, #1
 8005e16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d101      	bne.n	8005e2c <HAL_SPI_TransmitReceive+0x26>
 8005e28:	2302      	movs	r3, #2
 8005e2a:	e1fb      	b.n	8006224 <HAL_SPI_TransmitReceive+0x41e>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e34:	f7fd fbdc 	bl	80035f0 <HAL_GetTick>
 8005e38:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e40:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005e48:	887b      	ldrh	r3, [r7, #2]
 8005e4a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005e4c:	887b      	ldrh	r3, [r7, #2]
 8005e4e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e50:	7efb      	ldrb	r3, [r7, #27]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d00e      	beq.n	8005e74 <HAL_SPI_TransmitReceive+0x6e>
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e5c:	d106      	bne.n	8005e6c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d102      	bne.n	8005e6c <HAL_SPI_TransmitReceive+0x66>
 8005e66:	7efb      	ldrb	r3, [r7, #27]
 8005e68:	2b04      	cmp	r3, #4
 8005e6a:	d003      	beq.n	8005e74 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005e72:	e1cd      	b.n	8006210 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d005      	beq.n	8005e86 <HAL_SPI_TransmitReceive+0x80>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d002      	beq.n	8005e86 <HAL_SPI_TransmitReceive+0x80>
 8005e80:	887b      	ldrh	r3, [r7, #2]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d103      	bne.n	8005e8e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005e8c:	e1c0      	b.n	8006210 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b04      	cmp	r3, #4
 8005e98:	d003      	beq.n	8005ea2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2205      	movs	r2, #5
 8005e9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	887a      	ldrh	r2, [r7, #2]
 8005eb2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	887a      	ldrh	r2, [r7, #2]
 8005eba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	887a      	ldrh	r2, [r7, #2]
 8005ec8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	887a      	ldrh	r2, [r7, #2]
 8005ece:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ee4:	d802      	bhi.n	8005eec <HAL_SPI_TransmitReceive+0xe6>
 8005ee6:	8a3b      	ldrh	r3, [r7, #16]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d908      	bls.n	8005efe <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005efa:	605a      	str	r2, [r3, #4]
 8005efc:	e007      	b.n	8005f0e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f0c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f18:	2b40      	cmp	r3, #64	; 0x40
 8005f1a:	d007      	beq.n	8005f2c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f34:	d97c      	bls.n	8006030 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d002      	beq.n	8005f44 <HAL_SPI_TransmitReceive+0x13e>
 8005f3e:	8a7b      	ldrh	r3, [r7, #18]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d169      	bne.n	8006018 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f48:	881a      	ldrh	r2, [r3, #0]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f54:	1c9a      	adds	r2, r3, #2
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	3b01      	subs	r3, #1
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f68:	e056      	b.n	8006018 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f003 0302 	and.w	r3, r3, #2
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d11b      	bne.n	8005fb0 <HAL_SPI_TransmitReceive+0x1aa>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d016      	beq.n	8005fb0 <HAL_SPI_TransmitReceive+0x1aa>
 8005f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d113      	bne.n	8005fb0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8c:	881a      	ldrh	r2, [r3, #0]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f98:	1c9a      	adds	r2, r3, #2
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fac:	2300      	movs	r3, #0
 8005fae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d11c      	bne.n	8005ff8 <HAL_SPI_TransmitReceive+0x1f2>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d016      	beq.n	8005ff8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68da      	ldr	r2, [r3, #12]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd4:	b292      	uxth	r2, r2
 8005fd6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fdc:	1c9a      	adds	r2, r3, #2
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	3b01      	subs	r3, #1
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ff8:	f7fd fafa 	bl	80035f0 <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006004:	429a      	cmp	r2, r3
 8006006:	d807      	bhi.n	8006018 <HAL_SPI_TransmitReceive+0x212>
 8006008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600e:	d003      	beq.n	8006018 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006016:	e0fb      	b.n	8006210 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800601c:	b29b      	uxth	r3, r3
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1a3      	bne.n	8005f6a <HAL_SPI_TransmitReceive+0x164>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006028:	b29b      	uxth	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d19d      	bne.n	8005f6a <HAL_SPI_TransmitReceive+0x164>
 800602e:	e0df      	b.n	80061f0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d003      	beq.n	8006040 <HAL_SPI_TransmitReceive+0x23a>
 8006038:	8a7b      	ldrh	r3, [r7, #18]
 800603a:	2b01      	cmp	r3, #1
 800603c:	f040 80cb 	bne.w	80061d6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006044:	b29b      	uxth	r3, r3
 8006046:	2b01      	cmp	r3, #1
 8006048:	d912      	bls.n	8006070 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604e:	881a      	ldrh	r2, [r3, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605a:	1c9a      	adds	r2, r3, #2
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006064:	b29b      	uxth	r3, r3
 8006066:	3b02      	subs	r3, #2
 8006068:	b29a      	uxth	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800606e:	e0b2      	b.n	80061d6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	330c      	adds	r3, #12
 800607a:	7812      	ldrb	r2, [r2, #0]
 800607c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800608c:	b29b      	uxth	r3, r3
 800608e:	3b01      	subs	r3, #1
 8006090:	b29a      	uxth	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006096:	e09e      	b.n	80061d6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d134      	bne.n	8006110 <HAL_SPI_TransmitReceive+0x30a>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d02f      	beq.n	8006110 <HAL_SPI_TransmitReceive+0x30a>
 80060b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d12c      	bne.n	8006110 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d912      	bls.n	80060e6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c4:	881a      	ldrh	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d0:	1c9a      	adds	r2, r3, #2
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060da:	b29b      	uxth	r3, r3
 80060dc:	3b02      	subs	r3, #2
 80060de:	b29a      	uxth	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060e4:	e012      	b.n	800610c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	330c      	adds	r3, #12
 80060f0:	7812      	ldrb	r2, [r2, #0]
 80060f2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f8:	1c5a      	adds	r2, r3, #1
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006102:	b29b      	uxth	r3, r3
 8006104:	3b01      	subs	r3, #1
 8006106:	b29a      	uxth	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800610c:	2300      	movs	r3, #0
 800610e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	2b01      	cmp	r3, #1
 800611c:	d148      	bne.n	80061b0 <HAL_SPI_TransmitReceive+0x3aa>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006124:	b29b      	uxth	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d042      	beq.n	80061b0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006130:	b29b      	uxth	r3, r3
 8006132:	2b01      	cmp	r3, #1
 8006134:	d923      	bls.n	800617e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68da      	ldr	r2, [r3, #12]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006140:	b292      	uxth	r2, r2
 8006142:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006148:	1c9a      	adds	r2, r3, #2
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006154:	b29b      	uxth	r3, r3
 8006156:	3b02      	subs	r3, #2
 8006158:	b29a      	uxth	r2, r3
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006166:	b29b      	uxth	r3, r3
 8006168:	2b01      	cmp	r3, #1
 800616a:	d81f      	bhi.n	80061ac <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800617a:	605a      	str	r2, [r3, #4]
 800617c:	e016      	b.n	80061ac <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f103 020c 	add.w	r2, r3, #12
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618a:	7812      	ldrb	r2, [r2, #0]
 800618c:	b2d2      	uxtb	r2, r2
 800618e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006194:	1c5a      	adds	r2, r3, #1
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	3b01      	subs	r3, #1
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061ac:	2301      	movs	r3, #1
 80061ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80061b0:	f7fd fa1e 	bl	80035f0 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061bc:	429a      	cmp	r2, r3
 80061be:	d803      	bhi.n	80061c8 <HAL_SPI_TransmitReceive+0x3c2>
 80061c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c6:	d102      	bne.n	80061ce <HAL_SPI_TransmitReceive+0x3c8>
 80061c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d103      	bne.n	80061d6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80061d4:	e01c      	b.n	8006210 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061da:	b29b      	uxth	r3, r3
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f47f af5b 	bne.w	8006098 <HAL_SPI_TransmitReceive+0x292>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f47f af54 	bne.w	8006098 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061f0:	69fa      	ldr	r2, [r7, #28]
 80061f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 f9b3 	bl	8006560 <SPI_EndRxTxTransaction>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d006      	beq.n	800620e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2220      	movs	r2, #32
 800620a:	661a      	str	r2, [r3, #96]	; 0x60
 800620c:	e000      	b.n	8006210 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800620e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006220:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006224:	4618      	mov	r0, r3
 8006226:	3728      	adds	r7, #40	; 0x28
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b088      	sub	sp, #32
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	603b      	str	r3, [r7, #0]
 8006238:	4613      	mov	r3, r2
 800623a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800623c:	f7fd f9d8 	bl	80035f0 <HAL_GetTick>
 8006240:	4602      	mov	r2, r0
 8006242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006244:	1a9b      	subs	r3, r3, r2
 8006246:	683a      	ldr	r2, [r7, #0]
 8006248:	4413      	add	r3, r2
 800624a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800624c:	f7fd f9d0 	bl	80035f0 <HAL_GetTick>
 8006250:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006252:	4b39      	ldr	r3, [pc, #228]	; (8006338 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	015b      	lsls	r3, r3, #5
 8006258:	0d1b      	lsrs	r3, r3, #20
 800625a:	69fa      	ldr	r2, [r7, #28]
 800625c:	fb02 f303 	mul.w	r3, r2, r3
 8006260:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006262:	e054      	b.n	800630e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626a:	d050      	beq.n	800630e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800626c:	f7fd f9c0 	bl	80035f0 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	69fa      	ldr	r2, [r7, #28]
 8006278:	429a      	cmp	r2, r3
 800627a:	d902      	bls.n	8006282 <SPI_WaitFlagStateUntilTimeout+0x56>
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d13d      	bne.n	80062fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006290:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800629a:	d111      	bne.n	80062c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062a4:	d004      	beq.n	80062b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062ae:	d107      	bne.n	80062c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062c8:	d10f      	bne.n	80062ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062d8:	601a      	str	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e017      	b.n	800632e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d101      	bne.n	8006308 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006304:	2300      	movs	r3, #0
 8006306:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	3b01      	subs	r3, #1
 800630c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	689a      	ldr	r2, [r3, #8]
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	4013      	ands	r3, r2
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	429a      	cmp	r2, r3
 800631c:	bf0c      	ite	eq
 800631e:	2301      	moveq	r3, #1
 8006320:	2300      	movne	r3, #0
 8006322:	b2db      	uxtb	r3, r3
 8006324:	461a      	mov	r2, r3
 8006326:	79fb      	ldrb	r3, [r7, #7]
 8006328:	429a      	cmp	r2, r3
 800632a:	d19b      	bne.n	8006264 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3720      	adds	r7, #32
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	2000007c 	.word	0x2000007c

0800633c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b08a      	sub	sp, #40	; 0x28
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]
 8006348:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800634a:	2300      	movs	r3, #0
 800634c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800634e:	f7fd f94f 	bl	80035f0 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006356:	1a9b      	subs	r3, r3, r2
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	4413      	add	r3, r2
 800635c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800635e:	f7fd f947 	bl	80035f0 <HAL_GetTick>
 8006362:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	330c      	adds	r3, #12
 800636a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800636c:	4b3d      	ldr	r3, [pc, #244]	; (8006464 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	4613      	mov	r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4413      	add	r3, r2
 8006376:	00da      	lsls	r2, r3, #3
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	0d1b      	lsrs	r3, r3, #20
 800637c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800637e:	fb02 f303 	mul.w	r3, r2, r3
 8006382:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006384:	e060      	b.n	8006448 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800638c:	d107      	bne.n	800639e <SPI_WaitFifoStateUntilTimeout+0x62>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d104      	bne.n	800639e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	b2db      	uxtb	r3, r3
 800639a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800639c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a4:	d050      	beq.n	8006448 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063a6:	f7fd f923 	bl	80035f0 <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	6a3b      	ldr	r3, [r7, #32]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d902      	bls.n	80063bc <SPI_WaitFifoStateUntilTimeout+0x80>
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d13d      	bne.n	8006438 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685a      	ldr	r2, [r3, #4]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80063ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063d4:	d111      	bne.n	80063fa <SPI_WaitFifoStateUntilTimeout+0xbe>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063de:	d004      	beq.n	80063ea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063e8:	d107      	bne.n	80063fa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006402:	d10f      	bne.n	8006424 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006412:	601a      	str	r2, [r3, #0]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006422:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e010      	b.n	800645a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d101      	bne.n	8006442 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800643e:	2300      	movs	r3, #0
 8006440:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	3b01      	subs	r3, #1
 8006446:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689a      	ldr	r2, [r3, #8]
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	4013      	ands	r3, r2
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	429a      	cmp	r2, r3
 8006456:	d196      	bne.n	8006386 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3728      	adds	r7, #40	; 0x28
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	2000007c 	.word	0x2000007c

08006468 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b088      	sub	sp, #32
 800646c:	af02      	add	r7, sp, #8
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800647c:	d111      	bne.n	80064a2 <SPI_EndRxTransaction+0x3a>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006486:	d004      	beq.n	8006492 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006490:	d107      	bne.n	80064a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064a0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064aa:	d112      	bne.n	80064d2 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2200      	movs	r2, #0
 80064b4:	2180      	movs	r1, #128	; 0x80
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f7ff feb8 	bl	800622c <SPI_WaitFlagStateUntilTimeout>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d021      	beq.n	8006506 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064c6:	f043 0220 	orr.w	r2, r3, #32
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e03d      	b.n	800654e <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80064d2:	4b21      	ldr	r3, [pc, #132]	; (8006558 <SPI_EndRxTransaction+0xf0>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a21      	ldr	r2, [pc, #132]	; (800655c <SPI_EndRxTransaction+0xf4>)
 80064d8:	fba2 2303 	umull	r2, r3, r2, r3
 80064dc:	0d5b      	lsrs	r3, r3, #21
 80064de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80064e2:	fb02 f303 	mul.w	r3, r2, r3
 80064e6:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00a      	beq.n	8006504 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	3b01      	subs	r3, #1
 80064f2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064fe:	2b80      	cmp	r3, #128	; 0x80
 8006500:	d0f2      	beq.n	80064e8 <SPI_EndRxTransaction+0x80>
 8006502:	e000      	b.n	8006506 <SPI_EndRxTransaction+0x9e>
        break;
 8006504:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800650e:	d11d      	bne.n	800654c <SPI_EndRxTransaction+0xe4>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006518:	d004      	beq.n	8006524 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006522:	d113      	bne.n	800654c <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	2200      	movs	r2, #0
 800652c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f7ff ff03 	bl	800633c <SPI_WaitFifoStateUntilTimeout>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d007      	beq.n	800654c <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006540:	f043 0220 	orr.w	r2, r3, #32
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e000      	b.n	800654e <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3718      	adds	r7, #24
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	2000007c 	.word	0x2000007c
 800655c:	165e9f81 	.word	0x165e9f81

08006560 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b088      	sub	sp, #32
 8006564:	af02      	add	r7, sp, #8
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	2200      	movs	r2, #0
 8006574:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f7ff fedf 	bl	800633c <SPI_WaitFifoStateUntilTimeout>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d007      	beq.n	8006594 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006588:	f043 0220 	orr.w	r2, r3, #32
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e046      	b.n	8006622 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006594:	4b25      	ldr	r3, [pc, #148]	; (800662c <SPI_EndRxTxTransaction+0xcc>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a25      	ldr	r2, [pc, #148]	; (8006630 <SPI_EndRxTxTransaction+0xd0>)
 800659a:	fba2 2303 	umull	r2, r3, r2, r3
 800659e:	0d5b      	lsrs	r3, r3, #21
 80065a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80065a4:	fb02 f303 	mul.w	r3, r2, r3
 80065a8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065b2:	d112      	bne.n	80065da <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	9300      	str	r3, [sp, #0]
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	2200      	movs	r2, #0
 80065bc:	2180      	movs	r1, #128	; 0x80
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	f7ff fe34 	bl	800622c <SPI_WaitFlagStateUntilTimeout>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d016      	beq.n	80065f8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ce:	f043 0220 	orr.w	r2, r3, #32
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e023      	b.n	8006622 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00a      	beq.n	80065f6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	3b01      	subs	r3, #1
 80065e4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f0:	2b80      	cmp	r3, #128	; 0x80
 80065f2:	d0f2      	beq.n	80065da <SPI_EndRxTxTransaction+0x7a>
 80065f4:	e000      	b.n	80065f8 <SPI_EndRxTxTransaction+0x98>
        break;
 80065f6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	2200      	movs	r2, #0
 8006600:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f7ff fe99 	bl	800633c <SPI_WaitFifoStateUntilTimeout>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d007      	beq.n	8006620 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006614:	f043 0220 	orr.w	r2, r3, #32
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e000      	b.n	8006622 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3718      	adds	r7, #24
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	2000007c 	.word	0x2000007c
 8006630:	165e9f81 	.word	0x165e9f81

08006634 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e049      	b.n	80066da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d106      	bne.n	8006660 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f7fc fdde 	bl	800321c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2202      	movs	r2, #2
 8006664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	3304      	adds	r3, #4
 8006670:	4619      	mov	r1, r3
 8006672:	4610      	mov	r0, r2
 8006674:	f000 fd30 	bl	80070d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3708      	adds	r7, #8
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
	...

080066e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d001      	beq.n	80066fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e054      	b.n	80067a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2202      	movs	r2, #2
 8006700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68da      	ldr	r2, [r3, #12]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f042 0201 	orr.w	r2, r2, #1
 8006712:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a26      	ldr	r2, [pc, #152]	; (80067b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d022      	beq.n	8006764 <HAL_TIM_Base_Start_IT+0x80>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006726:	d01d      	beq.n	8006764 <HAL_TIM_Base_Start_IT+0x80>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a22      	ldr	r2, [pc, #136]	; (80067b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d018      	beq.n	8006764 <HAL_TIM_Base_Start_IT+0x80>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a21      	ldr	r2, [pc, #132]	; (80067bc <HAL_TIM_Base_Start_IT+0xd8>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d013      	beq.n	8006764 <HAL_TIM_Base_Start_IT+0x80>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a1f      	ldr	r2, [pc, #124]	; (80067c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d00e      	beq.n	8006764 <HAL_TIM_Base_Start_IT+0x80>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a1e      	ldr	r2, [pc, #120]	; (80067c4 <HAL_TIM_Base_Start_IT+0xe0>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d009      	beq.n	8006764 <HAL_TIM_Base_Start_IT+0x80>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a1c      	ldr	r2, [pc, #112]	; (80067c8 <HAL_TIM_Base_Start_IT+0xe4>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d004      	beq.n	8006764 <HAL_TIM_Base_Start_IT+0x80>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a1b      	ldr	r2, [pc, #108]	; (80067cc <HAL_TIM_Base_Start_IT+0xe8>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d115      	bne.n	8006790 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689a      	ldr	r2, [r3, #8]
 800676a:	4b19      	ldr	r3, [pc, #100]	; (80067d0 <HAL_TIM_Base_Start_IT+0xec>)
 800676c:	4013      	ands	r3, r2
 800676e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2b06      	cmp	r3, #6
 8006774:	d015      	beq.n	80067a2 <HAL_TIM_Base_Start_IT+0xbe>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800677c:	d011      	beq.n	80067a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f042 0201 	orr.w	r2, r2, #1
 800678c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800678e:	e008      	b.n	80067a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f042 0201 	orr.w	r2, r2, #1
 800679e:	601a      	str	r2, [r3, #0]
 80067a0:	e000      	b.n	80067a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3714      	adds	r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	40010000 	.word	0x40010000
 80067b8:	40000400 	.word	0x40000400
 80067bc:	40000800 	.word	0x40000800
 80067c0:	40000c00 	.word	0x40000c00
 80067c4:	40010400 	.word	0x40010400
 80067c8:	40014000 	.word	0x40014000
 80067cc:	40001800 	.word	0x40001800
 80067d0:	00010007 	.word	0x00010007

080067d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d101      	bne.n	80067e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e049      	b.n	800687a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d106      	bne.n	8006800 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f841 	bl	8006882 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2202      	movs	r2, #2
 8006804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	3304      	adds	r3, #4
 8006810:	4619      	mov	r1, r3
 8006812:	4610      	mov	r0, r2
 8006814:	f000 fc60 	bl	80070d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006882:	b480      	push	{r7}
 8006884:	b083      	sub	sp, #12
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800688a:	bf00      	nop
 800688c:	370c      	adds	r7, #12
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
	...

08006898 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d109      	bne.n	80068bc <HAL_TIM_PWM_Start+0x24>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	bf14      	ite	ne
 80068b4:	2301      	movne	r3, #1
 80068b6:	2300      	moveq	r3, #0
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	e03c      	b.n	8006936 <HAL_TIM_PWM_Start+0x9e>
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	2b04      	cmp	r3, #4
 80068c0:	d109      	bne.n	80068d6 <HAL_TIM_PWM_Start+0x3e>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	bf14      	ite	ne
 80068ce:	2301      	movne	r3, #1
 80068d0:	2300      	moveq	r3, #0
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	e02f      	b.n	8006936 <HAL_TIM_PWM_Start+0x9e>
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	2b08      	cmp	r3, #8
 80068da:	d109      	bne.n	80068f0 <HAL_TIM_PWM_Start+0x58>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	bf14      	ite	ne
 80068e8:	2301      	movne	r3, #1
 80068ea:	2300      	moveq	r3, #0
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	e022      	b.n	8006936 <HAL_TIM_PWM_Start+0x9e>
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	2b0c      	cmp	r3, #12
 80068f4:	d109      	bne.n	800690a <HAL_TIM_PWM_Start+0x72>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b01      	cmp	r3, #1
 8006900:	bf14      	ite	ne
 8006902:	2301      	movne	r3, #1
 8006904:	2300      	moveq	r3, #0
 8006906:	b2db      	uxtb	r3, r3
 8006908:	e015      	b.n	8006936 <HAL_TIM_PWM_Start+0x9e>
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	2b10      	cmp	r3, #16
 800690e:	d109      	bne.n	8006924 <HAL_TIM_PWM_Start+0x8c>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006916:	b2db      	uxtb	r3, r3
 8006918:	2b01      	cmp	r3, #1
 800691a:	bf14      	ite	ne
 800691c:	2301      	movne	r3, #1
 800691e:	2300      	moveq	r3, #0
 8006920:	b2db      	uxtb	r3, r3
 8006922:	e008      	b.n	8006936 <HAL_TIM_PWM_Start+0x9e>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800692a:	b2db      	uxtb	r3, r3
 800692c:	2b01      	cmp	r3, #1
 800692e:	bf14      	ite	ne
 8006930:	2301      	movne	r3, #1
 8006932:	2300      	moveq	r3, #0
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	d001      	beq.n	800693e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e092      	b.n	8006a64 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d104      	bne.n	800694e <HAL_TIM_PWM_Start+0xb6>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2202      	movs	r2, #2
 8006948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800694c:	e023      	b.n	8006996 <HAL_TIM_PWM_Start+0xfe>
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	2b04      	cmp	r3, #4
 8006952:	d104      	bne.n	800695e <HAL_TIM_PWM_Start+0xc6>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2202      	movs	r2, #2
 8006958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800695c:	e01b      	b.n	8006996 <HAL_TIM_PWM_Start+0xfe>
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	2b08      	cmp	r3, #8
 8006962:	d104      	bne.n	800696e <HAL_TIM_PWM_Start+0xd6>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2202      	movs	r2, #2
 8006968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800696c:	e013      	b.n	8006996 <HAL_TIM_PWM_Start+0xfe>
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	2b0c      	cmp	r3, #12
 8006972:	d104      	bne.n	800697e <HAL_TIM_PWM_Start+0xe6>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2202      	movs	r2, #2
 8006978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800697c:	e00b      	b.n	8006996 <HAL_TIM_PWM_Start+0xfe>
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	2b10      	cmp	r3, #16
 8006982:	d104      	bne.n	800698e <HAL_TIM_PWM_Start+0xf6>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2202      	movs	r2, #2
 8006988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800698c:	e003      	b.n	8006996 <HAL_TIM_PWM_Start+0xfe>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2202      	movs	r2, #2
 8006992:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2201      	movs	r2, #1
 800699c:	6839      	ldr	r1, [r7, #0]
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 ff32 	bl	8007808 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a30      	ldr	r2, [pc, #192]	; (8006a6c <HAL_TIM_PWM_Start+0x1d4>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d004      	beq.n	80069b8 <HAL_TIM_PWM_Start+0x120>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a2f      	ldr	r2, [pc, #188]	; (8006a70 <HAL_TIM_PWM_Start+0x1d8>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d101      	bne.n	80069bc <HAL_TIM_PWM_Start+0x124>
 80069b8:	2301      	movs	r3, #1
 80069ba:	e000      	b.n	80069be <HAL_TIM_PWM_Start+0x126>
 80069bc:	2300      	movs	r3, #0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d007      	beq.n	80069d2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a25      	ldr	r2, [pc, #148]	; (8006a6c <HAL_TIM_PWM_Start+0x1d4>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d022      	beq.n	8006a22 <HAL_TIM_PWM_Start+0x18a>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069e4:	d01d      	beq.n	8006a22 <HAL_TIM_PWM_Start+0x18a>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a22      	ldr	r2, [pc, #136]	; (8006a74 <HAL_TIM_PWM_Start+0x1dc>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d018      	beq.n	8006a22 <HAL_TIM_PWM_Start+0x18a>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a20      	ldr	r2, [pc, #128]	; (8006a78 <HAL_TIM_PWM_Start+0x1e0>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d013      	beq.n	8006a22 <HAL_TIM_PWM_Start+0x18a>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a1f      	ldr	r2, [pc, #124]	; (8006a7c <HAL_TIM_PWM_Start+0x1e4>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d00e      	beq.n	8006a22 <HAL_TIM_PWM_Start+0x18a>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a19      	ldr	r2, [pc, #100]	; (8006a70 <HAL_TIM_PWM_Start+0x1d8>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d009      	beq.n	8006a22 <HAL_TIM_PWM_Start+0x18a>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a1b      	ldr	r2, [pc, #108]	; (8006a80 <HAL_TIM_PWM_Start+0x1e8>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d004      	beq.n	8006a22 <HAL_TIM_PWM_Start+0x18a>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a19      	ldr	r2, [pc, #100]	; (8006a84 <HAL_TIM_PWM_Start+0x1ec>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d115      	bne.n	8006a4e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	689a      	ldr	r2, [r3, #8]
 8006a28:	4b17      	ldr	r3, [pc, #92]	; (8006a88 <HAL_TIM_PWM_Start+0x1f0>)
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2b06      	cmp	r3, #6
 8006a32:	d015      	beq.n	8006a60 <HAL_TIM_PWM_Start+0x1c8>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a3a:	d011      	beq.n	8006a60 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f042 0201 	orr.w	r2, r2, #1
 8006a4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a4c:	e008      	b.n	8006a60 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f042 0201 	orr.w	r2, r2, #1
 8006a5c:	601a      	str	r2, [r3, #0]
 8006a5e:	e000      	b.n	8006a62 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	40010000 	.word	0x40010000
 8006a70:	40010400 	.word	0x40010400
 8006a74:	40000400 	.word	0x40000400
 8006a78:	40000800 	.word	0x40000800
 8006a7c:	40000c00 	.word	0x40000c00
 8006a80:	40014000 	.word	0x40014000
 8006a84:	40001800 	.word	0x40001800
 8006a88:	00010007 	.word	0x00010007

08006a8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	f003 0302 	and.w	r3, r3, #2
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d122      	bne.n	8006ae8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	f003 0302 	and.w	r3, r3, #2
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d11b      	bne.n	8006ae8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f06f 0202 	mvn.w	r2, #2
 8006ab8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	699b      	ldr	r3, [r3, #24]
 8006ac6:	f003 0303 	and.w	r3, r3, #3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d003      	beq.n	8006ad6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fae4 	bl	800709c <HAL_TIM_IC_CaptureCallback>
 8006ad4:	e005      	b.n	8006ae2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 fad6 	bl	8007088 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 fae7 	bl	80070b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	f003 0304 	and.w	r3, r3, #4
 8006af2:	2b04      	cmp	r3, #4
 8006af4:	d122      	bne.n	8006b3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f003 0304 	and.w	r3, r3, #4
 8006b00:	2b04      	cmp	r3, #4
 8006b02:	d11b      	bne.n	8006b3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f06f 0204 	mvn.w	r2, #4
 8006b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2202      	movs	r2, #2
 8006b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d003      	beq.n	8006b2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 faba 	bl	800709c <HAL_TIM_IC_CaptureCallback>
 8006b28:	e005      	b.n	8006b36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 faac 	bl	8007088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 fabd 	bl	80070b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	f003 0308 	and.w	r3, r3, #8
 8006b46:	2b08      	cmp	r3, #8
 8006b48:	d122      	bne.n	8006b90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	f003 0308 	and.w	r3, r3, #8
 8006b54:	2b08      	cmp	r3, #8
 8006b56:	d11b      	bne.n	8006b90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f06f 0208 	mvn.w	r2, #8
 8006b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2204      	movs	r2, #4
 8006b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	69db      	ldr	r3, [r3, #28]
 8006b6e:	f003 0303 	and.w	r3, r3, #3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d003      	beq.n	8006b7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 fa90 	bl	800709c <HAL_TIM_IC_CaptureCallback>
 8006b7c:	e005      	b.n	8006b8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fa82 	bl	8007088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fa93 	bl	80070b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	f003 0310 	and.w	r3, r3, #16
 8006b9a:	2b10      	cmp	r3, #16
 8006b9c:	d122      	bne.n	8006be4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	f003 0310 	and.w	r3, r3, #16
 8006ba8:	2b10      	cmp	r3, #16
 8006baa:	d11b      	bne.n	8006be4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f06f 0210 	mvn.w	r2, #16
 8006bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2208      	movs	r2, #8
 8006bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	69db      	ldr	r3, [r3, #28]
 8006bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d003      	beq.n	8006bd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 fa66 	bl	800709c <HAL_TIM_IC_CaptureCallback>
 8006bd0:	e005      	b.n	8006bde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 fa58 	bl	8007088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 fa69 	bl	80070b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d10e      	bne.n	8006c10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	f003 0301 	and.w	r3, r3, #1
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d107      	bne.n	8006c10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f06f 0201 	mvn.w	r2, #1
 8006c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f7fb fd60 	bl	80026d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c1a:	2b80      	cmp	r3, #128	; 0x80
 8006c1c:	d10e      	bne.n	8006c3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c28:	2b80      	cmp	r3, #128	; 0x80
 8006c2a:	d107      	bne.n	8006c3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 fea4 	bl	8007984 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c4a:	d10e      	bne.n	8006c6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c56:	2b80      	cmp	r3, #128	; 0x80
 8006c58:	d107      	bne.n	8006c6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fe97 	bl	8007998 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c74:	2b40      	cmp	r3, #64	; 0x40
 8006c76:	d10e      	bne.n	8006c96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c82:	2b40      	cmp	r3, #64	; 0x40
 8006c84:	d107      	bne.n	8006c96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 fa17 	bl	80070c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	f003 0320 	and.w	r3, r3, #32
 8006ca0:	2b20      	cmp	r3, #32
 8006ca2:	d10e      	bne.n	8006cc2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	f003 0320 	and.w	r3, r3, #32
 8006cae:	2b20      	cmp	r3, #32
 8006cb0:	d107      	bne.n	8006cc2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f06f 0220 	mvn.w	r2, #32
 8006cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 fe57 	bl	8007970 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cc2:	bf00      	nop
 8006cc4:	3708      	adds	r7, #8
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
	...

08006ccc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d101      	bne.n	8006cea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	e0ff      	b.n	8006eea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b14      	cmp	r3, #20
 8006cf6:	f200 80f0 	bhi.w	8006eda <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006cfa:	a201      	add	r2, pc, #4	; (adr r2, 8006d00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d00:	08006d55 	.word	0x08006d55
 8006d04:	08006edb 	.word	0x08006edb
 8006d08:	08006edb 	.word	0x08006edb
 8006d0c:	08006edb 	.word	0x08006edb
 8006d10:	08006d95 	.word	0x08006d95
 8006d14:	08006edb 	.word	0x08006edb
 8006d18:	08006edb 	.word	0x08006edb
 8006d1c:	08006edb 	.word	0x08006edb
 8006d20:	08006dd7 	.word	0x08006dd7
 8006d24:	08006edb 	.word	0x08006edb
 8006d28:	08006edb 	.word	0x08006edb
 8006d2c:	08006edb 	.word	0x08006edb
 8006d30:	08006e17 	.word	0x08006e17
 8006d34:	08006edb 	.word	0x08006edb
 8006d38:	08006edb 	.word	0x08006edb
 8006d3c:	08006edb 	.word	0x08006edb
 8006d40:	08006e59 	.word	0x08006e59
 8006d44:	08006edb 	.word	0x08006edb
 8006d48:	08006edb 	.word	0x08006edb
 8006d4c:	08006edb 	.word	0x08006edb
 8006d50:	08006e99 	.word	0x08006e99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68b9      	ldr	r1, [r7, #8]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f000 fa5c 	bl	8007218 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	699a      	ldr	r2, [r3, #24]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f042 0208 	orr.w	r2, r2, #8
 8006d6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	699a      	ldr	r2, [r3, #24]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f022 0204 	bic.w	r2, r2, #4
 8006d7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6999      	ldr	r1, [r3, #24]
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	691a      	ldr	r2, [r3, #16]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	619a      	str	r2, [r3, #24]
      break;
 8006d92:	e0a5      	b.n	8006ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68b9      	ldr	r1, [r7, #8]
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f000 faae 	bl	80072fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	699a      	ldr	r2, [r3, #24]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	699a      	ldr	r2, [r3, #24]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6999      	ldr	r1, [r3, #24]
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	021a      	lsls	r2, r3, #8
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	430a      	orrs	r2, r1
 8006dd2:	619a      	str	r2, [r3, #24]
      break;
 8006dd4:	e084      	b.n	8006ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68b9      	ldr	r1, [r7, #8]
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f000 fb05 	bl	80073ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	69da      	ldr	r2, [r3, #28]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f042 0208 	orr.w	r2, r2, #8
 8006df0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	69da      	ldr	r2, [r3, #28]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f022 0204 	bic.w	r2, r2, #4
 8006e00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	69d9      	ldr	r1, [r3, #28]
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	691a      	ldr	r2, [r3, #16]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	430a      	orrs	r2, r1
 8006e12:	61da      	str	r2, [r3, #28]
      break;
 8006e14:	e064      	b.n	8006ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68b9      	ldr	r1, [r7, #8]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f000 fb5b 	bl	80074d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	69da      	ldr	r2, [r3, #28]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	69da      	ldr	r2, [r3, #28]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	69d9      	ldr	r1, [r3, #28]
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	021a      	lsls	r2, r3, #8
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	430a      	orrs	r2, r1
 8006e54:	61da      	str	r2, [r3, #28]
      break;
 8006e56:	e043      	b.n	8006ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68b9      	ldr	r1, [r7, #8]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 fb92 	bl	8007588 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f042 0208 	orr.w	r2, r2, #8
 8006e72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f022 0204 	bic.w	r2, r2, #4
 8006e82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	691a      	ldr	r2, [r3, #16]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	430a      	orrs	r2, r1
 8006e94:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006e96:	e023      	b.n	8006ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68b9      	ldr	r1, [r7, #8]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f000 fbc4 	bl	800762c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006eb2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ec2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	021a      	lsls	r2, r3, #8
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	430a      	orrs	r2, r1
 8006ed6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006ed8:	e002      	b.n	8006ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	75fb      	strb	r3, [r7, #23]
      break;
 8006ede:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3718      	adds	r7, #24
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop

08006ef4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006efe:	2300      	movs	r3, #0
 8006f00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d101      	bne.n	8006f10 <HAL_TIM_ConfigClockSource+0x1c>
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	e0b4      	b.n	800707a <HAL_TIM_ConfigClockSource+0x186>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	4b56      	ldr	r3, [pc, #344]	; (8007084 <HAL_TIM_ConfigClockSource+0x190>)
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f48:	d03e      	beq.n	8006fc8 <HAL_TIM_ConfigClockSource+0xd4>
 8006f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f4e:	f200 8087 	bhi.w	8007060 <HAL_TIM_ConfigClockSource+0x16c>
 8006f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f56:	f000 8086 	beq.w	8007066 <HAL_TIM_ConfigClockSource+0x172>
 8006f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f5e:	d87f      	bhi.n	8007060 <HAL_TIM_ConfigClockSource+0x16c>
 8006f60:	2b70      	cmp	r3, #112	; 0x70
 8006f62:	d01a      	beq.n	8006f9a <HAL_TIM_ConfigClockSource+0xa6>
 8006f64:	2b70      	cmp	r3, #112	; 0x70
 8006f66:	d87b      	bhi.n	8007060 <HAL_TIM_ConfigClockSource+0x16c>
 8006f68:	2b60      	cmp	r3, #96	; 0x60
 8006f6a:	d050      	beq.n	800700e <HAL_TIM_ConfigClockSource+0x11a>
 8006f6c:	2b60      	cmp	r3, #96	; 0x60
 8006f6e:	d877      	bhi.n	8007060 <HAL_TIM_ConfigClockSource+0x16c>
 8006f70:	2b50      	cmp	r3, #80	; 0x50
 8006f72:	d03c      	beq.n	8006fee <HAL_TIM_ConfigClockSource+0xfa>
 8006f74:	2b50      	cmp	r3, #80	; 0x50
 8006f76:	d873      	bhi.n	8007060 <HAL_TIM_ConfigClockSource+0x16c>
 8006f78:	2b40      	cmp	r3, #64	; 0x40
 8006f7a:	d058      	beq.n	800702e <HAL_TIM_ConfigClockSource+0x13a>
 8006f7c:	2b40      	cmp	r3, #64	; 0x40
 8006f7e:	d86f      	bhi.n	8007060 <HAL_TIM_ConfigClockSource+0x16c>
 8006f80:	2b30      	cmp	r3, #48	; 0x30
 8006f82:	d064      	beq.n	800704e <HAL_TIM_ConfigClockSource+0x15a>
 8006f84:	2b30      	cmp	r3, #48	; 0x30
 8006f86:	d86b      	bhi.n	8007060 <HAL_TIM_ConfigClockSource+0x16c>
 8006f88:	2b20      	cmp	r3, #32
 8006f8a:	d060      	beq.n	800704e <HAL_TIM_ConfigClockSource+0x15a>
 8006f8c:	2b20      	cmp	r3, #32
 8006f8e:	d867      	bhi.n	8007060 <HAL_TIM_ConfigClockSource+0x16c>
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d05c      	beq.n	800704e <HAL_TIM_ConfigClockSource+0x15a>
 8006f94:	2b10      	cmp	r3, #16
 8006f96:	d05a      	beq.n	800704e <HAL_TIM_ConfigClockSource+0x15a>
 8006f98:	e062      	b.n	8007060 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006faa:	f000 fc0d 	bl	80077c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006fbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	609a      	str	r2, [r3, #8]
      break;
 8006fc6:	e04f      	b.n	8007068 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006fd8:	f000 fbf6 	bl	80077c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	689a      	ldr	r2, [r3, #8]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fea:	609a      	str	r2, [r3, #8]
      break;
 8006fec:	e03c      	b.n	8007068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	f000 fb6a 	bl	80076d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2150      	movs	r1, #80	; 0x50
 8007006:	4618      	mov	r0, r3
 8007008:	f000 fbc3 	bl	8007792 <TIM_ITRx_SetConfig>
      break;
 800700c:	e02c      	b.n	8007068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800701a:	461a      	mov	r2, r3
 800701c:	f000 fb89 	bl	8007732 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2160      	movs	r1, #96	; 0x60
 8007026:	4618      	mov	r0, r3
 8007028:	f000 fbb3 	bl	8007792 <TIM_ITRx_SetConfig>
      break;
 800702c:	e01c      	b.n	8007068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800703a:	461a      	mov	r2, r3
 800703c:	f000 fb4a 	bl	80076d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2140      	movs	r1, #64	; 0x40
 8007046:	4618      	mov	r0, r3
 8007048:	f000 fba3 	bl	8007792 <TIM_ITRx_SetConfig>
      break;
 800704c:	e00c      	b.n	8007068 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4619      	mov	r1, r3
 8007058:	4610      	mov	r0, r2
 800705a:	f000 fb9a 	bl	8007792 <TIM_ITRx_SetConfig>
      break;
 800705e:	e003      	b.n	8007068 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	73fb      	strb	r3, [r7, #15]
      break;
 8007064:	e000      	b.n	8007068 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007066:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007078:	7bfb      	ldrb	r3, [r7, #15]
}
 800707a:	4618      	mov	r0, r3
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	fffeff88 	.word	0xfffeff88

08007088 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070b8:	bf00      	nop
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070cc:	bf00      	nop
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a40      	ldr	r2, [pc, #256]	; (80071ec <TIM_Base_SetConfig+0x114>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d013      	beq.n	8007118 <TIM_Base_SetConfig+0x40>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070f6:	d00f      	beq.n	8007118 <TIM_Base_SetConfig+0x40>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4a3d      	ldr	r2, [pc, #244]	; (80071f0 <TIM_Base_SetConfig+0x118>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d00b      	beq.n	8007118 <TIM_Base_SetConfig+0x40>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a3c      	ldr	r2, [pc, #240]	; (80071f4 <TIM_Base_SetConfig+0x11c>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d007      	beq.n	8007118 <TIM_Base_SetConfig+0x40>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a3b      	ldr	r2, [pc, #236]	; (80071f8 <TIM_Base_SetConfig+0x120>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d003      	beq.n	8007118 <TIM_Base_SetConfig+0x40>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a3a      	ldr	r2, [pc, #232]	; (80071fc <TIM_Base_SetConfig+0x124>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d108      	bne.n	800712a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800711e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	4313      	orrs	r3, r2
 8007128:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a2f      	ldr	r2, [pc, #188]	; (80071ec <TIM_Base_SetConfig+0x114>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d02b      	beq.n	800718a <TIM_Base_SetConfig+0xb2>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007138:	d027      	beq.n	800718a <TIM_Base_SetConfig+0xb2>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a2c      	ldr	r2, [pc, #176]	; (80071f0 <TIM_Base_SetConfig+0x118>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d023      	beq.n	800718a <TIM_Base_SetConfig+0xb2>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a2b      	ldr	r2, [pc, #172]	; (80071f4 <TIM_Base_SetConfig+0x11c>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d01f      	beq.n	800718a <TIM_Base_SetConfig+0xb2>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a2a      	ldr	r2, [pc, #168]	; (80071f8 <TIM_Base_SetConfig+0x120>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d01b      	beq.n	800718a <TIM_Base_SetConfig+0xb2>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a29      	ldr	r2, [pc, #164]	; (80071fc <TIM_Base_SetConfig+0x124>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d017      	beq.n	800718a <TIM_Base_SetConfig+0xb2>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a28      	ldr	r2, [pc, #160]	; (8007200 <TIM_Base_SetConfig+0x128>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d013      	beq.n	800718a <TIM_Base_SetConfig+0xb2>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a27      	ldr	r2, [pc, #156]	; (8007204 <TIM_Base_SetConfig+0x12c>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d00f      	beq.n	800718a <TIM_Base_SetConfig+0xb2>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a26      	ldr	r2, [pc, #152]	; (8007208 <TIM_Base_SetConfig+0x130>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d00b      	beq.n	800718a <TIM_Base_SetConfig+0xb2>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a25      	ldr	r2, [pc, #148]	; (800720c <TIM_Base_SetConfig+0x134>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d007      	beq.n	800718a <TIM_Base_SetConfig+0xb2>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a24      	ldr	r2, [pc, #144]	; (8007210 <TIM_Base_SetConfig+0x138>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d003      	beq.n	800718a <TIM_Base_SetConfig+0xb2>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a23      	ldr	r2, [pc, #140]	; (8007214 <TIM_Base_SetConfig+0x13c>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d108      	bne.n	800719c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007190:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	4313      	orrs	r3, r2
 800719a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	689a      	ldr	r2, [r3, #8]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a0a      	ldr	r2, [pc, #40]	; (80071ec <TIM_Base_SetConfig+0x114>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d003      	beq.n	80071d0 <TIM_Base_SetConfig+0xf8>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a0c      	ldr	r2, [pc, #48]	; (80071fc <TIM_Base_SetConfig+0x124>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d103      	bne.n	80071d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	691a      	ldr	r2, [r3, #16]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	615a      	str	r2, [r3, #20]
}
 80071de:	bf00      	nop
 80071e0:	3714      	adds	r7, #20
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	40010000 	.word	0x40010000
 80071f0:	40000400 	.word	0x40000400
 80071f4:	40000800 	.word	0x40000800
 80071f8:	40000c00 	.word	0x40000c00
 80071fc:	40010400 	.word	0x40010400
 8007200:	40014000 	.word	0x40014000
 8007204:	40014400 	.word	0x40014400
 8007208:	40014800 	.word	0x40014800
 800720c:	40001800 	.word	0x40001800
 8007210:	40001c00 	.word	0x40001c00
 8007214:	40002000 	.word	0x40002000

08007218 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007218:	b480      	push	{r7}
 800721a:	b087      	sub	sp, #28
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	f023 0201 	bic.w	r2, r3, #1
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	4b2b      	ldr	r3, [pc, #172]	; (80072f0 <TIM_OC1_SetConfig+0xd8>)
 8007244:	4013      	ands	r3, r2
 8007246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f023 0303 	bic.w	r3, r3, #3
 800724e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	4313      	orrs	r3, r2
 8007258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	f023 0302 	bic.w	r3, r3, #2
 8007260:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	4313      	orrs	r3, r2
 800726a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a21      	ldr	r2, [pc, #132]	; (80072f4 <TIM_OC1_SetConfig+0xdc>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d003      	beq.n	800727c <TIM_OC1_SetConfig+0x64>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a20      	ldr	r2, [pc, #128]	; (80072f8 <TIM_OC1_SetConfig+0xe0>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d10c      	bne.n	8007296 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	f023 0308 	bic.w	r3, r3, #8
 8007282:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	4313      	orrs	r3, r2
 800728c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	f023 0304 	bic.w	r3, r3, #4
 8007294:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a16      	ldr	r2, [pc, #88]	; (80072f4 <TIM_OC1_SetConfig+0xdc>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d003      	beq.n	80072a6 <TIM_OC1_SetConfig+0x8e>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a15      	ldr	r2, [pc, #84]	; (80072f8 <TIM_OC1_SetConfig+0xe0>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d111      	bne.n	80072ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	695b      	ldr	r3, [r3, #20]
 80072ba:	693a      	ldr	r2, [r7, #16]
 80072bc:	4313      	orrs	r3, r2
 80072be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	693a      	ldr	r2, [r7, #16]
 80072ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	68fa      	ldr	r2, [r7, #12]
 80072d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	685a      	ldr	r2, [r3, #4]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	621a      	str	r2, [r3, #32]
}
 80072e4:	bf00      	nop
 80072e6:	371c      	adds	r7, #28
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr
 80072f0:	fffeff8f 	.word	0xfffeff8f
 80072f4:	40010000 	.word	0x40010000
 80072f8:	40010400 	.word	0x40010400

080072fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b087      	sub	sp, #28
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	f023 0210 	bic.w	r2, r3, #16
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a1b      	ldr	r3, [r3, #32]
 8007316:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	4b2e      	ldr	r3, [pc, #184]	; (80073e0 <TIM_OC2_SetConfig+0xe4>)
 8007328:	4013      	ands	r3, r2
 800732a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	021b      	lsls	r3, r3, #8
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	4313      	orrs	r3, r2
 800733e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	f023 0320 	bic.w	r3, r3, #32
 8007346:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	011b      	lsls	r3, r3, #4
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	4313      	orrs	r3, r2
 8007352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a23      	ldr	r2, [pc, #140]	; (80073e4 <TIM_OC2_SetConfig+0xe8>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d003      	beq.n	8007364 <TIM_OC2_SetConfig+0x68>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a22      	ldr	r2, [pc, #136]	; (80073e8 <TIM_OC2_SetConfig+0xec>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d10d      	bne.n	8007380 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800736a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	011b      	lsls	r3, r3, #4
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	4313      	orrs	r3, r2
 8007376:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800737e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a18      	ldr	r2, [pc, #96]	; (80073e4 <TIM_OC2_SetConfig+0xe8>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d003      	beq.n	8007390 <TIM_OC2_SetConfig+0x94>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a17      	ldr	r2, [pc, #92]	; (80073e8 <TIM_OC2_SetConfig+0xec>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d113      	bne.n	80073b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007396:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800739e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	695b      	ldr	r3, [r3, #20]
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	693a      	ldr	r2, [r7, #16]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	693a      	ldr	r2, [r7, #16]
 80073bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	685a      	ldr	r2, [r3, #4]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	621a      	str	r2, [r3, #32]
}
 80073d2:	bf00      	nop
 80073d4:	371c      	adds	r7, #28
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	feff8fff 	.word	0xfeff8fff
 80073e4:	40010000 	.word	0x40010000
 80073e8:	40010400 	.word	0x40010400

080073ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b087      	sub	sp, #28
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a1b      	ldr	r3, [r3, #32]
 8007406:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	4b2d      	ldr	r3, [pc, #180]	; (80074cc <TIM_OC3_SetConfig+0xe0>)
 8007418:	4013      	ands	r3, r2
 800741a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f023 0303 	bic.w	r3, r3, #3
 8007422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	4313      	orrs	r3, r2
 800742c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007434:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	021b      	lsls	r3, r3, #8
 800743c:	697a      	ldr	r2, [r7, #20]
 800743e:	4313      	orrs	r3, r2
 8007440:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a22      	ldr	r2, [pc, #136]	; (80074d0 <TIM_OC3_SetConfig+0xe4>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d003      	beq.n	8007452 <TIM_OC3_SetConfig+0x66>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a21      	ldr	r2, [pc, #132]	; (80074d4 <TIM_OC3_SetConfig+0xe8>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d10d      	bne.n	800746e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007458:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	021b      	lsls	r3, r3, #8
 8007460:	697a      	ldr	r2, [r7, #20]
 8007462:	4313      	orrs	r3, r2
 8007464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800746c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a17      	ldr	r2, [pc, #92]	; (80074d0 <TIM_OC3_SetConfig+0xe4>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d003      	beq.n	800747e <TIM_OC3_SetConfig+0x92>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a16      	ldr	r2, [pc, #88]	; (80074d4 <TIM_OC3_SetConfig+0xe8>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d113      	bne.n	80074a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007484:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800748c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	011b      	lsls	r3, r3, #4
 8007494:	693a      	ldr	r2, [r7, #16]
 8007496:	4313      	orrs	r3, r2
 8007498:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	011b      	lsls	r3, r3, #4
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	693a      	ldr	r2, [r7, #16]
 80074aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	621a      	str	r2, [r3, #32]
}
 80074c0:	bf00      	nop
 80074c2:	371c      	adds	r7, #28
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr
 80074cc:	fffeff8f 	.word	0xfffeff8f
 80074d0:	40010000 	.word	0x40010000
 80074d4:	40010400 	.word	0x40010400

080074d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074d8:	b480      	push	{r7}
 80074da:	b087      	sub	sp, #28
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a1b      	ldr	r3, [r3, #32]
 80074e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a1b      	ldr	r3, [r3, #32]
 80074f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	69db      	ldr	r3, [r3, #28]
 80074fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	4b1e      	ldr	r3, [pc, #120]	; (800757c <TIM_OC4_SetConfig+0xa4>)
 8007504:	4013      	ands	r3, r2
 8007506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800750e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	021b      	lsls	r3, r3, #8
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	4313      	orrs	r3, r2
 800751a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007522:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	031b      	lsls	r3, r3, #12
 800752a:	693a      	ldr	r2, [r7, #16]
 800752c:	4313      	orrs	r3, r2
 800752e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a13      	ldr	r2, [pc, #76]	; (8007580 <TIM_OC4_SetConfig+0xa8>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d003      	beq.n	8007540 <TIM_OC4_SetConfig+0x68>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a12      	ldr	r2, [pc, #72]	; (8007584 <TIM_OC4_SetConfig+0xac>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d109      	bne.n	8007554 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007546:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	695b      	ldr	r3, [r3, #20]
 800754c:	019b      	lsls	r3, r3, #6
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	4313      	orrs	r3, r2
 8007552:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	697a      	ldr	r2, [r7, #20]
 8007558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	685a      	ldr	r2, [r3, #4]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	693a      	ldr	r2, [r7, #16]
 800756c:	621a      	str	r2, [r3, #32]
}
 800756e:	bf00      	nop
 8007570:	371c      	adds	r7, #28
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	feff8fff 	.word	0xfeff8fff
 8007580:	40010000 	.word	0x40010000
 8007584:	40010400 	.word	0x40010400

08007588 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007588:	b480      	push	{r7}
 800758a:	b087      	sub	sp, #28
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a1b      	ldr	r3, [r3, #32]
 8007596:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	4b1b      	ldr	r3, [pc, #108]	; (8007620 <TIM_OC5_SetConfig+0x98>)
 80075b4:	4013      	ands	r3, r2
 80075b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	4313      	orrs	r3, r2
 80075c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80075c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	041b      	lsls	r3, r3, #16
 80075d0:	693a      	ldr	r2, [r7, #16]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a12      	ldr	r2, [pc, #72]	; (8007624 <TIM_OC5_SetConfig+0x9c>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d003      	beq.n	80075e6 <TIM_OC5_SetConfig+0x5e>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a11      	ldr	r2, [pc, #68]	; (8007628 <TIM_OC5_SetConfig+0xa0>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d109      	bne.n	80075fa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	695b      	ldr	r3, [r3, #20]
 80075f2:	021b      	lsls	r3, r3, #8
 80075f4:	697a      	ldr	r2, [r7, #20]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	697a      	ldr	r2, [r7, #20]
 80075fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	685a      	ldr	r2, [r3, #4]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	621a      	str	r2, [r3, #32]
}
 8007614:	bf00      	nop
 8007616:	371c      	adds	r7, #28
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr
 8007620:	fffeff8f 	.word	0xfffeff8f
 8007624:	40010000 	.word	0x40010000
 8007628:	40010400 	.word	0x40010400

0800762c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800762c:	b480      	push	{r7}
 800762e:	b087      	sub	sp, #28
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	4b1c      	ldr	r3, [pc, #112]	; (80076c8 <TIM_OC6_SetConfig+0x9c>)
 8007658:	4013      	ands	r3, r2
 800765a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	021b      	lsls	r3, r3, #8
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	4313      	orrs	r3, r2
 8007666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800766e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	051b      	lsls	r3, r3, #20
 8007676:	693a      	ldr	r2, [r7, #16]
 8007678:	4313      	orrs	r3, r2
 800767a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a13      	ldr	r2, [pc, #76]	; (80076cc <TIM_OC6_SetConfig+0xa0>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d003      	beq.n	800768c <TIM_OC6_SetConfig+0x60>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a12      	ldr	r2, [pc, #72]	; (80076d0 <TIM_OC6_SetConfig+0xa4>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d109      	bne.n	80076a0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007692:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	695b      	ldr	r3, [r3, #20]
 8007698:	029b      	lsls	r3, r3, #10
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	4313      	orrs	r3, r2
 800769e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	621a      	str	r2, [r3, #32]
}
 80076ba:	bf00      	nop
 80076bc:	371c      	adds	r7, #28
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	feff8fff 	.word	0xfeff8fff
 80076cc:	40010000 	.word	0x40010000
 80076d0:	40010400 	.word	0x40010400

080076d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b087      	sub	sp, #28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6a1b      	ldr	r3, [r3, #32]
 80076e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6a1b      	ldr	r3, [r3, #32]
 80076ea:	f023 0201 	bic.w	r2, r3, #1
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	699b      	ldr	r3, [r3, #24]
 80076f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	011b      	lsls	r3, r3, #4
 8007704:	693a      	ldr	r2, [r7, #16]
 8007706:	4313      	orrs	r3, r2
 8007708:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	f023 030a 	bic.w	r3, r3, #10
 8007710:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	4313      	orrs	r3, r2
 8007718:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	693a      	ldr	r2, [r7, #16]
 800771e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	697a      	ldr	r2, [r7, #20]
 8007724:	621a      	str	r2, [r3, #32]
}
 8007726:	bf00      	nop
 8007728:	371c      	adds	r7, #28
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007732:	b480      	push	{r7}
 8007734:	b087      	sub	sp, #28
 8007736:	af00      	add	r7, sp, #0
 8007738:	60f8      	str	r0, [r7, #12]
 800773a:	60b9      	str	r1, [r7, #8]
 800773c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6a1b      	ldr	r3, [r3, #32]
 8007742:	f023 0210 	bic.w	r2, r3, #16
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6a1b      	ldr	r3, [r3, #32]
 8007754:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800775c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	031b      	lsls	r3, r3, #12
 8007762:	697a      	ldr	r2, [r7, #20]
 8007764:	4313      	orrs	r3, r2
 8007766:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800776e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	011b      	lsls	r3, r3, #4
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	4313      	orrs	r3, r2
 8007778:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	697a      	ldr	r2, [r7, #20]
 800777e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	693a      	ldr	r2, [r7, #16]
 8007784:	621a      	str	r2, [r3, #32]
}
 8007786:	bf00      	nop
 8007788:	371c      	adds	r7, #28
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr

08007792 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007792:	b480      	push	{r7}
 8007794:	b085      	sub	sp, #20
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077aa:	683a      	ldr	r2, [r7, #0]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	f043 0307 	orr.w	r3, r3, #7
 80077b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	609a      	str	r2, [r3, #8]
}
 80077bc:	bf00      	nop
 80077be:	3714      	adds	r7, #20
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b087      	sub	sp, #28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	607a      	str	r2, [r7, #4]
 80077d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	021a      	lsls	r2, r3, #8
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	431a      	orrs	r2, r3
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	697a      	ldr	r2, [r7, #20]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	697a      	ldr	r2, [r7, #20]
 80077fa:	609a      	str	r2, [r3, #8]
}
 80077fc:	bf00      	nop
 80077fe:	371c      	adds	r7, #28
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007808:	b480      	push	{r7}
 800780a:	b087      	sub	sp, #28
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	f003 031f 	and.w	r3, r3, #31
 800781a:	2201      	movs	r2, #1
 800781c:	fa02 f303 	lsl.w	r3, r2, r3
 8007820:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6a1a      	ldr	r2, [r3, #32]
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	43db      	mvns	r3, r3
 800782a:	401a      	ands	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6a1a      	ldr	r2, [r3, #32]
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	f003 031f 	and.w	r3, r3, #31
 800783a:	6879      	ldr	r1, [r7, #4]
 800783c:	fa01 f303 	lsl.w	r3, r1, r3
 8007840:	431a      	orrs	r2, r3
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	621a      	str	r2, [r3, #32]
}
 8007846:	bf00      	nop
 8007848:	371c      	adds	r7, #28
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
	...

08007854 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007854:	b480      	push	{r7}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007864:	2b01      	cmp	r3, #1
 8007866:	d101      	bne.n	800786c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007868:	2302      	movs	r3, #2
 800786a:	e06d      	b.n	8007948 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2202      	movs	r2, #2
 8007878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a30      	ldr	r2, [pc, #192]	; (8007954 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d004      	beq.n	80078a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a2f      	ldr	r2, [pc, #188]	; (8007958 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d108      	bne.n	80078b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80078a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a20      	ldr	r2, [pc, #128]	; (8007954 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d022      	beq.n	800791c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078de:	d01d      	beq.n	800791c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a1d      	ldr	r2, [pc, #116]	; (800795c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d018      	beq.n	800791c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a1c      	ldr	r2, [pc, #112]	; (8007960 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d013      	beq.n	800791c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a1a      	ldr	r2, [pc, #104]	; (8007964 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d00e      	beq.n	800791c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a15      	ldr	r2, [pc, #84]	; (8007958 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d009      	beq.n	800791c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a16      	ldr	r2, [pc, #88]	; (8007968 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d004      	beq.n	800791c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a15      	ldr	r2, [pc, #84]	; (800796c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d10c      	bne.n	8007936 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007922:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	68ba      	ldr	r2, [r7, #8]
 800792a:	4313      	orrs	r3, r2
 800792c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2201      	movs	r2, #1
 800793a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007946:	2300      	movs	r3, #0
}
 8007948:	4618      	mov	r0, r3
 800794a:	3714      	adds	r7, #20
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr
 8007954:	40010000 	.word	0x40010000
 8007958:	40010400 	.word	0x40010400
 800795c:	40000400 	.word	0x40000400
 8007960:	40000800 	.word	0x40000800
 8007964:	40000c00 	.word	0x40000c00
 8007968:	40014000 	.word	0x40014000
 800796c:	40001800 	.word	0x40001800

08007970 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007978:	bf00      	nop
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80079a0:	bf00      	nop
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d101      	bne.n	80079be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e040      	b.n	8007a40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d106      	bne.n	80079d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f7fb fd2c 	bl	800342c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2224      	movs	r2, #36	; 0x24
 80079d8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f022 0201 	bic.w	r2, r2, #1
 80079e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 fbe6 	bl	80081bc <UART_SetConfig>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d101      	bne.n	80079fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e022      	b.n	8007a40 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d002      	beq.n	8007a08 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fe3e 	bl	8008684 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	685a      	ldr	r2, [r3, #4]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	689a      	ldr	r2, [r3, #8]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f042 0201 	orr.w	r2, r2, #1
 8007a36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 fec5 	bl	80087c8 <UART_CheckIdleState>
 8007a3e:	4603      	mov	r3, r0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3708      	adds	r7, #8
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b08a      	sub	sp, #40	; 0x28
 8007a4c:	af02      	add	r7, sp, #8
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	603b      	str	r3, [r7, #0]
 8007a54:	4613      	mov	r3, r2
 8007a56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a5c:	2b20      	cmp	r3, #32
 8007a5e:	d171      	bne.n	8007b44 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d002      	beq.n	8007a6c <HAL_UART_Transmit+0x24>
 8007a66:	88fb      	ldrh	r3, [r7, #6]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d101      	bne.n	8007a70 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e06a      	b.n	8007b46 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2221      	movs	r2, #33	; 0x21
 8007a7c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a7e:	f7fb fdb7 	bl	80035f0 <HAL_GetTick>
 8007a82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	88fa      	ldrh	r2, [r7, #6]
 8007a88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	88fa      	ldrh	r2, [r7, #6]
 8007a90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a9c:	d108      	bne.n	8007ab0 <HAL_UART_Transmit+0x68>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d104      	bne.n	8007ab0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	61bb      	str	r3, [r7, #24]
 8007aae:	e003      	b.n	8007ab8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007ab8:	e02c      	b.n	8007b14 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	9300      	str	r3, [sp, #0]
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	2180      	movs	r1, #128	; 0x80
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f000 feb6 	bl	8008836 <UART_WaitOnFlagUntilTimeout>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d001      	beq.n	8007ad4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	e038      	b.n	8007b46 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10b      	bne.n	8007af2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	881b      	ldrh	r3, [r3, #0]
 8007ade:	461a      	mov	r2, r3
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ae8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	3302      	adds	r3, #2
 8007aee:	61bb      	str	r3, [r7, #24]
 8007af0:	e007      	b.n	8007b02 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	781a      	ldrb	r2, [r3, #0]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	3301      	adds	r3, #1
 8007b00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1cc      	bne.n	8007aba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	9300      	str	r3, [sp, #0]
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	2200      	movs	r2, #0
 8007b28:	2140      	movs	r1, #64	; 0x40
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f000 fe83 	bl	8008836 <UART_WaitOnFlagUntilTimeout>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d001      	beq.n	8007b3a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8007b36:	2303      	movs	r3, #3
 8007b38:	e005      	b.n	8007b46 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2220      	movs	r2, #32
 8007b3e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007b40:	2300      	movs	r3, #0
 8007b42:	e000      	b.n	8007b46 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007b44:	2302      	movs	r3, #2
  }
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3720      	adds	r7, #32
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b08a      	sub	sp, #40	; 0x28
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	60f8      	str	r0, [r7, #12]
 8007b56:	60b9      	str	r1, [r7, #8]
 8007b58:	4613      	mov	r3, r2
 8007b5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b62:	2b20      	cmp	r3, #32
 8007b64:	d132      	bne.n	8007bcc <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d002      	beq.n	8007b72 <HAL_UART_Receive_IT+0x24>
 8007b6c:	88fb      	ldrh	r3, [r7, #6]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d101      	bne.n	8007b76 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e02b      	b.n	8007bce <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d018      	beq.n	8007bbc <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	e853 3f00 	ldrex	r3, [r3]
 8007b96:	613b      	str	r3, [r7, #16]
   return(result);
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba8:	623b      	str	r3, [r7, #32]
 8007baa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bac:	69f9      	ldr	r1, [r7, #28]
 8007bae:	6a3a      	ldr	r2, [r7, #32]
 8007bb0:	e841 2300 	strex	r3, r2, [r1]
 8007bb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1e6      	bne.n	8007b8a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007bbc:	88fb      	ldrh	r3, [r7, #6]
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	68b9      	ldr	r1, [r7, #8]
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f000 fefe 	bl	80089c4 <UART_Start_Receive_IT>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	e000      	b.n	8007bce <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007bcc:	2302      	movs	r3, #2
  }
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3728      	adds	r7, #40	; 0x28
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
	...

08007bd8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b0ba      	sub	sp, #232	; 0xe8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	69db      	ldr	r3, [r3, #28]
 8007be6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007bfe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007c02:	f640 030f 	movw	r3, #2063	; 0x80f
 8007c06:	4013      	ands	r3, r2
 8007c08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007c0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d115      	bne.n	8007c40 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c18:	f003 0320 	and.w	r3, r3, #32
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00f      	beq.n	8007c40 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c24:	f003 0320 	and.w	r3, r3, #32
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d009      	beq.n	8007c40 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f000 8297 	beq.w	8008164 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	4798      	blx	r3
      }
      return;
 8007c3e:	e291      	b.n	8008164 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007c40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f000 8117 	beq.w	8007e78 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c4e:	f003 0301 	and.w	r3, r3, #1
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d106      	bne.n	8007c64 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007c56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007c5a:	4b85      	ldr	r3, [pc, #532]	; (8007e70 <HAL_UART_IRQHandler+0x298>)
 8007c5c:	4013      	ands	r3, r2
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f000 810a 	beq.w	8007e78 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c68:	f003 0301 	and.w	r3, r3, #1
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d011      	beq.n	8007c94 <HAL_UART_IRQHandler+0xbc>
 8007c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00b      	beq.n	8007c94 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2201      	movs	r2, #1
 8007c82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c8a:	f043 0201 	orr.w	r2, r3, #1
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c98:	f003 0302 	and.w	r3, r3, #2
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d011      	beq.n	8007cc4 <HAL_UART_IRQHandler+0xec>
 8007ca0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ca4:	f003 0301 	and.w	r3, r3, #1
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00b      	beq.n	8007cc4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2202      	movs	r2, #2
 8007cb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cba:	f043 0204 	orr.w	r2, r3, #4
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cc8:	f003 0304 	and.w	r3, r3, #4
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d011      	beq.n	8007cf4 <HAL_UART_IRQHandler+0x11c>
 8007cd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cd4:	f003 0301 	and.w	r3, r3, #1
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00b      	beq.n	8007cf4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2204      	movs	r2, #4
 8007ce2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cea:	f043 0202 	orr.w	r2, r3, #2
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cf8:	f003 0308 	and.w	r3, r3, #8
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d017      	beq.n	8007d30 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d04:	f003 0320 	and.w	r3, r3, #32
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d105      	bne.n	8007d18 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007d0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d10:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00b      	beq.n	8007d30 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2208      	movs	r2, #8
 8007d1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d26:	f043 0208 	orr.w	r2, r3, #8
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d012      	beq.n	8007d62 <HAL_UART_IRQHandler+0x18a>
 8007d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00c      	beq.n	8007d62 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d58:	f043 0220 	orr.w	r2, r3, #32
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f000 81fd 	beq.w	8008168 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d72:	f003 0320 	and.w	r3, r3, #32
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00d      	beq.n	8007d96 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d7e:	f003 0320 	and.w	r3, r3, #32
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d007      	beq.n	8007d96 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d003      	beq.n	8007d96 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007daa:	2b40      	cmp	r3, #64	; 0x40
 8007dac:	d005      	beq.n	8007dba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007dae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007db2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d04f      	beq.n	8007e5a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fec8 	bl	8008b50 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dca:	2b40      	cmp	r3, #64	; 0x40
 8007dcc:	d141      	bne.n	8007e52 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	3308      	adds	r3, #8
 8007dd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ddc:	e853 3f00 	ldrex	r3, [r3]
 8007de0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007de4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007de8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	3308      	adds	r3, #8
 8007df6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007dfa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007dfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007e06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007e0a:	e841 2300 	strex	r3, r2, [r1]
 8007e0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007e12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d1d9      	bne.n	8007dce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d013      	beq.n	8007e4a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e26:	4a13      	ldr	r2, [pc, #76]	; (8007e74 <HAL_UART_IRQHandler+0x29c>)
 8007e28:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7fb fd8f 	bl	8003952 <HAL_DMA_Abort_IT>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d017      	beq.n	8007e6a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007e44:	4610      	mov	r0, r2
 8007e46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e48:	e00f      	b.n	8007e6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 f9a0 	bl	8008190 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e50:	e00b      	b.n	8007e6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f99c 	bl	8008190 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e58:	e007      	b.n	8007e6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f998 	bl	8008190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007e68:	e17e      	b.n	8008168 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e6a:	bf00      	nop
    return;
 8007e6c:	e17c      	b.n	8008168 <HAL_UART_IRQHandler+0x590>
 8007e6e:	bf00      	nop
 8007e70:	04000120 	.word	0x04000120
 8007e74:	08008c19 	.word	0x08008c19

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	f040 814c 	bne.w	800811a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e86:	f003 0310 	and.w	r3, r3, #16
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f000 8145 	beq.w	800811a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e94:	f003 0310 	and.w	r3, r3, #16
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f000 813e 	beq.w	800811a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2210      	movs	r2, #16
 8007ea4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb0:	2b40      	cmp	r3, #64	; 0x40
 8007eb2:	f040 80b6 	bne.w	8008022 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ec2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f000 8150 	beq.w	800816c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007ed2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	f080 8148 	bcs.w	800816c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ee2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eea:	69db      	ldr	r3, [r3, #28]
 8007eec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ef0:	f000 8086 	beq.w	8008000 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f00:	e853 3f00 	ldrex	r3, [r3]
 8007f04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007f08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	461a      	mov	r2, r3
 8007f1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007f22:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f26:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007f2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007f2e:	e841 2300 	strex	r3, r2, [r1]
 8007f32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007f36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1da      	bne.n	8007ef4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	3308      	adds	r3, #8
 8007f44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f48:	e853 3f00 	ldrex	r3, [r3]
 8007f4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007f4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f50:	f023 0301 	bic.w	r3, r3, #1
 8007f54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	3308      	adds	r3, #8
 8007f5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007f62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007f66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007f6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007f6e:	e841 2300 	strex	r3, r2, [r1]
 8007f72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007f74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d1e1      	bne.n	8007f3e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	3308      	adds	r3, #8
 8007f80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f84:	e853 3f00 	ldrex	r3, [r3]
 8007f88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007f8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	3308      	adds	r3, #8
 8007f9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007f9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007fa0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007fa4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007fa6:	e841 2300 	strex	r3, r2, [r1]
 8007faa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007fac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d1e3      	bne.n	8007f7a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2220      	movs	r2, #32
 8007fb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fc8:	e853 3f00 	ldrex	r3, [r3]
 8007fcc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007fce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fd0:	f023 0310 	bic.w	r3, r3, #16
 8007fd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	461a      	mov	r2, r3
 8007fde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fe2:	65bb      	str	r3, [r7, #88]	; 0x58
 8007fe4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007fe8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007fea:	e841 2300 	strex	r3, r2, [r1]
 8007fee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1e4      	bne.n	8007fc0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7fb fc39 	bl	8003872 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2202      	movs	r2, #2
 8008004:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008012:	b29b      	uxth	r3, r3
 8008014:	1ad3      	subs	r3, r2, r3
 8008016:	b29b      	uxth	r3, r3
 8008018:	4619      	mov	r1, r3
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f8c2 	bl	80081a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008020:	e0a4      	b.n	800816c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800802e:	b29b      	uxth	r3, r3
 8008030:	1ad3      	subs	r3, r2, r3
 8008032:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800803c:	b29b      	uxth	r3, r3
 800803e:	2b00      	cmp	r3, #0
 8008040:	f000 8096 	beq.w	8008170 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8008044:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 8091 	beq.w	8008170 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008056:	e853 3f00 	ldrex	r3, [r3]
 800805a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800805c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800805e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008062:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	461a      	mov	r2, r3
 800806c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008070:	647b      	str	r3, [r7, #68]	; 0x44
 8008072:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008074:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008076:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008078:	e841 2300 	strex	r3, r2, [r1]
 800807c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800807e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1e4      	bne.n	800804e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	3308      	adds	r3, #8
 800808a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808e:	e853 3f00 	ldrex	r3, [r3]
 8008092:	623b      	str	r3, [r7, #32]
   return(result);
 8008094:	6a3b      	ldr	r3, [r7, #32]
 8008096:	f023 0301 	bic.w	r3, r3, #1
 800809a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	3308      	adds	r3, #8
 80080a4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80080a8:	633a      	str	r2, [r7, #48]	; 0x30
 80080aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080b0:	e841 2300 	strex	r3, r2, [r1]
 80080b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1e3      	bne.n	8008084 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2220      	movs	r2, #32
 80080c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	e853 3f00 	ldrex	r3, [r3]
 80080dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f023 0310 	bic.w	r3, r3, #16
 80080e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	461a      	mov	r2, r3
 80080ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80080f2:	61fb      	str	r3, [r7, #28]
 80080f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f6:	69b9      	ldr	r1, [r7, #24]
 80080f8:	69fa      	ldr	r2, [r7, #28]
 80080fa:	e841 2300 	strex	r3, r2, [r1]
 80080fe:	617b      	str	r3, [r7, #20]
   return(result);
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d1e4      	bne.n	80080d0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2202      	movs	r2, #2
 800810a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800810c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008110:	4619      	mov	r1, r3
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f846 	bl	80081a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008118:	e02a      	b.n	8008170 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800811a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800811e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00e      	beq.n	8008144 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800812a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800812e:	2b00      	cmp	r3, #0
 8008130:	d008      	beq.n	8008144 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008136:	2b00      	cmp	r3, #0
 8008138:	d01c      	beq.n	8008174 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	4798      	blx	r3
    }
    return;
 8008142:	e017      	b.n	8008174 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800814c:	2b00      	cmp	r3, #0
 800814e:	d012      	beq.n	8008176 <HAL_UART_IRQHandler+0x59e>
 8008150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00c      	beq.n	8008176 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 fd71 	bl	8008c44 <UART_EndTransmit_IT>
    return;
 8008162:	e008      	b.n	8008176 <HAL_UART_IRQHandler+0x59e>
      return;
 8008164:	bf00      	nop
 8008166:	e006      	b.n	8008176 <HAL_UART_IRQHandler+0x59e>
    return;
 8008168:	bf00      	nop
 800816a:	e004      	b.n	8008176 <HAL_UART_IRQHandler+0x59e>
      return;
 800816c:	bf00      	nop
 800816e:	e002      	b.n	8008176 <HAL_UART_IRQHandler+0x59e>
      return;
 8008170:	bf00      	nop
 8008172:	e000      	b.n	8008176 <HAL_UART_IRQHandler+0x59e>
    return;
 8008174:	bf00      	nop
  }

}
 8008176:	37e8      	adds	r7, #232	; 0xe8
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008184:	bf00      	nop
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008190:	b480      	push	{r7}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008198:	bf00      	nop
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	460b      	mov	r3, r1
 80081ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b088      	sub	sp, #32
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80081c4:	2300      	movs	r3, #0
 80081c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	689a      	ldr	r2, [r3, #8]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	691b      	ldr	r3, [r3, #16]
 80081d0:	431a      	orrs	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	695b      	ldr	r3, [r3, #20]
 80081d6:	431a      	orrs	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	69db      	ldr	r3, [r3, #28]
 80081dc:	4313      	orrs	r3, r2
 80081de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	4ba6      	ldr	r3, [pc, #664]	; (8008480 <UART_SetConfig+0x2c4>)
 80081e8:	4013      	ands	r3, r2
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	6812      	ldr	r2, [r2, #0]
 80081ee:	6979      	ldr	r1, [r7, #20]
 80081f0:	430b      	orrs	r3, r1
 80081f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	68da      	ldr	r2, [r3, #12]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	430a      	orrs	r2, r1
 8008208:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6a1b      	ldr	r3, [r3, #32]
 8008214:	697a      	ldr	r2, [r7, #20]
 8008216:	4313      	orrs	r3, r2
 8008218:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	697a      	ldr	r2, [r7, #20]
 800822a:	430a      	orrs	r2, r1
 800822c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a94      	ldr	r2, [pc, #592]	; (8008484 <UART_SetConfig+0x2c8>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d120      	bne.n	800827a <UART_SetConfig+0xbe>
 8008238:	4b93      	ldr	r3, [pc, #588]	; (8008488 <UART_SetConfig+0x2cc>)
 800823a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800823e:	f003 0303 	and.w	r3, r3, #3
 8008242:	2b03      	cmp	r3, #3
 8008244:	d816      	bhi.n	8008274 <UART_SetConfig+0xb8>
 8008246:	a201      	add	r2, pc, #4	; (adr r2, 800824c <UART_SetConfig+0x90>)
 8008248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800824c:	0800825d 	.word	0x0800825d
 8008250:	08008269 	.word	0x08008269
 8008254:	08008263 	.word	0x08008263
 8008258:	0800826f 	.word	0x0800826f
 800825c:	2301      	movs	r3, #1
 800825e:	77fb      	strb	r3, [r7, #31]
 8008260:	e150      	b.n	8008504 <UART_SetConfig+0x348>
 8008262:	2302      	movs	r3, #2
 8008264:	77fb      	strb	r3, [r7, #31]
 8008266:	e14d      	b.n	8008504 <UART_SetConfig+0x348>
 8008268:	2304      	movs	r3, #4
 800826a:	77fb      	strb	r3, [r7, #31]
 800826c:	e14a      	b.n	8008504 <UART_SetConfig+0x348>
 800826e:	2308      	movs	r3, #8
 8008270:	77fb      	strb	r3, [r7, #31]
 8008272:	e147      	b.n	8008504 <UART_SetConfig+0x348>
 8008274:	2310      	movs	r3, #16
 8008276:	77fb      	strb	r3, [r7, #31]
 8008278:	e144      	b.n	8008504 <UART_SetConfig+0x348>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a83      	ldr	r2, [pc, #524]	; (800848c <UART_SetConfig+0x2d0>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d132      	bne.n	80082ea <UART_SetConfig+0x12e>
 8008284:	4b80      	ldr	r3, [pc, #512]	; (8008488 <UART_SetConfig+0x2cc>)
 8008286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800828a:	f003 030c 	and.w	r3, r3, #12
 800828e:	2b0c      	cmp	r3, #12
 8008290:	d828      	bhi.n	80082e4 <UART_SetConfig+0x128>
 8008292:	a201      	add	r2, pc, #4	; (adr r2, 8008298 <UART_SetConfig+0xdc>)
 8008294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008298:	080082cd 	.word	0x080082cd
 800829c:	080082e5 	.word	0x080082e5
 80082a0:	080082e5 	.word	0x080082e5
 80082a4:	080082e5 	.word	0x080082e5
 80082a8:	080082d9 	.word	0x080082d9
 80082ac:	080082e5 	.word	0x080082e5
 80082b0:	080082e5 	.word	0x080082e5
 80082b4:	080082e5 	.word	0x080082e5
 80082b8:	080082d3 	.word	0x080082d3
 80082bc:	080082e5 	.word	0x080082e5
 80082c0:	080082e5 	.word	0x080082e5
 80082c4:	080082e5 	.word	0x080082e5
 80082c8:	080082df 	.word	0x080082df
 80082cc:	2300      	movs	r3, #0
 80082ce:	77fb      	strb	r3, [r7, #31]
 80082d0:	e118      	b.n	8008504 <UART_SetConfig+0x348>
 80082d2:	2302      	movs	r3, #2
 80082d4:	77fb      	strb	r3, [r7, #31]
 80082d6:	e115      	b.n	8008504 <UART_SetConfig+0x348>
 80082d8:	2304      	movs	r3, #4
 80082da:	77fb      	strb	r3, [r7, #31]
 80082dc:	e112      	b.n	8008504 <UART_SetConfig+0x348>
 80082de:	2308      	movs	r3, #8
 80082e0:	77fb      	strb	r3, [r7, #31]
 80082e2:	e10f      	b.n	8008504 <UART_SetConfig+0x348>
 80082e4:	2310      	movs	r3, #16
 80082e6:	77fb      	strb	r3, [r7, #31]
 80082e8:	e10c      	b.n	8008504 <UART_SetConfig+0x348>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a68      	ldr	r2, [pc, #416]	; (8008490 <UART_SetConfig+0x2d4>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d120      	bne.n	8008336 <UART_SetConfig+0x17a>
 80082f4:	4b64      	ldr	r3, [pc, #400]	; (8008488 <UART_SetConfig+0x2cc>)
 80082f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80082fe:	2b30      	cmp	r3, #48	; 0x30
 8008300:	d013      	beq.n	800832a <UART_SetConfig+0x16e>
 8008302:	2b30      	cmp	r3, #48	; 0x30
 8008304:	d814      	bhi.n	8008330 <UART_SetConfig+0x174>
 8008306:	2b20      	cmp	r3, #32
 8008308:	d009      	beq.n	800831e <UART_SetConfig+0x162>
 800830a:	2b20      	cmp	r3, #32
 800830c:	d810      	bhi.n	8008330 <UART_SetConfig+0x174>
 800830e:	2b00      	cmp	r3, #0
 8008310:	d002      	beq.n	8008318 <UART_SetConfig+0x15c>
 8008312:	2b10      	cmp	r3, #16
 8008314:	d006      	beq.n	8008324 <UART_SetConfig+0x168>
 8008316:	e00b      	b.n	8008330 <UART_SetConfig+0x174>
 8008318:	2300      	movs	r3, #0
 800831a:	77fb      	strb	r3, [r7, #31]
 800831c:	e0f2      	b.n	8008504 <UART_SetConfig+0x348>
 800831e:	2302      	movs	r3, #2
 8008320:	77fb      	strb	r3, [r7, #31]
 8008322:	e0ef      	b.n	8008504 <UART_SetConfig+0x348>
 8008324:	2304      	movs	r3, #4
 8008326:	77fb      	strb	r3, [r7, #31]
 8008328:	e0ec      	b.n	8008504 <UART_SetConfig+0x348>
 800832a:	2308      	movs	r3, #8
 800832c:	77fb      	strb	r3, [r7, #31]
 800832e:	e0e9      	b.n	8008504 <UART_SetConfig+0x348>
 8008330:	2310      	movs	r3, #16
 8008332:	77fb      	strb	r3, [r7, #31]
 8008334:	e0e6      	b.n	8008504 <UART_SetConfig+0x348>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a56      	ldr	r2, [pc, #344]	; (8008494 <UART_SetConfig+0x2d8>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d120      	bne.n	8008382 <UART_SetConfig+0x1c6>
 8008340:	4b51      	ldr	r3, [pc, #324]	; (8008488 <UART_SetConfig+0x2cc>)
 8008342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008346:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800834a:	2bc0      	cmp	r3, #192	; 0xc0
 800834c:	d013      	beq.n	8008376 <UART_SetConfig+0x1ba>
 800834e:	2bc0      	cmp	r3, #192	; 0xc0
 8008350:	d814      	bhi.n	800837c <UART_SetConfig+0x1c0>
 8008352:	2b80      	cmp	r3, #128	; 0x80
 8008354:	d009      	beq.n	800836a <UART_SetConfig+0x1ae>
 8008356:	2b80      	cmp	r3, #128	; 0x80
 8008358:	d810      	bhi.n	800837c <UART_SetConfig+0x1c0>
 800835a:	2b00      	cmp	r3, #0
 800835c:	d002      	beq.n	8008364 <UART_SetConfig+0x1a8>
 800835e:	2b40      	cmp	r3, #64	; 0x40
 8008360:	d006      	beq.n	8008370 <UART_SetConfig+0x1b4>
 8008362:	e00b      	b.n	800837c <UART_SetConfig+0x1c0>
 8008364:	2300      	movs	r3, #0
 8008366:	77fb      	strb	r3, [r7, #31]
 8008368:	e0cc      	b.n	8008504 <UART_SetConfig+0x348>
 800836a:	2302      	movs	r3, #2
 800836c:	77fb      	strb	r3, [r7, #31]
 800836e:	e0c9      	b.n	8008504 <UART_SetConfig+0x348>
 8008370:	2304      	movs	r3, #4
 8008372:	77fb      	strb	r3, [r7, #31]
 8008374:	e0c6      	b.n	8008504 <UART_SetConfig+0x348>
 8008376:	2308      	movs	r3, #8
 8008378:	77fb      	strb	r3, [r7, #31]
 800837a:	e0c3      	b.n	8008504 <UART_SetConfig+0x348>
 800837c:	2310      	movs	r3, #16
 800837e:	77fb      	strb	r3, [r7, #31]
 8008380:	e0c0      	b.n	8008504 <UART_SetConfig+0x348>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a44      	ldr	r2, [pc, #272]	; (8008498 <UART_SetConfig+0x2dc>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d125      	bne.n	80083d8 <UART_SetConfig+0x21c>
 800838c:	4b3e      	ldr	r3, [pc, #248]	; (8008488 <UART_SetConfig+0x2cc>)
 800838e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008396:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800839a:	d017      	beq.n	80083cc <UART_SetConfig+0x210>
 800839c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083a0:	d817      	bhi.n	80083d2 <UART_SetConfig+0x216>
 80083a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083a6:	d00b      	beq.n	80083c0 <UART_SetConfig+0x204>
 80083a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083ac:	d811      	bhi.n	80083d2 <UART_SetConfig+0x216>
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d003      	beq.n	80083ba <UART_SetConfig+0x1fe>
 80083b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083b6:	d006      	beq.n	80083c6 <UART_SetConfig+0x20a>
 80083b8:	e00b      	b.n	80083d2 <UART_SetConfig+0x216>
 80083ba:	2300      	movs	r3, #0
 80083bc:	77fb      	strb	r3, [r7, #31]
 80083be:	e0a1      	b.n	8008504 <UART_SetConfig+0x348>
 80083c0:	2302      	movs	r3, #2
 80083c2:	77fb      	strb	r3, [r7, #31]
 80083c4:	e09e      	b.n	8008504 <UART_SetConfig+0x348>
 80083c6:	2304      	movs	r3, #4
 80083c8:	77fb      	strb	r3, [r7, #31]
 80083ca:	e09b      	b.n	8008504 <UART_SetConfig+0x348>
 80083cc:	2308      	movs	r3, #8
 80083ce:	77fb      	strb	r3, [r7, #31]
 80083d0:	e098      	b.n	8008504 <UART_SetConfig+0x348>
 80083d2:	2310      	movs	r3, #16
 80083d4:	77fb      	strb	r3, [r7, #31]
 80083d6:	e095      	b.n	8008504 <UART_SetConfig+0x348>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a2f      	ldr	r2, [pc, #188]	; (800849c <UART_SetConfig+0x2e0>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d125      	bne.n	800842e <UART_SetConfig+0x272>
 80083e2:	4b29      	ldr	r3, [pc, #164]	; (8008488 <UART_SetConfig+0x2cc>)
 80083e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80083ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083f0:	d017      	beq.n	8008422 <UART_SetConfig+0x266>
 80083f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083f6:	d817      	bhi.n	8008428 <UART_SetConfig+0x26c>
 80083f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083fc:	d00b      	beq.n	8008416 <UART_SetConfig+0x25a>
 80083fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008402:	d811      	bhi.n	8008428 <UART_SetConfig+0x26c>
 8008404:	2b00      	cmp	r3, #0
 8008406:	d003      	beq.n	8008410 <UART_SetConfig+0x254>
 8008408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800840c:	d006      	beq.n	800841c <UART_SetConfig+0x260>
 800840e:	e00b      	b.n	8008428 <UART_SetConfig+0x26c>
 8008410:	2301      	movs	r3, #1
 8008412:	77fb      	strb	r3, [r7, #31]
 8008414:	e076      	b.n	8008504 <UART_SetConfig+0x348>
 8008416:	2302      	movs	r3, #2
 8008418:	77fb      	strb	r3, [r7, #31]
 800841a:	e073      	b.n	8008504 <UART_SetConfig+0x348>
 800841c:	2304      	movs	r3, #4
 800841e:	77fb      	strb	r3, [r7, #31]
 8008420:	e070      	b.n	8008504 <UART_SetConfig+0x348>
 8008422:	2308      	movs	r3, #8
 8008424:	77fb      	strb	r3, [r7, #31]
 8008426:	e06d      	b.n	8008504 <UART_SetConfig+0x348>
 8008428:	2310      	movs	r3, #16
 800842a:	77fb      	strb	r3, [r7, #31]
 800842c:	e06a      	b.n	8008504 <UART_SetConfig+0x348>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a1b      	ldr	r2, [pc, #108]	; (80084a0 <UART_SetConfig+0x2e4>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d138      	bne.n	80084aa <UART_SetConfig+0x2ee>
 8008438:	4b13      	ldr	r3, [pc, #76]	; (8008488 <UART_SetConfig+0x2cc>)
 800843a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800843e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008442:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008446:	d017      	beq.n	8008478 <UART_SetConfig+0x2bc>
 8008448:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800844c:	d82a      	bhi.n	80084a4 <UART_SetConfig+0x2e8>
 800844e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008452:	d00b      	beq.n	800846c <UART_SetConfig+0x2b0>
 8008454:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008458:	d824      	bhi.n	80084a4 <UART_SetConfig+0x2e8>
 800845a:	2b00      	cmp	r3, #0
 800845c:	d003      	beq.n	8008466 <UART_SetConfig+0x2aa>
 800845e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008462:	d006      	beq.n	8008472 <UART_SetConfig+0x2b6>
 8008464:	e01e      	b.n	80084a4 <UART_SetConfig+0x2e8>
 8008466:	2300      	movs	r3, #0
 8008468:	77fb      	strb	r3, [r7, #31]
 800846a:	e04b      	b.n	8008504 <UART_SetConfig+0x348>
 800846c:	2302      	movs	r3, #2
 800846e:	77fb      	strb	r3, [r7, #31]
 8008470:	e048      	b.n	8008504 <UART_SetConfig+0x348>
 8008472:	2304      	movs	r3, #4
 8008474:	77fb      	strb	r3, [r7, #31]
 8008476:	e045      	b.n	8008504 <UART_SetConfig+0x348>
 8008478:	2308      	movs	r3, #8
 800847a:	77fb      	strb	r3, [r7, #31]
 800847c:	e042      	b.n	8008504 <UART_SetConfig+0x348>
 800847e:	bf00      	nop
 8008480:	efff69f3 	.word	0xefff69f3
 8008484:	40011000 	.word	0x40011000
 8008488:	40023800 	.word	0x40023800
 800848c:	40004400 	.word	0x40004400
 8008490:	40004800 	.word	0x40004800
 8008494:	40004c00 	.word	0x40004c00
 8008498:	40005000 	.word	0x40005000
 800849c:	40011400 	.word	0x40011400
 80084a0:	40007800 	.word	0x40007800
 80084a4:	2310      	movs	r3, #16
 80084a6:	77fb      	strb	r3, [r7, #31]
 80084a8:	e02c      	b.n	8008504 <UART_SetConfig+0x348>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a72      	ldr	r2, [pc, #456]	; (8008678 <UART_SetConfig+0x4bc>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d125      	bne.n	8008500 <UART_SetConfig+0x344>
 80084b4:	4b71      	ldr	r3, [pc, #452]	; (800867c <UART_SetConfig+0x4c0>)
 80084b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80084be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80084c2:	d017      	beq.n	80084f4 <UART_SetConfig+0x338>
 80084c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80084c8:	d817      	bhi.n	80084fa <UART_SetConfig+0x33e>
 80084ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084ce:	d00b      	beq.n	80084e8 <UART_SetConfig+0x32c>
 80084d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084d4:	d811      	bhi.n	80084fa <UART_SetConfig+0x33e>
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d003      	beq.n	80084e2 <UART_SetConfig+0x326>
 80084da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084de:	d006      	beq.n	80084ee <UART_SetConfig+0x332>
 80084e0:	e00b      	b.n	80084fa <UART_SetConfig+0x33e>
 80084e2:	2300      	movs	r3, #0
 80084e4:	77fb      	strb	r3, [r7, #31]
 80084e6:	e00d      	b.n	8008504 <UART_SetConfig+0x348>
 80084e8:	2302      	movs	r3, #2
 80084ea:	77fb      	strb	r3, [r7, #31]
 80084ec:	e00a      	b.n	8008504 <UART_SetConfig+0x348>
 80084ee:	2304      	movs	r3, #4
 80084f0:	77fb      	strb	r3, [r7, #31]
 80084f2:	e007      	b.n	8008504 <UART_SetConfig+0x348>
 80084f4:	2308      	movs	r3, #8
 80084f6:	77fb      	strb	r3, [r7, #31]
 80084f8:	e004      	b.n	8008504 <UART_SetConfig+0x348>
 80084fa:	2310      	movs	r3, #16
 80084fc:	77fb      	strb	r3, [r7, #31]
 80084fe:	e001      	b.n	8008504 <UART_SetConfig+0x348>
 8008500:	2310      	movs	r3, #16
 8008502:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	69db      	ldr	r3, [r3, #28]
 8008508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800850c:	d15b      	bne.n	80085c6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800850e:	7ffb      	ldrb	r3, [r7, #31]
 8008510:	2b08      	cmp	r3, #8
 8008512:	d828      	bhi.n	8008566 <UART_SetConfig+0x3aa>
 8008514:	a201      	add	r2, pc, #4	; (adr r2, 800851c <UART_SetConfig+0x360>)
 8008516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800851a:	bf00      	nop
 800851c:	08008541 	.word	0x08008541
 8008520:	08008549 	.word	0x08008549
 8008524:	08008551 	.word	0x08008551
 8008528:	08008567 	.word	0x08008567
 800852c:	08008557 	.word	0x08008557
 8008530:	08008567 	.word	0x08008567
 8008534:	08008567 	.word	0x08008567
 8008538:	08008567 	.word	0x08008567
 800853c:	0800855f 	.word	0x0800855f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008540:	f7fc fd00 	bl	8004f44 <HAL_RCC_GetPCLK1Freq>
 8008544:	61b8      	str	r0, [r7, #24]
        break;
 8008546:	e013      	b.n	8008570 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008548:	f7fc fd10 	bl	8004f6c <HAL_RCC_GetPCLK2Freq>
 800854c:	61b8      	str	r0, [r7, #24]
        break;
 800854e:	e00f      	b.n	8008570 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008550:	4b4b      	ldr	r3, [pc, #300]	; (8008680 <UART_SetConfig+0x4c4>)
 8008552:	61bb      	str	r3, [r7, #24]
        break;
 8008554:	e00c      	b.n	8008570 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008556:	f7fc fbe3 	bl	8004d20 <HAL_RCC_GetSysClockFreq>
 800855a:	61b8      	str	r0, [r7, #24]
        break;
 800855c:	e008      	b.n	8008570 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800855e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008562:	61bb      	str	r3, [r7, #24]
        break;
 8008564:	e004      	b.n	8008570 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008566:	2300      	movs	r3, #0
 8008568:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	77bb      	strb	r3, [r7, #30]
        break;
 800856e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d074      	beq.n	8008660 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	005a      	lsls	r2, r3, #1
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	085b      	lsrs	r3, r3, #1
 8008580:	441a      	add	r2, r3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	fbb2 f3f3 	udiv	r3, r2, r3
 800858a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	2b0f      	cmp	r3, #15
 8008590:	d916      	bls.n	80085c0 <UART_SetConfig+0x404>
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008598:	d212      	bcs.n	80085c0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	b29b      	uxth	r3, r3
 800859e:	f023 030f 	bic.w	r3, r3, #15
 80085a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	085b      	lsrs	r3, r3, #1
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	f003 0307 	and.w	r3, r3, #7
 80085ae:	b29a      	uxth	r2, r3
 80085b0:	89fb      	ldrh	r3, [r7, #14]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	89fa      	ldrh	r2, [r7, #14]
 80085bc:	60da      	str	r2, [r3, #12]
 80085be:	e04f      	b.n	8008660 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	77bb      	strb	r3, [r7, #30]
 80085c4:	e04c      	b.n	8008660 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80085c6:	7ffb      	ldrb	r3, [r7, #31]
 80085c8:	2b08      	cmp	r3, #8
 80085ca:	d828      	bhi.n	800861e <UART_SetConfig+0x462>
 80085cc:	a201      	add	r2, pc, #4	; (adr r2, 80085d4 <UART_SetConfig+0x418>)
 80085ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d2:	bf00      	nop
 80085d4:	080085f9 	.word	0x080085f9
 80085d8:	08008601 	.word	0x08008601
 80085dc:	08008609 	.word	0x08008609
 80085e0:	0800861f 	.word	0x0800861f
 80085e4:	0800860f 	.word	0x0800860f
 80085e8:	0800861f 	.word	0x0800861f
 80085ec:	0800861f 	.word	0x0800861f
 80085f0:	0800861f 	.word	0x0800861f
 80085f4:	08008617 	.word	0x08008617
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085f8:	f7fc fca4 	bl	8004f44 <HAL_RCC_GetPCLK1Freq>
 80085fc:	61b8      	str	r0, [r7, #24]
        break;
 80085fe:	e013      	b.n	8008628 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008600:	f7fc fcb4 	bl	8004f6c <HAL_RCC_GetPCLK2Freq>
 8008604:	61b8      	str	r0, [r7, #24]
        break;
 8008606:	e00f      	b.n	8008628 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008608:	4b1d      	ldr	r3, [pc, #116]	; (8008680 <UART_SetConfig+0x4c4>)
 800860a:	61bb      	str	r3, [r7, #24]
        break;
 800860c:	e00c      	b.n	8008628 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800860e:	f7fc fb87 	bl	8004d20 <HAL_RCC_GetSysClockFreq>
 8008612:	61b8      	str	r0, [r7, #24]
        break;
 8008614:	e008      	b.n	8008628 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800861a:	61bb      	str	r3, [r7, #24]
        break;
 800861c:	e004      	b.n	8008628 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800861e:	2300      	movs	r3, #0
 8008620:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	77bb      	strb	r3, [r7, #30]
        break;
 8008626:	bf00      	nop
    }

    if (pclk != 0U)
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d018      	beq.n	8008660 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	085a      	lsrs	r2, r3, #1
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	441a      	add	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008640:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	2b0f      	cmp	r3, #15
 8008646:	d909      	bls.n	800865c <UART_SetConfig+0x4a0>
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800864e:	d205      	bcs.n	800865c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	b29a      	uxth	r2, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	60da      	str	r2, [r3, #12]
 800865a:	e001      	b.n	8008660 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800866c:	7fbb      	ldrb	r3, [r7, #30]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3720      	adds	r7, #32
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	40007c00 	.word	0x40007c00
 800867c:	40023800 	.word	0x40023800
 8008680:	00f42400 	.word	0x00f42400

08008684 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008690:	f003 0301 	and.w	r3, r3, #1
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00a      	beq.n	80086ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	430a      	orrs	r2, r1
 80086ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b2:	f003 0302 	and.w	r3, r3, #2
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00a      	beq.n	80086d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	430a      	orrs	r2, r1
 80086ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d4:	f003 0304 	and.w	r3, r3, #4
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00a      	beq.n	80086f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	430a      	orrs	r2, r1
 80086f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f6:	f003 0308 	and.w	r3, r3, #8
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d00a      	beq.n	8008714 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	430a      	orrs	r2, r1
 8008712:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008718:	f003 0310 	and.w	r3, r3, #16
 800871c:	2b00      	cmp	r3, #0
 800871e:	d00a      	beq.n	8008736 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	430a      	orrs	r2, r1
 8008734:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873a:	f003 0320 	and.w	r3, r3, #32
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00a      	beq.n	8008758 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	430a      	orrs	r2, r1
 8008756:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008760:	2b00      	cmp	r3, #0
 8008762:	d01a      	beq.n	800879a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	430a      	orrs	r2, r1
 8008778:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800877e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008782:	d10a      	bne.n	800879a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	430a      	orrs	r2, r1
 8008798:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00a      	beq.n	80087bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	430a      	orrs	r2, r1
 80087ba:	605a      	str	r2, [r3, #4]
  }
}
 80087bc:	bf00      	nop
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b086      	sub	sp, #24
 80087cc:	af02      	add	r7, sp, #8
 80087ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80087d8:	f7fa ff0a 	bl	80035f0 <HAL_GetTick>
 80087dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 0308 	and.w	r3, r3, #8
 80087e8:	2b08      	cmp	r3, #8
 80087ea:	d10e      	bne.n	800880a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087f0:	9300      	str	r3, [sp, #0]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 f81b 	bl	8008836 <UART_WaitOnFlagUntilTimeout>
 8008800:	4603      	mov	r3, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d001      	beq.n	800880a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008806:	2303      	movs	r3, #3
 8008808:	e011      	b.n	800882e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2220      	movs	r2, #32
 800880e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2220      	movs	r2, #32
 8008814:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b09c      	sub	sp, #112	; 0x70
 800883a:	af00      	add	r7, sp, #0
 800883c:	60f8      	str	r0, [r7, #12]
 800883e:	60b9      	str	r1, [r7, #8]
 8008840:	603b      	str	r3, [r7, #0]
 8008842:	4613      	mov	r3, r2
 8008844:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008846:	e0a7      	b.n	8008998 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008848:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800884a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800884e:	f000 80a3 	beq.w	8008998 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008852:	f7fa fecd 	bl	80035f0 <HAL_GetTick>
 8008856:	4602      	mov	r2, r0
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	1ad3      	subs	r3, r2, r3
 800885c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800885e:	429a      	cmp	r2, r3
 8008860:	d302      	bcc.n	8008868 <UART_WaitOnFlagUntilTimeout+0x32>
 8008862:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008864:	2b00      	cmp	r3, #0
 8008866:	d13f      	bne.n	80088e8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800886e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008870:	e853 3f00 	ldrex	r3, [r3]
 8008874:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008878:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800887c:	667b      	str	r3, [r7, #100]	; 0x64
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	461a      	mov	r2, r3
 8008884:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008886:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008888:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800888c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800888e:	e841 2300 	strex	r3, r2, [r1]
 8008892:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008896:	2b00      	cmp	r3, #0
 8008898:	d1e6      	bne.n	8008868 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	3308      	adds	r3, #8
 80088a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088a4:	e853 3f00 	ldrex	r3, [r3]
 80088a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ac:	f023 0301 	bic.w	r3, r3, #1
 80088b0:	663b      	str	r3, [r7, #96]	; 0x60
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	3308      	adds	r3, #8
 80088b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80088ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80088bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80088c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088c2:	e841 2300 	strex	r3, r2, [r1]
 80088c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80088c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1e5      	bne.n	800889a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2220      	movs	r2, #32
 80088d2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2220      	movs	r2, #32
 80088d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2200      	movs	r2, #0
 80088e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80088e4:	2303      	movs	r3, #3
 80088e6:	e068      	b.n	80089ba <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f003 0304 	and.w	r3, r3, #4
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d050      	beq.n	8008998 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	69db      	ldr	r3, [r3, #28]
 80088fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008900:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008904:	d148      	bne.n	8008998 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800890e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008918:	e853 3f00 	ldrex	r3, [r3]
 800891c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800891e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008920:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008924:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	461a      	mov	r2, r3
 800892c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800892e:	637b      	str	r3, [r7, #52]	; 0x34
 8008930:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008932:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008934:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008936:	e841 2300 	strex	r3, r2, [r1]
 800893a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800893c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893e:	2b00      	cmp	r3, #0
 8008940:	d1e6      	bne.n	8008910 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	3308      	adds	r3, #8
 8008948:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	e853 3f00 	ldrex	r3, [r3]
 8008950:	613b      	str	r3, [r7, #16]
   return(result);
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	f023 0301 	bic.w	r3, r3, #1
 8008958:	66bb      	str	r3, [r7, #104]	; 0x68
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	3308      	adds	r3, #8
 8008960:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008962:	623a      	str	r2, [r7, #32]
 8008964:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008966:	69f9      	ldr	r1, [r7, #28]
 8008968:	6a3a      	ldr	r2, [r7, #32]
 800896a:	e841 2300 	strex	r3, r2, [r1]
 800896e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008970:	69bb      	ldr	r3, [r7, #24]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1e5      	bne.n	8008942 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2220      	movs	r2, #32
 800897a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2220      	movs	r2, #32
 8008980:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2220      	movs	r2, #32
 8008988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2200      	movs	r2, #0
 8008990:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008994:	2303      	movs	r3, #3
 8008996:	e010      	b.n	80089ba <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	69da      	ldr	r2, [r3, #28]
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	4013      	ands	r3, r2
 80089a2:	68ba      	ldr	r2, [r7, #8]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	bf0c      	ite	eq
 80089a8:	2301      	moveq	r3, #1
 80089aa:	2300      	movne	r3, #0
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	461a      	mov	r2, r3
 80089b0:	79fb      	ldrb	r3, [r7, #7]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	f43f af48 	beq.w	8008848 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3770      	adds	r7, #112	; 0x70
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
	...

080089c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b097      	sub	sp, #92	; 0x5c
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	4613      	mov	r3, r2
 80089d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	68ba      	ldr	r2, [r7, #8]
 80089d6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	88fa      	ldrh	r2, [r7, #6]
 80089dc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	88fa      	ldrh	r2, [r7, #6]
 80089e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2200      	movs	r2, #0
 80089ec:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089f6:	d10e      	bne.n	8008a16 <UART_Start_Receive_IT+0x52>
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d105      	bne.n	8008a0c <UART_Start_Receive_IT+0x48>
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008a06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a0a:	e02d      	b.n	8008a68 <UART_Start_Receive_IT+0xa4>
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	22ff      	movs	r2, #255	; 0xff
 8008a10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a14:	e028      	b.n	8008a68 <UART_Start_Receive_IT+0xa4>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d10d      	bne.n	8008a3a <UART_Start_Receive_IT+0x76>
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d104      	bne.n	8008a30 <UART_Start_Receive_IT+0x6c>
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	22ff      	movs	r2, #255	; 0xff
 8008a2a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a2e:	e01b      	b.n	8008a68 <UART_Start_Receive_IT+0xa4>
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	227f      	movs	r2, #127	; 0x7f
 8008a34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a38:	e016      	b.n	8008a68 <UART_Start_Receive_IT+0xa4>
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a42:	d10d      	bne.n	8008a60 <UART_Start_Receive_IT+0x9c>
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d104      	bne.n	8008a56 <UART_Start_Receive_IT+0x92>
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	227f      	movs	r2, #127	; 0x7f
 8008a50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a54:	e008      	b.n	8008a68 <UART_Start_Receive_IT+0xa4>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	223f      	movs	r2, #63	; 0x3f
 8008a5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a5e:	e003      	b.n	8008a68 <UART_Start_Receive_IT+0xa4>
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2222      	movs	r2, #34	; 0x22
 8008a74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	3308      	adds	r3, #8
 8008a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a82:	e853 3f00 	ldrex	r3, [r3]
 8008a86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8a:	f043 0301 	orr.w	r3, r3, #1
 8008a8e:	657b      	str	r3, [r7, #84]	; 0x54
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	3308      	adds	r3, #8
 8008a96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a98:	64ba      	str	r2, [r7, #72]	; 0x48
 8008a9a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008aa0:	e841 2300 	strex	r3, r2, [r1]
 8008aa4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d1e5      	bne.n	8008a78 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ab4:	d107      	bne.n	8008ac6 <UART_Start_Receive_IT+0x102>
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d103      	bne.n	8008ac6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	4a21      	ldr	r2, [pc, #132]	; (8008b48 <UART_Start_Receive_IT+0x184>)
 8008ac2:	669a      	str	r2, [r3, #104]	; 0x68
 8008ac4:	e002      	b.n	8008acc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	4a20      	ldr	r2, [pc, #128]	; (8008b4c <UART_Start_Receive_IT+0x188>)
 8008aca:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d019      	beq.n	8008b08 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008adc:	e853 3f00 	ldrex	r3, [r3]
 8008ae0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	461a      	mov	r2, r3
 8008af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008af2:	637b      	str	r3, [r7, #52]	; 0x34
 8008af4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008af8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008afa:	e841 2300 	strex	r3, r2, [r1]
 8008afe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1e6      	bne.n	8008ad4 <UART_Start_Receive_IT+0x110>
 8008b06:	e018      	b.n	8008b3a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	e853 3f00 	ldrex	r3, [r3]
 8008b14:	613b      	str	r3, [r7, #16]
   return(result);
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	f043 0320 	orr.w	r3, r3, #32
 8008b1c:	653b      	str	r3, [r7, #80]	; 0x50
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	461a      	mov	r2, r3
 8008b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b26:	623b      	str	r3, [r7, #32]
 8008b28:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b2a:	69f9      	ldr	r1, [r7, #28]
 8008b2c:	6a3a      	ldr	r2, [r7, #32]
 8008b2e:	e841 2300 	strex	r3, r2, [r1]
 8008b32:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b34:	69bb      	ldr	r3, [r7, #24]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d1e6      	bne.n	8008b08 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8008b3a:	2300      	movs	r3, #0
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	375c      	adds	r7, #92	; 0x5c
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr
 8008b48:	08008dff 	.word	0x08008dff
 8008b4c:	08008c99 	.word	0x08008c99

08008b50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b095      	sub	sp, #84	; 0x54
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b60:	e853 3f00 	ldrex	r3, [r3]
 8008b64:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	461a      	mov	r2, r3
 8008b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b76:	643b      	str	r3, [r7, #64]	; 0x40
 8008b78:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b7e:	e841 2300 	strex	r3, r2, [r1]
 8008b82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d1e6      	bne.n	8008b58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	3308      	adds	r3, #8
 8008b90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b92:	6a3b      	ldr	r3, [r7, #32]
 8008b94:	e853 3f00 	ldrex	r3, [r3]
 8008b98:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	f023 0301 	bic.w	r3, r3, #1
 8008ba0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	3308      	adds	r3, #8
 8008ba8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008baa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008bac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bb2:	e841 2300 	strex	r3, r2, [r1]
 8008bb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d1e5      	bne.n	8008b8a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d118      	bne.n	8008bf8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	e853 3f00 	ldrex	r3, [r3]
 8008bd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	f023 0310 	bic.w	r3, r3, #16
 8008bda:	647b      	str	r3, [r7, #68]	; 0x44
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	461a      	mov	r2, r3
 8008be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008be4:	61bb      	str	r3, [r7, #24]
 8008be6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be8:	6979      	ldr	r1, [r7, #20]
 8008bea:	69ba      	ldr	r2, [r7, #24]
 8008bec:	e841 2300 	strex	r3, r2, [r1]
 8008bf0:	613b      	str	r3, [r7, #16]
   return(result);
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d1e6      	bne.n	8008bc6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2220      	movs	r2, #32
 8008bfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008c0c:	bf00      	nop
 8008c0e:	3754      	adds	r7, #84	; 0x54
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c36:	68f8      	ldr	r0, [r7, #12]
 8008c38:	f7ff faaa 	bl	8008190 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c3c:	bf00      	nop
 8008c3e:	3710      	adds	r7, #16
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b088      	sub	sp, #32
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	e853 3f00 	ldrex	r3, [r3]
 8008c58:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c60:	61fb      	str	r3, [r7, #28]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	461a      	mov	r2, r3
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	61bb      	str	r3, [r7, #24]
 8008c6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6e:	6979      	ldr	r1, [r7, #20]
 8008c70:	69ba      	ldr	r2, [r7, #24]
 8008c72:	e841 2300 	strex	r3, r2, [r1]
 8008c76:	613b      	str	r3, [r7, #16]
   return(result);
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d1e6      	bne.n	8008c4c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2220      	movs	r2, #32
 8008c82:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f7ff fa76 	bl	800817c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c90:	bf00      	nop
 8008c92:	3720      	adds	r7, #32
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b096      	sub	sp, #88	; 0x58
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008ca6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cb0:	2b22      	cmp	r3, #34	; 0x22
 8008cb2:	f040 8098 	bne.w	8008de6 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008cc0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008cc4:	b2d9      	uxtb	r1, r3
 8008cc6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008cca:	b2da      	uxtb	r2, r3
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cd0:	400a      	ands	r2, r1
 8008cd2:	b2d2      	uxtb	r2, r2
 8008cd4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cda:	1c5a      	adds	r2, r3, #1
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	3b01      	subs	r3, #1
 8008cea:	b29a      	uxth	r2, r3
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d17b      	bne.n	8008df6 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d06:	e853 3f00 	ldrex	r3, [r3]
 8008d0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d12:	653b      	str	r3, [r7, #80]	; 0x50
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	461a      	mov	r2, r3
 8008d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d1c:	647b      	str	r3, [r7, #68]	; 0x44
 8008d1e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d24:	e841 2300 	strex	r3, r2, [r1]
 8008d28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d1e6      	bne.n	8008cfe <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	3308      	adds	r3, #8
 8008d36:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3a:	e853 3f00 	ldrex	r3, [r3]
 8008d3e:	623b      	str	r3, [r7, #32]
   return(result);
 8008d40:	6a3b      	ldr	r3, [r7, #32]
 8008d42:	f023 0301 	bic.w	r3, r3, #1
 8008d46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	3308      	adds	r3, #8
 8008d4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d50:	633a      	str	r2, [r7, #48]	; 0x30
 8008d52:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d58:	e841 2300 	strex	r3, r2, [r1]
 8008d5c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d1e5      	bne.n	8008d30 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2220      	movs	r2, #32
 8008d68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d12e      	bne.n	8008dde <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	e853 3f00 	ldrex	r3, [r3]
 8008d92:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f023 0310 	bic.w	r3, r3, #16
 8008d9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	461a      	mov	r2, r3
 8008da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008da4:	61fb      	str	r3, [r7, #28]
 8008da6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da8:	69b9      	ldr	r1, [r7, #24]
 8008daa:	69fa      	ldr	r2, [r7, #28]
 8008dac:	e841 2300 	strex	r3, r2, [r1]
 8008db0:	617b      	str	r3, [r7, #20]
   return(result);
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d1e6      	bne.n	8008d86 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	69db      	ldr	r3, [r3, #28]
 8008dbe:	f003 0310 	and.w	r3, r3, #16
 8008dc2:	2b10      	cmp	r3, #16
 8008dc4:	d103      	bne.n	8008dce <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2210      	movs	r2, #16
 8008dcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f7ff f9e4 	bl	80081a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ddc:	e00b      	b.n	8008df6 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f7f9 fdc8 	bl	8002974 <HAL_UART_RxCpltCallback>
}
 8008de4:	e007      	b.n	8008df6 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	699a      	ldr	r2, [r3, #24]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f042 0208 	orr.w	r2, r2, #8
 8008df4:	619a      	str	r2, [r3, #24]
}
 8008df6:	bf00      	nop
 8008df8:	3758      	adds	r7, #88	; 0x58
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b096      	sub	sp, #88	; 0x58
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e0c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e16:	2b22      	cmp	r3, #34	; 0x22
 8008e18:	f040 8098 	bne.w	8008f4c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e22:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e2a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008e2c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008e30:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008e34:	4013      	ands	r3, r2
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e3a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e40:	1c9a      	adds	r2, r3, #2
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d17b      	bne.n	8008f5c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e6c:	e853 3f00 	ldrex	r3, [r3]
 8008e70:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	461a      	mov	r2, r3
 8008e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e82:	643b      	str	r3, [r7, #64]	; 0x40
 8008e84:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e8a:	e841 2300 	strex	r3, r2, [r1]
 8008e8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d1e6      	bne.n	8008e64 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	3308      	adds	r3, #8
 8008e9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9e:	6a3b      	ldr	r3, [r7, #32]
 8008ea0:	e853 3f00 	ldrex	r3, [r3]
 8008ea4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	f023 0301 	bic.w	r3, r3, #1
 8008eac:	64bb      	str	r3, [r7, #72]	; 0x48
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	3308      	adds	r3, #8
 8008eb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008eb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008eb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ebe:	e841 2300 	strex	r3, r2, [r1]
 8008ec2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d1e5      	bne.n	8008e96 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2220      	movs	r2, #32
 8008ece:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d12e      	bne.n	8008f44 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	e853 3f00 	ldrex	r3, [r3]
 8008ef8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	f023 0310 	bic.w	r3, r3, #16
 8008f00:	647b      	str	r3, [r7, #68]	; 0x44
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	461a      	mov	r2, r3
 8008f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f0a:	61bb      	str	r3, [r7, #24]
 8008f0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0e:	6979      	ldr	r1, [r7, #20]
 8008f10:	69ba      	ldr	r2, [r7, #24]
 8008f12:	e841 2300 	strex	r3, r2, [r1]
 8008f16:	613b      	str	r3, [r7, #16]
   return(result);
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d1e6      	bne.n	8008eec <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	69db      	ldr	r3, [r3, #28]
 8008f24:	f003 0310 	and.w	r3, r3, #16
 8008f28:	2b10      	cmp	r3, #16
 8008f2a:	d103      	bne.n	8008f34 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2210      	movs	r2, #16
 8008f32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f7ff f931 	bl	80081a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f42:	e00b      	b.n	8008f5c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f7f9 fd15 	bl	8002974 <HAL_UART_RxCpltCallback>
}
 8008f4a:	e007      	b.n	8008f5c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	699a      	ldr	r2, [r3, #24]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f042 0208 	orr.w	r2, r2, #8
 8008f5a:	619a      	str	r2, [r3, #24]
}
 8008f5c:	bf00      	nop
 8008f5e:	3758      	adds	r7, #88	; 0x58
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <siprintf>:
 8008f64:	b40e      	push	{r1, r2, r3}
 8008f66:	b500      	push	{lr}
 8008f68:	b09c      	sub	sp, #112	; 0x70
 8008f6a:	ab1d      	add	r3, sp, #116	; 0x74
 8008f6c:	9002      	str	r0, [sp, #8]
 8008f6e:	9006      	str	r0, [sp, #24]
 8008f70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f74:	4809      	ldr	r0, [pc, #36]	; (8008f9c <siprintf+0x38>)
 8008f76:	9107      	str	r1, [sp, #28]
 8008f78:	9104      	str	r1, [sp, #16]
 8008f7a:	4909      	ldr	r1, [pc, #36]	; (8008fa0 <siprintf+0x3c>)
 8008f7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f80:	9105      	str	r1, [sp, #20]
 8008f82:	6800      	ldr	r0, [r0, #0]
 8008f84:	9301      	str	r3, [sp, #4]
 8008f86:	a902      	add	r1, sp, #8
 8008f88:	f000 f992 	bl	80092b0 <_svfiprintf_r>
 8008f8c:	9b02      	ldr	r3, [sp, #8]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	701a      	strb	r2, [r3, #0]
 8008f92:	b01c      	add	sp, #112	; 0x70
 8008f94:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f98:	b003      	add	sp, #12
 8008f9a:	4770      	bx	lr
 8008f9c:	200000d4 	.word	0x200000d4
 8008fa0:	ffff0208 	.word	0xffff0208

08008fa4 <memset>:
 8008fa4:	4402      	add	r2, r0
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d100      	bne.n	8008fae <memset+0xa>
 8008fac:	4770      	bx	lr
 8008fae:	f803 1b01 	strb.w	r1, [r3], #1
 8008fb2:	e7f9      	b.n	8008fa8 <memset+0x4>

08008fb4 <__errno>:
 8008fb4:	4b01      	ldr	r3, [pc, #4]	; (8008fbc <__errno+0x8>)
 8008fb6:	6818      	ldr	r0, [r3, #0]
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	200000d4 	.word	0x200000d4

08008fc0 <__libc_init_array>:
 8008fc0:	b570      	push	{r4, r5, r6, lr}
 8008fc2:	4d0d      	ldr	r5, [pc, #52]	; (8008ff8 <__libc_init_array+0x38>)
 8008fc4:	4c0d      	ldr	r4, [pc, #52]	; (8008ffc <__libc_init_array+0x3c>)
 8008fc6:	1b64      	subs	r4, r4, r5
 8008fc8:	10a4      	asrs	r4, r4, #2
 8008fca:	2600      	movs	r6, #0
 8008fcc:	42a6      	cmp	r6, r4
 8008fce:	d109      	bne.n	8008fe4 <__libc_init_array+0x24>
 8008fd0:	4d0b      	ldr	r5, [pc, #44]	; (8009000 <__libc_init_array+0x40>)
 8008fd2:	4c0c      	ldr	r4, [pc, #48]	; (8009004 <__libc_init_array+0x44>)
 8008fd4:	f000 fc6a 	bl	80098ac <_init>
 8008fd8:	1b64      	subs	r4, r4, r5
 8008fda:	10a4      	asrs	r4, r4, #2
 8008fdc:	2600      	movs	r6, #0
 8008fde:	42a6      	cmp	r6, r4
 8008fe0:	d105      	bne.n	8008fee <__libc_init_array+0x2e>
 8008fe2:	bd70      	pop	{r4, r5, r6, pc}
 8008fe4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fe8:	4798      	blx	r3
 8008fea:	3601      	adds	r6, #1
 8008fec:	e7ee      	b.n	8008fcc <__libc_init_array+0xc>
 8008fee:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ff2:	4798      	blx	r3
 8008ff4:	3601      	adds	r6, #1
 8008ff6:	e7f2      	b.n	8008fde <__libc_init_array+0x1e>
 8008ff8:	080099c8 	.word	0x080099c8
 8008ffc:	080099c8 	.word	0x080099c8
 8009000:	080099c8 	.word	0x080099c8
 8009004:	080099cc 	.word	0x080099cc

08009008 <__retarget_lock_acquire_recursive>:
 8009008:	4770      	bx	lr

0800900a <__retarget_lock_release_recursive>:
 800900a:	4770      	bx	lr

0800900c <_free_r>:
 800900c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800900e:	2900      	cmp	r1, #0
 8009010:	d044      	beq.n	800909c <_free_r+0x90>
 8009012:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009016:	9001      	str	r0, [sp, #4]
 8009018:	2b00      	cmp	r3, #0
 800901a:	f1a1 0404 	sub.w	r4, r1, #4
 800901e:	bfb8      	it	lt
 8009020:	18e4      	addlt	r4, r4, r3
 8009022:	f000 f8df 	bl	80091e4 <__malloc_lock>
 8009026:	4a1e      	ldr	r2, [pc, #120]	; (80090a0 <_free_r+0x94>)
 8009028:	9801      	ldr	r0, [sp, #4]
 800902a:	6813      	ldr	r3, [r2, #0]
 800902c:	b933      	cbnz	r3, 800903c <_free_r+0x30>
 800902e:	6063      	str	r3, [r4, #4]
 8009030:	6014      	str	r4, [r2, #0]
 8009032:	b003      	add	sp, #12
 8009034:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009038:	f000 b8da 	b.w	80091f0 <__malloc_unlock>
 800903c:	42a3      	cmp	r3, r4
 800903e:	d908      	bls.n	8009052 <_free_r+0x46>
 8009040:	6825      	ldr	r5, [r4, #0]
 8009042:	1961      	adds	r1, r4, r5
 8009044:	428b      	cmp	r3, r1
 8009046:	bf01      	itttt	eq
 8009048:	6819      	ldreq	r1, [r3, #0]
 800904a:	685b      	ldreq	r3, [r3, #4]
 800904c:	1949      	addeq	r1, r1, r5
 800904e:	6021      	streq	r1, [r4, #0]
 8009050:	e7ed      	b.n	800902e <_free_r+0x22>
 8009052:	461a      	mov	r2, r3
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	b10b      	cbz	r3, 800905c <_free_r+0x50>
 8009058:	42a3      	cmp	r3, r4
 800905a:	d9fa      	bls.n	8009052 <_free_r+0x46>
 800905c:	6811      	ldr	r1, [r2, #0]
 800905e:	1855      	adds	r5, r2, r1
 8009060:	42a5      	cmp	r5, r4
 8009062:	d10b      	bne.n	800907c <_free_r+0x70>
 8009064:	6824      	ldr	r4, [r4, #0]
 8009066:	4421      	add	r1, r4
 8009068:	1854      	adds	r4, r2, r1
 800906a:	42a3      	cmp	r3, r4
 800906c:	6011      	str	r1, [r2, #0]
 800906e:	d1e0      	bne.n	8009032 <_free_r+0x26>
 8009070:	681c      	ldr	r4, [r3, #0]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	6053      	str	r3, [r2, #4]
 8009076:	440c      	add	r4, r1
 8009078:	6014      	str	r4, [r2, #0]
 800907a:	e7da      	b.n	8009032 <_free_r+0x26>
 800907c:	d902      	bls.n	8009084 <_free_r+0x78>
 800907e:	230c      	movs	r3, #12
 8009080:	6003      	str	r3, [r0, #0]
 8009082:	e7d6      	b.n	8009032 <_free_r+0x26>
 8009084:	6825      	ldr	r5, [r4, #0]
 8009086:	1961      	adds	r1, r4, r5
 8009088:	428b      	cmp	r3, r1
 800908a:	bf04      	itt	eq
 800908c:	6819      	ldreq	r1, [r3, #0]
 800908e:	685b      	ldreq	r3, [r3, #4]
 8009090:	6063      	str	r3, [r4, #4]
 8009092:	bf04      	itt	eq
 8009094:	1949      	addeq	r1, r1, r5
 8009096:	6021      	streq	r1, [r4, #0]
 8009098:	6054      	str	r4, [r2, #4]
 800909a:	e7ca      	b.n	8009032 <_free_r+0x26>
 800909c:	b003      	add	sp, #12
 800909e:	bd30      	pop	{r4, r5, pc}
 80090a0:	200004fc 	.word	0x200004fc

080090a4 <sbrk_aligned>:
 80090a4:	b570      	push	{r4, r5, r6, lr}
 80090a6:	4e0e      	ldr	r6, [pc, #56]	; (80090e0 <sbrk_aligned+0x3c>)
 80090a8:	460c      	mov	r4, r1
 80090aa:	6831      	ldr	r1, [r6, #0]
 80090ac:	4605      	mov	r5, r0
 80090ae:	b911      	cbnz	r1, 80090b6 <sbrk_aligned+0x12>
 80090b0:	f000 fba6 	bl	8009800 <_sbrk_r>
 80090b4:	6030      	str	r0, [r6, #0]
 80090b6:	4621      	mov	r1, r4
 80090b8:	4628      	mov	r0, r5
 80090ba:	f000 fba1 	bl	8009800 <_sbrk_r>
 80090be:	1c43      	adds	r3, r0, #1
 80090c0:	d00a      	beq.n	80090d8 <sbrk_aligned+0x34>
 80090c2:	1cc4      	adds	r4, r0, #3
 80090c4:	f024 0403 	bic.w	r4, r4, #3
 80090c8:	42a0      	cmp	r0, r4
 80090ca:	d007      	beq.n	80090dc <sbrk_aligned+0x38>
 80090cc:	1a21      	subs	r1, r4, r0
 80090ce:	4628      	mov	r0, r5
 80090d0:	f000 fb96 	bl	8009800 <_sbrk_r>
 80090d4:	3001      	adds	r0, #1
 80090d6:	d101      	bne.n	80090dc <sbrk_aligned+0x38>
 80090d8:	f04f 34ff 	mov.w	r4, #4294967295
 80090dc:	4620      	mov	r0, r4
 80090de:	bd70      	pop	{r4, r5, r6, pc}
 80090e0:	20000500 	.word	0x20000500

080090e4 <_malloc_r>:
 80090e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090e8:	1ccd      	adds	r5, r1, #3
 80090ea:	f025 0503 	bic.w	r5, r5, #3
 80090ee:	3508      	adds	r5, #8
 80090f0:	2d0c      	cmp	r5, #12
 80090f2:	bf38      	it	cc
 80090f4:	250c      	movcc	r5, #12
 80090f6:	2d00      	cmp	r5, #0
 80090f8:	4607      	mov	r7, r0
 80090fa:	db01      	blt.n	8009100 <_malloc_r+0x1c>
 80090fc:	42a9      	cmp	r1, r5
 80090fe:	d905      	bls.n	800910c <_malloc_r+0x28>
 8009100:	230c      	movs	r3, #12
 8009102:	603b      	str	r3, [r7, #0]
 8009104:	2600      	movs	r6, #0
 8009106:	4630      	mov	r0, r6
 8009108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800910c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80091e0 <_malloc_r+0xfc>
 8009110:	f000 f868 	bl	80091e4 <__malloc_lock>
 8009114:	f8d8 3000 	ldr.w	r3, [r8]
 8009118:	461c      	mov	r4, r3
 800911a:	bb5c      	cbnz	r4, 8009174 <_malloc_r+0x90>
 800911c:	4629      	mov	r1, r5
 800911e:	4638      	mov	r0, r7
 8009120:	f7ff ffc0 	bl	80090a4 <sbrk_aligned>
 8009124:	1c43      	adds	r3, r0, #1
 8009126:	4604      	mov	r4, r0
 8009128:	d155      	bne.n	80091d6 <_malloc_r+0xf2>
 800912a:	f8d8 4000 	ldr.w	r4, [r8]
 800912e:	4626      	mov	r6, r4
 8009130:	2e00      	cmp	r6, #0
 8009132:	d145      	bne.n	80091c0 <_malloc_r+0xdc>
 8009134:	2c00      	cmp	r4, #0
 8009136:	d048      	beq.n	80091ca <_malloc_r+0xe6>
 8009138:	6823      	ldr	r3, [r4, #0]
 800913a:	4631      	mov	r1, r6
 800913c:	4638      	mov	r0, r7
 800913e:	eb04 0903 	add.w	r9, r4, r3
 8009142:	f000 fb5d 	bl	8009800 <_sbrk_r>
 8009146:	4581      	cmp	r9, r0
 8009148:	d13f      	bne.n	80091ca <_malloc_r+0xe6>
 800914a:	6821      	ldr	r1, [r4, #0]
 800914c:	1a6d      	subs	r5, r5, r1
 800914e:	4629      	mov	r1, r5
 8009150:	4638      	mov	r0, r7
 8009152:	f7ff ffa7 	bl	80090a4 <sbrk_aligned>
 8009156:	3001      	adds	r0, #1
 8009158:	d037      	beq.n	80091ca <_malloc_r+0xe6>
 800915a:	6823      	ldr	r3, [r4, #0]
 800915c:	442b      	add	r3, r5
 800915e:	6023      	str	r3, [r4, #0]
 8009160:	f8d8 3000 	ldr.w	r3, [r8]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d038      	beq.n	80091da <_malloc_r+0xf6>
 8009168:	685a      	ldr	r2, [r3, #4]
 800916a:	42a2      	cmp	r2, r4
 800916c:	d12b      	bne.n	80091c6 <_malloc_r+0xe2>
 800916e:	2200      	movs	r2, #0
 8009170:	605a      	str	r2, [r3, #4]
 8009172:	e00f      	b.n	8009194 <_malloc_r+0xb0>
 8009174:	6822      	ldr	r2, [r4, #0]
 8009176:	1b52      	subs	r2, r2, r5
 8009178:	d41f      	bmi.n	80091ba <_malloc_r+0xd6>
 800917a:	2a0b      	cmp	r2, #11
 800917c:	d917      	bls.n	80091ae <_malloc_r+0xca>
 800917e:	1961      	adds	r1, r4, r5
 8009180:	42a3      	cmp	r3, r4
 8009182:	6025      	str	r5, [r4, #0]
 8009184:	bf18      	it	ne
 8009186:	6059      	strne	r1, [r3, #4]
 8009188:	6863      	ldr	r3, [r4, #4]
 800918a:	bf08      	it	eq
 800918c:	f8c8 1000 	streq.w	r1, [r8]
 8009190:	5162      	str	r2, [r4, r5]
 8009192:	604b      	str	r3, [r1, #4]
 8009194:	4638      	mov	r0, r7
 8009196:	f104 060b 	add.w	r6, r4, #11
 800919a:	f000 f829 	bl	80091f0 <__malloc_unlock>
 800919e:	f026 0607 	bic.w	r6, r6, #7
 80091a2:	1d23      	adds	r3, r4, #4
 80091a4:	1af2      	subs	r2, r6, r3
 80091a6:	d0ae      	beq.n	8009106 <_malloc_r+0x22>
 80091a8:	1b9b      	subs	r3, r3, r6
 80091aa:	50a3      	str	r3, [r4, r2]
 80091ac:	e7ab      	b.n	8009106 <_malloc_r+0x22>
 80091ae:	42a3      	cmp	r3, r4
 80091b0:	6862      	ldr	r2, [r4, #4]
 80091b2:	d1dd      	bne.n	8009170 <_malloc_r+0x8c>
 80091b4:	f8c8 2000 	str.w	r2, [r8]
 80091b8:	e7ec      	b.n	8009194 <_malloc_r+0xb0>
 80091ba:	4623      	mov	r3, r4
 80091bc:	6864      	ldr	r4, [r4, #4]
 80091be:	e7ac      	b.n	800911a <_malloc_r+0x36>
 80091c0:	4634      	mov	r4, r6
 80091c2:	6876      	ldr	r6, [r6, #4]
 80091c4:	e7b4      	b.n	8009130 <_malloc_r+0x4c>
 80091c6:	4613      	mov	r3, r2
 80091c8:	e7cc      	b.n	8009164 <_malloc_r+0x80>
 80091ca:	230c      	movs	r3, #12
 80091cc:	603b      	str	r3, [r7, #0]
 80091ce:	4638      	mov	r0, r7
 80091d0:	f000 f80e 	bl	80091f0 <__malloc_unlock>
 80091d4:	e797      	b.n	8009106 <_malloc_r+0x22>
 80091d6:	6025      	str	r5, [r4, #0]
 80091d8:	e7dc      	b.n	8009194 <_malloc_r+0xb0>
 80091da:	605b      	str	r3, [r3, #4]
 80091dc:	deff      	udf	#255	; 0xff
 80091de:	bf00      	nop
 80091e0:	200004fc 	.word	0x200004fc

080091e4 <__malloc_lock>:
 80091e4:	4801      	ldr	r0, [pc, #4]	; (80091ec <__malloc_lock+0x8>)
 80091e6:	f7ff bf0f 	b.w	8009008 <__retarget_lock_acquire_recursive>
 80091ea:	bf00      	nop
 80091ec:	200004f8 	.word	0x200004f8

080091f0 <__malloc_unlock>:
 80091f0:	4801      	ldr	r0, [pc, #4]	; (80091f8 <__malloc_unlock+0x8>)
 80091f2:	f7ff bf0a 	b.w	800900a <__retarget_lock_release_recursive>
 80091f6:	bf00      	nop
 80091f8:	200004f8 	.word	0x200004f8

080091fc <__ssputs_r>:
 80091fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009200:	688e      	ldr	r6, [r1, #8]
 8009202:	461f      	mov	r7, r3
 8009204:	42be      	cmp	r6, r7
 8009206:	680b      	ldr	r3, [r1, #0]
 8009208:	4682      	mov	sl, r0
 800920a:	460c      	mov	r4, r1
 800920c:	4690      	mov	r8, r2
 800920e:	d82c      	bhi.n	800926a <__ssputs_r+0x6e>
 8009210:	898a      	ldrh	r2, [r1, #12]
 8009212:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009216:	d026      	beq.n	8009266 <__ssputs_r+0x6a>
 8009218:	6965      	ldr	r5, [r4, #20]
 800921a:	6909      	ldr	r1, [r1, #16]
 800921c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009220:	eba3 0901 	sub.w	r9, r3, r1
 8009224:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009228:	1c7b      	adds	r3, r7, #1
 800922a:	444b      	add	r3, r9
 800922c:	106d      	asrs	r5, r5, #1
 800922e:	429d      	cmp	r5, r3
 8009230:	bf38      	it	cc
 8009232:	461d      	movcc	r5, r3
 8009234:	0553      	lsls	r3, r2, #21
 8009236:	d527      	bpl.n	8009288 <__ssputs_r+0x8c>
 8009238:	4629      	mov	r1, r5
 800923a:	f7ff ff53 	bl	80090e4 <_malloc_r>
 800923e:	4606      	mov	r6, r0
 8009240:	b360      	cbz	r0, 800929c <__ssputs_r+0xa0>
 8009242:	6921      	ldr	r1, [r4, #16]
 8009244:	464a      	mov	r2, r9
 8009246:	f000 faeb 	bl	8009820 <memcpy>
 800924a:	89a3      	ldrh	r3, [r4, #12]
 800924c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009254:	81a3      	strh	r3, [r4, #12]
 8009256:	6126      	str	r6, [r4, #16]
 8009258:	6165      	str	r5, [r4, #20]
 800925a:	444e      	add	r6, r9
 800925c:	eba5 0509 	sub.w	r5, r5, r9
 8009260:	6026      	str	r6, [r4, #0]
 8009262:	60a5      	str	r5, [r4, #8]
 8009264:	463e      	mov	r6, r7
 8009266:	42be      	cmp	r6, r7
 8009268:	d900      	bls.n	800926c <__ssputs_r+0x70>
 800926a:	463e      	mov	r6, r7
 800926c:	6820      	ldr	r0, [r4, #0]
 800926e:	4632      	mov	r2, r6
 8009270:	4641      	mov	r1, r8
 8009272:	f000 faab 	bl	80097cc <memmove>
 8009276:	68a3      	ldr	r3, [r4, #8]
 8009278:	1b9b      	subs	r3, r3, r6
 800927a:	60a3      	str	r3, [r4, #8]
 800927c:	6823      	ldr	r3, [r4, #0]
 800927e:	4433      	add	r3, r6
 8009280:	6023      	str	r3, [r4, #0]
 8009282:	2000      	movs	r0, #0
 8009284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009288:	462a      	mov	r2, r5
 800928a:	f000 fad7 	bl	800983c <_realloc_r>
 800928e:	4606      	mov	r6, r0
 8009290:	2800      	cmp	r0, #0
 8009292:	d1e0      	bne.n	8009256 <__ssputs_r+0x5a>
 8009294:	6921      	ldr	r1, [r4, #16]
 8009296:	4650      	mov	r0, sl
 8009298:	f7ff feb8 	bl	800900c <_free_r>
 800929c:	230c      	movs	r3, #12
 800929e:	f8ca 3000 	str.w	r3, [sl]
 80092a2:	89a3      	ldrh	r3, [r4, #12]
 80092a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092a8:	81a3      	strh	r3, [r4, #12]
 80092aa:	f04f 30ff 	mov.w	r0, #4294967295
 80092ae:	e7e9      	b.n	8009284 <__ssputs_r+0x88>

080092b0 <_svfiprintf_r>:
 80092b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b4:	4698      	mov	r8, r3
 80092b6:	898b      	ldrh	r3, [r1, #12]
 80092b8:	061b      	lsls	r3, r3, #24
 80092ba:	b09d      	sub	sp, #116	; 0x74
 80092bc:	4607      	mov	r7, r0
 80092be:	460d      	mov	r5, r1
 80092c0:	4614      	mov	r4, r2
 80092c2:	d50e      	bpl.n	80092e2 <_svfiprintf_r+0x32>
 80092c4:	690b      	ldr	r3, [r1, #16]
 80092c6:	b963      	cbnz	r3, 80092e2 <_svfiprintf_r+0x32>
 80092c8:	2140      	movs	r1, #64	; 0x40
 80092ca:	f7ff ff0b 	bl	80090e4 <_malloc_r>
 80092ce:	6028      	str	r0, [r5, #0]
 80092d0:	6128      	str	r0, [r5, #16]
 80092d2:	b920      	cbnz	r0, 80092de <_svfiprintf_r+0x2e>
 80092d4:	230c      	movs	r3, #12
 80092d6:	603b      	str	r3, [r7, #0]
 80092d8:	f04f 30ff 	mov.w	r0, #4294967295
 80092dc:	e0d0      	b.n	8009480 <_svfiprintf_r+0x1d0>
 80092de:	2340      	movs	r3, #64	; 0x40
 80092e0:	616b      	str	r3, [r5, #20]
 80092e2:	2300      	movs	r3, #0
 80092e4:	9309      	str	r3, [sp, #36]	; 0x24
 80092e6:	2320      	movs	r3, #32
 80092e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80092f0:	2330      	movs	r3, #48	; 0x30
 80092f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009498 <_svfiprintf_r+0x1e8>
 80092f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092fa:	f04f 0901 	mov.w	r9, #1
 80092fe:	4623      	mov	r3, r4
 8009300:	469a      	mov	sl, r3
 8009302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009306:	b10a      	cbz	r2, 800930c <_svfiprintf_r+0x5c>
 8009308:	2a25      	cmp	r2, #37	; 0x25
 800930a:	d1f9      	bne.n	8009300 <_svfiprintf_r+0x50>
 800930c:	ebba 0b04 	subs.w	fp, sl, r4
 8009310:	d00b      	beq.n	800932a <_svfiprintf_r+0x7a>
 8009312:	465b      	mov	r3, fp
 8009314:	4622      	mov	r2, r4
 8009316:	4629      	mov	r1, r5
 8009318:	4638      	mov	r0, r7
 800931a:	f7ff ff6f 	bl	80091fc <__ssputs_r>
 800931e:	3001      	adds	r0, #1
 8009320:	f000 80a9 	beq.w	8009476 <_svfiprintf_r+0x1c6>
 8009324:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009326:	445a      	add	r2, fp
 8009328:	9209      	str	r2, [sp, #36]	; 0x24
 800932a:	f89a 3000 	ldrb.w	r3, [sl]
 800932e:	2b00      	cmp	r3, #0
 8009330:	f000 80a1 	beq.w	8009476 <_svfiprintf_r+0x1c6>
 8009334:	2300      	movs	r3, #0
 8009336:	f04f 32ff 	mov.w	r2, #4294967295
 800933a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800933e:	f10a 0a01 	add.w	sl, sl, #1
 8009342:	9304      	str	r3, [sp, #16]
 8009344:	9307      	str	r3, [sp, #28]
 8009346:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800934a:	931a      	str	r3, [sp, #104]	; 0x68
 800934c:	4654      	mov	r4, sl
 800934e:	2205      	movs	r2, #5
 8009350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009354:	4850      	ldr	r0, [pc, #320]	; (8009498 <_svfiprintf_r+0x1e8>)
 8009356:	f7f6 ff5b 	bl	8000210 <memchr>
 800935a:	9a04      	ldr	r2, [sp, #16]
 800935c:	b9d8      	cbnz	r0, 8009396 <_svfiprintf_r+0xe6>
 800935e:	06d0      	lsls	r0, r2, #27
 8009360:	bf44      	itt	mi
 8009362:	2320      	movmi	r3, #32
 8009364:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009368:	0711      	lsls	r1, r2, #28
 800936a:	bf44      	itt	mi
 800936c:	232b      	movmi	r3, #43	; 0x2b
 800936e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009372:	f89a 3000 	ldrb.w	r3, [sl]
 8009376:	2b2a      	cmp	r3, #42	; 0x2a
 8009378:	d015      	beq.n	80093a6 <_svfiprintf_r+0xf6>
 800937a:	9a07      	ldr	r2, [sp, #28]
 800937c:	4654      	mov	r4, sl
 800937e:	2000      	movs	r0, #0
 8009380:	f04f 0c0a 	mov.w	ip, #10
 8009384:	4621      	mov	r1, r4
 8009386:	f811 3b01 	ldrb.w	r3, [r1], #1
 800938a:	3b30      	subs	r3, #48	; 0x30
 800938c:	2b09      	cmp	r3, #9
 800938e:	d94d      	bls.n	800942c <_svfiprintf_r+0x17c>
 8009390:	b1b0      	cbz	r0, 80093c0 <_svfiprintf_r+0x110>
 8009392:	9207      	str	r2, [sp, #28]
 8009394:	e014      	b.n	80093c0 <_svfiprintf_r+0x110>
 8009396:	eba0 0308 	sub.w	r3, r0, r8
 800939a:	fa09 f303 	lsl.w	r3, r9, r3
 800939e:	4313      	orrs	r3, r2
 80093a0:	9304      	str	r3, [sp, #16]
 80093a2:	46a2      	mov	sl, r4
 80093a4:	e7d2      	b.n	800934c <_svfiprintf_r+0x9c>
 80093a6:	9b03      	ldr	r3, [sp, #12]
 80093a8:	1d19      	adds	r1, r3, #4
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	9103      	str	r1, [sp, #12]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	bfbb      	ittet	lt
 80093b2:	425b      	neglt	r3, r3
 80093b4:	f042 0202 	orrlt.w	r2, r2, #2
 80093b8:	9307      	strge	r3, [sp, #28]
 80093ba:	9307      	strlt	r3, [sp, #28]
 80093bc:	bfb8      	it	lt
 80093be:	9204      	strlt	r2, [sp, #16]
 80093c0:	7823      	ldrb	r3, [r4, #0]
 80093c2:	2b2e      	cmp	r3, #46	; 0x2e
 80093c4:	d10c      	bne.n	80093e0 <_svfiprintf_r+0x130>
 80093c6:	7863      	ldrb	r3, [r4, #1]
 80093c8:	2b2a      	cmp	r3, #42	; 0x2a
 80093ca:	d134      	bne.n	8009436 <_svfiprintf_r+0x186>
 80093cc:	9b03      	ldr	r3, [sp, #12]
 80093ce:	1d1a      	adds	r2, r3, #4
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	9203      	str	r2, [sp, #12]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	bfb8      	it	lt
 80093d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80093dc:	3402      	adds	r4, #2
 80093de:	9305      	str	r3, [sp, #20]
 80093e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80094a8 <_svfiprintf_r+0x1f8>
 80093e4:	7821      	ldrb	r1, [r4, #0]
 80093e6:	2203      	movs	r2, #3
 80093e8:	4650      	mov	r0, sl
 80093ea:	f7f6 ff11 	bl	8000210 <memchr>
 80093ee:	b138      	cbz	r0, 8009400 <_svfiprintf_r+0x150>
 80093f0:	9b04      	ldr	r3, [sp, #16]
 80093f2:	eba0 000a 	sub.w	r0, r0, sl
 80093f6:	2240      	movs	r2, #64	; 0x40
 80093f8:	4082      	lsls	r2, r0
 80093fa:	4313      	orrs	r3, r2
 80093fc:	3401      	adds	r4, #1
 80093fe:	9304      	str	r3, [sp, #16]
 8009400:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009404:	4825      	ldr	r0, [pc, #148]	; (800949c <_svfiprintf_r+0x1ec>)
 8009406:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800940a:	2206      	movs	r2, #6
 800940c:	f7f6 ff00 	bl	8000210 <memchr>
 8009410:	2800      	cmp	r0, #0
 8009412:	d038      	beq.n	8009486 <_svfiprintf_r+0x1d6>
 8009414:	4b22      	ldr	r3, [pc, #136]	; (80094a0 <_svfiprintf_r+0x1f0>)
 8009416:	bb1b      	cbnz	r3, 8009460 <_svfiprintf_r+0x1b0>
 8009418:	9b03      	ldr	r3, [sp, #12]
 800941a:	3307      	adds	r3, #7
 800941c:	f023 0307 	bic.w	r3, r3, #7
 8009420:	3308      	adds	r3, #8
 8009422:	9303      	str	r3, [sp, #12]
 8009424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009426:	4433      	add	r3, r6
 8009428:	9309      	str	r3, [sp, #36]	; 0x24
 800942a:	e768      	b.n	80092fe <_svfiprintf_r+0x4e>
 800942c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009430:	460c      	mov	r4, r1
 8009432:	2001      	movs	r0, #1
 8009434:	e7a6      	b.n	8009384 <_svfiprintf_r+0xd4>
 8009436:	2300      	movs	r3, #0
 8009438:	3401      	adds	r4, #1
 800943a:	9305      	str	r3, [sp, #20]
 800943c:	4619      	mov	r1, r3
 800943e:	f04f 0c0a 	mov.w	ip, #10
 8009442:	4620      	mov	r0, r4
 8009444:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009448:	3a30      	subs	r2, #48	; 0x30
 800944a:	2a09      	cmp	r2, #9
 800944c:	d903      	bls.n	8009456 <_svfiprintf_r+0x1a6>
 800944e:	2b00      	cmp	r3, #0
 8009450:	d0c6      	beq.n	80093e0 <_svfiprintf_r+0x130>
 8009452:	9105      	str	r1, [sp, #20]
 8009454:	e7c4      	b.n	80093e0 <_svfiprintf_r+0x130>
 8009456:	fb0c 2101 	mla	r1, ip, r1, r2
 800945a:	4604      	mov	r4, r0
 800945c:	2301      	movs	r3, #1
 800945e:	e7f0      	b.n	8009442 <_svfiprintf_r+0x192>
 8009460:	ab03      	add	r3, sp, #12
 8009462:	9300      	str	r3, [sp, #0]
 8009464:	462a      	mov	r2, r5
 8009466:	4b0f      	ldr	r3, [pc, #60]	; (80094a4 <_svfiprintf_r+0x1f4>)
 8009468:	a904      	add	r1, sp, #16
 800946a:	4638      	mov	r0, r7
 800946c:	f3af 8000 	nop.w
 8009470:	1c42      	adds	r2, r0, #1
 8009472:	4606      	mov	r6, r0
 8009474:	d1d6      	bne.n	8009424 <_svfiprintf_r+0x174>
 8009476:	89ab      	ldrh	r3, [r5, #12]
 8009478:	065b      	lsls	r3, r3, #25
 800947a:	f53f af2d 	bmi.w	80092d8 <_svfiprintf_r+0x28>
 800947e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009480:	b01d      	add	sp, #116	; 0x74
 8009482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009486:	ab03      	add	r3, sp, #12
 8009488:	9300      	str	r3, [sp, #0]
 800948a:	462a      	mov	r2, r5
 800948c:	4b05      	ldr	r3, [pc, #20]	; (80094a4 <_svfiprintf_r+0x1f4>)
 800948e:	a904      	add	r1, sp, #16
 8009490:	4638      	mov	r0, r7
 8009492:	f000 f879 	bl	8009588 <_printf_i>
 8009496:	e7eb      	b.n	8009470 <_svfiprintf_r+0x1c0>
 8009498:	0800998c 	.word	0x0800998c
 800949c:	08009996 	.word	0x08009996
 80094a0:	00000000 	.word	0x00000000
 80094a4:	080091fd 	.word	0x080091fd
 80094a8:	08009992 	.word	0x08009992

080094ac <_printf_common>:
 80094ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094b0:	4616      	mov	r6, r2
 80094b2:	4699      	mov	r9, r3
 80094b4:	688a      	ldr	r2, [r1, #8]
 80094b6:	690b      	ldr	r3, [r1, #16]
 80094b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094bc:	4293      	cmp	r3, r2
 80094be:	bfb8      	it	lt
 80094c0:	4613      	movlt	r3, r2
 80094c2:	6033      	str	r3, [r6, #0]
 80094c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094c8:	4607      	mov	r7, r0
 80094ca:	460c      	mov	r4, r1
 80094cc:	b10a      	cbz	r2, 80094d2 <_printf_common+0x26>
 80094ce:	3301      	adds	r3, #1
 80094d0:	6033      	str	r3, [r6, #0]
 80094d2:	6823      	ldr	r3, [r4, #0]
 80094d4:	0699      	lsls	r1, r3, #26
 80094d6:	bf42      	ittt	mi
 80094d8:	6833      	ldrmi	r3, [r6, #0]
 80094da:	3302      	addmi	r3, #2
 80094dc:	6033      	strmi	r3, [r6, #0]
 80094de:	6825      	ldr	r5, [r4, #0]
 80094e0:	f015 0506 	ands.w	r5, r5, #6
 80094e4:	d106      	bne.n	80094f4 <_printf_common+0x48>
 80094e6:	f104 0a19 	add.w	sl, r4, #25
 80094ea:	68e3      	ldr	r3, [r4, #12]
 80094ec:	6832      	ldr	r2, [r6, #0]
 80094ee:	1a9b      	subs	r3, r3, r2
 80094f0:	42ab      	cmp	r3, r5
 80094f2:	dc26      	bgt.n	8009542 <_printf_common+0x96>
 80094f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80094f8:	1e13      	subs	r3, r2, #0
 80094fa:	6822      	ldr	r2, [r4, #0]
 80094fc:	bf18      	it	ne
 80094fe:	2301      	movne	r3, #1
 8009500:	0692      	lsls	r2, r2, #26
 8009502:	d42b      	bmi.n	800955c <_printf_common+0xb0>
 8009504:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009508:	4649      	mov	r1, r9
 800950a:	4638      	mov	r0, r7
 800950c:	47c0      	blx	r8
 800950e:	3001      	adds	r0, #1
 8009510:	d01e      	beq.n	8009550 <_printf_common+0xa4>
 8009512:	6823      	ldr	r3, [r4, #0]
 8009514:	6922      	ldr	r2, [r4, #16]
 8009516:	f003 0306 	and.w	r3, r3, #6
 800951a:	2b04      	cmp	r3, #4
 800951c:	bf02      	ittt	eq
 800951e:	68e5      	ldreq	r5, [r4, #12]
 8009520:	6833      	ldreq	r3, [r6, #0]
 8009522:	1aed      	subeq	r5, r5, r3
 8009524:	68a3      	ldr	r3, [r4, #8]
 8009526:	bf0c      	ite	eq
 8009528:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800952c:	2500      	movne	r5, #0
 800952e:	4293      	cmp	r3, r2
 8009530:	bfc4      	itt	gt
 8009532:	1a9b      	subgt	r3, r3, r2
 8009534:	18ed      	addgt	r5, r5, r3
 8009536:	2600      	movs	r6, #0
 8009538:	341a      	adds	r4, #26
 800953a:	42b5      	cmp	r5, r6
 800953c:	d11a      	bne.n	8009574 <_printf_common+0xc8>
 800953e:	2000      	movs	r0, #0
 8009540:	e008      	b.n	8009554 <_printf_common+0xa8>
 8009542:	2301      	movs	r3, #1
 8009544:	4652      	mov	r2, sl
 8009546:	4649      	mov	r1, r9
 8009548:	4638      	mov	r0, r7
 800954a:	47c0      	blx	r8
 800954c:	3001      	adds	r0, #1
 800954e:	d103      	bne.n	8009558 <_printf_common+0xac>
 8009550:	f04f 30ff 	mov.w	r0, #4294967295
 8009554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009558:	3501      	adds	r5, #1
 800955a:	e7c6      	b.n	80094ea <_printf_common+0x3e>
 800955c:	18e1      	adds	r1, r4, r3
 800955e:	1c5a      	adds	r2, r3, #1
 8009560:	2030      	movs	r0, #48	; 0x30
 8009562:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009566:	4422      	add	r2, r4
 8009568:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800956c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009570:	3302      	adds	r3, #2
 8009572:	e7c7      	b.n	8009504 <_printf_common+0x58>
 8009574:	2301      	movs	r3, #1
 8009576:	4622      	mov	r2, r4
 8009578:	4649      	mov	r1, r9
 800957a:	4638      	mov	r0, r7
 800957c:	47c0      	blx	r8
 800957e:	3001      	adds	r0, #1
 8009580:	d0e6      	beq.n	8009550 <_printf_common+0xa4>
 8009582:	3601      	adds	r6, #1
 8009584:	e7d9      	b.n	800953a <_printf_common+0x8e>
	...

08009588 <_printf_i>:
 8009588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800958c:	7e0f      	ldrb	r7, [r1, #24]
 800958e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009590:	2f78      	cmp	r7, #120	; 0x78
 8009592:	4691      	mov	r9, r2
 8009594:	4680      	mov	r8, r0
 8009596:	460c      	mov	r4, r1
 8009598:	469a      	mov	sl, r3
 800959a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800959e:	d807      	bhi.n	80095b0 <_printf_i+0x28>
 80095a0:	2f62      	cmp	r7, #98	; 0x62
 80095a2:	d80a      	bhi.n	80095ba <_printf_i+0x32>
 80095a4:	2f00      	cmp	r7, #0
 80095a6:	f000 80d4 	beq.w	8009752 <_printf_i+0x1ca>
 80095aa:	2f58      	cmp	r7, #88	; 0x58
 80095ac:	f000 80c0 	beq.w	8009730 <_printf_i+0x1a8>
 80095b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80095b8:	e03a      	b.n	8009630 <_printf_i+0xa8>
 80095ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80095be:	2b15      	cmp	r3, #21
 80095c0:	d8f6      	bhi.n	80095b0 <_printf_i+0x28>
 80095c2:	a101      	add	r1, pc, #4	; (adr r1, 80095c8 <_printf_i+0x40>)
 80095c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095c8:	08009621 	.word	0x08009621
 80095cc:	08009635 	.word	0x08009635
 80095d0:	080095b1 	.word	0x080095b1
 80095d4:	080095b1 	.word	0x080095b1
 80095d8:	080095b1 	.word	0x080095b1
 80095dc:	080095b1 	.word	0x080095b1
 80095e0:	08009635 	.word	0x08009635
 80095e4:	080095b1 	.word	0x080095b1
 80095e8:	080095b1 	.word	0x080095b1
 80095ec:	080095b1 	.word	0x080095b1
 80095f0:	080095b1 	.word	0x080095b1
 80095f4:	08009739 	.word	0x08009739
 80095f8:	08009661 	.word	0x08009661
 80095fc:	080096f3 	.word	0x080096f3
 8009600:	080095b1 	.word	0x080095b1
 8009604:	080095b1 	.word	0x080095b1
 8009608:	0800975b 	.word	0x0800975b
 800960c:	080095b1 	.word	0x080095b1
 8009610:	08009661 	.word	0x08009661
 8009614:	080095b1 	.word	0x080095b1
 8009618:	080095b1 	.word	0x080095b1
 800961c:	080096fb 	.word	0x080096fb
 8009620:	682b      	ldr	r3, [r5, #0]
 8009622:	1d1a      	adds	r2, r3, #4
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	602a      	str	r2, [r5, #0]
 8009628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800962c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009630:	2301      	movs	r3, #1
 8009632:	e09f      	b.n	8009774 <_printf_i+0x1ec>
 8009634:	6820      	ldr	r0, [r4, #0]
 8009636:	682b      	ldr	r3, [r5, #0]
 8009638:	0607      	lsls	r7, r0, #24
 800963a:	f103 0104 	add.w	r1, r3, #4
 800963e:	6029      	str	r1, [r5, #0]
 8009640:	d501      	bpl.n	8009646 <_printf_i+0xbe>
 8009642:	681e      	ldr	r6, [r3, #0]
 8009644:	e003      	b.n	800964e <_printf_i+0xc6>
 8009646:	0646      	lsls	r6, r0, #25
 8009648:	d5fb      	bpl.n	8009642 <_printf_i+0xba>
 800964a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800964e:	2e00      	cmp	r6, #0
 8009650:	da03      	bge.n	800965a <_printf_i+0xd2>
 8009652:	232d      	movs	r3, #45	; 0x2d
 8009654:	4276      	negs	r6, r6
 8009656:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800965a:	485a      	ldr	r0, [pc, #360]	; (80097c4 <_printf_i+0x23c>)
 800965c:	230a      	movs	r3, #10
 800965e:	e012      	b.n	8009686 <_printf_i+0xfe>
 8009660:	682b      	ldr	r3, [r5, #0]
 8009662:	6820      	ldr	r0, [r4, #0]
 8009664:	1d19      	adds	r1, r3, #4
 8009666:	6029      	str	r1, [r5, #0]
 8009668:	0605      	lsls	r5, r0, #24
 800966a:	d501      	bpl.n	8009670 <_printf_i+0xe8>
 800966c:	681e      	ldr	r6, [r3, #0]
 800966e:	e002      	b.n	8009676 <_printf_i+0xee>
 8009670:	0641      	lsls	r1, r0, #25
 8009672:	d5fb      	bpl.n	800966c <_printf_i+0xe4>
 8009674:	881e      	ldrh	r6, [r3, #0]
 8009676:	4853      	ldr	r0, [pc, #332]	; (80097c4 <_printf_i+0x23c>)
 8009678:	2f6f      	cmp	r7, #111	; 0x6f
 800967a:	bf0c      	ite	eq
 800967c:	2308      	moveq	r3, #8
 800967e:	230a      	movne	r3, #10
 8009680:	2100      	movs	r1, #0
 8009682:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009686:	6865      	ldr	r5, [r4, #4]
 8009688:	60a5      	str	r5, [r4, #8]
 800968a:	2d00      	cmp	r5, #0
 800968c:	bfa2      	ittt	ge
 800968e:	6821      	ldrge	r1, [r4, #0]
 8009690:	f021 0104 	bicge.w	r1, r1, #4
 8009694:	6021      	strge	r1, [r4, #0]
 8009696:	b90e      	cbnz	r6, 800969c <_printf_i+0x114>
 8009698:	2d00      	cmp	r5, #0
 800969a:	d04b      	beq.n	8009734 <_printf_i+0x1ac>
 800969c:	4615      	mov	r5, r2
 800969e:	fbb6 f1f3 	udiv	r1, r6, r3
 80096a2:	fb03 6711 	mls	r7, r3, r1, r6
 80096a6:	5dc7      	ldrb	r7, [r0, r7]
 80096a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80096ac:	4637      	mov	r7, r6
 80096ae:	42bb      	cmp	r3, r7
 80096b0:	460e      	mov	r6, r1
 80096b2:	d9f4      	bls.n	800969e <_printf_i+0x116>
 80096b4:	2b08      	cmp	r3, #8
 80096b6:	d10b      	bne.n	80096d0 <_printf_i+0x148>
 80096b8:	6823      	ldr	r3, [r4, #0]
 80096ba:	07de      	lsls	r6, r3, #31
 80096bc:	d508      	bpl.n	80096d0 <_printf_i+0x148>
 80096be:	6923      	ldr	r3, [r4, #16]
 80096c0:	6861      	ldr	r1, [r4, #4]
 80096c2:	4299      	cmp	r1, r3
 80096c4:	bfde      	ittt	le
 80096c6:	2330      	movle	r3, #48	; 0x30
 80096c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80096cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80096d0:	1b52      	subs	r2, r2, r5
 80096d2:	6122      	str	r2, [r4, #16]
 80096d4:	f8cd a000 	str.w	sl, [sp]
 80096d8:	464b      	mov	r3, r9
 80096da:	aa03      	add	r2, sp, #12
 80096dc:	4621      	mov	r1, r4
 80096de:	4640      	mov	r0, r8
 80096e0:	f7ff fee4 	bl	80094ac <_printf_common>
 80096e4:	3001      	adds	r0, #1
 80096e6:	d14a      	bne.n	800977e <_printf_i+0x1f6>
 80096e8:	f04f 30ff 	mov.w	r0, #4294967295
 80096ec:	b004      	add	sp, #16
 80096ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096f2:	6823      	ldr	r3, [r4, #0]
 80096f4:	f043 0320 	orr.w	r3, r3, #32
 80096f8:	6023      	str	r3, [r4, #0]
 80096fa:	4833      	ldr	r0, [pc, #204]	; (80097c8 <_printf_i+0x240>)
 80096fc:	2778      	movs	r7, #120	; 0x78
 80096fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009702:	6823      	ldr	r3, [r4, #0]
 8009704:	6829      	ldr	r1, [r5, #0]
 8009706:	061f      	lsls	r7, r3, #24
 8009708:	f851 6b04 	ldr.w	r6, [r1], #4
 800970c:	d402      	bmi.n	8009714 <_printf_i+0x18c>
 800970e:	065f      	lsls	r7, r3, #25
 8009710:	bf48      	it	mi
 8009712:	b2b6      	uxthmi	r6, r6
 8009714:	07df      	lsls	r7, r3, #31
 8009716:	bf48      	it	mi
 8009718:	f043 0320 	orrmi.w	r3, r3, #32
 800971c:	6029      	str	r1, [r5, #0]
 800971e:	bf48      	it	mi
 8009720:	6023      	strmi	r3, [r4, #0]
 8009722:	b91e      	cbnz	r6, 800972c <_printf_i+0x1a4>
 8009724:	6823      	ldr	r3, [r4, #0]
 8009726:	f023 0320 	bic.w	r3, r3, #32
 800972a:	6023      	str	r3, [r4, #0]
 800972c:	2310      	movs	r3, #16
 800972e:	e7a7      	b.n	8009680 <_printf_i+0xf8>
 8009730:	4824      	ldr	r0, [pc, #144]	; (80097c4 <_printf_i+0x23c>)
 8009732:	e7e4      	b.n	80096fe <_printf_i+0x176>
 8009734:	4615      	mov	r5, r2
 8009736:	e7bd      	b.n	80096b4 <_printf_i+0x12c>
 8009738:	682b      	ldr	r3, [r5, #0]
 800973a:	6826      	ldr	r6, [r4, #0]
 800973c:	6961      	ldr	r1, [r4, #20]
 800973e:	1d18      	adds	r0, r3, #4
 8009740:	6028      	str	r0, [r5, #0]
 8009742:	0635      	lsls	r5, r6, #24
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	d501      	bpl.n	800974c <_printf_i+0x1c4>
 8009748:	6019      	str	r1, [r3, #0]
 800974a:	e002      	b.n	8009752 <_printf_i+0x1ca>
 800974c:	0670      	lsls	r0, r6, #25
 800974e:	d5fb      	bpl.n	8009748 <_printf_i+0x1c0>
 8009750:	8019      	strh	r1, [r3, #0]
 8009752:	2300      	movs	r3, #0
 8009754:	6123      	str	r3, [r4, #16]
 8009756:	4615      	mov	r5, r2
 8009758:	e7bc      	b.n	80096d4 <_printf_i+0x14c>
 800975a:	682b      	ldr	r3, [r5, #0]
 800975c:	1d1a      	adds	r2, r3, #4
 800975e:	602a      	str	r2, [r5, #0]
 8009760:	681d      	ldr	r5, [r3, #0]
 8009762:	6862      	ldr	r2, [r4, #4]
 8009764:	2100      	movs	r1, #0
 8009766:	4628      	mov	r0, r5
 8009768:	f7f6 fd52 	bl	8000210 <memchr>
 800976c:	b108      	cbz	r0, 8009772 <_printf_i+0x1ea>
 800976e:	1b40      	subs	r0, r0, r5
 8009770:	6060      	str	r0, [r4, #4]
 8009772:	6863      	ldr	r3, [r4, #4]
 8009774:	6123      	str	r3, [r4, #16]
 8009776:	2300      	movs	r3, #0
 8009778:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800977c:	e7aa      	b.n	80096d4 <_printf_i+0x14c>
 800977e:	6923      	ldr	r3, [r4, #16]
 8009780:	462a      	mov	r2, r5
 8009782:	4649      	mov	r1, r9
 8009784:	4640      	mov	r0, r8
 8009786:	47d0      	blx	sl
 8009788:	3001      	adds	r0, #1
 800978a:	d0ad      	beq.n	80096e8 <_printf_i+0x160>
 800978c:	6823      	ldr	r3, [r4, #0]
 800978e:	079b      	lsls	r3, r3, #30
 8009790:	d413      	bmi.n	80097ba <_printf_i+0x232>
 8009792:	68e0      	ldr	r0, [r4, #12]
 8009794:	9b03      	ldr	r3, [sp, #12]
 8009796:	4298      	cmp	r0, r3
 8009798:	bfb8      	it	lt
 800979a:	4618      	movlt	r0, r3
 800979c:	e7a6      	b.n	80096ec <_printf_i+0x164>
 800979e:	2301      	movs	r3, #1
 80097a0:	4632      	mov	r2, r6
 80097a2:	4649      	mov	r1, r9
 80097a4:	4640      	mov	r0, r8
 80097a6:	47d0      	blx	sl
 80097a8:	3001      	adds	r0, #1
 80097aa:	d09d      	beq.n	80096e8 <_printf_i+0x160>
 80097ac:	3501      	adds	r5, #1
 80097ae:	68e3      	ldr	r3, [r4, #12]
 80097b0:	9903      	ldr	r1, [sp, #12]
 80097b2:	1a5b      	subs	r3, r3, r1
 80097b4:	42ab      	cmp	r3, r5
 80097b6:	dcf2      	bgt.n	800979e <_printf_i+0x216>
 80097b8:	e7eb      	b.n	8009792 <_printf_i+0x20a>
 80097ba:	2500      	movs	r5, #0
 80097bc:	f104 0619 	add.w	r6, r4, #25
 80097c0:	e7f5      	b.n	80097ae <_printf_i+0x226>
 80097c2:	bf00      	nop
 80097c4:	0800999d 	.word	0x0800999d
 80097c8:	080099ae 	.word	0x080099ae

080097cc <memmove>:
 80097cc:	4288      	cmp	r0, r1
 80097ce:	b510      	push	{r4, lr}
 80097d0:	eb01 0402 	add.w	r4, r1, r2
 80097d4:	d902      	bls.n	80097dc <memmove+0x10>
 80097d6:	4284      	cmp	r4, r0
 80097d8:	4623      	mov	r3, r4
 80097da:	d807      	bhi.n	80097ec <memmove+0x20>
 80097dc:	1e43      	subs	r3, r0, #1
 80097de:	42a1      	cmp	r1, r4
 80097e0:	d008      	beq.n	80097f4 <memmove+0x28>
 80097e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80097ea:	e7f8      	b.n	80097de <memmove+0x12>
 80097ec:	4402      	add	r2, r0
 80097ee:	4601      	mov	r1, r0
 80097f0:	428a      	cmp	r2, r1
 80097f2:	d100      	bne.n	80097f6 <memmove+0x2a>
 80097f4:	bd10      	pop	{r4, pc}
 80097f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80097fe:	e7f7      	b.n	80097f0 <memmove+0x24>

08009800 <_sbrk_r>:
 8009800:	b538      	push	{r3, r4, r5, lr}
 8009802:	4d06      	ldr	r5, [pc, #24]	; (800981c <_sbrk_r+0x1c>)
 8009804:	2300      	movs	r3, #0
 8009806:	4604      	mov	r4, r0
 8009808:	4608      	mov	r0, r1
 800980a:	602b      	str	r3, [r5, #0]
 800980c:	f7f9 fb3a 	bl	8002e84 <_sbrk>
 8009810:	1c43      	adds	r3, r0, #1
 8009812:	d102      	bne.n	800981a <_sbrk_r+0x1a>
 8009814:	682b      	ldr	r3, [r5, #0]
 8009816:	b103      	cbz	r3, 800981a <_sbrk_r+0x1a>
 8009818:	6023      	str	r3, [r4, #0]
 800981a:	bd38      	pop	{r3, r4, r5, pc}
 800981c:	200004f4 	.word	0x200004f4

08009820 <memcpy>:
 8009820:	440a      	add	r2, r1
 8009822:	4291      	cmp	r1, r2
 8009824:	f100 33ff 	add.w	r3, r0, #4294967295
 8009828:	d100      	bne.n	800982c <memcpy+0xc>
 800982a:	4770      	bx	lr
 800982c:	b510      	push	{r4, lr}
 800982e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009832:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009836:	4291      	cmp	r1, r2
 8009838:	d1f9      	bne.n	800982e <memcpy+0xe>
 800983a:	bd10      	pop	{r4, pc}

0800983c <_realloc_r>:
 800983c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009840:	4680      	mov	r8, r0
 8009842:	4614      	mov	r4, r2
 8009844:	460e      	mov	r6, r1
 8009846:	b921      	cbnz	r1, 8009852 <_realloc_r+0x16>
 8009848:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800984c:	4611      	mov	r1, r2
 800984e:	f7ff bc49 	b.w	80090e4 <_malloc_r>
 8009852:	b92a      	cbnz	r2, 8009860 <_realloc_r+0x24>
 8009854:	f7ff fbda 	bl	800900c <_free_r>
 8009858:	4625      	mov	r5, r4
 800985a:	4628      	mov	r0, r5
 800985c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009860:	f000 f81b 	bl	800989a <_malloc_usable_size_r>
 8009864:	4284      	cmp	r4, r0
 8009866:	4607      	mov	r7, r0
 8009868:	d802      	bhi.n	8009870 <_realloc_r+0x34>
 800986a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800986e:	d812      	bhi.n	8009896 <_realloc_r+0x5a>
 8009870:	4621      	mov	r1, r4
 8009872:	4640      	mov	r0, r8
 8009874:	f7ff fc36 	bl	80090e4 <_malloc_r>
 8009878:	4605      	mov	r5, r0
 800987a:	2800      	cmp	r0, #0
 800987c:	d0ed      	beq.n	800985a <_realloc_r+0x1e>
 800987e:	42bc      	cmp	r4, r7
 8009880:	4622      	mov	r2, r4
 8009882:	4631      	mov	r1, r6
 8009884:	bf28      	it	cs
 8009886:	463a      	movcs	r2, r7
 8009888:	f7ff ffca 	bl	8009820 <memcpy>
 800988c:	4631      	mov	r1, r6
 800988e:	4640      	mov	r0, r8
 8009890:	f7ff fbbc 	bl	800900c <_free_r>
 8009894:	e7e1      	b.n	800985a <_realloc_r+0x1e>
 8009896:	4635      	mov	r5, r6
 8009898:	e7df      	b.n	800985a <_realloc_r+0x1e>

0800989a <_malloc_usable_size_r>:
 800989a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800989e:	1f18      	subs	r0, r3, #4
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	bfbc      	itt	lt
 80098a4:	580b      	ldrlt	r3, [r1, r0]
 80098a6:	18c0      	addlt	r0, r0, r3
 80098a8:	4770      	bx	lr
	...

080098ac <_init>:
 80098ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ae:	bf00      	nop
 80098b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098b2:	bc08      	pop	{r3}
 80098b4:	469e      	mov	lr, r3
 80098b6:	4770      	bx	lr

080098b8 <_fini>:
 80098b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ba:	bf00      	nop
 80098bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098be:	bc08      	pop	{r3}
 80098c0:	469e      	mov	lr, r3
 80098c2:	4770      	bx	lr
