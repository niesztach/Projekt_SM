
L06_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e704  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000594  0800e8d4  0800e8d4  0001e8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee68  0800ee68  00020138  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee68  0800ee68  0001ee68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee70  0800ee70  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee70  0800ee70  0001ee70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee74  0800ee74  0001ee74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  0800ee78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027e0  20000138  0800efb0  00020138  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002918  0800efb0  00022918  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020898  00000000  00000000  000201ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004d83  00000000  00000000  00040a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ad8  00000000  00000000  000457c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014d5  00000000  00000000  000472a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b8a9  00000000  00000000  00048775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027f8b  00000000  00000000  0007401e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fdea5  00000000  00000000  0009bfa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000756c  00000000  00000000  00199e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001a13bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000138 	.word	0x20000138
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e8bc 	.word	0x0800e8bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000013c 	.word	0x2000013c
 800020c:	0800e8bc 	.word	0x0800e8bc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_d2f>:
 8000bec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf4:	bf24      	itt	cs
 8000bf6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfe:	d90d      	bls.n	8000c1c <__aeabi_d2f+0x30>
 8000c00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c14:	bf08      	it	eq
 8000c16:	f020 0001 	biceq.w	r0, r0, #1
 8000c1a:	4770      	bx	lr
 8000c1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c20:	d121      	bne.n	8000c66 <__aeabi_d2f+0x7a>
 8000c22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c26:	bfbc      	itt	lt
 8000c28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	4770      	bxlt	lr
 8000c2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c36:	f1c2 0218 	rsb	r2, r2, #24
 8000c3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c42:	fa20 f002 	lsr.w	r0, r0, r2
 8000c46:	bf18      	it	ne
 8000c48:	f040 0001 	orrne.w	r0, r0, #1
 8000c4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c58:	ea40 000c 	orr.w	r0, r0, ip
 8000c5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c64:	e7cc      	b.n	8000c00 <__aeabi_d2f+0x14>
 8000c66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6a:	d107      	bne.n	8000c7c <__aeabi_d2f+0x90>
 8000c6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c70:	bf1e      	ittt	ne
 8000c72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7a:	4770      	bxne	lr
 8000c7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <__aeabi_uldivmod>:
 8000c8c:	b953      	cbnz	r3, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c8e:	b94a      	cbnz	r2, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c90:	2900      	cmp	r1, #0
 8000c92:	bf08      	it	eq
 8000c94:	2800      	cmpeq	r0, #0
 8000c96:	bf1c      	itt	ne
 8000c98:	f04f 31ff 	movne.w	r1, #4294967295
 8000c9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca0:	f000 b970 	b.w	8000f84 <__aeabi_idiv0>
 8000ca4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cac:	f000 f806 	bl	8000cbc <__udivmoddi4>
 8000cb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb8:	b004      	add	sp, #16
 8000cba:	4770      	bx	lr

08000cbc <__udivmoddi4>:
 8000cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc0:	9e08      	ldr	r6, [sp, #32]
 8000cc2:	460d      	mov	r5, r1
 8000cc4:	4604      	mov	r4, r0
 8000cc6:	460f      	mov	r7, r1
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d14a      	bne.n	8000d62 <__udivmoddi4+0xa6>
 8000ccc:	428a      	cmp	r2, r1
 8000cce:	4694      	mov	ip, r2
 8000cd0:	d965      	bls.n	8000d9e <__udivmoddi4+0xe2>
 8000cd2:	fab2 f382 	clz	r3, r2
 8000cd6:	b143      	cbz	r3, 8000cea <__udivmoddi4+0x2e>
 8000cd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cdc:	f1c3 0220 	rsb	r2, r3, #32
 8000ce0:	409f      	lsls	r7, r3
 8000ce2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce6:	4317      	orrs	r7, r2
 8000ce8:	409c      	lsls	r4, r3
 8000cea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cee:	fa1f f58c 	uxth.w	r5, ip
 8000cf2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf6:	0c22      	lsrs	r2, r4, #16
 8000cf8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cfc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d00:	fb01 f005 	mul.w	r0, r1, r5
 8000d04:	4290      	cmp	r0, r2
 8000d06:	d90a      	bls.n	8000d1e <__udivmoddi4+0x62>
 8000d08:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d10:	f080 811c 	bcs.w	8000f4c <__udivmoddi4+0x290>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f240 8119 	bls.w	8000f4c <__udivmoddi4+0x290>
 8000d1a:	3902      	subs	r1, #2
 8000d1c:	4462      	add	r2, ip
 8000d1e:	1a12      	subs	r2, r2, r0
 8000d20:	b2a4      	uxth	r4, r4
 8000d22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2e:	fb00 f505 	mul.w	r5, r0, r5
 8000d32:	42a5      	cmp	r5, r4
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x90>
 8000d36:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3e:	f080 8107 	bcs.w	8000f50 <__udivmoddi4+0x294>
 8000d42:	42a5      	cmp	r5, r4
 8000d44:	f240 8104 	bls.w	8000f50 <__udivmoddi4+0x294>
 8000d48:	4464      	add	r4, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d50:	1b64      	subs	r4, r4, r5
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11e      	cbz	r6, 8000d5e <__udivmoddi4+0xa2>
 8000d56:	40dc      	lsrs	r4, r3
 8000d58:	2300      	movs	r3, #0
 8000d5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0xbc>
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	f000 80ed 	beq.w	8000f46 <__udivmoddi4+0x28a>
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000d72:	4608      	mov	r0, r1
 8000d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d78:	fab3 f183 	clz	r1, r3
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	d149      	bne.n	8000e14 <__udivmoddi4+0x158>
 8000d80:	42ab      	cmp	r3, r5
 8000d82:	d302      	bcc.n	8000d8a <__udivmoddi4+0xce>
 8000d84:	4282      	cmp	r2, r0
 8000d86:	f200 80f8 	bhi.w	8000f7a <__udivmoddi4+0x2be>
 8000d8a:	1a84      	subs	r4, r0, r2
 8000d8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000d90:	2001      	movs	r0, #1
 8000d92:	4617      	mov	r7, r2
 8000d94:	2e00      	cmp	r6, #0
 8000d96:	d0e2      	beq.n	8000d5e <__udivmoddi4+0xa2>
 8000d98:	e9c6 4700 	strd	r4, r7, [r6]
 8000d9c:	e7df      	b.n	8000d5e <__udivmoddi4+0xa2>
 8000d9e:	b902      	cbnz	r2, 8000da2 <__udivmoddi4+0xe6>
 8000da0:	deff      	udf	#255	; 0xff
 8000da2:	fab2 f382 	clz	r3, r2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x210>
 8000dac:	1a8a      	subs	r2, r1, r2
 8000dae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db2:	fa1f fe8c 	uxth.w	lr, ip
 8000db6:	2101      	movs	r1, #1
 8000db8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dbc:	fb07 2015 	mls	r0, r7, r5, r2
 8000dc0:	0c22      	lsrs	r2, r4, #16
 8000dc2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc6:	fb0e f005 	mul.w	r0, lr, r5
 8000dca:	4290      	cmp	r0, r2
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x124>
 8000dce:	eb1c 0202 	adds.w	r2, ip, r2
 8000dd2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x122>
 8000dd8:	4290      	cmp	r0, r2
 8000dda:	f200 80cb 	bhi.w	8000f74 <__udivmoddi4+0x2b8>
 8000dde:	4645      	mov	r5, r8
 8000de0:	1a12      	subs	r2, r2, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de8:	fb07 2210 	mls	r2, r7, r0, r2
 8000dec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000df0:	fb0e fe00 	mul.w	lr, lr, r0
 8000df4:	45a6      	cmp	lr, r4
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x14e>
 8000df8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dfc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e00:	d202      	bcs.n	8000e08 <__udivmoddi4+0x14c>
 8000e02:	45a6      	cmp	lr, r4
 8000e04:	f200 80bb 	bhi.w	8000f7e <__udivmoddi4+0x2c2>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e12:	e79f      	b.n	8000d54 <__udivmoddi4+0x98>
 8000e14:	f1c1 0720 	rsb	r7, r1, #32
 8000e18:	408b      	lsls	r3, r1
 8000e1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e22:	fa05 f401 	lsl.w	r4, r5, r1
 8000e26:	fa20 f307 	lsr.w	r3, r0, r7
 8000e2a:	40fd      	lsrs	r5, r7
 8000e2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e30:	4323      	orrs	r3, r4
 8000e32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e36:	fa1f fe8c 	uxth.w	lr, ip
 8000e3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3e:	0c1c      	lsrs	r4, r3, #16
 8000e40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e44:	fb08 f50e 	mul.w	r5, r8, lr
 8000e48:	42a5      	cmp	r5, r4
 8000e4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000e52:	d90b      	bls.n	8000e6c <__udivmoddi4+0x1b0>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e5c:	f080 8088 	bcs.w	8000f70 <__udivmoddi4+0x2b4>
 8000e60:	42a5      	cmp	r5, r4
 8000e62:	f240 8085 	bls.w	8000f70 <__udivmoddi4+0x2b4>
 8000e66:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6a:	4464      	add	r4, ip
 8000e6c:	1b64      	subs	r4, r4, r5
 8000e6e:	b29d      	uxth	r5, r3
 8000e70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e74:	fb09 4413 	mls	r4, r9, r3, r4
 8000e78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e80:	45a6      	cmp	lr, r4
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x1da>
 8000e84:	eb1c 0404 	adds.w	r4, ip, r4
 8000e88:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e8c:	d26c      	bcs.n	8000f68 <__udivmoddi4+0x2ac>
 8000e8e:	45a6      	cmp	lr, r4
 8000e90:	d96a      	bls.n	8000f68 <__udivmoddi4+0x2ac>
 8000e92:	3b02      	subs	r3, #2
 8000e94:	4464      	add	r4, ip
 8000e96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9e:	eba4 040e 	sub.w	r4, r4, lr
 8000ea2:	42ac      	cmp	r4, r5
 8000ea4:	46c8      	mov	r8, r9
 8000ea6:	46ae      	mov	lr, r5
 8000ea8:	d356      	bcc.n	8000f58 <__udivmoddi4+0x29c>
 8000eaa:	d053      	beq.n	8000f54 <__udivmoddi4+0x298>
 8000eac:	b156      	cbz	r6, 8000ec4 <__udivmoddi4+0x208>
 8000eae:	ebb0 0208 	subs.w	r2, r0, r8
 8000eb2:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb6:	fa04 f707 	lsl.w	r7, r4, r7
 8000eba:	40ca      	lsrs	r2, r1
 8000ebc:	40cc      	lsrs	r4, r1
 8000ebe:	4317      	orrs	r7, r2
 8000ec0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ecc:	f1c3 0120 	rsb	r1, r3, #32
 8000ed0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed8:	fa25 f101 	lsr.w	r1, r5, r1
 8000edc:	409d      	lsls	r5, r3
 8000ede:	432a      	orrs	r2, r5
 8000ee0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee4:	fa1f fe8c 	uxth.w	lr, ip
 8000ee8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eec:	fb07 1510 	mls	r5, r7, r0, r1
 8000ef0:	0c11      	lsrs	r1, r2, #16
 8000ef2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef6:	fb00 f50e 	mul.w	r5, r0, lr
 8000efa:	428d      	cmp	r5, r1
 8000efc:	fa04 f403 	lsl.w	r4, r4, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x258>
 8000f02:	eb1c 0101 	adds.w	r1, ip, r1
 8000f06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0a:	d22f      	bcs.n	8000f6c <__udivmoddi4+0x2b0>
 8000f0c:	428d      	cmp	r5, r1
 8000f0e:	d92d      	bls.n	8000f6c <__udivmoddi4+0x2b0>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4461      	add	r1, ip
 8000f14:	1b49      	subs	r1, r1, r5
 8000f16:	b292      	uxth	r2, r2
 8000f18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000f20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f24:	fb05 f10e 	mul.w	r1, r5, lr
 8000f28:	4291      	cmp	r1, r2
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x282>
 8000f2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000f30:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f34:	d216      	bcs.n	8000f64 <__udivmoddi4+0x2a8>
 8000f36:	4291      	cmp	r1, r2
 8000f38:	d914      	bls.n	8000f64 <__udivmoddi4+0x2a8>
 8000f3a:	3d02      	subs	r5, #2
 8000f3c:	4462      	add	r2, ip
 8000f3e:	1a52      	subs	r2, r2, r1
 8000f40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f44:	e738      	b.n	8000db8 <__udivmoddi4+0xfc>
 8000f46:	4631      	mov	r1, r6
 8000f48:	4630      	mov	r0, r6
 8000f4a:	e708      	b.n	8000d5e <__udivmoddi4+0xa2>
 8000f4c:	4639      	mov	r1, r7
 8000f4e:	e6e6      	b.n	8000d1e <__udivmoddi4+0x62>
 8000f50:	4610      	mov	r0, r2
 8000f52:	e6fb      	b.n	8000d4c <__udivmoddi4+0x90>
 8000f54:	4548      	cmp	r0, r9
 8000f56:	d2a9      	bcs.n	8000eac <__udivmoddi4+0x1f0>
 8000f58:	ebb9 0802 	subs.w	r8, r9, r2
 8000f5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f60:	3b01      	subs	r3, #1
 8000f62:	e7a3      	b.n	8000eac <__udivmoddi4+0x1f0>
 8000f64:	4645      	mov	r5, r8
 8000f66:	e7ea      	b.n	8000f3e <__udivmoddi4+0x282>
 8000f68:	462b      	mov	r3, r5
 8000f6a:	e794      	b.n	8000e96 <__udivmoddi4+0x1da>
 8000f6c:	4640      	mov	r0, r8
 8000f6e:	e7d1      	b.n	8000f14 <__udivmoddi4+0x258>
 8000f70:	46d0      	mov	r8, sl
 8000f72:	e77b      	b.n	8000e6c <__udivmoddi4+0x1b0>
 8000f74:	3d02      	subs	r5, #2
 8000f76:	4462      	add	r2, ip
 8000f78:	e732      	b.n	8000de0 <__udivmoddi4+0x124>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e70a      	b.n	8000d94 <__udivmoddi4+0xd8>
 8000f7e:	4464      	add	r4, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e742      	b.n	8000e0a <__udivmoddi4+0x14e>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f000 fa47 	bl	8001424 <null_ptr_check>
 8000f96:	4603      	mov	r3, r0
 8000f98:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 8000f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d117      	bne.n	8000fd2 <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	20d0      	movs	r0, #208	; 0xd0
 8000faa:	f000 f818 	bl	8000fde <bmp2_get_regs>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 8000fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10b      	bne.n	8000fd2 <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b58      	cmp	r3, #88	; 0x58
 8000fc0:	d105      	bne.n	8000fce <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 fa79 	bl	80014ba <get_calib_param>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	73fb      	strb	r3, [r7, #15]
 8000fcc:	e001      	b.n	8000fd2 <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 8000fce:	23fc      	movs	r3, #252	; 0xfc
 8000fd0:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8000fde:	b590      	push	{r4, r7, lr}
 8000fe0:	b087      	sub	sp, #28
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	603b      	str	r3, [r7, #0]
 8000fea:	4603      	mov	r3, r0
 8000fec:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000fee:	6838      	ldr	r0, [r7, #0]
 8000ff0:	f000 fa18 	bl	8001424 <null_ptr_check>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 8000ff8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d11e      	bne.n	800103e <bmp2_get_regs+0x60>
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d01b      	beq.n	800103e <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	785b      	ldrb	r3, [r3, #1]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d103      	bne.n	8001016 <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001014:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	68dc      	ldr	r4, [r3, #12]
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	7bf8      	ldrb	r0, [r7, #15]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	68b9      	ldr	r1, [r7, #8]
 8001024:	47a0      	blx	r4
 8001026:	4603      	mov	r3, r0
 8001028:	461a      	mov	r2, r3
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d004      	beq.n	8001042 <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 8001038:	23fe      	movs	r3, #254	; 0xfe
 800103a:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 800103c:	e001      	b.n	8001042 <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800103e:	23ff      	movs	r3, #255	; 0xff
 8001040:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001042:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001046:	4618      	mov	r0, r3
 8001048:	371c      	adds	r7, #28
 800104a:	46bd      	mov	sp, r7
 800104c:	bd90      	pop	{r4, r7, pc}

0800104e <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 800104e:	b590      	push	{r4, r7, lr}
 8001050:	b08b      	sub	sp, #44	; 0x2c
 8001052:	af00      	add	r7, sp, #0
 8001054:	60f8      	str	r0, [r7, #12]
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
 800105a:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b04      	cmp	r3, #4
 8001060:	d901      	bls.n	8001066 <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 8001062:	2304      	movs	r3, #4
 8001064:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 8001066:	6838      	ldr	r0, [r7, #0]
 8001068:	f000 f9dc 	bl	8001424 <null_ptr_check>
 800106c:	4603      	mov	r3, r0
 800106e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001072:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001076:	2b00      	cmp	r3, #0
 8001078:	d150      	bne.n	800111c <bmp2_set_regs+0xce>
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d04d      	beq.n	800111c <bmp2_set_regs+0xce>
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d04a      	beq.n	800111c <bmp2_set_regs+0xce>
    {
        if (len > 0)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d043      	beq.n	8001114 <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	785b      	ldrb	r3, [r3, #1]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d114      	bne.n	80010c4 <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800109a:	2300      	movs	r3, #0
 800109c:	77fb      	strb	r3, [r7, #31]
 800109e:	e00d      	b.n	80010bc <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 80010a0:	7ffb      	ldrb	r3, [r7, #31]
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	4413      	add	r3, r2
 80010a6:	781a      	ldrb	r2, [r3, #0]
 80010a8:	7ffb      	ldrb	r3, [r7, #31]
 80010aa:	68f9      	ldr	r1, [r7, #12]
 80010ac:	440b      	add	r3, r1
 80010ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80010b6:	7ffb      	ldrb	r3, [r7, #31]
 80010b8:	3301      	adds	r3, #1
 80010ba:	77fb      	strb	r3, [r7, #31]
 80010bc:	7ffb      	ldrb	r3, [r7, #31]
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d8ed      	bhi.n	80010a0 <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d90b      	bls.n	80010e2 <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 80010ca:	f107 0114 	add.w	r1, r7, #20
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68ba      	ldr	r2, [r7, #8]
 80010d2:	68f8      	ldr	r0, [r7, #12]
 80010d4:	f000 f9c6 	bl	8001464 <interleave_data>
                temp_len = ((len * 2) - 1);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	3b01      	subs	r3, #1
 80010de:	623b      	str	r3, [r7, #32]
 80010e0:	e001      	b.n	80010e6 <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	691c      	ldr	r4, [r3, #16]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	7818      	ldrb	r0, [r3, #0]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f107 0114 	add.w	r1, r7, #20
 80010f6:	6a3a      	ldr	r2, [r7, #32]
 80010f8:	47a0      	blx	r4
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d00b      	beq.n	8001124 <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 800110c:	23fe      	movs	r3, #254	; 0xfe
 800110e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 8001112:	e007      	b.n	8001124 <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 8001114:	23fd      	movs	r3, #253	; 0xfd
 8001116:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 800111a:	e003      	b.n	8001124 <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800111c:	23ff      	movs	r3, #255	; 0xff
 800111e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001122:	e000      	b.n	8001126 <bmp2_set_regs+0xd8>
        if (len > 0)
 8001124:	bf00      	nop
    }

    return rslt;
 8001126:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800112a:	4618      	mov	r0, r3
 800112c:	372c      	adds	r7, #44	; 0x2c
 800112e:	46bd      	mov	sp, r7
 8001130:	bd90      	pop	{r4, r7, pc}

08001132 <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b084      	sub	sp, #16
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 800113a:	23e0      	movs	r3, #224	; 0xe0
 800113c:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 800113e:	23b6      	movs	r3, #182	; 0xb6
 8001140:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001142:	f107 010d 	add.w	r1, r7, #13
 8001146:	f107 000e 	add.w	r0, r7, #14
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2201      	movs	r2, #1
 800114e:	f7ff ff7e 	bl	800104e <bmp2_set_regs>
 8001152:	4603      	mov	r3, r0
 8001154:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8001156:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b084      	sub	sp, #16
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800116c:	2300      	movs	r3, #0
 800116e:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d02d      	beq.n	80011d2 <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8001176:	f107 010c 	add.w	r1, r7, #12
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	2202      	movs	r2, #2
 800117e:	20f4      	movs	r0, #244	; 0xf4
 8001180:	f7ff ff2d 	bl	8000fde <bmp2_get_regs>
 8001184:	4603      	mov	r3, r0
 8001186:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001188:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d122      	bne.n	80011d6 <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 8001190:	7b3b      	ldrb	r3, [r7, #12]
 8001192:	095b      	lsrs	r3, r3, #5
 8001194:	b2da      	uxtb	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 800119a:	7b3b      	ldrb	r3, [r7, #12]
 800119c:	109b      	asrs	r3, r3, #2
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	f003 0307 	and.w	r3, r3, #7
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 80011aa:	7b7b      	ldrb	r3, [r7, #13]
 80011ac:	095b      	lsrs	r3, r3, #5
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 80011b4:	7b7b      	ldrb	r3, [r7, #13]
 80011b6:	109b      	asrs	r3, r3, #2
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 80011c4:	7b7b      	ldrb	r3, [r7, #13]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	715a      	strb	r2, [r3, #5]
 80011d0:	e001      	b.n	80011d6 <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80011d2:	23ff      	movs	r3, #255	; 0xff
 80011d4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80011d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	2000      	movs	r0, #0
 80011f2:	f000 f9fd 	bl	80015f0 <conf_sensor>
 80011f6:	4603      	mov	r3, r0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d01b      	beq.n	8001248 <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 8001210:	f107 010e 	add.w	r1, r7, #14
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	2201      	movs	r2, #1
 8001218:	20f3      	movs	r0, #243	; 0xf3
 800121a:	f7ff fee0 	bl	8000fde <bmp2_get_regs>
 800121e:	4603      	mov	r3, r0
 8001220:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d110      	bne.n	800124c <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 800122a:	7bbb      	ldrb	r3, [r7, #14]
 800122c:	10db      	asrs	r3, r3, #3
 800122e:	b2db      	uxtb	r3, r3
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	b2da      	uxtb	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 800123a:	7bbb      	ldrb	r3, [r7, #14]
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	b2da      	uxtb	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	705a      	strb	r2, [r3, #1]
 8001246:	e001      	b.n	800124c <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001248:	23ff      	movs	r3, #255	; 0xff
 800124a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800124c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
 8001264:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 8001266:	7bfb      	ldrb	r3, [r7, #15]
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	68b9      	ldr	r1, [r7, #8]
 800126c:	4618      	mov	r0, r3
 800126e:	f000 f9bf 	bl	80015f0 <conf_sensor>
 8001272:	4603      	mov	r3, r0
 8001274:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8001276:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	2300      	movs	r3, #0
 8001292:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 8001294:	f107 0308 	add.w	r3, r7, #8
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d024      	beq.n	80012ee <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 80012a4:	f107 0110 	add.w	r1, r7, #16
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	2206      	movs	r2, #6
 80012ac:	20f7      	movs	r0, #247	; 0xf7
 80012ae:	f7ff fe96 	bl	8000fde <bmp2_get_regs>
 80012b2:	4603      	mov	r3, r0
 80012b4:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80012b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d119      	bne.n	80012f2 <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 80012be:	f107 0208 	add.w	r2, r7, #8
 80012c2:	f107 0310 	add.w	r3, r7, #16
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 fab9 	bl	8001840 <parse_sensor_data>
 80012ce:	4603      	mov	r3, r0
 80012d0:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 80012d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d10b      	bne.n	80012f2 <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 80012da:	f107 0308 	add.w	r3, r7, #8
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	6879      	ldr	r1, [r7, #4]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 f80b 	bl	80012fe <bmp2_compensate_data>
 80012e8:	4603      	mov	r3, r0
 80012ea:	75fb      	strb	r3, [r7, #23]
 80012ec:	e001      	b.n	80012f2 <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80012ee:	23ff      	movs	r3, #255	; 0xff
 80012f0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80012f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af00      	add	r7, sp, #0
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 f88a 	bl	8001424 <null_ptr_check>
 8001310:	4603      	mov	r3, r0
 8001312:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 8001314:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d129      	bne.n	8001370 <bmp2_compensate_data+0x72>
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d026      	beq.n	8001370 <bmp2_compensate_data+0x72>
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d023      	beq.n	8001370 <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8001328:	68b9      	ldr	r1, [r7, #8]
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	f04f 0300 	mov.w	r3, #0
 8001332:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 8001336:	68b9      	ldr	r1, [r7, #8]
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	f04f 0300 	mov.w	r3, #0
 8001340:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	3308      	adds	r3, #8
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	68f9      	ldr	r1, [r7, #12]
 800134c:	4618      	mov	r0, r3
 800134e:	f000 fabb 	bl	80018c8 <compensate_temperature>
 8001352:	4603      	mov	r3, r0
 8001354:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001356:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10a      	bne.n	8001374 <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	68f9      	ldr	r1, [r7, #12]
 8001364:	4618      	mov	r0, r3
 8001366:	f000 fba7 	bl	8001ab8 <compensate_pressure>
 800136a:	4603      	mov	r3, r0
 800136c:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 800136e:	e001      	b.n	8001374 <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001370:	23ff      	movs	r3, #255	; 0xff
 8001372:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001374:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 8001380:	b5b0      	push	{r4, r5, r7, lr}
 8001382:	b092      	sub	sp, #72	; 0x48
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 800138c:	4b23      	ldr	r3, [pc, #140]	; (800141c <bmp2_compute_meas_time+0x9c>)
 800138e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001392:	461d      	mov	r5, r3
 8001394:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001398:	682b      	ldr	r3, [r5, #0]
 800139a:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 800139c:	4b20      	ldr	r3, [pc, #128]	; (8001420 <bmp2_compute_meas_time+0xa0>)
 800139e:	f107 0410 	add.w	r4, r7, #16
 80013a2:	461d      	mov	r5, r3
 80013a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80013ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 f837 	bl	8001424 <null_ptr_check>
 80013b6:	4603      	mov	r3, r0
 80013b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 80013bc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d122      	bne.n	800140a <bmp2_compute_meas_time+0x8a>
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d01f      	beq.n	800140a <bmp2_compute_meas_time+0x8a>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	7e1b      	ldrb	r3, [r3, #24]
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d111      	bne.n	80013f6 <bmp2_compute_meas_time+0x76>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	78db      	ldrb	r3, [r3, #3]
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	3348      	adds	r3, #72	; 0x48
 80013da:	443b      	add	r3, r7
 80013dc:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	789b      	ldrb	r3, [r3, #2]
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	3348      	adds	r3, #72	; 0x48
 80013e8:	443b      	add	r3, r7
 80013ea:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80013ee:	441a      	add	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80013f4:	e00c      	b.n	8001410 <bmp2_compute_meas_time+0x90>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	78db      	ldrb	r3, [r3, #3]
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	3348      	adds	r3, #72	; 0x48
 80013fe:	443b      	add	r3, r7
 8001400:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8001408:	e002      	b.n	8001410 <bmp2_compute_meas_time+0x90>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800140a:	23ff      	movs	r3, #255	; 0xff
 800140c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return rslt;
 8001410:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8001414:	4618      	mov	r0, r3
 8001416:	3748      	adds	r7, #72	; 0x48
 8001418:	46bd      	mov	sp, r7
 800141a:	bdb0      	pop	{r4, r5, r7, pc}
 800141c:	0800e8d4 	.word	0x0800e8d4
 8001420:	0800e8e8 	.word	0x0800e8e8

08001424 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d00b      	beq.n	800144a <null_ptr_check+0x26>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d007      	beq.n	800144a <null_ptr_check+0x26>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <null_ptr_check+0x26>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d102      	bne.n	8001450 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 800144a:	23ff      	movs	r3, #255	; 0xff
 800144c:	73fb      	strb	r3, [r7, #15]
 800144e:	e001      	b.n	8001454 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 8001450:	2300      	movs	r3, #0
 8001452:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001454:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8001464:	b480      	push	{r7}
 8001466:	b087      	sub	sp, #28
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8001472:	2301      	movs	r3, #1
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	e015      	b.n	80014a4 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	441a      	add	r2, r3
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	3b01      	subs	r3, #1
 8001484:	68b9      	ldr	r1, [r7, #8]
 8001486:	440b      	add	r3, r1
 8001488:	7812      	ldrb	r2, [r2, #0]
 800148a:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	441a      	add	r2, r3
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	68b9      	ldr	r1, [r7, #8]
 8001498:	440b      	add	r3, r1
 800149a:	7812      	ldrb	r2, [r2, #0]
 800149c:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	3301      	adds	r3, #1
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	697a      	ldr	r2, [r7, #20]
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d3e5      	bcc.n	8001478 <interleave_data+0x14>
    }
}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	371c      	adds	r7, #28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b08a      	sub	sp, #40	; 0x28
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	f107 0310 	add.w	r3, r7, #16
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
 80014d4:	611a      	str	r2, [r3, #16]
 80014d6:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 80014d8:	f107 010c 	add.w	r1, r7, #12
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2219      	movs	r2, #25
 80014e0:	2088      	movs	r0, #136	; 0x88
 80014e2:	f7ff fd7c 	bl	8000fde <bmp2_get_regs>
 80014e6:	4603      	mov	r3, r0
 80014e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BMP2_OK)
 80014ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d177      	bne.n	80015e4 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 80014f4:	7b7b      	ldrb	r3, [r7, #13]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	b21a      	sxth	r2, r3
 80014fa:	7b3b      	ldrb	r3, [r7, #12]
 80014fc:	b21b      	sxth	r3, r3
 80014fe:	4313      	orrs	r3, r2
 8001500:	b21b      	sxth	r3, r3
 8001502:	b29a      	uxth	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	b21a      	sxth	r2, r3
 800150e:	7bbb      	ldrb	r3, [r7, #14]
 8001510:	b21b      	sxth	r3, r3
 8001512:	4313      	orrs	r3, r2
 8001514:	b21a      	sxth	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 800151a:	7c7b      	ldrb	r3, [r7, #17]
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	b21a      	sxth	r2, r3
 8001520:	7c3b      	ldrb	r3, [r7, #16]
 8001522:	b21b      	sxth	r3, r3
 8001524:	4313      	orrs	r3, r2
 8001526:	b21a      	sxth	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 800152c:	7cfb      	ldrb	r3, [r7, #19]
 800152e:	021b      	lsls	r3, r3, #8
 8001530:	b21a      	sxth	r2, r3
 8001532:	7cbb      	ldrb	r3, [r7, #18]
 8001534:	b21b      	sxth	r3, r3
 8001536:	4313      	orrs	r3, r2
 8001538:	b21b      	sxth	r3, r3
 800153a:	b29a      	uxth	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	845a      	strh	r2, [r3, #34]	; 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 8001540:	7d7b      	ldrb	r3, [r7, #21]
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	b21a      	sxth	r2, r3
 8001546:	7d3b      	ldrb	r3, [r7, #20]
 8001548:	b21b      	sxth	r3, r3
 800154a:	4313      	orrs	r3, r2
 800154c:	b21a      	sxth	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	849a      	strh	r2, [r3, #36]	; 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 8001552:	7dfb      	ldrb	r3, [r7, #23]
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	b21a      	sxth	r2, r3
 8001558:	7dbb      	ldrb	r3, [r7, #22]
 800155a:	b21b      	sxth	r3, r3
 800155c:	4313      	orrs	r3, r2
 800155e:	b21a      	sxth	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	84da      	strh	r2, [r3, #38]	; 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 8001564:	7e7b      	ldrb	r3, [r7, #25]
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b21a      	sxth	r2, r3
 800156a:	7e3b      	ldrb	r3, [r7, #24]
 800156c:	b21b      	sxth	r3, r3
 800156e:	4313      	orrs	r3, r2
 8001570:	b21a      	sxth	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	851a      	strh	r2, [r3, #40]	; 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 8001576:	7efb      	ldrb	r3, [r7, #27]
 8001578:	021b      	lsls	r3, r3, #8
 800157a:	b21a      	sxth	r2, r3
 800157c:	7ebb      	ldrb	r3, [r7, #26]
 800157e:	b21b      	sxth	r3, r3
 8001580:	4313      	orrs	r3, r2
 8001582:	b21a      	sxth	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	855a      	strh	r2, [r3, #42]	; 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 8001588:	7f7b      	ldrb	r3, [r7, #29]
 800158a:	021b      	lsls	r3, r3, #8
 800158c:	b21a      	sxth	r2, r3
 800158e:	7f3b      	ldrb	r3, [r7, #28]
 8001590:	b21b      	sxth	r3, r3
 8001592:	4313      	orrs	r3, r2
 8001594:	b21a      	sxth	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	859a      	strh	r2, [r3, #44]	; 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 800159a:	7ffb      	ldrb	r3, [r7, #31]
 800159c:	021b      	lsls	r3, r3, #8
 800159e:	b21a      	sxth	r2, r3
 80015a0:	7fbb      	ldrb	r3, [r7, #30]
 80015a2:	b21b      	sxth	r3, r3
 80015a4:	4313      	orrs	r3, r2
 80015a6:	b21a      	sxth	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	85da      	strh	r2, [r3, #46]	; 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 80015ac:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	b21a      	sxth	r2, r3
 80015b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	4313      	orrs	r3, r2
 80015bc:	b21a      	sxth	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	861a      	strh	r2, [r3, #48]	; 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 80015c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015c6:	021b      	lsls	r3, r3, #8
 80015c8:	b21a      	sxth	r2, r3
 80015ca:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80015ce:	b21b      	sxth	r3, r3
 80015d0:	4313      	orrs	r3, r2
 80015d2:	b21a      	sxth	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	865a      	strh	r2, [r3, #50]	; 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 80015d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015dc:	b25a      	sxtb	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    return rslt;
 80015e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3728      	adds	r7, #40	; 0x28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
 80015fc:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 80015fe:	2300      	movs	r3, #0
 8001600:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 8001602:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 8001606:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d074      	beq.n	80016f8 <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 800160e:	f107 0114 	add.w	r1, r7, #20
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2202      	movs	r2, #2
 8001616:	20f4      	movs	r0, #244	; 0xf4
 8001618:	f7ff fce1 	bl	8000fde <bmp2_get_regs>
 800161c:	4603      	mov	r3, r0
 800161e:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001620:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d169      	bne.n	80016fc <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff fd82 	bl	8001132 <bmp2_soft_reset>
 800162e:	4603      	mov	r3, r0
 8001630:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8001632:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d160      	bne.n	80016fc <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	68b9      	ldr	r1, [r7, #8]
 8001640:	4618      	mov	r0, r3
 8001642:	f000 f861 	bl	8001708 <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 8001646:	7d7b      	ldrb	r3, [r7, #21]
 8001648:	b25b      	sxtb	r3, r3
 800164a:	f003 031f 	and.w	r3, r3, #31
 800164e:	b25a      	sxtb	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	789b      	ldrb	r3, [r3, #2]
 8001654:	015b      	lsls	r3, r3, #5
 8001656:	b25b      	sxtb	r3, r3
 8001658:	4313      	orrs	r3, r2
 800165a:	b25b      	sxtb	r3, r3
 800165c:	b2db      	uxtb	r3, r3
 800165e:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 8001660:	7d7b      	ldrb	r3, [r7, #21]
 8001662:	b25b      	sxtb	r3, r3
 8001664:	f023 031c 	bic.w	r3, r3, #28
 8001668:	b25a      	sxtb	r2, r3
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	791b      	ldrb	r3, [r3, #4]
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	b25b      	sxtb	r3, r3
 8001672:	f003 031c 	and.w	r3, r3, #28
 8001676:	b25b      	sxtb	r3, r3
 8001678:	4313      	orrs	r3, r2
 800167a:	b25b      	sxtb	r3, r3
 800167c:	b2db      	uxtb	r3, r3
 800167e:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 8001680:	7d7b      	ldrb	r3, [r7, #21]
 8001682:	b25b      	sxtb	r3, r3
 8001684:	f023 0301 	bic.w	r3, r3, #1
 8001688:	b25a      	sxtb	r2, r3
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	795b      	ldrb	r3, [r3, #5]
 800168e:	b25b      	sxtb	r3, r3
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	b25b      	sxtb	r3, r3
 8001696:	4313      	orrs	r3, r2
 8001698:	b25b      	sxtb	r3, r3
 800169a:	b2db      	uxtb	r3, r3
 800169c:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 800169e:	f107 0114 	add.w	r1, r7, #20
 80016a2:	f107 0010 	add.w	r0, r7, #16
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2202      	movs	r2, #2
 80016aa:	f7ff fcd0 	bl	800104e <bmp2_set_regs>
 80016ae:	4603      	mov	r3, r0
 80016b0:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 80016b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d120      	bne.n	80016fc <conf_sensor+0x10c>
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d01d      	beq.n	80016fc <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	7bfa      	ldrb	r2, [r7, #15]
 80016c4:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 80016c6:	7d3b      	ldrb	r3, [r7, #20]
 80016c8:	b25b      	sxtb	r3, r3
 80016ca:	f023 0303 	bic.w	r3, r3, #3
 80016ce:	b25a      	sxtb	r2, r3
 80016d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	b25b      	sxtb	r3, r3
 80016da:	4313      	orrs	r3, r2
 80016dc:	b25b      	sxtb	r3, r3
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 80016e2:	f107 0114 	add.w	r1, r7, #20
 80016e6:	f107 0010 	add.w	r0, r7, #16
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f7ff fcae 	bl	800104e <bmp2_set_regs>
 80016f2:	4603      	mov	r3, r0
 80016f4:	75fb      	strb	r3, [r7, #23]
 80016f6:	e001      	b.n	80016fc <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80016f8:	23ff      	movs	r3, #255	; 0xff
 80016fa:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80016fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	78db      	ldrb	r3, [r3, #3]
 8001716:	2b04      	cmp	r3, #4
 8001718:	f200 808b 	bhi.w	8001832 <set_os_mode+0x12a>
 800171c:	a201      	add	r2, pc, #4	; (adr r2, 8001724 <set_os_mode+0x1c>)
 800171e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001722:	bf00      	nop
 8001724:	08001739 	.word	0x08001739
 8001728:	0800176b 	.word	0x0800176b
 800172c:	0800179d 	.word	0x0800179d
 8001730:	080017cf 	.word	0x080017cf
 8001734:	08001801 	.word	0x08001801
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	b25b      	sxtb	r3, r3
 800173e:	f003 031f 	and.w	r3, r3, #31
 8001742:	b25b      	sxtb	r3, r3
 8001744:	f043 0320 	orr.w	r3, r3, #32
 8001748:	b25b      	sxtb	r3, r3
 800174a:	b2da      	uxtb	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	b25b      	sxtb	r3, r3
 8001756:	f023 031c 	bic.w	r3, r3, #28
 800175a:	b25b      	sxtb	r3, r3
 800175c:	f043 0304 	orr.w	r3, r3, #4
 8001760:	b25b      	sxtb	r3, r3
 8001762:	b2da      	uxtb	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	701a      	strb	r2, [r3, #0]
            break;
 8001768:	e064      	b.n	8001834 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	b25b      	sxtb	r3, r3
 8001770:	f003 031f 	and.w	r3, r3, #31
 8001774:	b25b      	sxtb	r3, r3
 8001776:	f043 0320 	orr.w	r3, r3, #32
 800177a:	b25b      	sxtb	r3, r3
 800177c:	b2da      	uxtb	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	b25b      	sxtb	r3, r3
 8001788:	f023 031c 	bic.w	r3, r3, #28
 800178c:	b25b      	sxtb	r3, r3
 800178e:	f043 0308 	orr.w	r3, r3, #8
 8001792:	b25b      	sxtb	r3, r3
 8001794:	b2da      	uxtb	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	701a      	strb	r2, [r3, #0]
            break;
 800179a:	e04b      	b.n	8001834 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	b25b      	sxtb	r3, r3
 80017a2:	f003 031f 	and.w	r3, r3, #31
 80017a6:	b25b      	sxtb	r3, r3
 80017a8:	f043 0320 	orr.w	r3, r3, #32
 80017ac:	b25b      	sxtb	r3, r3
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	b25b      	sxtb	r3, r3
 80017ba:	f023 031c 	bic.w	r3, r3, #28
 80017be:	b25b      	sxtb	r3, r3
 80017c0:	f043 030c 	orr.w	r3, r3, #12
 80017c4:	b25b      	sxtb	r3, r3
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	701a      	strb	r2, [r3, #0]
            break;
 80017cc:	e032      	b.n	8001834 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	b25b      	sxtb	r3, r3
 80017d4:	f003 031f 	and.w	r3, r3, #31
 80017d8:	b25b      	sxtb	r3, r3
 80017da:	f043 0320 	orr.w	r3, r3, #32
 80017de:	b25b      	sxtb	r3, r3
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	b25b      	sxtb	r3, r3
 80017ec:	f023 031c 	bic.w	r3, r3, #28
 80017f0:	b25b      	sxtb	r3, r3
 80017f2:	f043 0310 	orr.w	r3, r3, #16
 80017f6:	b25b      	sxtb	r3, r3
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	701a      	strb	r2, [r3, #0]
            break;
 80017fe:	e019      	b.n	8001834 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	b25b      	sxtb	r3, r3
 8001806:	f003 031f 	and.w	r3, r3, #31
 800180a:	b25b      	sxtb	r3, r3
 800180c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001810:	b25b      	sxtb	r3, r3
 8001812:	b2da      	uxtb	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b25b      	sxtb	r3, r3
 800181e:	f023 031c 	bic.w	r3, r3, #28
 8001822:	b25b      	sxtb	r3, r3
 8001824:	f043 0314 	orr.w	r3, r3, #20
 8001828:	b25b      	sxtb	r3, r3
 800182a:	b2da      	uxtb	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	701a      	strb	r2, [r3, #0]
            break;
 8001830:	e000      	b.n	8001834 <set_os_mode+0x12c>
        default:
            break;
 8001832:	bf00      	nop
    }
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	031b      	lsls	r3, r3, #12
 8001850:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3301      	adds	r3, #1
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	011b      	lsls	r3, r3, #4
 800185a:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3302      	adds	r3, #2
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	091b      	lsrs	r3, r3, #4
 8001864:	b2db      	uxtb	r3, r3
 8001866:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	431a      	orrs	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	431a      	orrs	r2, r3
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	3303      	adds	r3, #3
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	031b      	lsls	r3, r3, #12
 800187e:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3304      	adds	r3, #4
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	011b      	lsls	r3, r3, #4
 8001888:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3305      	adds	r3, #5
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	091b      	lsrs	r3, r3, #4
 8001892:	b2db      	uxtb	r3, r3
 8001894:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	431a      	orrs	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4313      	orrs	r3, r2
 80018a0:	461a      	mov	r2, r3
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	4619      	mov	r1, r3
 80018b0:	4610      	mov	r0, r2
 80018b2:	f000 fae5 	bl	8001e80 <st_check_boundaries>
 80018b6:	4603      	mov	r3, r0
 80018b8:	72fb      	strb	r3, [r7, #11]

    return rslt;
 80018ba:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 80018c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018cc:	b08c      	sub	sp, #48	; 0x30
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7fe fe37 	bl	8000554 <__aeabi_i2d>
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	4b6c      	ldr	r3, [pc, #432]	; (8001a9c <compensate_temperature+0x1d4>)
 80018ec:	f7fe ffc6 	bl	800087c <__aeabi_ddiv>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4614      	mov	r4, r2
 80018f6:	461d      	mov	r5, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	8b9b      	ldrh	r3, [r3, #28]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe fe19 	bl	8000534 <__aeabi_ui2d>
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	4b66      	ldr	r3, [pc, #408]	; (8001aa0 <compensate_temperature+0x1d8>)
 8001908:	f7fe ffb8 	bl	800087c <__aeabi_ddiv>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4620      	mov	r0, r4
 8001912:	4629      	mov	r1, r5
 8001914:	f7fe fcd0 	bl	80002b8 <__aeabi_dsub>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4614      	mov	r4, r2
 800191e:	461d      	mov	r5, r3
           ((double) dev->calib_param.dig_t2);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fe14 	bl	8000554 <__aeabi_i2d>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001930:	4620      	mov	r0, r4
 8001932:	4629      	mov	r1, r5
 8001934:	f7fe fe78 	bl	8000628 <__aeabi_dmul>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fe05 	bl	8000554 <__aeabi_i2d>
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001952:	f7fe ff93 	bl	800087c <__aeabi_ddiv>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4614      	mov	r4, r2
 800195c:	461d      	mov	r5, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	8b9b      	ldrh	r3, [r3, #28]
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe fde6 	bl	8000534 <__aeabi_ui2d>
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	4b4d      	ldr	r3, [pc, #308]	; (8001aa4 <compensate_temperature+0x1dc>)
 800196e:	f7fe ff85 	bl	800087c <__aeabi_ddiv>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4620      	mov	r0, r4
 8001978:	4629      	mov	r1, r5
 800197a:	f7fe fc9d 	bl	80002b8 <__aeabi_dsub>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4614      	mov	r4, r2
 8001984:	461d      	mov	r5, r3
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe fde2 	bl	8000554 <__aeabi_i2d>
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001998:	f7fe ff70 	bl	800087c <__aeabi_ddiv>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4690      	mov	r8, r2
 80019a2:	4699      	mov	r9, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	8b9b      	ldrh	r3, [r3, #28]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7fe fdc3 	bl	8000534 <__aeabi_ui2d>
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	4b3c      	ldr	r3, [pc, #240]	; (8001aa4 <compensate_temperature+0x1dc>)
 80019b4:	f7fe ff62 	bl	800087c <__aeabi_ddiv>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4640      	mov	r0, r8
 80019be:	4649      	mov	r1, r9
 80019c0:	f7fe fc7a 	bl	80002b8 <__aeabi_dsub>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80019c8:	4620      	mov	r0, r4
 80019ca:	4629      	mov	r1, r5
 80019cc:	f7fe fe2c 	bl	8000628 <__aeabi_dmul>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4614      	mov	r4, r2
 80019d6:	461d      	mov	r5, r3
        ((double) dev->calib_param.dig_t3);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe fdb8 	bl	8000554 <__aeabi_i2d>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
    var2 =
 80019e8:	4620      	mov	r0, r4
 80019ea:	4629      	mov	r1, r5
 80019ec:	f7fe fe1c 	bl	8000628 <__aeabi_dmul>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 80019f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a00:	f7fe fc5c 	bl	80002bc <__adddf3>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f7ff f8a6 	bl	8000b5c <__aeabi_d2iz>
 8001a10:	4602      	mov	r2, r0
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	639a      	str	r2, [r3, #56]	; 0x38
    temperature = (var1 + var2) / 5120.0;
 8001a16:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a1a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a1e:	f7fe fc4d 	bl	80002bc <__adddf3>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4610      	mov	r0, r2
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	4b1e      	ldr	r3, [pc, #120]	; (8001aa8 <compensate_temperature+0x1e0>)
 8001a30:	f7fe ff24 	bl	800087c <__aeabi_ddiv>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <compensate_temperature+0x1e4>)
 8001a42:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a46:	f7ff f861 	bl	8000b0c <__aeabi_dcmplt>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d007      	beq.n	8001a60 <compensate_temperature+0x198>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	4b15      	ldr	r3, [pc, #84]	; (8001aac <compensate_temperature+0x1e4>)
 8001a56:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <compensate_temperature+0x1e8>)
 8001a66:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a6a:	f7ff f86d 	bl	8000b48 <__aeabi_dcmpgt>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d007      	beq.n	8001a84 <compensate_temperature+0x1bc>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <compensate_temperature+0x1e8>)
 8001a7a:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*comp_temperature) = temperature;
 8001a84:	68f9      	ldr	r1, [r7, #12]
 8001a86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a8a:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8001a8e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3730      	adds	r7, #48	; 0x30
 8001a96:	46bd      	mov	sp, r7
 8001a98:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a9c:	40d00000 	.word	0x40d00000
 8001aa0:	40900000 	.word	0x40900000
 8001aa4:	40c00000 	.word	0x40c00000
 8001aa8:	40b40000 	.word	0x40b40000
 8001aac:	c0440000 	.word	0xc0440000
 8001ab0:	40554000 	.word	0x40554000
 8001ab4:	00000000 	.word	0x00000000

08001ab8 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001ab8:	b5b0      	push	{r4, r5, r7, lr}
 8001aba:	b08c      	sub	sp, #48	; 0x30
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double pressure = 0.0;
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fd3a 	bl	8000554 <__aeabi_i2d>
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ae8:	f7fe fec8 	bl	800087c <__aeabi_ddiv>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	4bcb      	ldr	r3, [pc, #812]	; (8001e28 <compensate_pressure+0x370>)
 8001afa:	f7fe fbdd 	bl	80002b8 <__aeabi_dsub>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001b06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b0e:	f7fe fd8b 	bl	8000628 <__aeabi_dmul>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4614      	mov	r4, r2
 8001b18:	461d      	mov	r5, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fd17 	bl	8000554 <__aeabi_i2d>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	4629      	mov	r1, r5
 8001b2e:	f7fe fd7b 	bl	8000628 <__aeabi_dmul>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4610      	mov	r0, r2
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	4bbb      	ldr	r3, [pc, #748]	; (8001e2c <compensate_pressure+0x374>)
 8001b40:	f7fe fe9c 	bl	800087c <__aeabi_ddiv>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fcfe 	bl	8000554 <__aeabi_i2d>
 8001b58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b5c:	f7fe fd64 	bl	8000628 <__aeabi_dmul>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	f7fe fba6 	bl	80002bc <__adddf3>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b78:	f7fe fba0 	bl	80002bc <__adddf3>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	4ba9      	ldr	r3, [pc, #676]	; (8001e30 <compensate_pressure+0x378>)
 8001b8a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b8e:	f7fe fe75 	bl	800087c <__aeabi_ddiv>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4614      	mov	r4, r2
 8001b98:	461d      	mov	r5, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fcd7 	bl	8000554 <__aeabi_i2d>
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	4ba2      	ldr	r3, [pc, #648]	; (8001e34 <compensate_pressure+0x37c>)
 8001bac:	f7fe fd3c 	bl	8000628 <__aeabi_dmul>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	4629      	mov	r1, r5
 8001bb8:	f7fe fb80 	bl	80002bc <__adddf3>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fcc2 	bl	8000554 <__aeabi_i2d>
 8001bd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bd4:	f7fe fd28 	bl	8000628 <__aeabi_dmul>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001be4:	f7fe fd20 	bl	8000628 <__aeabi_dmul>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	4b90      	ldr	r3, [pc, #576]	; (8001e38 <compensate_pressure+0x380>)
 8001bf6:	f7fe fe41 	bl	800087c <__aeabi_ddiv>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4614      	mov	r4, r2
 8001c00:	461d      	mov	r5, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe fca3 	bl	8000554 <__aeabi_i2d>
 8001c0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c12:	f7fe fd09 	bl	8000628 <__aeabi_dmul>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	4629      	mov	r1, r5
 8001c1e:	f7fe fb4d 	bl	80002bc <__adddf3>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	4610      	mov	r0, r2
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	4b82      	ldr	r3, [pc, #520]	; (8001e38 <compensate_pressure+0x380>)
 8001c30:	f7fe fe24 	bl	800087c <__aeabi_ddiv>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	e9c7 2306 	strd	r2, r3, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001c3c:	f04f 0200 	mov.w	r2, #0
 8001c40:	4b7a      	ldr	r3, [pc, #488]	; (8001e2c <compensate_pressure+0x374>)
 8001c42:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c46:	f7fe fe19 	bl	800087c <__aeabi_ddiv>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	4b79      	ldr	r3, [pc, #484]	; (8001e3c <compensate_pressure+0x384>)
 8001c58:	f7fe fb30 	bl	80002bc <__adddf3>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4614      	mov	r4, r2
 8001c62:	461d      	mov	r5, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fc63 	bl	8000534 <__aeabi_ui2d>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4620      	mov	r0, r4
 8001c74:	4629      	mov	r1, r5
 8001c76:	f7fe fcd7 	bl	8000628 <__aeabi_dmul>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c8e:	f7fe ff3d 	bl	8000b0c <__aeabi_dcmplt>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10b      	bne.n	8001cb0 <compensate_pressure+0x1f8>
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	f04f 0300 	mov.w	r3, #0
 8001ca0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ca4:	f7fe ff50 	bl	8000b48 <__aeabi_dcmpgt>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 80de 	beq.w	8001e6c <compensate_pressure+0x3b4>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe fc3d 	bl	8000534 <__aeabi_ui2d>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	f04f 0000 	mov.w	r0, #0
 8001cc2:	495f      	ldr	r1, [pc, #380]	; (8001e40 <compensate_pressure+0x388>)
 8001cc4:	f7fe faf8 	bl	80002b8 <__aeabi_dsub>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	e9c7 2308 	strd	r2, r3, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	4b5b      	ldr	r3, [pc, #364]	; (8001e44 <compensate_pressure+0x38c>)
 8001cd6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cda:	f7fe fdcf 	bl	800087c <__aeabi_ddiv>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ce6:	f7fe fae7 	bl	80002b8 <__aeabi_dsub>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4610      	mov	r0, r2
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	a347      	add	r3, pc, #284	; (adr r3, 8001e10 <compensate_pressure+0x358>)
 8001cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf8:	f7fe fc96 	bl	8000628 <__aeabi_dmul>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d08:	f7fe fdb8 	bl	800087c <__aeabi_ddiv>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	e9c7 2308 	strd	r2, r3, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe fc1a 	bl	8000554 <__aeabi_i2d>
 8001d20:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d24:	f7fe fc80 	bl	8000628 <__aeabi_dmul>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	4619      	mov	r1, r3
 8001d30:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d34:	f7fe fc78 	bl	8000628 <__aeabi_dmul>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	4b40      	ldr	r3, [pc, #256]	; (8001e48 <compensate_pressure+0x390>)
 8001d46:	f7fe fd99 	bl	800087c <__aeabi_ddiv>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe fbfb 	bl	8000554 <__aeabi_i2d>
 8001d5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d62:	f7fe fc61 	bl	8000628 <__aeabi_dmul>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	4b2e      	ldr	r3, [pc, #184]	; (8001e2c <compensate_pressure+0x374>)
 8001d74:	f7fe fd82 	bl	800087c <__aeabi_ddiv>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	e9c7 2304 	strd	r2, r3, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8001d80:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d84:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d88:	f7fe fa98 	bl	80002bc <__adddf3>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4614      	mov	r4, r2
 8001d92:	461d      	mov	r5, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fbda 	bl	8000554 <__aeabi_i2d>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4620      	mov	r0, r4
 8001da6:	4629      	mov	r1, r5
 8001da8:	f7fe fa88 	bl	80002bc <__adddf3>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <compensate_pressure+0x394>)
 8001dba:	f7fe fd5f 	bl	800087c <__aeabi_ddiv>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001dc6:	f7fe fa79 	bl	80002bc <__adddf3>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 8001dd2:	a311      	add	r3, pc, #68	; (adr r3, 8001e18 <compensate_pressure+0x360>)
 8001dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ddc:	f7fe fe96 	bl	8000b0c <__aeabi_dcmplt>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d007      	beq.n	8001df6 <compensate_pressure+0x33e>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 8001de6:	a30c      	add	r3, pc, #48	; (adr r3, 8001e18 <compensate_pressure+0x360>)
 8001de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dec:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 8001df0:	2303      	movs	r3, #3
 8001df2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 8001df6:	a30a      	add	r3, pc, #40	; (adr r3, 8001e20 <compensate_pressure+0x368>)
 8001df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e00:	f7fe fea2 	bl	8000b48 <__aeabi_dcmpgt>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	e022      	b.n	8001e50 <compensate_pressure+0x398>
 8001e0a:	bf00      	nop
 8001e0c:	f3af 8000 	nop.w
 8001e10:	00000000 	.word	0x00000000
 8001e14:	40b86a00 	.word	0x40b86a00
 8001e18:	00000000 	.word	0x00000000
 8001e1c:	40dd4c00 	.word	0x40dd4c00
 8001e20:	00000000 	.word	0x00000000
 8001e24:	40fadb00 	.word	0x40fadb00
 8001e28:	40ef4000 	.word	0x40ef4000
 8001e2c:	40e00000 	.word	0x40e00000
 8001e30:	40100000 	.word	0x40100000
 8001e34:	40f00000 	.word	0x40f00000
 8001e38:	41200000 	.word	0x41200000
 8001e3c:	3ff00000 	.word	0x3ff00000
 8001e40:	41300000 	.word	0x41300000
 8001e44:	40b00000 	.word	0x40b00000
 8001e48:	41e00000 	.word	0x41e00000
 8001e4c:	40300000 	.word	0x40300000
 8001e50:	d007      	beq.n	8001e62 <compensate_pressure+0x3aa>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 8001e52:	a309      	add	r3, pc, #36	; (adr r3, 8001e78 <compensate_pressure+0x3c0>)
 8001e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e58:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        (*comp_pressure) = pressure;
 8001e62:	68f9      	ldr	r1, [r7, #12]
 8001e64:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e68:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 8001e6c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3730      	adds	r7, #48	; 0x30
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bdb0      	pop	{r4, r5, r7, pc}
 8001e78:	00000000 	.word	0x00000000
 8001e7c:	40fadb00 	.word	0x40fadb00

08001e80 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	db03      	blt.n	8001e9c <st_check_boundaries+0x1c>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	4a1c      	ldr	r2, [pc, #112]	; (8001f08 <st_check_boundaries+0x88>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	dd09      	ble.n	8001eb0 <st_check_boundaries+0x30>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	db06      	blt.n	8001eb0 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a18      	ldr	r2, [pc, #96]	; (8001f08 <st_check_boundaries+0x88>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	dc02      	bgt.n	8001eb0 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 8001eaa:	23fa      	movs	r3, #250	; 0xfa
 8001eac:	73fb      	strb	r3, [r7, #15]
 8001eae:	e023      	b.n	8001ef8 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	db03      	blt.n	8001ebe <st_check_boundaries+0x3e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a13      	ldr	r2, [pc, #76]	; (8001f08 <st_check_boundaries+0x88>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	dd09      	ble.n	8001ed2 <st_check_boundaries+0x52>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	db06      	blt.n	8001ed2 <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	4a10      	ldr	r2, [pc, #64]	; (8001f08 <st_check_boundaries+0x88>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	dc02      	bgt.n	8001ed2 <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 8001ecc:	23fb      	movs	r3, #251	; 0xfb
 8001ece:	73fb      	strb	r3, [r7, #15]
 8001ed0:	e012      	b.n	8001ef8 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	db03      	blt.n	8001ee0 <st_check_boundaries+0x60>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	4a0b      	ldr	r2, [pc, #44]	; (8001f08 <st_check_boundaries+0x88>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	dd09      	ble.n	8001ef4 <st_check_boundaries+0x74>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	db03      	blt.n	8001eee <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a07      	ldr	r2, [pc, #28]	; (8001f08 <st_check_boundaries+0x88>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	dd02      	ble.n	8001ef4 <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001eee:	23f9      	movs	r3, #249	; 0xf9
 8001ef0:	73fb      	strb	r3, [r7, #15]
 8001ef2:	e001      	b.n	8001ef8 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	000ffff0 	.word	0x000ffff0

08001f0c <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff f837 	bl	8000f88 <bmp2_init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 8001f1e:	f107 0308 	add.w	r3, r7, #8
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff f91c 	bl	8001162 <bmp2_get_config>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_COEFF_8;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 8001f32:	2300      	movs	r3, #0
 8001f34:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 8001f36:	2303      	movs	r3, #3
 8001f38:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 8001f3a:	f107 0308 	add.w	r3, r7, #8
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff f94e 	bl	80011e2 <bmp2_set_config>
 8001f46:	4603      	mov	r3, r0
 8001f48:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 8001f4a:	f107 0308 	add.w	r3, r7, #8
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	4619      	mov	r1, r3
 8001f52:	2003      	movs	r0, #3
 8001f54:	f7ff f980 	bl	8001258 <bmp2_set_power_mode>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 8001f5c:	f107 0108 	add.w	r1, r7, #8
 8001f60:	f107 0310 	add.w	r3, r7, #16
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fa0a 	bl	8001380 <bmp2_compute_meas_time>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8001f70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	607a      	str	r2, [r7, #4]
 8001f86:	603b      	str	r3, [r7, #0]
 8001f88:	4603      	mov	r3, r0
 8001f8a:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001f90:	2300      	movs	r3, #0
 8001f92:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	6858      	ldr	r0, [r3, #4]
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	891b      	ldrh	r3, [r3, #8]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f003 fef4 	bl	8005d90 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI , &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	6818      	ldr	r0, [r3, #0]
 8001fac:	f107 010f 	add.w	r1, r7, #15
 8001fb0:	2305      	movs	r3, #5
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f005 fcd9 	bl	800796a <HAL_SPI_Transmit>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Receive( hbmp2->SPI,  reg_data, length,            BMP2_TIMEOUT);
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	6818      	ldr	r0, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	2305      	movs	r3, #5
 8001fc6:	68b9      	ldr	r1, [r7, #8]
 8001fc8:	f005 fe3d 	bl	8007c46 <HAL_SPI_Receive>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	461a      	mov	r2, r3
 8001fd0:	7dbb      	ldrb	r3, [r7, #22]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	6858      	ldr	r0, [r3, #4]
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	891b      	ldrh	r3, [r3, #8]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f003 fed5 	bl	8005d90 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8001fe6:	7dbb      	ldrb	r3, [r7, #22]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <bmp2_spi_read+0x74>
    iError = -1;
 8001fec:	23ff      	movs	r3, #255	; 0xff
 8001fee:	75fb      	strb	r3, [r7, #23]

  return iError;
 8001ff0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	603b      	str	r3, [r7, #0]
 8002008:	4603      	mov	r3, r0
 800200a:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 800200c:	2300      	movs	r3, #0
 800200e:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8002010:	2300      	movs	r3, #0
 8002012:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	6858      	ldr	r0, [r3, #4]
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	891b      	ldrh	r3, [r3, #8]
 8002020:	2200      	movs	r2, #0
 8002022:	4619      	mov	r1, r3
 8002024:	f003 feb4 	bl	8005d90 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI, &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	6818      	ldr	r0, [r3, #0]
 800202c:	f107 010f 	add.w	r1, r7, #15
 8002030:	2305      	movs	r3, #5
 8002032:	2201      	movs	r2, #1
 8002034:	f005 fc99 	bl	800796a <HAL_SPI_Transmit>
 8002038:	4603      	mov	r3, r0
 800203a:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Transmit(hbmp2->SPI, (uint8_t*)reg_data, length,   BMP2_TIMEOUT);
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	6818      	ldr	r0, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	b29a      	uxth	r2, r3
 8002044:	2305      	movs	r3, #5
 8002046:	68b9      	ldr	r1, [r7, #8]
 8002048:	f005 fc8f 	bl	800796a <HAL_SPI_Transmit>
 800204c:	4603      	mov	r3, r0
 800204e:	461a      	mov	r2, r3
 8002050:	7dbb      	ldrb	r3, [r7, #22]
 8002052:	4413      	add	r3, r2
 8002054:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	6858      	ldr	r0, [r3, #4]
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	891b      	ldrh	r3, [r3, #8]
 800205e:	2201      	movs	r2, #1
 8002060:	4619      	mov	r1, r3
 8002062:	f003 fe95 	bl	8005d90 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8002066:	7dbb      	ldrb	r3, [r7, #22]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <bmp2_spi_write+0x74>
    iError = -1;
 800206c:	23ff      	movs	r3, #255	; 0xff
 800206e:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002070:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a05      	ldr	r2, [pc, #20]	; (80020a0 <bmp2_delay_us+0x24>)
 800208a:	fba2 2303 	umull	r2, r3, r2, r3
 800208e:	099b      	lsrs	r3, r3, #6
 8002090:	4618      	mov	r0, r3
 8002092:	f002 fae1 	bl	8004658 <HAL_Delay>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	10624dd3 	.word	0x10624dd3

080020a4 <BMP2_ReadData>:
 *  @retval 0 -> Success.
 *  @retval <0 -> Failure.
 *
 */
int8_t BMP2_ReadData(struct bmp2_dev *dev, double* press, double* temp)
{
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b08b      	sub	sp, #44	; 0x2c
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
  int8_t rslt = BMP2_E_NULL_PTR;
 80020b0:	23ff      	movs	r3, #255	; 0xff
 80020b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  struct bmp2_status status;
  struct bmp2_data comp_data;
  int8_t try = BMP2_GET_MAX_RETRY(dev);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	899b      	ldrh	r3, [r3, #12]
 80020bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  do {
    /* Read sensor status */
    rslt = bmp2_get_status(&status, dev);
 80020c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c4:	68f9      	ldr	r1, [r7, #12]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff f89a 	bl	8001200 <bmp2_get_status>
 80020cc:	4603      	mov	r3, r0
 80020ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* Read compensated data */
    rslt = bmp2_get_sensor_data(&comp_data, dev);
 80020d2:	f107 0310 	add.w	r3, r7, #16
 80020d6:	68f9      	ldr	r1, [r7, #12]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff f8d2 	bl	8001282 <bmp2_get_sensor_data>
 80020de:	4603      	mov	r3, r0
 80020e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    *temp = comp_data.temperature;
 80020e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	e9c1 2300 	strd	r2, r3, [r1]
    *press = comp_data.pressure / 100.0;
 80020ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	4b1c      	ldr	r3, [pc, #112]	; (8002168 <BMP2_ReadData+0xc4>)
 80020f8:	f7fe fbc0 	bl	800087c <__aeabi_ddiv>
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	68b9      	ldr	r1, [r7, #8]
 8002102:	e9c1 2300 	strd	r2, r3, [r1]
    try--;
 8002106:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800210a:	b2db      	uxtb	r3, r3
 800210c:	3b01      	subs	r3, #1
 800210e:	b2db      	uxtb	r3, r3
 8002110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 8002114:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <BMP2_ReadData+0x80>
 800211c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002120:	2b00      	cmp	r3, #0
 8002122:	dccd      	bgt.n	80020c0 <BMP2_ReadData+0x1c>

  /* Save reading result in sensor handler */
  BMP2_GET_PRESS(dev) = *press;
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212a:	68f9      	ldr	r1, [r7, #12]
 800212c:	684c      	ldr	r4, [r1, #4]
 800212e:	4610      	mov	r0, r2
 8002130:	4619      	mov	r1, r3
 8002132:	f7fe fd5b 	bl	8000bec <__aeabi_d2f>
 8002136:	4603      	mov	r3, r0
 8002138:	6163      	str	r3, [r4, #20]
  BMP2_GET_TEMP(dev) = *temp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002140:	68f9      	ldr	r1, [r7, #12]
 8002142:	684c      	ldr	r4, [r1, #4]
 8002144:	4610      	mov	r0, r2
 8002146:	4619      	mov	r1, r3
 8002148:	f7fe fd50 	bl	8000bec <__aeabi_d2f>
 800214c:	4603      	mov	r3, r0
 800214e:	6123      	str	r3, [r4, #16]
  BMP2_GET_STATUS(dev) = rslt;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002158:	729a      	strb	r2, [r3, #10]

  return rslt;
 800215a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 800215e:	4618      	mov	r0, r3
 8002160:	372c      	adds	r7, #44	; 0x2c
 8002162:	46bd      	mov	sp, r7
 8002164:	bd90      	pop	{r4, r7, pc}
 8002166:	bf00      	nop
 8002168:	40590000 	.word	0x40590000

0800216c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002172:	463b      	mov	r3, r7
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800217e:	4b21      	ldr	r3, [pc, #132]	; (8002204 <MX_ADC1_Init+0x98>)
 8002180:	4a21      	ldr	r2, [pc, #132]	; (8002208 <MX_ADC1_Init+0x9c>)
 8002182:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002184:	4b1f      	ldr	r3, [pc, #124]	; (8002204 <MX_ADC1_Init+0x98>)
 8002186:	2200      	movs	r2, #0
 8002188:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800218a:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <MX_ADC1_Init+0x98>)
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002190:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <MX_ADC1_Init+0x98>)
 8002192:	2200      	movs	r2, #0
 8002194:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002196:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <MX_ADC1_Init+0x98>)
 8002198:	2200      	movs	r2, #0
 800219a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800219c:	4b19      	ldr	r3, [pc, #100]	; (8002204 <MX_ADC1_Init+0x98>)
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021a4:	4b17      	ldr	r3, [pc, #92]	; (8002204 <MX_ADC1_Init+0x98>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021aa:	4b16      	ldr	r3, [pc, #88]	; (8002204 <MX_ADC1_Init+0x98>)
 80021ac:	4a17      	ldr	r2, [pc, #92]	; (800220c <MX_ADC1_Init+0xa0>)
 80021ae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021b0:	4b14      	ldr	r3, [pc, #80]	; (8002204 <MX_ADC1_Init+0x98>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80021b6:	4b13      	ldr	r3, [pc, #76]	; (8002204 <MX_ADC1_Init+0x98>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80021bc:	4b11      	ldr	r3, [pc, #68]	; (8002204 <MX_ADC1_Init+0x98>)
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021c4:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <MX_ADC1_Init+0x98>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80021ca:	480e      	ldr	r0, [pc, #56]	; (8002204 <MX_ADC1_Init+0x98>)
 80021cc:	f002 fa68 	bl	80046a0 <HAL_ADC_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80021d6:	f001 fc39 	bl	8003a4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80021da:	2309      	movs	r3, #9
 80021dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80021de:	2301      	movs	r3, #1
 80021e0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80021e2:	2300      	movs	r3, #0
 80021e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021e6:	463b      	mov	r3, r7
 80021e8:	4619      	mov	r1, r3
 80021ea:	4806      	ldr	r0, [pc, #24]	; (8002204 <MX_ADC1_Init+0x98>)
 80021ec:	f002 fd30 	bl	8004c50 <HAL_ADC_ConfigChannel>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80021f6:	f001 fc29 	bl	8003a4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021fa:	bf00      	nop
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000154 	.word	0x20000154
 8002208:	40012000 	.word	0x40012000
 800220c:	0f000001 	.word	0x0f000001

08002210 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08a      	sub	sp, #40	; 0x28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 0314 	add.w	r3, r7, #20
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a31      	ldr	r2, [pc, #196]	; (80022f4 <HAL_ADC_MspInit+0xe4>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d15b      	bne.n	80022ea <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002232:	4b31      	ldr	r3, [pc, #196]	; (80022f8 <HAL_ADC_MspInit+0xe8>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	4a30      	ldr	r2, [pc, #192]	; (80022f8 <HAL_ADC_MspInit+0xe8>)
 8002238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223c:	6453      	str	r3, [r2, #68]	; 0x44
 800223e:	4b2e      	ldr	r3, [pc, #184]	; (80022f8 <HAL_ADC_MspInit+0xe8>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800224a:	4b2b      	ldr	r3, [pc, #172]	; (80022f8 <HAL_ADC_MspInit+0xe8>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	4a2a      	ldr	r2, [pc, #168]	; (80022f8 <HAL_ADC_MspInit+0xe8>)
 8002250:	f043 0302 	orr.w	r3, r3, #2
 8002254:	6313      	str	r3, [r2, #48]	; 0x30
 8002256:	4b28      	ldr	r3, [pc, #160]	; (80022f8 <HAL_ADC_MspInit+0xe8>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002262:	2302      	movs	r3, #2
 8002264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002266:	2303      	movs	r3, #3
 8002268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800226e:	f107 0314 	add.w	r3, r7, #20
 8002272:	4619      	mov	r1, r3
 8002274:	4821      	ldr	r0, [pc, #132]	; (80022fc <HAL_ADC_MspInit+0xec>)
 8002276:	f003 fbdf 	bl	8005a38 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800227a:	4b21      	ldr	r3, [pc, #132]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 800227c:	4a21      	ldr	r2, [pc, #132]	; (8002304 <HAL_ADC_MspInit+0xf4>)
 800227e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002280:	4b1f      	ldr	r3, [pc, #124]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 8002282:	2200      	movs	r2, #0
 8002284:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002286:	4b1e      	ldr	r3, [pc, #120]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 8002288:	2200      	movs	r2, #0
 800228a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800228c:	4b1c      	ldr	r3, [pc, #112]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 800228e:	2200      	movs	r2, #0
 8002290:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002292:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 8002294:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002298:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800229a:	4b19      	ldr	r3, [pc, #100]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 800229c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022a0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022a2:	4b17      	ldr	r3, [pc, #92]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 80022a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80022aa:	4b15      	ldr	r3, [pc, #84]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 80022ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022b0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80022b2:	4b13      	ldr	r3, [pc, #76]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022b8:	4b11      	ldr	r3, [pc, #68]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80022be:	4810      	ldr	r0, [pc, #64]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 80022c0:	f003 f83e 	bl	8005340 <HAL_DMA_Init>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80022ca:	f001 fbbf 	bl	8003a4c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a0b      	ldr	r2, [pc, #44]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 80022d2:	639a      	str	r2, [r3, #56]	; 0x38
 80022d4:	4a0a      	ldr	r2, [pc, #40]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80022da:	2200      	movs	r2, #0
 80022dc:	2100      	movs	r1, #0
 80022de:	2012      	movs	r0, #18
 80022e0:	f002 ffeb 	bl	80052ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80022e4:	2012      	movs	r0, #18
 80022e6:	f003 f804 	bl	80052f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80022ea:	bf00      	nop
 80022ec:	3728      	adds	r7, #40	; 0x28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40012000 	.word	0x40012000
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40020400 	.word	0x40020400
 8002300:	2000019c 	.word	0x2000019c
 8002304:	40026410 	.word	0x40026410

08002308 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800230e:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <MX_DMA_Init+0x38>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	4a0b      	ldr	r2, [pc, #44]	; (8002340 <MX_DMA_Init+0x38>)
 8002314:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002318:	6313      	str	r3, [r2, #48]	; 0x30
 800231a:	4b09      	ldr	r3, [pc, #36]	; (8002340 <MX_DMA_Init+0x38>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002322:	607b      	str	r3, [r7, #4]
 8002324:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002326:	2200      	movs	r2, #0
 8002328:	2100      	movs	r1, #0
 800232a:	2038      	movs	r0, #56	; 0x38
 800232c:	f002 ffc5 	bl	80052ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002330:	2038      	movs	r0, #56	; 0x38
 8002332:	f002 ffde 	bl	80052f2 <HAL_NVIC_EnableIRQ>

}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800

08002344 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8002348:	2200      	movs	r2, #0
 800234a:	2110      	movs	r1, #16
 800234c:	4803      	ldr	r0, [pc, #12]	; (800235c <SELECT+0x18>)
 800234e:	f003 fd1f 	bl	8005d90 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002352:	2001      	movs	r0, #1
 8002354:	f002 f980 	bl	8004658 <HAL_Delay>
}
 8002358:	bf00      	nop
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40020000 	.word	0x40020000

08002360 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8002364:	2201      	movs	r2, #1
 8002366:	2110      	movs	r1, #16
 8002368:	4803      	ldr	r0, [pc, #12]	; (8002378 <DESELECT+0x18>)
 800236a:	f003 fd11 	bl	8005d90 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800236e:	2001      	movs	r0, #1
 8002370:	f002 f972 	bl	8004658 <HAL_Delay>
}
 8002374:	bf00      	nop
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40020000 	.word	0x40020000

0800237c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002386:	bf00      	nop
 8002388:	4b08      	ldr	r3, [pc, #32]	; (80023ac <SPI_TxByte+0x30>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b02      	cmp	r3, #2
 8002394:	d1f8      	bne.n	8002388 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8002396:	1df9      	adds	r1, r7, #7
 8002398:	2364      	movs	r3, #100	; 0x64
 800239a:	2201      	movs	r2, #1
 800239c:	4803      	ldr	r0, [pc, #12]	; (80023ac <SPI_TxByte+0x30>)
 800239e:	f005 fae4 	bl	800796a <HAL_SPI_Transmit>
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	2000230c 	.word	0x2000230c

080023b0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80023bc:	bf00      	nop
 80023be:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <SPI_TxBuffer+0x30>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d1f8      	bne.n	80023be <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80023cc:	887a      	ldrh	r2, [r7, #2]
 80023ce:	2364      	movs	r3, #100	; 0x64
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4803      	ldr	r0, [pc, #12]	; (80023e0 <SPI_TxBuffer+0x30>)
 80023d4:	f005 fac9 	bl	800796a <HAL_SPI_Transmit>
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	2000230c 	.word	0x2000230c

080023e4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80023ea:	23ff      	movs	r3, #255	; 0xff
 80023ec:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80023ee:	bf00      	nop
 80023f0:	4b09      	ldr	r3, [pc, #36]	; (8002418 <SPI_RxByte+0x34>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d1f8      	bne.n	80023f0 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80023fe:	1dba      	adds	r2, r7, #6
 8002400:	1df9      	adds	r1, r7, #7
 8002402:	2364      	movs	r3, #100	; 0x64
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	2301      	movs	r3, #1
 8002408:	4803      	ldr	r0, [pc, #12]	; (8002418 <SPI_RxByte+0x34>)
 800240a:	f005 fd4c 	bl	8007ea6 <HAL_SPI_TransmitReceive>

	return data;
 800240e:	79bb      	ldrb	r3, [r7, #6]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	2000230c 	.word	0x2000230c

0800241c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8002424:	f7ff ffde 	bl	80023e4 <SPI_RxByte>
 8002428:	4603      	mov	r3, r0
 800242a:	461a      	mov	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	701a      	strb	r2, [r3, #0]
}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800243e:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <SD_ReadyWait+0x30>)
 8002440:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002444:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8002446:	f7ff ffcd 	bl	80023e4 <SPI_RxByte>
 800244a:	4603      	mov	r3, r0
 800244c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	2bff      	cmp	r3, #255	; 0xff
 8002452:	d003      	beq.n	800245c <SD_ReadyWait+0x24>
 8002454:	4b04      	ldr	r3, [pc, #16]	; (8002468 <SD_ReadyWait+0x30>)
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1f4      	bne.n	8002446 <SD_ReadyWait+0xe>

	return res;
 800245c:	79fb      	ldrb	r3, [r7, #7]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	200001fe 	.word	0x200001fe

0800246c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8002472:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8002476:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8002478:	f7ff ff72 	bl	8002360 <DESELECT>
	for(int i = 0; i < 10; i++)
 800247c:	2300      	movs	r3, #0
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	e005      	b.n	800248e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8002482:	20ff      	movs	r0, #255	; 0xff
 8002484:	f7ff ff7a 	bl	800237c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	3301      	adds	r3, #1
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2b09      	cmp	r3, #9
 8002492:	ddf6      	ble.n	8002482 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8002494:	f7ff ff56 	bl	8002344 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8002498:	2340      	movs	r3, #64	; 0x40
 800249a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80024ac:	2395      	movs	r3, #149	; 0x95
 80024ae:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80024b0:	463b      	mov	r3, r7
 80024b2:	2106      	movs	r1, #6
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff7b 	bl	80023b0 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80024ba:	e002      	b.n	80024c2 <SD_PowerOn+0x56>
	{
		cnt--;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	3b01      	subs	r3, #1
 80024c0:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80024c2:	f7ff ff8f 	bl	80023e4 <SPI_RxByte>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d002      	beq.n	80024d2 <SD_PowerOn+0x66>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f4      	bne.n	80024bc <SD_PowerOn+0x50>
	}

	DESELECT();
 80024d2:	f7ff ff45 	bl	8002360 <DESELECT>
	SPI_TxByte(0XFF);
 80024d6:	20ff      	movs	r0, #255	; 0xff
 80024d8:	f7ff ff50 	bl	800237c <SPI_TxByte>

	PowerFlag = 1;
 80024dc:	4b03      	ldr	r3, [pc, #12]	; (80024ec <SD_PowerOn+0x80>)
 80024de:	2201      	movs	r2, #1
 80024e0:	701a      	strb	r2, [r3, #0]
}
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20000201 	.word	0x20000201

080024f0 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80024f4:	4b03      	ldr	r3, [pc, #12]	; (8002504 <SD_PowerOff+0x14>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	701a      	strb	r2, [r3, #0]
}
 80024fa:	bf00      	nop
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	20000201 	.word	0x20000201

08002508 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800250c:	4b03      	ldr	r3, [pc, #12]	; (800251c <SD_CheckPower+0x14>)
 800250e:	781b      	ldrb	r3, [r3, #0]
}
 8002510:	4618      	mov	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	20000201 	.word	0x20000201

08002520 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800252a:	4b13      	ldr	r3, [pc, #76]	; (8002578 <SD_RxDataBlock+0x58>)
 800252c:	22c8      	movs	r2, #200	; 0xc8
 800252e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8002530:	f7ff ff58 	bl	80023e4 <SPI_RxByte>
 8002534:	4603      	mov	r3, r0
 8002536:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	2bff      	cmp	r3, #255	; 0xff
 800253c:	d103      	bne.n	8002546 <SD_RxDataBlock+0x26>
 800253e:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <SD_RxDataBlock+0x58>)
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f4      	bne.n	8002530 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	2bfe      	cmp	r3, #254	; 0xfe
 800254a:	d001      	beq.n	8002550 <SD_RxDataBlock+0x30>
 800254c:	2300      	movs	r3, #0
 800254e:	e00f      	b.n	8002570 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	607a      	str	r2, [r7, #4]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff ff60 	bl	800241c <SPI_RxBytePtr>
	} while(len--);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	1e5a      	subs	r2, r3, #1
 8002560:	603a      	str	r2, [r7, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f4      	bne.n	8002550 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8002566:	f7ff ff3d 	bl	80023e4 <SPI_RxByte>
	SPI_RxByte();
 800256a:	f7ff ff3b 	bl	80023e4 <SPI_RxByte>

	return TRUE;
 800256e:	2301      	movs	r3, #1
}
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	200001fc 	.word	0x200001fc

0800257c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	460b      	mov	r3, r1
 8002586:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800258c:	f7ff ff54 	bl	8002438 <SD_ReadyWait>
 8002590:	4603      	mov	r3, r0
 8002592:	2bff      	cmp	r3, #255	; 0xff
 8002594:	d001      	beq.n	800259a <SD_TxDataBlock+0x1e>
 8002596:	2300      	movs	r3, #0
 8002598:	e02f      	b.n	80025fa <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800259a:	78fb      	ldrb	r3, [r7, #3]
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff feed 	bl	800237c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80025a2:	78fb      	ldrb	r3, [r7, #3]
 80025a4:	2bfd      	cmp	r3, #253	; 0xfd
 80025a6:	d020      	beq.n	80025ea <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80025a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7ff feff 	bl	80023b0 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80025b2:	f7ff ff17 	bl	80023e4 <SPI_RxByte>
		SPI_RxByte();
 80025b6:	f7ff ff15 	bl	80023e4 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80025ba:	e00b      	b.n	80025d4 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80025bc:	f7ff ff12 	bl	80023e4 <SPI_RxByte>
 80025c0:	4603      	mov	r3, r0
 80025c2:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	f003 031f 	and.w	r3, r3, #31
 80025ca:	2b05      	cmp	r3, #5
 80025cc:	d006      	beq.n	80025dc <SD_TxDataBlock+0x60>
			i++;
 80025ce:	7bbb      	ldrb	r3, [r7, #14]
 80025d0:	3301      	adds	r3, #1
 80025d2:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80025d4:	7bbb      	ldrb	r3, [r7, #14]
 80025d6:	2b40      	cmp	r3, #64	; 0x40
 80025d8:	d9f0      	bls.n	80025bc <SD_TxDataBlock+0x40>
 80025da:	e000      	b.n	80025de <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80025dc:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80025de:	bf00      	nop
 80025e0:	f7ff ff00 	bl	80023e4 <SPI_RxByte>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0fa      	beq.n	80025e0 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	f003 031f 	and.w	r3, r3, #31
 80025f0:	2b05      	cmp	r3, #5
 80025f2:	d101      	bne.n	80025f8 <SD_TxDataBlock+0x7c>
 80025f4:	2301      	movs	r3, #1
 80025f6:	e000      	b.n	80025fa <SD_TxDataBlock+0x7e>

	return FALSE;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b084      	sub	sp, #16
 8002606:	af00      	add	r7, sp, #0
 8002608:	4603      	mov	r3, r0
 800260a:	6039      	str	r1, [r7, #0]
 800260c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800260e:	f7ff ff13 	bl	8002438 <SD_ReadyWait>
 8002612:	4603      	mov	r3, r0
 8002614:	2bff      	cmp	r3, #255	; 0xff
 8002616:	d001      	beq.n	800261c <SD_SendCmd+0x1a>
 8002618:	23ff      	movs	r3, #255	; 0xff
 800261a:	e042      	b.n	80026a2 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff feac 	bl	800237c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	0e1b      	lsrs	r3, r3, #24
 8002628:	b2db      	uxtb	r3, r3
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff fea6 	bl	800237c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	0c1b      	lsrs	r3, r3, #16
 8002634:	b2db      	uxtb	r3, r3
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff fea0 	bl	800237c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	0a1b      	lsrs	r3, r3, #8
 8002640:	b2db      	uxtb	r3, r3
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff fe9a 	bl	800237c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	b2db      	uxtb	r3, r3
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fe95 	bl	800237c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	2b40      	cmp	r3, #64	; 0x40
 8002656:	d102      	bne.n	800265e <SD_SendCmd+0x5c>
 8002658:	2395      	movs	r3, #149	; 0x95
 800265a:	73fb      	strb	r3, [r7, #15]
 800265c:	e007      	b.n	800266e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	2b48      	cmp	r3, #72	; 0x48
 8002662:	d102      	bne.n	800266a <SD_SendCmd+0x68>
 8002664:	2387      	movs	r3, #135	; 0x87
 8002666:	73fb      	strb	r3, [r7, #15]
 8002668:	e001      	b.n	800266e <SD_SendCmd+0x6c>
	else crc = 1;
 800266a:	2301      	movs	r3, #1
 800266c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800266e:	7bfb      	ldrb	r3, [r7, #15]
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff fe83 	bl	800237c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	2b4c      	cmp	r3, #76	; 0x4c
 800267a:	d101      	bne.n	8002680 <SD_SendCmd+0x7e>
 800267c:	f7ff feb2 	bl	80023e4 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8002680:	230a      	movs	r3, #10
 8002682:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8002684:	f7ff feae 	bl	80023e4 <SPI_RxByte>
 8002688:	4603      	mov	r3, r0
 800268a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800268c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002690:	2b00      	cmp	r3, #0
 8002692:	da05      	bge.n	80026a0 <SD_SendCmd+0x9e>
 8002694:	7bbb      	ldrb	r3, [r7, #14]
 8002696:	3b01      	subs	r3, #1
 8002698:	73bb      	strb	r3, [r7, #14]
 800269a:	7bbb      	ldrb	r3, [r7, #14]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1f1      	bne.n	8002684 <SD_SendCmd+0x82>

	return res;
 80026a0:	7b7b      	ldrb	r3, [r7, #13]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80026ac:	b590      	push	{r4, r7, lr}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <SD_disk_initialize+0x14>
 80026bc:	2301      	movs	r3, #1
 80026be:	e0d1      	b.n	8002864 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80026c0:	4b6a      	ldr	r3, [pc, #424]	; (800286c <SD_disk_initialize+0x1c0>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <SD_disk_initialize+0x2a>
 80026ce:	4b67      	ldr	r3, [pc, #412]	; (800286c <SD_disk_initialize+0x1c0>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	e0c6      	b.n	8002864 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80026d6:	f7ff fec9 	bl	800246c <SD_PowerOn>

	/* slave select */
	SELECT();
 80026da:	f7ff fe33 	bl	8002344 <SELECT>

	/* check disk type */
	type = 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80026e2:	2100      	movs	r1, #0
 80026e4:	2040      	movs	r0, #64	; 0x40
 80026e6:	f7ff ff8c 	bl	8002602 <SD_SendCmd>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	f040 80a1 	bne.w	8002834 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80026f2:	4b5f      	ldr	r3, [pc, #380]	; (8002870 <SD_disk_initialize+0x1c4>)
 80026f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026f8:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80026fa:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80026fe:	2048      	movs	r0, #72	; 0x48
 8002700:	f7ff ff7f 	bl	8002602 <SD_SendCmd>
 8002704:	4603      	mov	r3, r0
 8002706:	2b01      	cmp	r3, #1
 8002708:	d155      	bne.n	80027b6 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800270a:	2300      	movs	r3, #0
 800270c:	73fb      	strb	r3, [r7, #15]
 800270e:	e00c      	b.n	800272a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8002710:	7bfc      	ldrb	r4, [r7, #15]
 8002712:	f7ff fe67 	bl	80023e4 <SPI_RxByte>
 8002716:	4603      	mov	r3, r0
 8002718:	461a      	mov	r2, r3
 800271a:	f104 0310 	add.w	r3, r4, #16
 800271e:	443b      	add	r3, r7
 8002720:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8002724:	7bfb      	ldrb	r3, [r7, #15]
 8002726:	3301      	adds	r3, #1
 8002728:	73fb      	strb	r3, [r7, #15]
 800272a:	7bfb      	ldrb	r3, [r7, #15]
 800272c:	2b03      	cmp	r3, #3
 800272e:	d9ef      	bls.n	8002710 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8002730:	7abb      	ldrb	r3, [r7, #10]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d17e      	bne.n	8002834 <SD_disk_initialize+0x188>
 8002736:	7afb      	ldrb	r3, [r7, #11]
 8002738:	2baa      	cmp	r3, #170	; 0xaa
 800273a:	d17b      	bne.n	8002834 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800273c:	2100      	movs	r1, #0
 800273e:	2077      	movs	r0, #119	; 0x77
 8002740:	f7ff ff5f 	bl	8002602 <SD_SendCmd>
 8002744:	4603      	mov	r3, r0
 8002746:	2b01      	cmp	r3, #1
 8002748:	d807      	bhi.n	800275a <SD_disk_initialize+0xae>
 800274a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800274e:	2069      	movs	r0, #105	; 0x69
 8002750:	f7ff ff57 	bl	8002602 <SD_SendCmd>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d004      	beq.n	8002764 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800275a:	4b45      	ldr	r3, [pc, #276]	; (8002870 <SD_disk_initialize+0x1c4>)
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1ec      	bne.n	800273c <SD_disk_initialize+0x90>
 8002762:	e000      	b.n	8002766 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002764:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8002766:	4b42      	ldr	r3, [pc, #264]	; (8002870 <SD_disk_initialize+0x1c4>)
 8002768:	881b      	ldrh	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d062      	beq.n	8002834 <SD_disk_initialize+0x188>
 800276e:	2100      	movs	r1, #0
 8002770:	207a      	movs	r0, #122	; 0x7a
 8002772:	f7ff ff46 	bl	8002602 <SD_SendCmd>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d15b      	bne.n	8002834 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800277c:	2300      	movs	r3, #0
 800277e:	73fb      	strb	r3, [r7, #15]
 8002780:	e00c      	b.n	800279c <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8002782:	7bfc      	ldrb	r4, [r7, #15]
 8002784:	f7ff fe2e 	bl	80023e4 <SPI_RxByte>
 8002788:	4603      	mov	r3, r0
 800278a:	461a      	mov	r2, r3
 800278c:	f104 0310 	add.w	r3, r4, #16
 8002790:	443b      	add	r3, r7
 8002792:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8002796:	7bfb      	ldrb	r3, [r7, #15]
 8002798:	3301      	adds	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	2b03      	cmp	r3, #3
 80027a0:	d9ef      	bls.n	8002782 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80027a2:	7a3b      	ldrb	r3, [r7, #8]
 80027a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <SD_disk_initialize+0x104>
 80027ac:	230c      	movs	r3, #12
 80027ae:	e000      	b.n	80027b2 <SD_disk_initialize+0x106>
 80027b0:	2304      	movs	r3, #4
 80027b2:	73bb      	strb	r3, [r7, #14]
 80027b4:	e03e      	b.n	8002834 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80027b6:	2100      	movs	r1, #0
 80027b8:	2077      	movs	r0, #119	; 0x77
 80027ba:	f7ff ff22 	bl	8002602 <SD_SendCmd>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d808      	bhi.n	80027d6 <SD_disk_initialize+0x12a>
 80027c4:	2100      	movs	r1, #0
 80027c6:	2069      	movs	r0, #105	; 0x69
 80027c8:	f7ff ff1b 	bl	8002602 <SD_SendCmd>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d801      	bhi.n	80027d6 <SD_disk_initialize+0x12a>
 80027d2:	2302      	movs	r3, #2
 80027d4:	e000      	b.n	80027d8 <SD_disk_initialize+0x12c>
 80027d6:	2301      	movs	r3, #1
 80027d8:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80027da:	7bbb      	ldrb	r3, [r7, #14]
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d10e      	bne.n	80027fe <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80027e0:	2100      	movs	r1, #0
 80027e2:	2077      	movs	r0, #119	; 0x77
 80027e4:	f7ff ff0d 	bl	8002602 <SD_SendCmd>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d80e      	bhi.n	800280c <SD_disk_initialize+0x160>
 80027ee:	2100      	movs	r1, #0
 80027f0:	2069      	movs	r0, #105	; 0x69
 80027f2:	f7ff ff06 	bl	8002602 <SD_SendCmd>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d107      	bne.n	800280c <SD_disk_initialize+0x160>
 80027fc:	e00c      	b.n	8002818 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80027fe:	2100      	movs	r1, #0
 8002800:	2041      	movs	r0, #65	; 0x41
 8002802:	f7ff fefe 	bl	8002602 <SD_SendCmd>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d004      	beq.n	8002816 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 800280c:	4b18      	ldr	r3, [pc, #96]	; (8002870 <SD_disk_initialize+0x1c4>)
 800280e:	881b      	ldrh	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1e2      	bne.n	80027da <SD_disk_initialize+0x12e>
 8002814:	e000      	b.n	8002818 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8002816:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8002818:	4b15      	ldr	r3, [pc, #84]	; (8002870 <SD_disk_initialize+0x1c4>)
 800281a:	881b      	ldrh	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d007      	beq.n	8002830 <SD_disk_initialize+0x184>
 8002820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002824:	2050      	movs	r0, #80	; 0x50
 8002826:	f7ff feec 	bl	8002602 <SD_SendCmd>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <SD_disk_initialize+0x188>
 8002830:	2300      	movs	r3, #0
 8002832:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8002834:	4a0f      	ldr	r2, [pc, #60]	; (8002874 <SD_disk_initialize+0x1c8>)
 8002836:	7bbb      	ldrb	r3, [r7, #14]
 8002838:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800283a:	f7ff fd91 	bl	8002360 <DESELECT>
	SPI_RxByte();
 800283e:	f7ff fdd1 	bl	80023e4 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8002842:	7bbb      	ldrb	r3, [r7, #14]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d008      	beq.n	800285a <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8002848:	4b08      	ldr	r3, [pc, #32]	; (800286c <SD_disk_initialize+0x1c0>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	f023 0301 	bic.w	r3, r3, #1
 8002852:	b2da      	uxtb	r2, r3
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <SD_disk_initialize+0x1c0>)
 8002856:	701a      	strb	r2, [r3, #0]
 8002858:	e001      	b.n	800285e <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800285a:	f7ff fe49 	bl	80024f0 <SD_PowerOff>
	}

	return Stat;
 800285e:	4b03      	ldr	r3, [pc, #12]	; (800286c <SD_disk_initialize+0x1c0>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	b2db      	uxtb	r3, r3
}
 8002864:	4618      	mov	r0, r3
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	bd90      	pop	{r4, r7, pc}
 800286c:	20000054 	.word	0x20000054
 8002870:	200001fc 	.word	0x200001fc
 8002874:	20000200 	.word	0x20000200

08002878 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <SD_disk_status+0x14>
 8002888:	2301      	movs	r3, #1
 800288a:	e002      	b.n	8002892 <SD_disk_status+0x1a>
	return Stat;
 800288c:	4b04      	ldr	r3, [pc, #16]	; (80028a0 <SD_disk_status+0x28>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	b2db      	uxtb	r3, r3
}
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	20000054 	.word	0x20000054

080028a4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	603b      	str	r3, [r7, #0]
 80028b0:	4603      	mov	r3, r0
 80028b2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d102      	bne.n	80028c0 <SD_disk_read+0x1c>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <SD_disk_read+0x20>
 80028c0:	2304      	movs	r3, #4
 80028c2:	e051      	b.n	8002968 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80028c4:	4b2a      	ldr	r3, [pc, #168]	; (8002970 <SD_disk_read+0xcc>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <SD_disk_read+0x32>
 80028d2:	2303      	movs	r3, #3
 80028d4:	e048      	b.n	8002968 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80028d6:	4b27      	ldr	r3, [pc, #156]	; (8002974 <SD_disk_read+0xd0>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d102      	bne.n	80028e8 <SD_disk_read+0x44>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	025b      	lsls	r3, r3, #9
 80028e6:	607b      	str	r3, [r7, #4]

	SELECT();
 80028e8:	f7ff fd2c 	bl	8002344 <SELECT>

	if (count == 1)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d111      	bne.n	8002916 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	2051      	movs	r0, #81	; 0x51
 80028f6:	f7ff fe84 	bl	8002602 <SD_SendCmd>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d129      	bne.n	8002954 <SD_disk_read+0xb0>
 8002900:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002904:	68b8      	ldr	r0, [r7, #8]
 8002906:	f7ff fe0b 	bl	8002520 <SD_RxDataBlock>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d021      	beq.n	8002954 <SD_disk_read+0xb0>
 8002910:	2300      	movs	r3, #0
 8002912:	603b      	str	r3, [r7, #0]
 8002914:	e01e      	b.n	8002954 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	2052      	movs	r0, #82	; 0x52
 800291a:	f7ff fe72 	bl	8002602 <SD_SendCmd>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d117      	bne.n	8002954 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8002924:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002928:	68b8      	ldr	r0, [r7, #8]
 800292a:	f7ff fdf9 	bl	8002520 <SD_RxDataBlock>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00a      	beq.n	800294a <SD_disk_read+0xa6>
				buff += 512;
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800293a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	3b01      	subs	r3, #1
 8002940:	603b      	str	r3, [r7, #0]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1ed      	bne.n	8002924 <SD_disk_read+0x80>
 8002948:	e000      	b.n	800294c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800294a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800294c:	2100      	movs	r1, #0
 800294e:	204c      	movs	r0, #76	; 0x4c
 8002950:	f7ff fe57 	bl	8002602 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8002954:	f7ff fd04 	bl	8002360 <DESELECT>
	SPI_RxByte();
 8002958:	f7ff fd44 	bl	80023e4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	bf14      	ite	ne
 8002962:	2301      	movne	r3, #1
 8002964:	2300      	moveq	r3, #0
 8002966:	b2db      	uxtb	r3, r3
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	20000054 	.word	0x20000054
 8002974:	20000200 	.word	0x20000200

08002978 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	60b9      	str	r1, [r7, #8]
 8002980:	607a      	str	r2, [r7, #4]
 8002982:	603b      	str	r3, [r7, #0]
 8002984:	4603      	mov	r3, r0
 8002986:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8002988:	7bfb      	ldrb	r3, [r7, #15]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d102      	bne.n	8002994 <SD_disk_write+0x1c>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <SD_disk_write+0x20>
 8002994:	2304      	movs	r3, #4
 8002996:	e06b      	b.n	8002a70 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002998:	4b37      	ldr	r3, [pc, #220]	; (8002a78 <SD_disk_write+0x100>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	b2db      	uxtb	r3, r3
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <SD_disk_write+0x32>
 80029a6:	2303      	movs	r3, #3
 80029a8:	e062      	b.n	8002a70 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80029aa:	4b33      	ldr	r3, [pc, #204]	; (8002a78 <SD_disk_write+0x100>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <SD_disk_write+0x44>
 80029b8:	2302      	movs	r3, #2
 80029ba:	e059      	b.n	8002a70 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80029bc:	4b2f      	ldr	r3, [pc, #188]	; (8002a7c <SD_disk_write+0x104>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d102      	bne.n	80029ce <SD_disk_write+0x56>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	025b      	lsls	r3, r3, #9
 80029cc:	607b      	str	r3, [r7, #4]

	SELECT();
 80029ce:	f7ff fcb9 	bl	8002344 <SELECT>

	if (count == 1)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d110      	bne.n	80029fa <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	2058      	movs	r0, #88	; 0x58
 80029dc:	f7ff fe11 	bl	8002602 <SD_SendCmd>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d13a      	bne.n	8002a5c <SD_disk_write+0xe4>
 80029e6:	21fe      	movs	r1, #254	; 0xfe
 80029e8:	68b8      	ldr	r0, [r7, #8]
 80029ea:	f7ff fdc7 	bl	800257c <SD_TxDataBlock>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d033      	beq.n	8002a5c <SD_disk_write+0xe4>
			count = 0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	e030      	b.n	8002a5c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80029fa:	4b20      	ldr	r3, [pc, #128]	; (8002a7c <SD_disk_write+0x104>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d007      	beq.n	8002a16 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8002a06:	2100      	movs	r1, #0
 8002a08:	2077      	movs	r0, #119	; 0x77
 8002a0a:	f7ff fdfa 	bl	8002602 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8002a0e:	6839      	ldr	r1, [r7, #0]
 8002a10:	2057      	movs	r0, #87	; 0x57
 8002a12:	f7ff fdf6 	bl	8002602 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	2059      	movs	r0, #89	; 0x59
 8002a1a:	f7ff fdf2 	bl	8002602 <SD_SendCmd>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d11b      	bne.n	8002a5c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002a24:	21fc      	movs	r1, #252	; 0xfc
 8002a26:	68b8      	ldr	r0, [r7, #8]
 8002a28:	f7ff fda8 	bl	800257c <SD_TxDataBlock>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00a      	beq.n	8002a48 <SD_disk_write+0xd0>
				buff += 512;
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002a38:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1ee      	bne.n	8002a24 <SD_disk_write+0xac>
 8002a46:	e000      	b.n	8002a4a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002a48:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8002a4a:	21fd      	movs	r1, #253	; 0xfd
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	f7ff fd95 	bl	800257c <SD_TxDataBlock>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <SD_disk_write+0xe4>
			{
				count = 1;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8002a5c:	f7ff fc80 	bl	8002360 <DESELECT>
	SPI_RxByte();
 8002a60:	f7ff fcc0 	bl	80023e4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	bf14      	ite	ne
 8002a6a:	2301      	movne	r3, #1
 8002a6c:	2300      	moveq	r3, #0
 8002a6e:	b2db      	uxtb	r3, r3
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	20000054 	.word	0x20000054
 8002a7c:	20000200 	.word	0x20000200

08002a80 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8002a80:	b590      	push	{r4, r7, lr}
 8002a82:	b08b      	sub	sp, #44	; 0x2c
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	603a      	str	r2, [r7, #0]
 8002a8a:	71fb      	strb	r3, [r7, #7]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8002a94:	79fb      	ldrb	r3, [r7, #7]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <SD_disk_ioctl+0x1e>
 8002a9a:	2304      	movs	r3, #4
 8002a9c:	e115      	b.n	8002cca <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8002aa4:	79bb      	ldrb	r3, [r7, #6]
 8002aa6:	2b05      	cmp	r3, #5
 8002aa8:	d124      	bne.n	8002af4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d012      	beq.n	8002ad8 <SD_disk_ioctl+0x58>
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	dc1a      	bgt.n	8002aec <SD_disk_ioctl+0x6c>
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d002      	beq.n	8002ac0 <SD_disk_ioctl+0x40>
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d006      	beq.n	8002acc <SD_disk_ioctl+0x4c>
 8002abe:	e015      	b.n	8002aec <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8002ac0:	f7ff fd16 	bl	80024f0 <SD_PowerOff>
			res = RES_OK;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002aca:	e0fc      	b.n	8002cc6 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8002acc:	f7ff fcce 	bl	800246c <SD_PowerOn>
			res = RES_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002ad6:	e0f6      	b.n	8002cc6 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
 8002ada:	1c5c      	adds	r4, r3, #1
 8002adc:	f7ff fd14 	bl	8002508 <SD_CheckPower>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002aea:	e0ec      	b.n	8002cc6 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8002aec:	2304      	movs	r3, #4
 8002aee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002af2:	e0e8      	b.n	8002cc6 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002af4:	4b77      	ldr	r3, [pc, #476]	; (8002cd4 <SD_disk_ioctl+0x254>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <SD_disk_ioctl+0x86>
 8002b02:	2303      	movs	r3, #3
 8002b04:	e0e1      	b.n	8002cca <SD_disk_ioctl+0x24a>

		SELECT();
 8002b06:	f7ff fc1d 	bl	8002344 <SELECT>

		switch (ctrl)
 8002b0a:	79bb      	ldrb	r3, [r7, #6]
 8002b0c:	2b0d      	cmp	r3, #13
 8002b0e:	f200 80cb 	bhi.w	8002ca8 <SD_disk_ioctl+0x228>
 8002b12:	a201      	add	r2, pc, #4	; (adr r2, 8002b18 <SD_disk_ioctl+0x98>)
 8002b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b18:	08002c13 	.word	0x08002c13
 8002b1c:	08002b51 	.word	0x08002b51
 8002b20:	08002c03 	.word	0x08002c03
 8002b24:	08002ca9 	.word	0x08002ca9
 8002b28:	08002ca9 	.word	0x08002ca9
 8002b2c:	08002ca9 	.word	0x08002ca9
 8002b30:	08002ca9 	.word	0x08002ca9
 8002b34:	08002ca9 	.word	0x08002ca9
 8002b38:	08002ca9 	.word	0x08002ca9
 8002b3c:	08002ca9 	.word	0x08002ca9
 8002b40:	08002ca9 	.word	0x08002ca9
 8002b44:	08002c25 	.word	0x08002c25
 8002b48:	08002c49 	.word	0x08002c49
 8002b4c:	08002c6d 	.word	0x08002c6d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002b50:	2100      	movs	r1, #0
 8002b52:	2049      	movs	r0, #73	; 0x49
 8002b54:	f7ff fd55 	bl	8002602 <SD_SendCmd>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f040 80a8 	bne.w	8002cb0 <SD_disk_ioctl+0x230>
 8002b60:	f107 030c 	add.w	r3, r7, #12
 8002b64:	2110      	movs	r1, #16
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff fcda 	bl	8002520 <SD_RxDataBlock>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 809e 	beq.w	8002cb0 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8002b74:	7b3b      	ldrb	r3, [r7, #12]
 8002b76:	099b      	lsrs	r3, r3, #6
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d10e      	bne.n	8002b9c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002b7e:	7d7b      	ldrb	r3, [r7, #21]
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	7d3b      	ldrb	r3, [r7, #20]
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	021b      	lsls	r3, r3, #8
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	3301      	adds	r3, #1
 8002b90:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8002b92:	8bfb      	ldrh	r3, [r7, #30]
 8002b94:	029a      	lsls	r2, r3, #10
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	e02e      	b.n	8002bfa <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002b9c:	7c7b      	ldrb	r3, [r7, #17]
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	7dbb      	ldrb	r3, [r7, #22]
 8002ba6:	09db      	lsrs	r3, r3, #7
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	4413      	add	r3, r2
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	7d7b      	ldrb	r3, [r7, #21]
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	f003 0306 	and.w	r3, r3, #6
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	4413      	add	r3, r2
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	3302      	adds	r3, #2
 8002bc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002bc4:	7d3b      	ldrb	r3, [r7, #20]
 8002bc6:	099b      	lsrs	r3, r3, #6
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	7cfb      	ldrb	r3, [r7, #19]
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	4413      	add	r3, r2
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	7cbb      	ldrb	r3, [r7, #18]
 8002bda:	029b      	lsls	r3, r3, #10
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	4413      	add	r3, r2
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	3301      	adds	r3, #1
 8002bea:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8002bec:	8bfa      	ldrh	r2, [r7, #30]
 8002bee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002bf2:	3b09      	subs	r3, #9
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8002c00:	e056      	b.n	8002cb0 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c08:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002c10:	e055      	b.n	8002cbe <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8002c12:	f7ff fc11 	bl	8002438 <SD_ReadyWait>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2bff      	cmp	r3, #255	; 0xff
 8002c1a:	d14b      	bne.n	8002cb4 <SD_disk_ioctl+0x234>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002c22:	e047      	b.n	8002cb4 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002c24:	2100      	movs	r1, #0
 8002c26:	2049      	movs	r0, #73	; 0x49
 8002c28:	f7ff fceb 	bl	8002602 <SD_SendCmd>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d142      	bne.n	8002cb8 <SD_disk_ioctl+0x238>
 8002c32:	2110      	movs	r1, #16
 8002c34:	6a38      	ldr	r0, [r7, #32]
 8002c36:	f7ff fc73 	bl	8002520 <SD_RxDataBlock>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d03b      	beq.n	8002cb8 <SD_disk_ioctl+0x238>
 8002c40:	2300      	movs	r3, #0
 8002c42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002c46:	e037      	b.n	8002cb8 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002c48:	2100      	movs	r1, #0
 8002c4a:	204a      	movs	r0, #74	; 0x4a
 8002c4c:	f7ff fcd9 	bl	8002602 <SD_SendCmd>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d132      	bne.n	8002cbc <SD_disk_ioctl+0x23c>
 8002c56:	2110      	movs	r1, #16
 8002c58:	6a38      	ldr	r0, [r7, #32]
 8002c5a:	f7ff fc61 	bl	8002520 <SD_RxDataBlock>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d02b      	beq.n	8002cbc <SD_disk_ioctl+0x23c>
 8002c64:	2300      	movs	r3, #0
 8002c66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002c6a:	e027      	b.n	8002cbc <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	207a      	movs	r0, #122	; 0x7a
 8002c70:	f7ff fcc7 	bl	8002602 <SD_SendCmd>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d116      	bne.n	8002ca8 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002c80:	e00b      	b.n	8002c9a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8002c82:	6a3c      	ldr	r4, [r7, #32]
 8002c84:	1c63      	adds	r3, r4, #1
 8002c86:	623b      	str	r3, [r7, #32]
 8002c88:	f7ff fbac 	bl	80023e4 <SPI_RxByte>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8002c90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002c94:	3301      	adds	r3, #1
 8002c96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002c9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002c9e:	2b03      	cmp	r3, #3
 8002ca0:	d9ef      	bls.n	8002c82 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8002ca8:	2304      	movs	r3, #4
 8002caa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002cae:	e006      	b.n	8002cbe <SD_disk_ioctl+0x23e>
			break;
 8002cb0:	bf00      	nop
 8002cb2:	e004      	b.n	8002cbe <SD_disk_ioctl+0x23e>
			break;
 8002cb4:	bf00      	nop
 8002cb6:	e002      	b.n	8002cbe <SD_disk_ioctl+0x23e>
			break;
 8002cb8:	bf00      	nop
 8002cba:	e000      	b.n	8002cbe <SD_disk_ioctl+0x23e>
			break;
 8002cbc:	bf00      	nop
		}

		DESELECT();
 8002cbe:	f7ff fb4f 	bl	8002360 <DESELECT>
		SPI_RxByte();
 8002cc2:	f7ff fb8f 	bl	80023e4 <SPI_RxByte>
	}

	return res;
 8002cc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	372c      	adds	r7, #44	; 0x2c
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd90      	pop	{r4, r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20000054 	.word	0x20000054

08002cd8 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08e      	sub	sp, #56	; 0x38
 8002cdc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	605a      	str	r2, [r3, #4]
 8002ce8:	609a      	str	r2, [r3, #8]
 8002cea:	60da      	str	r2, [r3, #12]
 8002cec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cee:	4bb4      	ldr	r3, [pc, #720]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	4ab3      	ldr	r2, [pc, #716]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002cf4:	f043 0310 	orr.w	r3, r3, #16
 8002cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfa:	4bb1      	ldr	r3, [pc, #708]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	f003 0310 	and.w	r3, r3, #16
 8002d02:	623b      	str	r3, [r7, #32]
 8002d04:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d06:	4bae      	ldr	r3, [pc, #696]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	4aad      	ldr	r2, [pc, #692]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d0c:	f043 0304 	orr.w	r3, r3, #4
 8002d10:	6313      	str	r3, [r2, #48]	; 0x30
 8002d12:	4bab      	ldr	r3, [pc, #684]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	f003 0304 	and.w	r3, r3, #4
 8002d1a:	61fb      	str	r3, [r7, #28]
 8002d1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d1e:	4ba8      	ldr	r3, [pc, #672]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	4aa7      	ldr	r2, [pc, #668]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d24:	f043 0320 	orr.w	r3, r3, #32
 8002d28:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2a:	4ba5      	ldr	r3, [pc, #660]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	f003 0320 	and.w	r3, r3, #32
 8002d32:	61bb      	str	r3, [r7, #24]
 8002d34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d36:	4ba2      	ldr	r3, [pc, #648]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	4aa1      	ldr	r2, [pc, #644]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d40:	6313      	str	r3, [r2, #48]	; 0x30
 8002d42:	4b9f      	ldr	r3, [pc, #636]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4e:	4b9c      	ldr	r3, [pc, #624]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	4a9b      	ldr	r2, [pc, #620]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5a:	4b99      	ldr	r3, [pc, #612]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	613b      	str	r3, [r7, #16]
 8002d64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d66:	4b96      	ldr	r3, [pc, #600]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	4a95      	ldr	r2, [pc, #596]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d6c:	f043 0302 	orr.w	r3, r3, #2
 8002d70:	6313      	str	r3, [r2, #48]	; 0x30
 8002d72:	4b93      	ldr	r3, [pc, #588]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d7e:	4b90      	ldr	r3, [pc, #576]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	4a8f      	ldr	r2, [pc, #572]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d84:	f043 0308 	orr.w	r3, r3, #8
 8002d88:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8a:	4b8d      	ldr	r3, [pc, #564]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	60bb      	str	r3, [r7, #8]
 8002d94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d96:	4b8a      	ldr	r3, [pc, #552]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	4a89      	ldr	r2, [pc, #548]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002da0:	6313      	str	r3, [r2, #48]	; 0x30
 8002da2:	4b87      	ldr	r3, [pc, #540]	; (8002fc0 <MX_GPIO_Init+0x2e8>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002daa:	607b      	str	r3, [r7, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMP2_CSB_GPIO_Port, BMP2_CSB_Pin, GPIO_PIN_RESET);
 8002dae:	2200      	movs	r2, #0
 8002db0:	2110      	movs	r1, #16
 8002db2:	4884      	ldr	r0, [pc, #528]	; (8002fc4 <MX_GPIO_Init+0x2ec>)
 8002db4:	f002 ffec 	bl	8005d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CARD_GPIO_Port, SD_CARD_Pin, GPIO_PIN_SET);
 8002db8:	2201      	movs	r2, #1
 8002dba:	2110      	movs	r1, #16
 8002dbc:	4882      	ldr	r0, [pc, #520]	; (8002fc8 <MX_GPIO_Init+0x2f0>)
 8002dbe:	f002 ffe7 	bl	8005d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f244 0181 	movw	r1, #16513	; 0x4081
 8002dc8:	4880      	ldr	r0, [pc, #512]	; (8002fcc <MX_GPIO_Init+0x2f4>)
 8002dca:	f002 ffe1 	bl	8005d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dd4:	487e      	ldr	r0, [pc, #504]	; (8002fd0 <MX_GPIO_Init+0x2f8>)
 8002dd6:	f002 ffdb 	bl	8005d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|LD4_Pin|LD5_Pin, GPIO_PIN_RESET);
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f244 2140 	movw	r1, #16960	; 0x4240
 8002de0:	487c      	ldr	r0, [pc, #496]	; (8002fd4 <MX_GPIO_Init+0x2fc>)
 8002de2:	f002 ffd5 	bl	8005d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMP2_CSB_Pin;
 8002de6:	2310      	movs	r3, #16
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dea:	2301      	movs	r3, #1
 8002dec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df2:	2303      	movs	r3, #3
 8002df4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BMP2_CSB_GPIO_Port, &GPIO_InitStruct);
 8002df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4871      	ldr	r0, [pc, #452]	; (8002fc4 <MX_GPIO_Init+0x2ec>)
 8002dfe:	f002 fe1b 	bl	8005a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002e02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e08:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e16:	4619      	mov	r1, r3
 8002e18:	486f      	ldr	r0, [pc, #444]	; (8002fd8 <MX_GPIO_Init+0x300>)
 8002e1a:	f002 fe0d 	bl	8005a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = test_Pin;
 8002e1e:	2304      	movs	r3, #4
 8002e20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e22:	2300      	movs	r3, #0
 8002e24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(test_GPIO_Port, &GPIO_InitStruct);
 8002e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4867      	ldr	r0, [pc, #412]	; (8002fd0 <MX_GPIO_Init+0x2f8>)
 8002e32:	f002 fe01 	bl	8005a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002e36:	2332      	movs	r3, #50	; 0x32
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e42:	2303      	movs	r3, #3
 8002e44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002e46:	230b      	movs	r3, #11
 8002e48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4861      	ldr	r0, [pc, #388]	; (8002fd8 <MX_GPIO_Init+0x300>)
 8002e52:	f002 fdf1 	bl	8005a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002e56:	2386      	movs	r3, #134	; 0x86
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e62:	2303      	movs	r3, #3
 8002e64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002e66:	230b      	movs	r3, #11
 8002e68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4855      	ldr	r0, [pc, #340]	; (8002fc8 <MX_GPIO_Init+0x2f0>)
 8002e72:	f002 fde1 	bl	8005a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CARD_Pin;
 8002e76:	2310      	movs	r3, #16
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002e82:	2301      	movs	r3, #1
 8002e84:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CARD_GPIO_Port, &GPIO_InitStruct);
 8002e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	484e      	ldr	r0, [pc, #312]	; (8002fc8 <MX_GPIO_Init+0x2f0>)
 8002e8e:	f002 fdd3 	bl	8005a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002e92:	f244 0381 	movw	r3, #16513	; 0x4081
 8002e96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4848      	ldr	r0, [pc, #288]	; (8002fcc <MX_GPIO_Init+0x2f4>)
 8002eac:	f002 fdc4 	bl	8005a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ON_Btn_Pin;
 8002eb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002eb6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002eba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ON_Btn_GPIO_Port, &GPIO_InitStruct);
 8002ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4842      	ldr	r0, [pc, #264]	; (8002fd0 <MX_GPIO_Init+0x2f8>)
 8002ec8:	f002 fdb6 	bl	8005a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002ecc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eda:	2300      	movs	r3, #0
 8002edc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	483a      	ldr	r0, [pc, #232]	; (8002fd0 <MX_GPIO_Init+0x2f8>)
 8002ee6:	f002 fda7 	bl	8005a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OFF_Btn_Pin;
 8002eea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ef0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OFF_Btn_GPIO_Port, &GPIO_InitStruct);
 8002efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002efe:	4619      	mov	r1, r3
 8002f00:	4830      	ldr	r0, [pc, #192]	; (8002fc4 <MX_GPIO_Init+0x2ec>)
 8002f02:	f002 fd99 	bl	8005a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002f06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f10:	2300      	movs	r3, #0
 8002f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f14:	2303      	movs	r3, #3
 8002f16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002f18:	230b      	movs	r3, #11
 8002f1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f20:	4619      	mov	r1, r3
 8002f22:	482a      	ldr	r0, [pc, #168]	; (8002fcc <MX_GPIO_Init+0x2f4>)
 8002f24:	f002 fd88 	bl	8005a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|LD4_Pin|LD5_Pin;
 8002f28:	f244 2340 	movw	r3, #16960	; 0x4240
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f36:	2300      	movs	r3, #0
 8002f38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4824      	ldr	r0, [pc, #144]	; (8002fd4 <MX_GPIO_Init+0x2fc>)
 8002f42:	f002 fd79 	bl	8005a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002f46:	2380      	movs	r3, #128	; 0x80
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f56:	4619      	mov	r1, r3
 8002f58:	481e      	ldr	r0, [pc, #120]	; (8002fd4 <MX_GPIO_Init+0x2fc>)
 8002f5a:	f002 fd6d 	bl	8005a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002f5e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002f62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f64:	2302      	movs	r3, #2
 8002f66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002f70:	230a      	movs	r3, #10
 8002f72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4813      	ldr	r0, [pc, #76]	; (8002fc8 <MX_GPIO_Init+0x2f0>)
 8002f7c:	f002 fd5c 	bl	8005a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002f80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f86:	2300      	movs	r3, #0
 8002f88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f92:	4619      	mov	r1, r3
 8002f94:	480c      	ldr	r0, [pc, #48]	; (8002fc8 <MX_GPIO_Init+0x2f0>)
 8002f96:	f002 fd4f 	bl	8005a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002f9a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002f9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002fac:	230b      	movs	r3, #11
 8002fae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4807      	ldr	r0, [pc, #28]	; (8002fd4 <MX_GPIO_Init+0x2fc>)
 8002fb8:	f002 fd3e 	bl	8005a38 <HAL_GPIO_Init>

}
 8002fbc:	bf00      	nop
 8002fbe:	e00d      	b.n	8002fdc <MX_GPIO_Init+0x304>
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40020000 	.word	0x40020000
 8002fcc:	40020400 	.word	0x40020400
 8002fd0:	40021400 	.word	0x40021400
 8002fd4:	40021800 	.word	0x40021800
 8002fd8:	40020800 	.word	0x40020800
 8002fdc:	3738      	adds	r7, #56	; 0x38
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop

08002fe4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002fe8:	4b1b      	ldr	r3, [pc, #108]	; (8003058 <MX_I2C1_Init+0x74>)
 8002fea:	4a1c      	ldr	r2, [pc, #112]	; (800305c <MX_I2C1_Init+0x78>)
 8002fec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8002fee:	4b1a      	ldr	r3, [pc, #104]	; (8003058 <MX_I2C1_Init+0x74>)
 8002ff0:	4a1b      	ldr	r2, [pc, #108]	; (8003060 <MX_I2C1_Init+0x7c>)
 8002ff2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002ff4:	4b18      	ldr	r3, [pc, #96]	; (8003058 <MX_I2C1_Init+0x74>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ffa:	4b17      	ldr	r3, [pc, #92]	; (8003058 <MX_I2C1_Init+0x74>)
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003000:	4b15      	ldr	r3, [pc, #84]	; (8003058 <MX_I2C1_Init+0x74>)
 8003002:	2200      	movs	r2, #0
 8003004:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003006:	4b14      	ldr	r3, [pc, #80]	; (8003058 <MX_I2C1_Init+0x74>)
 8003008:	2200      	movs	r2, #0
 800300a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800300c:	4b12      	ldr	r3, [pc, #72]	; (8003058 <MX_I2C1_Init+0x74>)
 800300e:	2200      	movs	r2, #0
 8003010:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003012:	4b11      	ldr	r3, [pc, #68]	; (8003058 <MX_I2C1_Init+0x74>)
 8003014:	2200      	movs	r2, #0
 8003016:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003018:	4b0f      	ldr	r3, [pc, #60]	; (8003058 <MX_I2C1_Init+0x74>)
 800301a:	2200      	movs	r2, #0
 800301c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800301e:	480e      	ldr	r0, [pc, #56]	; (8003058 <MX_I2C1_Init+0x74>)
 8003020:	f002 fed0 	bl	8005dc4 <HAL_I2C_Init>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800302a:	f000 fd0f 	bl	8003a4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800302e:	2100      	movs	r1, #0
 8003030:	4809      	ldr	r0, [pc, #36]	; (8003058 <MX_I2C1_Init+0x74>)
 8003032:	f003 fa3d 	bl	80064b0 <HAL_I2CEx_ConfigAnalogFilter>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800303c:	f000 fd06 	bl	8003a4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003040:	2100      	movs	r1, #0
 8003042:	4805      	ldr	r0, [pc, #20]	; (8003058 <MX_I2C1_Init+0x74>)
 8003044:	f003 fa7f 	bl	8006546 <HAL_I2CEx_ConfigDigitalFilter>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800304e:	f000 fcfd 	bl	8003a4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003052:	bf00      	nop
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	20000204 	.word	0x20000204
 800305c:	40005400 	.word	0x40005400
 8003060:	20404768 	.word	0x20404768

08003064 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b0aa      	sub	sp, #168	; 0xa8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800306c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	605a      	str	r2, [r3, #4]
 8003076:	609a      	str	r2, [r3, #8]
 8003078:	60da      	str	r2, [r3, #12]
 800307a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800307c:	f107 0310 	add.w	r3, r7, #16
 8003080:	2284      	movs	r2, #132	; 0x84
 8003082:	2100      	movs	r1, #0
 8003084:	4618      	mov	r0, r3
 8003086:	f00a ff95 	bl	800dfb4 <memset>
  if(i2cHandle->Instance==I2C1)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a22      	ldr	r2, [pc, #136]	; (8003118 <HAL_I2C_MspInit+0xb4>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d13c      	bne.n	800310e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003094:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003098:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800309a:	2300      	movs	r3, #0
 800309c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800309e:	f107 0310 	add.w	r3, r7, #16
 80030a2:	4618      	mov	r0, r3
 80030a4:	f003 ffc6 	bl	8007034 <HAL_RCCEx_PeriphCLKConfig>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80030ae:	f000 fccd 	bl	8003a4c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b2:	4b1a      	ldr	r3, [pc, #104]	; (800311c <HAL_I2C_MspInit+0xb8>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	4a19      	ldr	r2, [pc, #100]	; (800311c <HAL_I2C_MspInit+0xb8>)
 80030b8:	f043 0302 	orr.w	r3, r3, #2
 80030bc:	6313      	str	r3, [r2, #48]	; 0x30
 80030be:	4b17      	ldr	r3, [pc, #92]	; (800311c <HAL_I2C_MspInit+0xb8>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80030ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80030ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030d2:	2312      	movs	r3, #18
 80030d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d8:	2300      	movs	r3, #0
 80030da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030de:	2303      	movs	r3, #3
 80030e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80030e4:	2304      	movs	r3, #4
 80030e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80030ee:	4619      	mov	r1, r3
 80030f0:	480b      	ldr	r0, [pc, #44]	; (8003120 <HAL_I2C_MspInit+0xbc>)
 80030f2:	f002 fca1 	bl	8005a38 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80030f6:	4b09      	ldr	r3, [pc, #36]	; (800311c <HAL_I2C_MspInit+0xb8>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	4a08      	ldr	r2, [pc, #32]	; (800311c <HAL_I2C_MspInit+0xb8>)
 80030fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003100:	6413      	str	r3, [r2, #64]	; 0x40
 8003102:	4b06      	ldr	r3, [pc, #24]	; (800311c <HAL_I2C_MspInit+0xb8>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800310a:	60bb      	str	r3, [r7, #8]
 800310c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800310e:	bf00      	nop
 8003110:	37a8      	adds	r7, #168	; 0xa8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40005400 	.word	0x40005400
 800311c:	40023800 	.word	0x40023800
 8003120:	40020400 	.word	0x40020400

08003124 <lcd_init>:
#include "lcd_chars.h"
#include "stm32f7xx_hal.h"
#include "i2c.h"

void lcd_init(struct lcd_disp * lcd)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 800312c:	2300      	movs	r3, #0
 800312e:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 800313a:	2308      	movs	r3, #8
 800313c:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 800313e:	2028      	movs	r0, #40	; 0x28
 8003140:	f001 fa8a 	bl	8004658 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	7bfa      	ldrb	r2, [r7, #15]
 800314a:	2130      	movs	r1, #48	; 0x30
 800314c:	4618      	mov	r0, r3
 800314e:	f000 f82f 	bl	80031b0 <lcd_write>
	HAL_Delay(5);
 8003152:	2005      	movs	r0, #5
 8003154:	f001 fa80 	bl	8004658 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	7bfa      	ldrb	r2, [r7, #15]
 800315e:	2130      	movs	r1, #48	; 0x30
 8003160:	4618      	mov	r0, r3
 8003162:	f000 f825 	bl	80031b0 <lcd_write>
	HAL_Delay(1);
 8003166:	2001      	movs	r0, #1
 8003168:	f001 fa76 	bl	8004658 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	7bfa      	ldrb	r2, [r7, #15]
 8003172:	2130      	movs	r1, #48	; 0x30
 8003174:	4618      	mov	r0, r3
 8003176:	f000 f81b 	bl	80031b0 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	7bfa      	ldrb	r2, [r7, #15]
 8003180:	2102      	movs	r1, #2
 8003182:	4618      	mov	r0, r3
 8003184:	f000 f814 	bl	80031b0 <lcd_write>
	HAL_Delay(5);
 8003188:	2005      	movs	r0, #5
 800318a:	f001 fa65 	bl	8004658 <HAL_Delay>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	7bfa      	ldrb	r2, [r7, #15]
 8003194:	210c      	movs	r1, #12
 8003196:	4618      	mov	r0, r3
 8003198:	f000 f80a 	bl	80031b0 <lcd_write>
	HAL_Delay(5);
 800319c:	2005      	movs	r0, #5
 800319e:	f001 fa5b 	bl	8004658 <HAL_Delay>

	/* clear */
	lcd_clear(lcd);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f8a8 	bl	80032f8 <lcd_clear>


}
 80031a8:	bf00      	nop
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af02      	add	r7, sp, #8
 80031b6:	4603      	mov	r3, r0
 80031b8:	71fb      	strb	r3, [r7, #7]
 80031ba:	460b      	mov	r3, r1
 80031bc:	71bb      	strb	r3, [r7, #6]
 80031be:	4613      	mov	r3, r2
 80031c0:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 80031c2:	79bb      	ldrb	r3, [r7, #6]
 80031c4:	f023 030f 	bic.w	r3, r3, #15
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	797b      	ldrb	r3, [r7, #5]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	f043 0304 	orr.w	r3, r3, #4
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 80031d8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80031dc:	f023 030f 	bic.w	r3, r3, #15
 80031e0:	b25a      	sxtb	r2, r3
 80031e2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	b25b      	sxtb	r3, r3
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 80031ee:	79bb      	ldrb	r3, [r7, #6]
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	797b      	ldrb	r3, [r7, #5]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	f043 0304 	orr.w	r3, r3, #4
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 8003202:	79bb      	ldrb	r3, [r7, #6]
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	b25a      	sxtb	r2, r3
 8003208:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800320c:	4313      	orrs	r3, r2
 800320e:	b25b      	sxtb	r3, r3
 8003210:	b2db      	uxtb	r3, r3
 8003212:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	b299      	uxth	r1, r3
 8003218:	f107 020c 	add.w	r2, r7, #12
 800321c:	2364      	movs	r3, #100	; 0x64
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	2304      	movs	r3, #4
 8003222:	4803      	ldr	r0, [pc, #12]	; (8003230 <lcd_write+0x80>)
 8003224:	f002 fe5e 	bl	8005ee4 <HAL_I2C_Master_Transmit>
}
 8003228:	bf00      	nop
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20000204 	.word	0x20000204

08003234 <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 800323c:	2300      	movs	r3, #0
 800323e:	73fb      	strb	r3, [r7, #15]
 8003240:	2300      	movs	r3, #0
 8003242:	73bb      	strb	r3, [r7, #14]
	char ch;

	/* set backlight */
	if(lcd->bl)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 800324e:	2308      	movs	r3, #8
 8003250:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f850 	bl	80032f8 <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	7bfa      	ldrb	r2, [r7, #15]
 800325e:	2180      	movs	r1, #128	; 0x80
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff ffa5 	bl	80031b0 <lcd_write>
	while(ch = lcd->f_line[i])
 8003266:	e015      	b.n	8003294 <lcd_display+0x60>
	{
		if (ch < 9)
 8003268:	7b7b      	ldrb	r3, [r7, #13]
 800326a:	2b08      	cmp	r3, #8
 800326c:	d802      	bhi.n	8003274 <lcd_display+0x40>
		{
			ch--;
 800326e:	7b7b      	ldrb	r3, [r7, #13]
 8003270:	3b01      	subs	r3, #1
 8003272:	737b      	strb	r3, [r7, #13]
		}
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	7818      	ldrb	r0, [r3, #0]
 8003278:	7bbb      	ldrb	r3, [r7, #14]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	4413      	add	r3, r2
 800327e:	7859      	ldrb	r1, [r3, #1]
 8003280:	7bfb      	ldrb	r3, [r7, #15]
 8003282:	f043 0301 	orr.w	r3, r3, #1
 8003286:	b2db      	uxtb	r3, r3
 8003288:	461a      	mov	r2, r3
 800328a:	f7ff ff91 	bl	80031b0 <lcd_write>
		i++;
 800328e:	7bbb      	ldrb	r3, [r7, #14]
 8003290:	3301      	adds	r3, #1
 8003292:	73bb      	strb	r3, [r7, #14]
	while(ch = lcd->f_line[i])
 8003294:	7bbb      	ldrb	r3, [r7, #14]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	4413      	add	r3, r2
 800329a:	785b      	ldrb	r3, [r3, #1]
 800329c:	737b      	strb	r3, [r7, #13]
 800329e:	7b7b      	ldrb	r3, [r7, #13]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1e1      	bne.n	8003268 <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 80032a4:	2300      	movs	r3, #0
 80032a6:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	7bfa      	ldrb	r2, [r7, #15]
 80032ae:	21c0      	movs	r1, #192	; 0xc0
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff ff7d 	bl	80031b0 <lcd_write>
	while(ch = lcd->s_line[i])
 80032b6:	e012      	b.n	80032de <lcd_display+0xaa>
	{
		if (ch < 9)
 80032b8:	7b7b      	ldrb	r3, [r7, #13]
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d802      	bhi.n	80032c4 <lcd_display+0x90>
		{
			ch--;
 80032be:	7b7b      	ldrb	r3, [r7, #13]
 80032c0:	3b01      	subs	r3, #1
 80032c2:	737b      	strb	r3, [r7, #13]
		}
		lcd_write(lcd->addr, ch, (xpin | RS_PIN));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	7818      	ldrb	r0, [r3, #0]
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
 80032ca:	f043 0301 	orr.w	r3, r3, #1
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	7b7b      	ldrb	r3, [r7, #13]
 80032d2:	4619      	mov	r1, r3
 80032d4:	f7ff ff6c 	bl	80031b0 <lcd_write>
		i++;
 80032d8:	7bbb      	ldrb	r3, [r7, #14]
 80032da:	3301      	adds	r3, #1
 80032dc:	73bb      	strb	r3, [r7, #14]
	while(ch = lcd->s_line[i])
 80032de:	7bbb      	ldrb	r3, [r7, #14]
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	4413      	add	r3, r2
 80032e4:	7c9b      	ldrb	r3, [r3, #18]
 80032e6:	737b      	strb	r3, [r7, #13]
 80032e8:	7b7b      	ldrb	r3, [r7, #13]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1e4      	bne.n	80032b8 <lcd_display+0x84>
	}
}
 80032ee:	bf00      	nop
 80032f0:	bf00      	nop
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8003300:	2300      	movs	r3, #0
 8003302:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 800330e:	2308      	movs	r3, #8
 8003310:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	7bfa      	ldrb	r2, [r7, #15]
 8003318:	2101      	movs	r1, #1
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff ff48 	bl	80031b0 <lcd_write>
	HAL_Delay(2);
 8003320:	2002      	movs	r0, #2
 8003322:	f001 f999 	bl	8004658 <HAL_Delay>
}
 8003326:	bf00      	nop
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
	...

08003330 <lcd_prog>:


void lcd_prog(struct lcd_disp * lcd)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i, j;
 8003338:	2300      	movs	r3, #0
 800333a:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <lcd_prog+0x1a>
	{
		xpin = BL_PIN;
 8003346:	2308      	movs	r3, #8
 8003348:	73fb      	strb	r3, [r7, #15]
	}

	/* send 8 custom chars */
	lcd_write(lcd->addr, (CG_FIRST_CHAR), xpin);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	7bfa      	ldrb	r2, [r7, #15]
 8003350:	2140      	movs	r1, #64	; 0x40
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff ff2c 	bl	80031b0 <lcd_write>
	for(i = 0; i <= 7; i++)
 8003358:	2300      	movs	r3, #0
 800335a:	73bb      	strb	r3, [r7, #14]
 800335c:	e01b      	b.n	8003396 <lcd_prog+0x66>
	{
		for(j = 0; j <= 7; j ++)
 800335e:	2300      	movs	r3, #0
 8003360:	737b      	strb	r3, [r7, #13]
 8003362:	e012      	b.n	800338a <lcd_prog+0x5a>
		{
			lcd_write(lcd->addr, (user_chars[i][j]), (xpin | RS_PIN));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	7818      	ldrb	r0, [r3, #0]
 8003368:	7bba      	ldrb	r2, [r7, #14]
 800336a:	7b7b      	ldrb	r3, [r7, #13]
 800336c:	490e      	ldr	r1, [pc, #56]	; (80033a8 <lcd_prog+0x78>)
 800336e:	00d2      	lsls	r2, r2, #3
 8003370:	440a      	add	r2, r1
 8003372:	4413      	add	r3, r2
 8003374:	7819      	ldrb	r1, [r3, #0]
 8003376:	7bfb      	ldrb	r3, [r7, #15]
 8003378:	f043 0301 	orr.w	r3, r3, #1
 800337c:	b2db      	uxtb	r3, r3
 800337e:	461a      	mov	r2, r3
 8003380:	f7ff ff16 	bl	80031b0 <lcd_write>
		for(j = 0; j <= 7; j ++)
 8003384:	7b7b      	ldrb	r3, [r7, #13]
 8003386:	3301      	adds	r3, #1
 8003388:	737b      	strb	r3, [r7, #13]
 800338a:	7b7b      	ldrb	r3, [r7, #13]
 800338c:	2b07      	cmp	r3, #7
 800338e:	d9e9      	bls.n	8003364 <lcd_prog+0x34>
	for(i = 0; i <= 7; i++)
 8003390:	7bbb      	ldrb	r3, [r7, #14]
 8003392:	3301      	adds	r3, #1
 8003394:	73bb      	strb	r3, [r7, #14]
 8003396:	7bbb      	ldrb	r3, [r7, #14]
 8003398:	2b07      	cmp	r3, #7
 800339a:	d9e0      	bls.n	800335e <lcd_prog+0x2e>
		}
	}
}
 800339c:	bf00      	nop
 800339e:	bf00      	nop
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	20000058 	.word	0x20000058
 80033ac:	00000000 	.word	0x00000000

080033b0 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim TIM handle
  * @retval None
  */
pid_t2 pid1={.param.Kp=1.2,.param.Ki=0.002, .param.Kd=0,.param.dt=1.0, .previous_error=0, .previous_integral=0};
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b0a6      	sub	sp, #152	; 0x98
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
	static unsigned int cnt = 0;
	    if(htim == &htim2)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a65      	ldr	r2, [pc, #404]	; (8003550 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d13c      	bne.n	800343a <HAL_TIM_PeriodElapsedCallback+0x8a>
	    {
	        cnt++;
 80033c0:	4b64      	ldr	r3, [pc, #400]	; (8003554 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3301      	adds	r3, #1
 80033c6:	4a63      	ldr	r2, [pc, #396]	; (8003554 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80033c8:	6013      	str	r3, [r2, #0]
	        BMP2_ReadData(&bmp2dev, NULL, &temp); //odczyt temperatury z czujnika
 80033ca:	4a63      	ldr	r2, [pc, #396]	; (8003558 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80033cc:	2100      	movs	r1, #0
 80033ce:	4863      	ldr	r0, [pc, #396]	; (800355c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80033d0:	f7fe fe68 	bl	80020a4 <BMP2_ReadData>

	        temp_int = 1000*temp;
 80033d4:	4b60      	ldr	r3, [pc, #384]	; (8003558 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80033d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	4b60      	ldr	r3, [pc, #384]	; (8003560 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80033e0:	f7fd f922 	bl	8000628 <__aeabi_dmul>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4610      	mov	r0, r2
 80033ea:	4619      	mov	r1, r3
 80033ec:	f7fd fbde 	bl	8000bac <__aeabi_d2uiz>
 80033f0:	4603      	mov	r3, r0
 80033f2:	4a5c      	ldr	r2, [pc, #368]	; (8003564 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80033f4:	6013      	str	r3, [r2, #0]

	        if(cnt == 4)
 80033f6:	4b57      	ldr	r3, [pc, #348]	; (8003554 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d11d      	bne.n	800343a <HAL_TIM_PeriodElapsedCallback+0x8a>
	        {
	            cnt = 0;
 80033fe:	4b55      	ldr	r3, [pc, #340]	; (8003554 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
	            uint8_t tx_buffer[128];
	            int tx_msg_len = sprintf((char*)tx_buffer, "%d\r\n",
 8003404:	4b57      	ldr	r3, [pc, #348]	; (8003564 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a57      	ldr	r2, [pc, #348]	; (8003568 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800340a:	fba2 2303 	umull	r2, r3, r2, r3
 800340e:	099a      	lsrs	r2, r3, #6
 8003410:	f107 030c 	add.w	r3, r7, #12
 8003414:	4955      	ldr	r1, [pc, #340]	; (800356c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8003416:	4618      	mov	r0, r3
 8003418:	f00a fdac 	bl	800df74 <siprintf>
 800341c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	                                     temp_int / 1000);

	            HAL_UART_Transmit(&huart3, tx_buffer, tx_msg_len, HAL_MAX_DELAY);
 8003420:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003424:	b29a      	uxth	r2, r3
 8003426:	f107 010c 	add.w	r1, r7, #12
 800342a:	f04f 33ff 	mov.w	r3, #4294967295
 800342e:	4850      	ldr	r0, [pc, #320]	; (8003570 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003430:	f006 fb5a 	bl	8009ae8 <HAL_UART_Transmit>

	            sd_card_operation_flag = 1;
 8003434:	4b4f      	ldr	r3, [pc, #316]	; (8003574 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8003436:	2201      	movs	r2, #1
 8003438:	701a      	strb	r2, [r3, #0]
	        }
  }
  //pid
  if(htim == &htim7){
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a4e      	ldr	r2, [pc, #312]	; (8003578 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d109      	bne.n	8003456 <HAL_TIM_PeriodElapsedCallback+0xa6>

  		 current_temp = temp_int;
 8003442:	4b48      	ldr	r3, [pc, #288]	; (8003564 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	ee07 3a90 	vmov	s15, r3
 800344a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800344e:	4b4b      	ldr	r3, [pc, #300]	; (800357c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8003450:	edc3 7a00 	vstr	s15, [r3]


  		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,pwm_duty);

  	}
}
 8003454:	e071      	b.n	800353a <HAL_TIM_PeriodElapsedCallback+0x18a>
  		float pwm_duty_f= (999.0*calculate_discrete_pid(&pid1,zadane_obiektu,current_temp));
 8003456:	4b4a      	ldr	r3, [pc, #296]	; (8003580 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	ee07 3a90 	vmov	s15, r3
 800345e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003462:	4b46      	ldr	r3, [pc, #280]	; (800357c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8003464:	ed93 7a00 	vldr	s14, [r3]
 8003468:	eef0 0a47 	vmov.f32	s1, s14
 800346c:	eeb0 0a67 	vmov.f32	s0, s15
 8003470:	4844      	ldr	r0, [pc, #272]	; (8003584 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8003472:	f000 faf0 	bl	8003a56 <calculate_discrete_pid>
 8003476:	ee10 3a10 	vmov	r3, s0
 800347a:	4618      	mov	r0, r3
 800347c:	f7fd f87c 	bl	8000578 <__aeabi_f2d>
 8003480:	a331      	add	r3, pc, #196	; (adr r3, 8003548 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8003482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003486:	f7fd f8cf 	bl	8000628 <__aeabi_dmul>
 800348a:	4602      	mov	r2, r0
 800348c:	460b      	mov	r3, r1
 800348e:	4610      	mov	r0, r2
 8003490:	4619      	mov	r1, r3
 8003492:	f7fd fbab 	bl	8000bec <__aeabi_d2f>
 8003496:	4603      	mov	r3, r0
 8003498:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  		fanControlTest=pwm_duty_f;
 800349c:	4a3a      	ldr	r2, [pc, #232]	; (8003588 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800349e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034a2:	6013      	str	r3, [r2, #0]
  		uint16_t pwm_duty=0;
 80034a4:	2300      	movs	r3, #0
 80034a6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
  		if(pwm_duty_f<0)pwm_duty=0;else
 80034aa:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80034ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b6:	d503      	bpl.n	80034c0 <HAL_TIM_PeriodElapsedCallback+0x110>
 80034b8:	2300      	movs	r3, #0
 80034ba:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 80034be:	e015      	b.n	80034ec <HAL_TIM_PeriodElapsedCallback+0x13c>
  		if(pwm_duty_f>999.0)pwm_duty=999;else
 80034c0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80034c4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800358c <HAL_TIM_PeriodElapsedCallback+0x1dc>
 80034c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d0:	dd04      	ble.n	80034dc <HAL_TIM_PeriodElapsedCallback+0x12c>
 80034d2:	f240 33e7 	movw	r3, #999	; 0x3e7
 80034d6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 80034da:	e007      	b.n	80034ec <HAL_TIM_PeriodElapsedCallback+0x13c>
  			pwm_duty=(uint16_t)pwm_duty_f;
 80034dc:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80034e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034e4:	ee17 3a90 	vmov	r3, s15
 80034e8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
  		fanControlTestDriven = pwm_duty;
 80034ec:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80034f0:	ee07 3a90 	vmov	s15, r3
 80034f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f8:	4b25      	ldr	r3, [pc, #148]	; (8003590 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80034fa:	edc3 7a00 	vstr	s15, [r3]
  		if(temp_int -600 > zadane_obiektu) __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 700);
 80034fe:	4b19      	ldr	r3, [pc, #100]	; (8003564 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8003506:	4b1e      	ldr	r3, [pc, #120]	; (8003580 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	429a      	cmp	r2, r3
 800350c:	d904      	bls.n	8003518 <HAL_TIM_PeriodElapsedCallback+0x168>
 800350e:	4b21      	ldr	r3, [pc, #132]	; (8003594 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8003516:	639a      	str	r2, [r3, #56]	; 0x38
  		if(temp_int -200 < zadane_obiektu)__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0);
 8003518:	4b12      	ldr	r3, [pc, #72]	; (8003564 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f1a3 02c8 	sub.w	r2, r3, #200	; 0xc8
 8003520:	4b17      	ldr	r3, [pc, #92]	; (8003580 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d203      	bcs.n	8003530 <HAL_TIM_PeriodElapsedCallback+0x180>
 8003528:	4b1a      	ldr	r3, [pc, #104]	; (8003594 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2200      	movs	r2, #0
 800352e:	639a      	str	r2, [r3, #56]	; 0x38
  		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,pwm_duty);
 8003530:	4b18      	ldr	r3, [pc, #96]	; (8003594 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003538:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800353a:	bf00      	nop
 800353c:	3798      	adds	r7, #152	; 0x98
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	f3af 8000 	nop.w
 8003548:	00000000 	.word	0x00000000
 800354c:	408f3800 	.word	0x408f3800
 8003550:	200023d8 	.word	0x200023d8
 8003554:	20002308 	.word	0x20002308
 8003558:	200022c0 	.word	0x200022c0
 800355c:	20000018 	.word	0x20000018
 8003560:	408f4000 	.word	0x408f4000
 8003564:	200022c8 	.word	0x200022c8
 8003568:	10624dd3 	.word	0x10624dd3
 800356c:	0800e908 	.word	0x0800e908
 8003570:	20002508 	.word	0x20002508
 8003574:	20002300 	.word	0x20002300
 8003578:	200024bc 	.word	0x200024bc
 800357c:	200022d4 	.word	0x200022d4
 8003580:	200000a8 	.word	0x200000a8
 8003584:	200000b0 	.word	0x200000b0
 8003588:	200000a0 	.word	0x200000a0
 800358c:	4479c000 	.word	0x4479c000
 8003590:	200000a4 	.word	0x200000a4
 8003594:	20002424 	.word	0x20002424

08003598 <wypelnienie1>:

void wypelnienie1(uint16_t duty)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	4603      	mov	r3, r0
 80035a0:	80fb      	strh	r3, [r7, #6]
	duty = duty*10;
 80035a2:	88fb      	ldrh	r3, [r7, #6]
 80035a4:	461a      	mov	r2, r3
 80035a6:	0092      	lsls	r2, r2, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	80fb      	strh	r3, [r7, #6]
	zadane_rezystora=duty;
 80035ae:	88fb      	ldrh	r3, [r7, #6]
 80035b0:	4a03      	ldr	r2, [pc, #12]	; (80035c0 <wypelnienie1+0x28>)
 80035b2:	6013      	str	r3, [r2, #0]
	//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty);
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	200022cc 	.word	0x200022cc

080035c4 <wypelnienie2>:

void wypelnienie2(uint16_t duty)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	4603      	mov	r3, r0
 80035cc:	80fb      	strh	r3, [r7, #6]
	duty = duty*10;
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	461a      	mov	r2, r3
 80035d2:	0092      	lsls	r2, r2, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	80fb      	strh	r3, [r7, #6]
	zadane_wiatraka=duty;
 80035da:	88fb      	ldrh	r3, [r7, #6]
 80035dc:	4a03      	ldr	r2, [pc, #12]	; (80035ec <wypelnienie2+0x28>)
 80035de:	6013      	str	r3, [r2, #0]
	//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty);
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	200022d0 	.word	0x200022d0

080035f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
	uint8_t fill=0;
 80035f8:	2300      	movs	r3, #0
 80035fa:	73fb      	strb	r3, [r7, #15]

	if(word[0] == 'r')
 80035fc:	4b1c      	ldr	r3, [pc, #112]	; (8003670 <HAL_UART_RxCpltCallback+0x80>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b72      	cmp	r3, #114	; 0x72
 8003602:	d113      	bne.n	800362c <HAL_UART_RxCpltCallback+0x3c>
	{
		fill = ((word[1] - '0') * 10 + (word[2] - '0'));
 8003604:	4b1a      	ldr	r3, [pc, #104]	; (8003670 <HAL_UART_RxCpltCallback+0x80>)
 8003606:	785b      	ldrb	r3, [r3, #1]
 8003608:	3b30      	subs	r3, #48	; 0x30
 800360a:	b2db      	uxtb	r3, r3
 800360c:	461a      	mov	r2, r3
 800360e:	0092      	lsls	r2, r2, #2
 8003610:	4413      	add	r3, r2
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	b2da      	uxtb	r2, r3
 8003616:	4b16      	ldr	r3, [pc, #88]	; (8003670 <HAL_UART_RxCpltCallback+0x80>)
 8003618:	789b      	ldrb	r3, [r3, #2]
 800361a:	4413      	add	r3, r2
 800361c:	b2db      	uxtb	r3, r3
 800361e:	3b30      	subs	r3, #48	; 0x30
 8003620:	73fb      	strb	r3, [r7, #15]
		wypelnienie1(fill);
 8003622:	7bfb      	ldrb	r3, [r7, #15]
 8003624:	b29b      	uxth	r3, r3
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff ffb6 	bl	8003598 <wypelnienie1>
	}

	if(word[0] == 'w')
 800362c:	4b10      	ldr	r3, [pc, #64]	; (8003670 <HAL_UART_RxCpltCallback+0x80>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b77      	cmp	r3, #119	; 0x77
 8003632:	d113      	bne.n	800365c <HAL_UART_RxCpltCallback+0x6c>
	{
		fill = ((word[1] - '0') * 10 + (word[2] - '0'));
 8003634:	4b0e      	ldr	r3, [pc, #56]	; (8003670 <HAL_UART_RxCpltCallback+0x80>)
 8003636:	785b      	ldrb	r3, [r3, #1]
 8003638:	3b30      	subs	r3, #48	; 0x30
 800363a:	b2db      	uxtb	r3, r3
 800363c:	461a      	mov	r2, r3
 800363e:	0092      	lsls	r2, r2, #2
 8003640:	4413      	add	r3, r2
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	b2da      	uxtb	r2, r3
 8003646:	4b0a      	ldr	r3, [pc, #40]	; (8003670 <HAL_UART_RxCpltCallback+0x80>)
 8003648:	789b      	ldrb	r3, [r3, #2]
 800364a:	4413      	add	r3, r2
 800364c:	b2db      	uxtb	r3, r3
 800364e:	3b30      	subs	r3, #48	; 0x30
 8003650:	73fb      	strb	r3, [r7, #15]
		wypelnienie2(fill);
 8003652:	7bfb      	ldrb	r3, [r7, #15]
 8003654:	b29b      	uxth	r3, r3
 8003656:	4618      	mov	r0, r3
 8003658:	f7ff ffb4 	bl	80035c4 <wypelnienie2>
	}
	HAL_UART_Receive_IT(&huart3, word, 3);
 800365c:	2203      	movs	r2, #3
 800365e:	4904      	ldr	r1, [pc, #16]	; (8003670 <HAL_UART_RxCpltCallback+0x80>)
 8003660:	4804      	ldr	r0, [pc, #16]	; (8003674 <HAL_UART_RxCpltCallback+0x84>)
 8003662:	f006 fac4 	bl	8009bee <HAL_UART_Receive_IT>
}
 8003666:	bf00      	nop
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	2000009c 	.word	0x2000009c
 8003674:	20002508 	.word	0x20002508

08003678 <display_function>:

void display_function()
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af02      	add	r7, sp, #8
	if(powitanie)
 800367e:	4b29      	ldr	r3, [pc, #164]	; (8003724 <display_function+0xac>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d014      	beq.n	80036b0 <display_function+0x38>
	{
		sprintf((char*)disp.f_line, "Dzie%c dobry %c", '\x4', '\x5');
 8003686:	2305      	movs	r3, #5
 8003688:	2204      	movs	r2, #4
 800368a:	4927      	ldr	r1, [pc, #156]	; (8003728 <display_function+0xb0>)
 800368c:	4827      	ldr	r0, [pc, #156]	; (800372c <display_function+0xb4>)
 800368e:	f00a fc71 	bl	800df74 <siprintf>
		sprintf((char*)disp.s_line, "smacznej kawusi");
 8003692:	4927      	ldr	r1, [pc, #156]	; (8003730 <display_function+0xb8>)
 8003694:	4827      	ldr	r0, [pc, #156]	; (8003734 <display_function+0xbc>)
 8003696:	f00a fc6d 	bl	800df74 <siprintf>
		lcd_display(&disp);
 800369a:	4827      	ldr	r0, [pc, #156]	; (8003738 <display_function+0xc0>)
 800369c:	f7ff fdca 	bl	8003234 <lcd_display>
		HAL_Delay(1000);
 80036a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80036a4:	f000 ffd8 	bl	8004658 <HAL_Delay>
		powitanie = 0;
 80036a8:	4b1e      	ldr	r3, [pc, #120]	; (8003724 <display_function+0xac>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	e032      	b.n	8003716 <display_function+0x9e>
	}
	else
	{
		sprintf((char*)disp.f_line, "T. akt.:%d.%02d%cC", temp_int / 1000, temp_int % 1000, '\x7');
 80036b0:	4b22      	ldr	r3, [pc, #136]	; (800373c <display_function+0xc4>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a22      	ldr	r2, [pc, #136]	; (8003740 <display_function+0xc8>)
 80036b6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ba:	0999      	lsrs	r1, r3, #6
 80036bc:	4b1f      	ldr	r3, [pc, #124]	; (800373c <display_function+0xc4>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	4b1f      	ldr	r3, [pc, #124]	; (8003740 <display_function+0xc8>)
 80036c2:	fba3 0302 	umull	r0, r3, r3, r2
 80036c6:	099b      	lsrs	r3, r3, #6
 80036c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80036cc:	fb00 f303 	mul.w	r3, r0, r3
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2207      	movs	r2, #7
 80036d4:	9200      	str	r2, [sp, #0]
 80036d6:	460a      	mov	r2, r1
 80036d8:	491a      	ldr	r1, [pc, #104]	; (8003744 <display_function+0xcc>)
 80036da:	4814      	ldr	r0, [pc, #80]	; (800372c <display_function+0xb4>)
 80036dc:	f00a fc4a 	bl	800df74 <siprintf>
		sprintf((char*)disp.s_line, "T. zad.:%d.%02d%cC", zadane_obiektu / 1000, zadane_obiektu % 1000, '\x8');
 80036e0:	4b19      	ldr	r3, [pc, #100]	; (8003748 <display_function+0xd0>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a16      	ldr	r2, [pc, #88]	; (8003740 <display_function+0xc8>)
 80036e6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ea:	0999      	lsrs	r1, r3, #6
 80036ec:	4b16      	ldr	r3, [pc, #88]	; (8003748 <display_function+0xd0>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	4b13      	ldr	r3, [pc, #76]	; (8003740 <display_function+0xc8>)
 80036f2:	fba3 0302 	umull	r0, r3, r3, r2
 80036f6:	099b      	lsrs	r3, r3, #6
 80036f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80036fc:	fb00 f303 	mul.w	r3, r0, r3
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2208      	movs	r2, #8
 8003704:	9200      	str	r2, [sp, #0]
 8003706:	460a      	mov	r2, r1
 8003708:	4910      	ldr	r1, [pc, #64]	; (800374c <display_function+0xd4>)
 800370a:	480a      	ldr	r0, [pc, #40]	; (8003734 <display_function+0xbc>)
 800370c:	f00a fc32 	bl	800df74 <siprintf>
		lcd_display(&disp);
 8003710:	4809      	ldr	r0, [pc, #36]	; (8003738 <display_function+0xc0>)
 8003712:	f7ff fd8f 	bl	8003234 <lcd_display>
	}

	HAL_Delay(2000);
 8003716:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800371a:	f000 ff9d 	bl	8004658 <HAL_Delay>

}
 800371e:	bf00      	nop
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	200000ac 	.word	0x200000ac
 8003728:	0800e910 	.word	0x0800e910
 800372c:	200022dd 	.word	0x200022dd
 8003730:	0800e920 	.word	0x0800e920
 8003734:	200022ee 	.word	0x200022ee
 8003738:	200022dc 	.word	0x200022dc
 800373c:	200022c8 	.word	0x200022c8
 8003740:	10624dd3 	.word	0x10624dd3
 8003744:	0800e930 	.word	0x0800e930
 8003748:	200000a8 	.word	0x200000a8
 800374c:	0800e944 	.word	0x0800e944

08003750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003750:	b590      	push	{r4, r7, lr}
 8003752:	b0a7      	sub	sp, #156	; 0x9c
 8003754:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003756:	f000 ff22 	bl	800459e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800375a:	f000 f909 	bl	8003970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800375e:	f7ff fabb 	bl	8002cd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003762:	f7fe fdd1 	bl	8002308 <MX_DMA_Init>
  MX_SPI4_Init();
 8003766:	f000 fa35 	bl	8003bd4 <MX_SPI4_Init>
  MX_TIM2_Init();
 800376a:	f000 fbfb 	bl	8003f64 <MX_TIM2_Init>
  MX_TIM4_Init();
 800376e:	f000 fccd 	bl	800410c <MX_TIM4_Init>
  MX_TIM3_Init();
 8003772:	f000 fc45 	bl	8004000 <MX_TIM3_Init>
  MX_TIM7_Init();
 8003776:	f000 fd41 	bl	80041fc <MX_TIM7_Init>
  MX_I2C1_Init();
 800377a:	f7ff fc33 	bl	8002fe4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 800377e:	f000 fe4d 	bl	800441c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8003782:	f7fe fcf3 	bl	800216c <MX_ADC1_Init>
  MX_SPI1_Init();
 8003786:	f000 f9e7 	bl	8003b58 <MX_SPI1_Init>
  MX_FATFS_Init();
 800378a:	f007 fc3b 	bl	800b004 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  BMP2_Init(&bmp2dev);// inicjalizacja czujnika
 800378e:	4864      	ldr	r0, [pc, #400]	; (8003920 <main+0x1d0>)
 8003790:	f7fe fbbc 	bl	8001f0c <BMP2_Init>
  HAL_TIM_Base_Start_IT(&htim2);// uruchomienie timerow
 8003794:	4863      	ldr	r0, [pc, #396]	; (8003924 <main+0x1d4>)
 8003796:	f004 fff5 	bl	8008784 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);// uruchomienie timerow
 800379a:	4863      	ldr	r0, [pc, #396]	; (8003928 <main+0x1d8>)
 800379c:	f004 fff2 	bl	8008784 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80037a0:	2108      	movs	r1, #8
 80037a2:	4862      	ldr	r0, [pc, #392]	; (800392c <main+0x1dc>)
 80037a4:	f005 f8c8 	bl	8008938 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80037a8:	2104      	movs	r1, #4
 80037aa:	4860      	ldr	r0, [pc, #384]	; (800392c <main+0x1dc>)
 80037ac:	f005 f8c4 	bl	8008938 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 80037b0:	4b5e      	ldr	r3, [pc, #376]	; (800392c <main+0x1dc>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2200      	movs	r2, #0
 80037b6:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80037b8:	4b5c      	ldr	r3, [pc, #368]	; (800392c <main+0x1dc>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2200      	movs	r2, #0
 80037be:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_UART_Receive_IT(&huart3, word, 3);
 80037c0:	2203      	movs	r2, #3
 80037c2:	495b      	ldr	r1, [pc, #364]	; (8003930 <main+0x1e0>)
 80037c4:	485b      	ldr	r0, [pc, #364]	; (8003934 <main+0x1e4>)
 80037c6:	f006 fa12 	bl	8009bee <HAL_UART_Receive_IT>
//wyswietlacz
  disp.addr = (0x27 << 1);
 80037ca:	4b5b      	ldr	r3, [pc, #364]	; (8003938 <main+0x1e8>)
 80037cc:	224e      	movs	r2, #78	; 0x4e
 80037ce:	701a      	strb	r2, [r3, #0]
  disp.bl = true;
 80037d0:	4b59      	ldr	r3, [pc, #356]	; (8003938 <main+0x1e8>)
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  lcd_init(&disp);
 80037d8:	4857      	ldr	r0, [pc, #348]	; (8003938 <main+0x1e8>)
 80037da:	f7ff fca3 	bl	8003124 <lcd_init>
  lcd_prog(&disp);
 80037de:	4856      	ldr	r0, [pc, #344]	; (8003938 <main+0x1e8>)
 80037e0:	f7ff fda6 	bl	8003330 <lcd_prog>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 80037e4:	4855      	ldr	r0, [pc, #340]	; (800393c <main+0x1ec>)
 80037e6:	f000 ff9f 	bl	8004728 <HAL_ADC_Start>
	  display_function();
 80037ea:	f7ff ff45 	bl	8003678 <display_function>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 80037ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80037f2:	4852      	ldr	r0, [pc, #328]	; (800393c <main+0x1ec>)
 80037f4:	f001 f866 	bl	80048c4 <HAL_ADC_PollForConversion>
	  readValue_potencjometr = HAL_ADC_GetValue(&hadc1);
 80037f8:	4850      	ldr	r0, [pc, #320]	; (800393c <main+0x1ec>)
 80037fa:	f001 f9fe 	bl	8004bfa <HAL_ADC_GetValue>
 80037fe:	4603      	mov	r3, r0
 8003800:	b29a      	uxth	r2, r3
 8003802:	4b4f      	ldr	r3, [pc, #316]	; (8003940 <main+0x1f0>)
 8003804:	801a      	strh	r2, [r3, #0]
	  zadane_obiektu = readValue_potencjometr*5.36 +18000.0;
 8003806:	4b4e      	ldr	r3, [pc, #312]	; (8003940 <main+0x1f0>)
 8003808:	881b      	ldrh	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f7fc fea2 	bl	8000554 <__aeabi_i2d>
 8003810:	a33f      	add	r3, pc, #252	; (adr r3, 8003910 <main+0x1c0>)
 8003812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003816:	f7fc ff07 	bl	8000628 <__aeabi_dmul>
 800381a:	4602      	mov	r2, r0
 800381c:	460b      	mov	r3, r1
 800381e:	4610      	mov	r0, r2
 8003820:	4619      	mov	r1, r3
 8003822:	a33d      	add	r3, pc, #244	; (adr r3, 8003918 <main+0x1c8>)
 8003824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003828:	f7fc fd48 	bl	80002bc <__adddf3>
 800382c:	4602      	mov	r2, r0
 800382e:	460b      	mov	r3, r1
 8003830:	4610      	mov	r0, r2
 8003832:	4619      	mov	r1, r3
 8003834:	f7fd f9ba 	bl	8000bac <__aeabi_d2uiz>
 8003838:	4603      	mov	r3, r0
 800383a:	4a42      	ldr	r2, [pc, #264]	; (8003944 <main+0x1f4>)
 800383c:	6013      	str	r3, [r2, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (sd_card_operation_flag) {
 800383e:	4b42      	ldr	r3, [pc, #264]	; (8003948 <main+0x1f8>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0cd      	beq.n	80037e4 <main+0x94>
	         sd_card_operation_flag = 0; // Zeruj flagę
 8003848:	4b3f      	ldr	r3, [pc, #252]	; (8003948 <main+0x1f8>)
 800384a:	2200      	movs	r2, #0
 800384c:	701a      	strb	r2, [r3, #0]
	         time_counter++; //czas probki
 800384e:	4b3f      	ldr	r3, [pc, #252]	; (800394c <main+0x1fc>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3301      	adds	r3, #1
 8003854:	4a3d      	ldr	r2, [pc, #244]	; (800394c <main+0x1fc>)
 8003856:	6013      	str	r3, [r2, #0]

	         if (f_mount(&fs, "", 0) == FR_OK) {
 8003858:	2200      	movs	r2, #0
 800385a:	493d      	ldr	r1, [pc, #244]	; (8003950 <main+0x200>)
 800385c:	483d      	ldr	r0, [pc, #244]	; (8003954 <main+0x204>)
 800385e:	f009 fe19 	bl	800d494 <f_mount>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1bd      	bne.n	80037e4 <main+0x94>
	             if (f_open(&fil, "log-file.csv", FA_OPEN_APPEND | FA_WRITE) == FR_OK) { //dziala na istniejacym pliku
 8003868:	2232      	movs	r2, #50	; 0x32
 800386a:	493b      	ldr	r1, [pc, #236]	; (8003958 <main+0x208>)
 800386c:	483b      	ldr	r0, [pc, #236]	; (800395c <main+0x20c>)
 800386e:	f009 fe57 	bl	800d520 <f_open>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d142      	bne.n	80038fe <main+0x1ae>
//	        	 if (f_open(&fil, "log-file.csv", FA_WRITE | FA_CREATE_ALWAYS) == FR_OK) { //czysci plik przed zadzialaniem
	                 char log_buffer[128];
	                 int log_length = sprintf(log_buffer, "%d,Temperature:,%u.%03u,DegC\r\n",
 8003878:	4b34      	ldr	r3, [pc, #208]	; (800394c <main+0x1fc>)
 800387a:	6819      	ldr	r1, [r3, #0]
 800387c:	4b38      	ldr	r3, [pc, #224]	; (8003960 <main+0x210>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a38      	ldr	r2, [pc, #224]	; (8003964 <main+0x214>)
 8003882:	fba2 2303 	umull	r2, r3, r2, r3
 8003886:	099c      	lsrs	r4, r3, #6
 8003888:	4b35      	ldr	r3, [pc, #212]	; (8003960 <main+0x210>)
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	4b35      	ldr	r3, [pc, #212]	; (8003964 <main+0x214>)
 800388e:	fba3 0302 	umull	r0, r3, r3, r2
 8003892:	099b      	lsrs	r3, r3, #6
 8003894:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003898:	fb00 f303 	mul.w	r3, r0, r3
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	1d38      	adds	r0, r7, #4
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	4623      	mov	r3, r4
 80038a4:	460a      	mov	r2, r1
 80038a6:	4930      	ldr	r1, [pc, #192]	; (8003968 <main+0x218>)
 80038a8:	f00a fb64 	bl	800df74 <siprintf>
 80038ac:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	                                          time_counter, temp_int / 1000, temp_int % 1000);


	                 UINT bytes_written;
	                 FRESULT write_result = f_write(&fil, log_buffer, log_length, &bytes_written);
 80038b0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80038b4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80038b8:	1d39      	adds	r1, r7, #4
 80038ba:	4828      	ldr	r0, [pc, #160]	; (800395c <main+0x20c>)
 80038bc:	f009 fffc 	bl	800d8b8 <f_write>
 80038c0:	4603      	mov	r3, r0
 80038c2:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

	                 if (write_result == FR_OK && bytes_written == log_length) {
 80038c6:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10b      	bne.n	80038e6 <main+0x196>
 80038ce:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80038d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d105      	bne.n	80038e6 <main+0x196>
	                     // Dane zostały pomyślnie zapisane do pliku
	                     // Opcjonalnie, możesz dodać tutaj dodatkowy kod, np. logowanie sukcesu
	                	 value ++;
 80038da:	4b24      	ldr	r3, [pc, #144]	; (800396c <main+0x21c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	3301      	adds	r3, #1
 80038e0:	4a22      	ldr	r2, [pc, #136]	; (800396c <main+0x21c>)
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	e008      	b.n	80038f8 <main+0x1a8>
	                 } else {
	                     // Wystąpił błąd podczas zapisu
	                     // Opcjonalnie, możesz dodać tutaj kod obsługi błędów
	                	value = value *10;
 80038e6:	4b21      	ldr	r3, [pc, #132]	; (800396c <main+0x21c>)
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	4613      	mov	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	461a      	mov	r2, r3
 80038f4:	4b1d      	ldr	r3, [pc, #116]	; (800396c <main+0x21c>)
 80038f6:	601a      	str	r2, [r3, #0]
	                 }

	                 f_close(&fil);
 80038f8:	4818      	ldr	r0, [pc, #96]	; (800395c <main+0x20c>)
 80038fa:	f00a f9ef 	bl	800dcdc <f_close>
	             }
	             f_mount(NULL, "", 0);
 80038fe:	2200      	movs	r2, #0
 8003900:	4913      	ldr	r1, [pc, #76]	; (8003950 <main+0x200>)
 8003902:	2000      	movs	r0, #0
 8003904:	f009 fdc6 	bl	800d494 <f_mount>
	  HAL_ADC_Start(&hadc1);
 8003908:	e76c      	b.n	80037e4 <main+0x94>
 800390a:	bf00      	nop
 800390c:	f3af 8000 	nop.w
 8003910:	d70a3d71 	.word	0xd70a3d71
 8003914:	401570a3 	.word	0x401570a3
 8003918:	00000000 	.word	0x00000000
 800391c:	40d19400 	.word	0x40d19400
 8003920:	20000018 	.word	0x20000018
 8003924:	200023d8 	.word	0x200023d8
 8003928:	200024bc 	.word	0x200024bc
 800392c:	20002424 	.word	0x20002424
 8003930:	2000009c 	.word	0x2000009c
 8003934:	20002508 	.word	0x20002508
 8003938:	200022dc 	.word	0x200022dc
 800393c:	20000154 	.word	0x20000154
 8003940:	200022d8 	.word	0x200022d8
 8003944:	200000a8 	.word	0x200000a8
 8003948:	20002300 	.word	0x20002300
 800394c:	20000098 	.word	0x20000098
 8003950:	0800e958 	.word	0x0800e958
 8003954:	20000258 	.word	0x20000258
 8003958:	0800e95c 	.word	0x0800e95c
 800395c:	20001290 	.word	0x20001290
 8003960:	200022c8 	.word	0x200022c8
 8003964:	10624dd3 	.word	0x10624dd3
 8003968:	0800e96c 	.word	0x0800e96c
 800396c:	20002304 	.word	0x20002304

08003970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b094      	sub	sp, #80	; 0x50
 8003974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003976:	f107 0320 	add.w	r3, r7, #32
 800397a:	2230      	movs	r2, #48	; 0x30
 800397c:	2100      	movs	r1, #0
 800397e:	4618      	mov	r0, r3
 8003980:	f00a fb18 	bl	800dfb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003984:	f107 030c 	add.w	r3, r7, #12
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	605a      	str	r2, [r3, #4]
 800398e:	609a      	str	r2, [r3, #8]
 8003990:	60da      	str	r2, [r3, #12]
 8003992:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003994:	f002 fe24 	bl	80065e0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003998:	4b2a      	ldr	r3, [pc, #168]	; (8003a44 <SystemClock_Config+0xd4>)
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	4a29      	ldr	r2, [pc, #164]	; (8003a44 <SystemClock_Config+0xd4>)
 800399e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a2:	6413      	str	r3, [r2, #64]	; 0x40
 80039a4:	4b27      	ldr	r3, [pc, #156]	; (8003a44 <SystemClock_Config+0xd4>)
 80039a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ac:	60bb      	str	r3, [r7, #8]
 80039ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039b0:	4b25      	ldr	r3, [pc, #148]	; (8003a48 <SystemClock_Config+0xd8>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a24      	ldr	r2, [pc, #144]	; (8003a48 <SystemClock_Config+0xd8>)
 80039b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039ba:	6013      	str	r3, [r2, #0]
 80039bc:	4b22      	ldr	r3, [pc, #136]	; (8003a48 <SystemClock_Config+0xd8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80039c4:	607b      	str	r3, [r7, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80039c8:	2301      	movs	r3, #1
 80039ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80039cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80039d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039d2:	2302      	movs	r3, #2
 80039d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80039d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80039da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80039dc:	2304      	movs	r3, #4
 80039de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80039e0:	23d8      	movs	r3, #216	; 0xd8
 80039e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80039e4:	2302      	movs	r3, #2
 80039e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80039e8:	2303      	movs	r3, #3
 80039ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039ec:	f107 0320 	add.w	r3, r7, #32
 80039f0:	4618      	mov	r0, r3
 80039f2:	f002 fe55 	bl	80066a0 <HAL_RCC_OscConfig>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80039fc:	f000 f826 	bl	8003a4c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003a00:	f002 fdfe 	bl	8006600 <HAL_PWREx_EnableOverDrive>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8003a0a:	f000 f81f 	bl	8003a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a0e:	230f      	movs	r3, #15
 8003a10:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a12:	2302      	movs	r3, #2
 8003a14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a16:	2300      	movs	r3, #0
 8003a18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003a1a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003a1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003a20:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003a24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8003a26:	f107 030c 	add.w	r3, r7, #12
 8003a2a:	2107      	movs	r1, #7
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f003 f8db 	bl	8006be8 <HAL_RCC_ClockConfig>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8003a38:	f000 f808 	bl	8003a4c <Error_Handler>
  }
}
 8003a3c:	bf00      	nop
 8003a3e:	3750      	adds	r7, #80	; 0x50
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40023800 	.word	0x40023800
 8003a48:	40007000 	.word	0x40007000

08003a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a50:	b672      	cpsid	i
}
 8003a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a54:	e7fe      	b.n	8003a54 <Error_Handler+0x8>

08003a56 <calculate_discrete_pid>:

#include "pid_regulator.h"

float32_t calculate_discrete_pid(pid_t2* pid, float32_t setpoint, float32_t measured){
 8003a56:	b5b0      	push	{r4, r5, r7, lr}
 8003a58:	b08c      	sub	sp, #48	; 0x30
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	60f8      	str	r0, [r7, #12]
 8003a5e:	ed87 0a02 	vstr	s0, [r7, #8]
 8003a62:	edc7 0a01 	vstr	s1, [r7, #4]
	float32_t u=0, P, I, D, error, integral, derivative;
 8003a66:	f04f 0300 	mov.w	r3, #0
 8003a6a:	62fb      	str	r3, [r7, #44]	; 0x2c

	error = setpoint-measured;
 8003a6c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a70:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a78:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	//proportional part
	P = pid->param.Kp * error;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	edd3 7a00 	vldr	s15, [r3]
 8003a82:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a8a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	//integral part
	integral = pid->previous_integral + (error+pid->previous_error) ; //numerical integrator without anti-windup
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	ed93 7a05 	vldr	s14, [r3, #20]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	edd3 6a04 	vldr	s13, [r3, #16]
 8003a9a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aa6:	edc7 7a08 	vstr	s15, [r7, #32]
	pid->previous_integral = integral;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6a3a      	ldr	r2, [r7, #32]
 8003aae:	615a      	str	r2, [r3, #20]
	I = pid->param.Ki*integral*(pid->param.dt/2.0);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	ed93 7a01 	vldr	s14, [r3, #4]
 8003ab6:	edd7 7a08 	vldr	s15, [r7, #32]
 8003aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003abe:	ee17 0a90 	vmov	r0, s15
 8003ac2:	f7fc fd59 	bl	8000578 <__aeabi_f2d>
 8003ac6:	4604      	mov	r4, r0
 8003ac8:	460d      	mov	r5, r1
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fc fd52 	bl	8000578 <__aeabi_f2d>
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003adc:	f7fc fece 	bl	800087c <__aeabi_ddiv>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4620      	mov	r0, r4
 8003ae6:	4629      	mov	r1, r5
 8003ae8:	f7fc fd9e 	bl	8000628 <__aeabi_dmul>
 8003aec:	4602      	mov	r2, r0
 8003aee:	460b      	mov	r3, r1
 8003af0:	4610      	mov	r0, r2
 8003af2:	4619      	mov	r1, r3
 8003af4:	f7fd f87a 	bl	8000bec <__aeabi_d2f>
 8003af8:	4603      	mov	r3, r0
 8003afa:	61fb      	str	r3, [r7, #28]

	//derivative part
	derivative = (error - pid->previous_error)/pid->param.dt; //numerical derivative without filter
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	edd3 7a04 	vldr	s15, [r3, #16]
 8003b02:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003b06:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003b10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b14:	edc7 7a06 	vstr	s15, [r7, #24]
	pid->previous_error = error;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b1c:	611a      	str	r2, [r3, #16]
	D = pid->param.Kd*derivative;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b24:	ed97 7a06 	vldr	s14, [r7, #24]
 8003b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b2c:	edc7 7a05 	vstr	s15, [r7, #20]

	//sum of all parts
	u = P  + I + D; //without saturation
 8003b30:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003b34:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b3c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b44:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c


	return u;
 8003b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4a:	ee07 3a90 	vmov	s15, r3
}
 8003b4e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b52:	3730      	adds	r7, #48	; 0x30
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bdb0      	pop	{r4, r5, r7, pc}

08003b58 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003b5c:	4b1b      	ldr	r3, [pc, #108]	; (8003bcc <MX_SPI1_Init+0x74>)
 8003b5e:	4a1c      	ldr	r2, [pc, #112]	; (8003bd0 <MX_SPI1_Init+0x78>)
 8003b60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003b62:	4b1a      	ldr	r3, [pc, #104]	; (8003bcc <MX_SPI1_Init+0x74>)
 8003b64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003b6a:	4b18      	ldr	r3, [pc, #96]	; (8003bcc <MX_SPI1_Init+0x74>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b70:	4b16      	ldr	r3, [pc, #88]	; (8003bcc <MX_SPI1_Init+0x74>)
 8003b72:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003b76:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b78:	4b14      	ldr	r3, [pc, #80]	; (8003bcc <MX_SPI1_Init+0x74>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b7e:	4b13      	ldr	r3, [pc, #76]	; (8003bcc <MX_SPI1_Init+0x74>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003b84:	4b11      	ldr	r3, [pc, #68]	; (8003bcc <MX_SPI1_Init+0x74>)
 8003b86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b8a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b8c:	4b0f      	ldr	r3, [pc, #60]	; (8003bcc <MX_SPI1_Init+0x74>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b92:	4b0e      	ldr	r3, [pc, #56]	; (8003bcc <MX_SPI1_Init+0x74>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b98:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <MX_SPI1_Init+0x74>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b9e:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <MX_SPI1_Init+0x74>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003ba4:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <MX_SPI1_Init+0x74>)
 8003ba6:	2207      	movs	r2, #7
 8003ba8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003baa:	4b08      	ldr	r3, [pc, #32]	; (8003bcc <MX_SPI1_Init+0x74>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003bb0:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <MX_SPI1_Init+0x74>)
 8003bb2:	2208      	movs	r2, #8
 8003bb4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003bb6:	4805      	ldr	r0, [pc, #20]	; (8003bcc <MX_SPI1_Init+0x74>)
 8003bb8:	f003 fe2c 	bl	8007814 <HAL_SPI_Init>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003bc2:	f7ff ff43 	bl	8003a4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003bc6:	bf00      	nop
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	2000230c 	.word	0x2000230c
 8003bd0:	40013000 	.word	0x40013000

08003bd4 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8003bd8:	4b1b      	ldr	r3, [pc, #108]	; (8003c48 <MX_SPI4_Init+0x74>)
 8003bda:	4a1c      	ldr	r2, [pc, #112]	; (8003c4c <MX_SPI4_Init+0x78>)
 8003bdc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8003bde:	4b1a      	ldr	r3, [pc, #104]	; (8003c48 <MX_SPI4_Init+0x74>)
 8003be0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003be4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003be6:	4b18      	ldr	r3, [pc, #96]	; (8003c48 <MX_SPI4_Init+0x74>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003bec:	4b16      	ldr	r3, [pc, #88]	; (8003c48 <MX_SPI4_Init+0x74>)
 8003bee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003bf2:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003bf4:	4b14      	ldr	r3, [pc, #80]	; (8003c48 <MX_SPI4_Init+0x74>)
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003bfa:	4b13      	ldr	r3, [pc, #76]	; (8003c48 <MX_SPI4_Init+0x74>)
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003c00:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <MX_SPI4_Init+0x74>)
 8003c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c06:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003c08:	4b0f      	ldr	r3, [pc, #60]	; (8003c48 <MX_SPI4_Init+0x74>)
 8003c0a:	2218      	movs	r2, #24
 8003c0c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c0e:	4b0e      	ldr	r3, [pc, #56]	; (8003c48 <MX_SPI4_Init+0x74>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c14:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <MX_SPI4_Init+0x74>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c1a:	4b0b      	ldr	r3, [pc, #44]	; (8003c48 <MX_SPI4_Init+0x74>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8003c20:	4b09      	ldr	r3, [pc, #36]	; (8003c48 <MX_SPI4_Init+0x74>)
 8003c22:	2207      	movs	r2, #7
 8003c24:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003c26:	4b08      	ldr	r3, [pc, #32]	; (8003c48 <MX_SPI4_Init+0x74>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003c2c:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <MX_SPI4_Init+0x74>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003c32:	4805      	ldr	r0, [pc, #20]	; (8003c48 <MX_SPI4_Init+0x74>)
 8003c34:	f003 fdee 	bl	8007814 <HAL_SPI_Init>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8003c3e:	f7ff ff05 	bl	8003a4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8003c42:	bf00      	nop
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	20002370 	.word	0x20002370
 8003c4c:	40013400 	.word	0x40013400

08003c50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b08c      	sub	sp, #48	; 0x30
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c58:	f107 031c 	add.w	r3, r7, #28
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	605a      	str	r2, [r3, #4]
 8003c62:	609a      	str	r2, [r3, #8]
 8003c64:	60da      	str	r2, [r3, #12]
 8003c66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a3c      	ldr	r2, [pc, #240]	; (8003d60 <HAL_SPI_MspInit+0x110>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d144      	bne.n	8003cfc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003c72:	4b3c      	ldr	r3, [pc, #240]	; (8003d64 <HAL_SPI_MspInit+0x114>)
 8003c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c76:	4a3b      	ldr	r2, [pc, #236]	; (8003d64 <HAL_SPI_MspInit+0x114>)
 8003c78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c7e:	4b39      	ldr	r3, [pc, #228]	; (8003d64 <HAL_SPI_MspInit+0x114>)
 8003c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c86:	61bb      	str	r3, [r7, #24]
 8003c88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c8a:	4b36      	ldr	r3, [pc, #216]	; (8003d64 <HAL_SPI_MspInit+0x114>)
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	4a35      	ldr	r2, [pc, #212]	; (8003d64 <HAL_SPI_MspInit+0x114>)
 8003c90:	f043 0301 	orr.w	r3, r3, #1
 8003c94:	6313      	str	r3, [r2, #48]	; 0x30
 8003c96:	4b33      	ldr	r3, [pc, #204]	; (8003d64 <HAL_SPI_MspInit+0x114>)
 8003c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ca2:	4b30      	ldr	r3, [pc, #192]	; (8003d64 <HAL_SPI_MspInit+0x114>)
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca6:	4a2f      	ldr	r2, [pc, #188]	; (8003d64 <HAL_SPI_MspInit+0x114>)
 8003ca8:	f043 0302 	orr.w	r3, r3, #2
 8003cac:	6313      	str	r3, [r2, #48]	; 0x30
 8003cae:	4b2d      	ldr	r3, [pc, #180]	; (8003d64 <HAL_SPI_MspInit+0x114>)
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	613b      	str	r3, [r7, #16]
 8003cb8:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003cba:	2360      	movs	r3, #96	; 0x60
 8003cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003cca:	2305      	movs	r3, #5
 8003ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cce:	f107 031c 	add.w	r3, r7, #28
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	4824      	ldr	r0, [pc, #144]	; (8003d68 <HAL_SPI_MspInit+0x118>)
 8003cd6:	f001 feaf 	bl	8005a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003cda:	2320      	movs	r3, #32
 8003cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cde:	2302      	movs	r3, #2
 8003ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003cea:	2305      	movs	r3, #5
 8003cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cee:	f107 031c 	add.w	r3, r7, #28
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	481d      	ldr	r0, [pc, #116]	; (8003d6c <HAL_SPI_MspInit+0x11c>)
 8003cf6:	f001 fe9f 	bl	8005a38 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8003cfa:	e02c      	b.n	8003d56 <HAL_SPI_MspInit+0x106>
  else if(spiHandle->Instance==SPI4)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a1b      	ldr	r2, [pc, #108]	; (8003d70 <HAL_SPI_MspInit+0x120>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d127      	bne.n	8003d56 <HAL_SPI_MspInit+0x106>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003d06:	4b17      	ldr	r3, [pc, #92]	; (8003d64 <HAL_SPI_MspInit+0x114>)
 8003d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0a:	4a16      	ldr	r2, [pc, #88]	; (8003d64 <HAL_SPI_MspInit+0x114>)
 8003d0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d10:	6453      	str	r3, [r2, #68]	; 0x44
 8003d12:	4b14      	ldr	r3, [pc, #80]	; (8003d64 <HAL_SPI_MspInit+0x114>)
 8003d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d1e:	4b11      	ldr	r3, [pc, #68]	; (8003d64 <HAL_SPI_MspInit+0x114>)
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	4a10      	ldr	r2, [pc, #64]	; (8003d64 <HAL_SPI_MspInit+0x114>)
 8003d24:	f043 0310 	orr.w	r3, r3, #16
 8003d28:	6313      	str	r3, [r2, #48]	; 0x30
 8003d2a:	4b0e      	ldr	r3, [pc, #56]	; (8003d64 <HAL_SPI_MspInit+0x114>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	f003 0310 	and.w	r3, r3, #16
 8003d32:	60bb      	str	r3, [r7, #8]
 8003d34:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMP2_SCK_Pin|BMP2_SDO_Pin|BMP2_SDA_Pin;
 8003d36:	2364      	movs	r3, #100	; 0x64
 8003d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d42:	2303      	movs	r3, #3
 8003d44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003d46:	2305      	movs	r3, #5
 8003d48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003d4a:	f107 031c 	add.w	r3, r7, #28
 8003d4e:	4619      	mov	r1, r3
 8003d50:	4808      	ldr	r0, [pc, #32]	; (8003d74 <HAL_SPI_MspInit+0x124>)
 8003d52:	f001 fe71 	bl	8005a38 <HAL_GPIO_Init>
}
 8003d56:	bf00      	nop
 8003d58:	3730      	adds	r7, #48	; 0x30
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	40013000 	.word	0x40013000
 8003d64:	40023800 	.word	0x40023800
 8003d68:	40020000 	.word	0x40020000
 8003d6c:	40020400 	.word	0x40020400
 8003d70:	40013400 	.word	0x40013400
 8003d74:	40021000 	.word	0x40021000

08003d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003d7e:	4b0f      	ldr	r3, [pc, #60]	; (8003dbc <HAL_MspInit+0x44>)
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	4a0e      	ldr	r2, [pc, #56]	; (8003dbc <HAL_MspInit+0x44>)
 8003d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d88:	6413      	str	r3, [r2, #64]	; 0x40
 8003d8a:	4b0c      	ldr	r3, [pc, #48]	; (8003dbc <HAL_MspInit+0x44>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d92:	607b      	str	r3, [r7, #4]
 8003d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d96:	4b09      	ldr	r3, [pc, #36]	; (8003dbc <HAL_MspInit+0x44>)
 8003d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9a:	4a08      	ldr	r2, [pc, #32]	; (8003dbc <HAL_MspInit+0x44>)
 8003d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003da0:	6453      	str	r3, [r2, #68]	; 0x44
 8003da2:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <HAL_MspInit+0x44>)
 8003da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003daa:	603b      	str	r3, [r7, #0]
 8003dac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003dae:	bf00      	nop
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	40023800 	.word	0x40023800

08003dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003dc4:	e7fe      	b.n	8003dc4 <NMI_Handler+0x4>

08003dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dca:	e7fe      	b.n	8003dca <HardFault_Handler+0x4>

08003dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003dd0:	e7fe      	b.n	8003dd0 <MemManage_Handler+0x4>

08003dd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003dd6:	e7fe      	b.n	8003dd6 <BusFault_Handler+0x4>

08003dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ddc:	e7fe      	b.n	8003ddc <UsageFault_Handler+0x4>

08003dde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003dde:	b480      	push	{r7}
 8003de0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003de2:	bf00      	nop
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003df0:	bf00      	nop
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003dfe:	bf00      	nop
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	if (Timer1 > 0)
 8003e0c:	4b0c      	ldr	r3, [pc, #48]	; (8003e40 <SysTick_Handler+0x38>)
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <SysTick_Handler+0x18>
		Timer1--;
 8003e14:	4b0a      	ldr	r3, [pc, #40]	; (8003e40 <SysTick_Handler+0x38>)
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	4b08      	ldr	r3, [pc, #32]	; (8003e40 <SysTick_Handler+0x38>)
 8003e1e:	801a      	strh	r2, [r3, #0]

	if (Timer2 >0)
 8003e20:	4b08      	ldr	r3, [pc, #32]	; (8003e44 <SysTick_Handler+0x3c>)
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d005      	beq.n	8003e34 <SysTick_Handler+0x2c>
		Timer2--;
 8003e28:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <SysTick_Handler+0x3c>)
 8003e2a:	881b      	ldrh	r3, [r3, #0]
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	4b04      	ldr	r3, [pc, #16]	; (8003e44 <SysTick_Handler+0x3c>)
 8003e32:	801a      	strh	r2, [r3, #0]


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e34:	f000 fbf0 	bl	8004618 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  HAL_SYSTICK_IRQHandler();
 8003e38:	f001 fa75 	bl	8005326 <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e3c:	bf00      	nop
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	200001fc 	.word	0x200001fc
 8003e44:	200001fe 	.word	0x200001fe

08003e48 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003e4c:	4802      	ldr	r0, [pc, #8]	; (8003e58 <ADC_IRQHandler+0x10>)
 8003e4e:	f000 fdc4 	bl	80049da <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003e52:	bf00      	nop
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	20000154 	.word	0x20000154

08003e5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003e60:	4802      	ldr	r0, [pc, #8]	; (8003e6c <TIM2_IRQHandler+0x10>)
 8003e62:	f004 fe63 	bl	8008b2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003e66:	bf00      	nop
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	200023d8 	.word	0x200023d8

08003e70 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003e74:	4802      	ldr	r0, [pc, #8]	; (8003e80 <TIM3_IRQHandler+0x10>)
 8003e76:	f004 fe59 	bl	8008b2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003e7a:	bf00      	nop
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	20002424 	.word	0x20002424

08003e84 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003e88:	4802      	ldr	r0, [pc, #8]	; (8003e94 <TIM4_IRQHandler+0x10>)
 8003e8a:	f004 fe4f 	bl	8008b2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003e8e:	bf00      	nop
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	20002470 	.word	0x20002470

08003e98 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003e9c:	4802      	ldr	r0, [pc, #8]	; (8003ea8 <USART3_IRQHandler+0x10>)
 8003e9e:	f005 feeb 	bl	8009c78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003ea2:	bf00      	nop
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	20002508 	.word	0x20002508

08003eac <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003eb0:	4802      	ldr	r0, [pc, #8]	; (8003ebc <TIM7_IRQHandler+0x10>)
 8003eb2:	f004 fe3b 	bl	8008b2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003eb6:	bf00      	nop
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	200024bc 	.word	0x200024bc

08003ec0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003ec4:	4802      	ldr	r0, [pc, #8]	; (8003ed0 <DMA2_Stream0_IRQHandler+0x10>)
 8003ec6:	f001 fb7b 	bl	80055c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003eca:	bf00      	nop
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	2000019c 	.word	0x2000019c

08003ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003edc:	4a14      	ldr	r2, [pc, #80]	; (8003f30 <_sbrk+0x5c>)
 8003ede:	4b15      	ldr	r3, [pc, #84]	; (8003f34 <_sbrk+0x60>)
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ee8:	4b13      	ldr	r3, [pc, #76]	; (8003f38 <_sbrk+0x64>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d102      	bne.n	8003ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ef0:	4b11      	ldr	r3, [pc, #68]	; (8003f38 <_sbrk+0x64>)
 8003ef2:	4a12      	ldr	r2, [pc, #72]	; (8003f3c <_sbrk+0x68>)
 8003ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ef6:	4b10      	ldr	r3, [pc, #64]	; (8003f38 <_sbrk+0x64>)
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4413      	add	r3, r2
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d207      	bcs.n	8003f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f04:	f00a f85e 	bl	800dfc4 <__errno>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	220c      	movs	r2, #12
 8003f0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f12:	e009      	b.n	8003f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f14:	4b08      	ldr	r3, [pc, #32]	; (8003f38 <_sbrk+0x64>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f1a:	4b07      	ldr	r3, [pc, #28]	; (8003f38 <_sbrk+0x64>)
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4413      	add	r3, r2
 8003f22:	4a05      	ldr	r2, [pc, #20]	; (8003f38 <_sbrk+0x64>)
 8003f24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f26:	68fb      	ldr	r3, [r7, #12]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3718      	adds	r7, #24
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	20050000 	.word	0x20050000
 8003f34:	00000400 	.word	0x00000400
 8003f38:	200023d4 	.word	0x200023d4
 8003f3c:	20002918 	.word	0x20002918

08003f40 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f44:	4b06      	ldr	r3, [pc, #24]	; (8003f60 <SystemInit+0x20>)
 8003f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4a:	4a05      	ldr	r2, [pc, #20]	; (8003f60 <SystemInit+0x20>)
 8003f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f54:	bf00      	nop
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	e000ed00 	.word	0xe000ed00

08003f64 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b088      	sub	sp, #32
 8003f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f6a:	f107 0310 	add.w	r3, r7, #16
 8003f6e:	2200      	movs	r2, #0
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	605a      	str	r2, [r3, #4]
 8003f74:	609a      	str	r2, [r3, #8]
 8003f76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f78:	1d3b      	adds	r3, r7, #4
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	605a      	str	r2, [r3, #4]
 8003f80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003f82:	4b1e      	ldr	r3, [pc, #120]	; (8003ffc <MX_TIM2_Init+0x98>)
 8003f84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f88:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1079;
 8003f8a:	4b1c      	ldr	r3, [pc, #112]	; (8003ffc <MX_TIM2_Init+0x98>)
 8003f8c:	f240 4237 	movw	r2, #1079	; 0x437
 8003f90:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f92:	4b1a      	ldr	r3, [pc, #104]	; (8003ffc <MX_TIM2_Init+0x98>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24999;
 8003f98:	4b18      	ldr	r3, [pc, #96]	; (8003ffc <MX_TIM2_Init+0x98>)
 8003f9a:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8003f9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fa0:	4b16      	ldr	r3, [pc, #88]	; (8003ffc <MX_TIM2_Init+0x98>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fa6:	4b15      	ldr	r3, [pc, #84]	; (8003ffc <MX_TIM2_Init+0x98>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003fac:	4813      	ldr	r0, [pc, #76]	; (8003ffc <MX_TIM2_Init+0x98>)
 8003fae:	f004 fb91 	bl	80086d4 <HAL_TIM_Base_Init>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8003fb8:	f7ff fd48 	bl	8003a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fc0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003fc2:	f107 0310 	add.w	r3, r7, #16
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	480c      	ldr	r0, [pc, #48]	; (8003ffc <MX_TIM2_Init+0x98>)
 8003fca:	f004 ffe3 	bl	8008f94 <HAL_TIM_ConfigClockSource>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8003fd4:	f7ff fd3a 	bl	8003a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003fe0:	1d3b      	adds	r3, r7, #4
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4805      	ldr	r0, [pc, #20]	; (8003ffc <MX_TIM2_Init+0x98>)
 8003fe6:	f005 fc85 	bl	80098f4 <HAL_TIMEx_MasterConfigSynchronization>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8003ff0:	f7ff fd2c 	bl	8003a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003ff4:	bf00      	nop
 8003ff6:	3720      	adds	r7, #32
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	200023d8 	.word	0x200023d8

08004000 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b08e      	sub	sp, #56	; 0x38
 8004004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004006:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800400a:	2200      	movs	r2, #0
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	605a      	str	r2, [r3, #4]
 8004010:	609a      	str	r2, [r3, #8]
 8004012:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004014:	f107 031c 	add.w	r3, r7, #28
 8004018:	2200      	movs	r2, #0
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	605a      	str	r2, [r3, #4]
 800401e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004020:	463b      	mov	r3, r7
 8004022:	2200      	movs	r2, #0
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	605a      	str	r2, [r3, #4]
 8004028:	609a      	str	r2, [r3, #8]
 800402a:	60da      	str	r2, [r3, #12]
 800402c:	611a      	str	r2, [r3, #16]
 800402e:	615a      	str	r2, [r3, #20]
 8004030:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004032:	4b34      	ldr	r3, [pc, #208]	; (8004104 <MX_TIM3_Init+0x104>)
 8004034:	4a34      	ldr	r2, [pc, #208]	; (8004108 <MX_TIM3_Init+0x108>)
 8004036:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8004038:	4b32      	ldr	r3, [pc, #200]	; (8004104 <MX_TIM3_Init+0x104>)
 800403a:	2247      	movs	r2, #71	; 0x47
 800403c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800403e:	4b31      	ldr	r3, [pc, #196]	; (8004104 <MX_TIM3_Init+0x104>)
 8004040:	2200      	movs	r2, #0
 8004042:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8004044:	4b2f      	ldr	r3, [pc, #188]	; (8004104 <MX_TIM3_Init+0x104>)
 8004046:	f240 32e7 	movw	r2, #999	; 0x3e7
 800404a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800404c:	4b2d      	ldr	r3, [pc, #180]	; (8004104 <MX_TIM3_Init+0x104>)
 800404e:	2200      	movs	r2, #0
 8004050:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004052:	4b2c      	ldr	r3, [pc, #176]	; (8004104 <MX_TIM3_Init+0x104>)
 8004054:	2200      	movs	r2, #0
 8004056:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004058:	482a      	ldr	r0, [pc, #168]	; (8004104 <MX_TIM3_Init+0x104>)
 800405a:	f004 fb3b 	bl	80086d4 <HAL_TIM_Base_Init>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004064:	f7ff fcf2 	bl	8003a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800406c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800406e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004072:	4619      	mov	r1, r3
 8004074:	4823      	ldr	r0, [pc, #140]	; (8004104 <MX_TIM3_Init+0x104>)
 8004076:	f004 ff8d 	bl	8008f94 <HAL_TIM_ConfigClockSource>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8004080:	f7ff fce4 	bl	8003a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004084:	481f      	ldr	r0, [pc, #124]	; (8004104 <MX_TIM3_Init+0x104>)
 8004086:	f004 fbf5 	bl	8008874 <HAL_TIM_PWM_Init>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8004090:	f7ff fcdc 	bl	8003a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004094:	2300      	movs	r3, #0
 8004096:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004098:	2300      	movs	r3, #0
 800409a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800409c:	f107 031c 	add.w	r3, r7, #28
 80040a0:	4619      	mov	r1, r3
 80040a2:	4818      	ldr	r0, [pc, #96]	; (8004104 <MX_TIM3_Init+0x104>)
 80040a4:	f005 fc26 	bl	80098f4 <HAL_TIMEx_MasterConfigSynchronization>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80040ae:	f7ff fccd 	bl	8003a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040b2:	2360      	movs	r3, #96	; 0x60
 80040b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80040b6:	2300      	movs	r3, #0
 80040b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040ba:	2300      	movs	r3, #0
 80040bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040be:	2300      	movs	r3, #0
 80040c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80040c2:	463b      	mov	r3, r7
 80040c4:	2204      	movs	r2, #4
 80040c6:	4619      	mov	r1, r3
 80040c8:	480e      	ldr	r0, [pc, #56]	; (8004104 <MX_TIM3_Init+0x104>)
 80040ca:	f004 fe4f 	bl	8008d6c <HAL_TIM_PWM_ConfigChannel>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80040d4:	f7ff fcba 	bl	8003a4c <Error_Handler>
  }
  sConfigOC.Pulse = 500;
 80040d8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80040dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80040de:	463b      	mov	r3, r7
 80040e0:	2208      	movs	r2, #8
 80040e2:	4619      	mov	r1, r3
 80040e4:	4807      	ldr	r0, [pc, #28]	; (8004104 <MX_TIM3_Init+0x104>)
 80040e6:	f004 fe41 	bl	8008d6c <HAL_TIM_PWM_ConfigChannel>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 80040f0:	f7ff fcac 	bl	8003a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80040f4:	4803      	ldr	r0, [pc, #12]	; (8004104 <MX_TIM3_Init+0x104>)
 80040f6:	f000 f931 	bl	800435c <HAL_TIM_MspPostInit>

}
 80040fa:	bf00      	nop
 80040fc:	3738      	adds	r7, #56	; 0x38
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20002424 	.word	0x20002424
 8004108:	40000400 	.word	0x40000400

0800410c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b08e      	sub	sp, #56	; 0x38
 8004110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004112:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004116:	2200      	movs	r2, #0
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	605a      	str	r2, [r3, #4]
 800411c:	609a      	str	r2, [r3, #8]
 800411e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004120:	f107 031c 	add.w	r3, r7, #28
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	605a      	str	r2, [r3, #4]
 800412a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800412c:	463b      	mov	r3, r7
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	605a      	str	r2, [r3, #4]
 8004134:	609a      	str	r2, [r3, #8]
 8004136:	60da      	str	r2, [r3, #12]
 8004138:	611a      	str	r2, [r3, #16]
 800413a:	615a      	str	r2, [r3, #20]
 800413c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800413e:	4b2d      	ldr	r3, [pc, #180]	; (80041f4 <MX_TIM4_Init+0xe8>)
 8004140:	4a2d      	ldr	r2, [pc, #180]	; (80041f8 <MX_TIM4_Init+0xec>)
 8004142:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 107;
 8004144:	4b2b      	ldr	r3, [pc, #172]	; (80041f4 <MX_TIM4_Init+0xe8>)
 8004146:	226b      	movs	r2, #107	; 0x6b
 8004148:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800414a:	4b2a      	ldr	r3, [pc, #168]	; (80041f4 <MX_TIM4_Init+0xe8>)
 800414c:	2200      	movs	r2, #0
 800414e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8004150:	4b28      	ldr	r3, [pc, #160]	; (80041f4 <MX_TIM4_Init+0xe8>)
 8004152:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004156:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004158:	4b26      	ldr	r3, [pc, #152]	; (80041f4 <MX_TIM4_Init+0xe8>)
 800415a:	2200      	movs	r2, #0
 800415c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800415e:	4b25      	ldr	r3, [pc, #148]	; (80041f4 <MX_TIM4_Init+0xe8>)
 8004160:	2200      	movs	r2, #0
 8004162:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004164:	4823      	ldr	r0, [pc, #140]	; (80041f4 <MX_TIM4_Init+0xe8>)
 8004166:	f004 fab5 	bl	80086d4 <HAL_TIM_Base_Init>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8004170:	f7ff fc6c 	bl	8003a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004178:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800417a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800417e:	4619      	mov	r1, r3
 8004180:	481c      	ldr	r0, [pc, #112]	; (80041f4 <MX_TIM4_Init+0xe8>)
 8004182:	f004 ff07 	bl	8008f94 <HAL_TIM_ConfigClockSource>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800418c:	f7ff fc5e 	bl	8003a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004190:	4818      	ldr	r0, [pc, #96]	; (80041f4 <MX_TIM4_Init+0xe8>)
 8004192:	f004 fb6f 	bl	8008874 <HAL_TIM_PWM_Init>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800419c:	f7ff fc56 	bl	8003a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041a0:	2300      	movs	r3, #0
 80041a2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041a4:	2300      	movs	r3, #0
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80041a8:	f107 031c 	add.w	r3, r7, #28
 80041ac:	4619      	mov	r1, r3
 80041ae:	4811      	ldr	r0, [pc, #68]	; (80041f4 <MX_TIM4_Init+0xe8>)
 80041b0:	f005 fba0 	bl	80098f4 <HAL_TIMEx_MasterConfigSynchronization>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80041ba:	f7ff fc47 	bl	8003a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041be:	2360      	movs	r3, #96	; 0x60
 80041c0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80041c2:	2300      	movs	r3, #0
 80041c4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041c6:	2300      	movs	r3, #0
 80041c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041ca:	2300      	movs	r3, #0
 80041cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041ce:	463b      	mov	r3, r7
 80041d0:	2200      	movs	r2, #0
 80041d2:	4619      	mov	r1, r3
 80041d4:	4807      	ldr	r0, [pc, #28]	; (80041f4 <MX_TIM4_Init+0xe8>)
 80041d6:	f004 fdc9 	bl	8008d6c <HAL_TIM_PWM_ConfigChannel>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80041e0:	f7ff fc34 	bl	8003a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80041e4:	4803      	ldr	r0, [pc, #12]	; (80041f4 <MX_TIM4_Init+0xe8>)
 80041e6:	f000 f8b9 	bl	800435c <HAL_TIM_MspPostInit>

}
 80041ea:	bf00      	nop
 80041ec:	3738      	adds	r7, #56	; 0x38
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	20002470 	.word	0x20002470
 80041f8:	40000800 	.word	0x40000800

080041fc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004202:	1d3b      	adds	r3, r7, #4
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	605a      	str	r2, [r3, #4]
 800420a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800420c:	4b15      	ldr	r3, [pc, #84]	; (8004264 <MX_TIM7_Init+0x68>)
 800420e:	4a16      	ldr	r2, [pc, #88]	; (8004268 <MX_TIM7_Init+0x6c>)
 8004210:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10799;
 8004212:	4b14      	ldr	r3, [pc, #80]	; (8004264 <MX_TIM7_Init+0x68>)
 8004214:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8004218:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800421a:	4b12      	ldr	r3, [pc, #72]	; (8004264 <MX_TIM7_Init+0x68>)
 800421c:	2200      	movs	r2, #0
 800421e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8004220:	4b10      	ldr	r3, [pc, #64]	; (8004264 <MX_TIM7_Init+0x68>)
 8004222:	f242 720f 	movw	r2, #9999	; 0x270f
 8004226:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004228:	4b0e      	ldr	r3, [pc, #56]	; (8004264 <MX_TIM7_Init+0x68>)
 800422a:	2200      	movs	r2, #0
 800422c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800422e:	480d      	ldr	r0, [pc, #52]	; (8004264 <MX_TIM7_Init+0x68>)
 8004230:	f004 fa50 	bl	80086d4 <HAL_TIM_Base_Init>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800423a:	f7ff fc07 	bl	8003a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800423e:	2300      	movs	r3, #0
 8004240:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004242:	2300      	movs	r3, #0
 8004244:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004246:	1d3b      	adds	r3, r7, #4
 8004248:	4619      	mov	r1, r3
 800424a:	4806      	ldr	r0, [pc, #24]	; (8004264 <MX_TIM7_Init+0x68>)
 800424c:	f005 fb52 	bl	80098f4 <HAL_TIMEx_MasterConfigSynchronization>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8004256:	f7ff fbf9 	bl	8003a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800425a:	bf00      	nop
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	200024bc 	.word	0x200024bc
 8004268:	40001400 	.word	0x40001400

0800426c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800427c:	d114      	bne.n	80042a8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800427e:	4b33      	ldr	r3, [pc, #204]	; (800434c <HAL_TIM_Base_MspInit+0xe0>)
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	4a32      	ldr	r2, [pc, #200]	; (800434c <HAL_TIM_Base_MspInit+0xe0>)
 8004284:	f043 0301 	orr.w	r3, r3, #1
 8004288:	6413      	str	r3, [r2, #64]	; 0x40
 800428a:	4b30      	ldr	r3, [pc, #192]	; (800434c <HAL_TIM_Base_MspInit+0xe0>)
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004296:	2200      	movs	r2, #0
 8004298:	2100      	movs	r1, #0
 800429a:	201c      	movs	r0, #28
 800429c:	f001 f80d 	bl	80052ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80042a0:	201c      	movs	r0, #28
 80042a2:	f001 f826 	bl	80052f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80042a6:	e04c      	b.n	8004342 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a28      	ldr	r2, [pc, #160]	; (8004350 <HAL_TIM_Base_MspInit+0xe4>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d114      	bne.n	80042dc <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80042b2:	4b26      	ldr	r3, [pc, #152]	; (800434c <HAL_TIM_Base_MspInit+0xe0>)
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	4a25      	ldr	r2, [pc, #148]	; (800434c <HAL_TIM_Base_MspInit+0xe0>)
 80042b8:	f043 0302 	orr.w	r3, r3, #2
 80042bc:	6413      	str	r3, [r2, #64]	; 0x40
 80042be:	4b23      	ldr	r3, [pc, #140]	; (800434c <HAL_TIM_Base_MspInit+0xe0>)
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	613b      	str	r3, [r7, #16]
 80042c8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80042ca:	2200      	movs	r2, #0
 80042cc:	2100      	movs	r1, #0
 80042ce:	201d      	movs	r0, #29
 80042d0:	f000 fff3 	bl	80052ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80042d4:	201d      	movs	r0, #29
 80042d6:	f001 f80c 	bl	80052f2 <HAL_NVIC_EnableIRQ>
}
 80042da:	e032      	b.n	8004342 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a1c      	ldr	r2, [pc, #112]	; (8004354 <HAL_TIM_Base_MspInit+0xe8>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d114      	bne.n	8004310 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80042e6:	4b19      	ldr	r3, [pc, #100]	; (800434c <HAL_TIM_Base_MspInit+0xe0>)
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	4a18      	ldr	r2, [pc, #96]	; (800434c <HAL_TIM_Base_MspInit+0xe0>)
 80042ec:	f043 0304 	orr.w	r3, r3, #4
 80042f0:	6413      	str	r3, [r2, #64]	; 0x40
 80042f2:	4b16      	ldr	r3, [pc, #88]	; (800434c <HAL_TIM_Base_MspInit+0xe0>)
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	f003 0304 	and.w	r3, r3, #4
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80042fe:	2200      	movs	r2, #0
 8004300:	2100      	movs	r1, #0
 8004302:	201e      	movs	r0, #30
 8004304:	f000 ffd9 	bl	80052ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004308:	201e      	movs	r0, #30
 800430a:	f000 fff2 	bl	80052f2 <HAL_NVIC_EnableIRQ>
}
 800430e:	e018      	b.n	8004342 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM7)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a10      	ldr	r2, [pc, #64]	; (8004358 <HAL_TIM_Base_MspInit+0xec>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d113      	bne.n	8004342 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800431a:	4b0c      	ldr	r3, [pc, #48]	; (800434c <HAL_TIM_Base_MspInit+0xe0>)
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	4a0b      	ldr	r2, [pc, #44]	; (800434c <HAL_TIM_Base_MspInit+0xe0>)
 8004320:	f043 0320 	orr.w	r3, r3, #32
 8004324:	6413      	str	r3, [r2, #64]	; 0x40
 8004326:	4b09      	ldr	r3, [pc, #36]	; (800434c <HAL_TIM_Base_MspInit+0xe0>)
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	f003 0320 	and.w	r3, r3, #32
 800432e:	60bb      	str	r3, [r7, #8]
 8004330:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004332:	2200      	movs	r2, #0
 8004334:	2100      	movs	r1, #0
 8004336:	2037      	movs	r0, #55	; 0x37
 8004338:	f000 ffbf 	bl	80052ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800433c:	2037      	movs	r0, #55	; 0x37
 800433e:	f000 ffd8 	bl	80052f2 <HAL_NVIC_EnableIRQ>
}
 8004342:	bf00      	nop
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	40023800 	.word	0x40023800
 8004350:	40000400 	.word	0x40000400
 8004354:	40000800 	.word	0x40000800
 8004358:	40001400 	.word	0x40001400

0800435c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08a      	sub	sp, #40	; 0x28
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004364:	f107 0314 	add.w	r3, r7, #20
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	605a      	str	r2, [r3, #4]
 800436e:	609a      	str	r2, [r3, #8]
 8004370:	60da      	str	r2, [r3, #12]
 8004372:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a23      	ldr	r2, [pc, #140]	; (8004408 <HAL_TIM_MspPostInit+0xac>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d11d      	bne.n	80043ba <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800437e:	4b23      	ldr	r3, [pc, #140]	; (800440c <HAL_TIM_MspPostInit+0xb0>)
 8004380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004382:	4a22      	ldr	r2, [pc, #136]	; (800440c <HAL_TIM_MspPostInit+0xb0>)
 8004384:	f043 0304 	orr.w	r3, r3, #4
 8004388:	6313      	str	r3, [r2, #48]	; 0x30
 800438a:	4b20      	ldr	r3, [pc, #128]	; (800440c <HAL_TIM_MspPostInit+0xb0>)
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	f003 0304 	and.w	r3, r3, #4
 8004392:	613b      	str	r3, [r7, #16]
 8004394:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004396:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800439a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800439c:	2302      	movs	r3, #2
 800439e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a0:	2300      	movs	r3, #0
 80043a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043a4:	2300      	movs	r3, #0
 80043a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80043a8:	2302      	movs	r3, #2
 80043aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043ac:	f107 0314 	add.w	r3, r7, #20
 80043b0:	4619      	mov	r1, r3
 80043b2:	4817      	ldr	r0, [pc, #92]	; (8004410 <HAL_TIM_MspPostInit+0xb4>)
 80043b4:	f001 fb40 	bl	8005a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80043b8:	e021      	b.n	80043fe <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM4)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a15      	ldr	r2, [pc, #84]	; (8004414 <HAL_TIM_MspPostInit+0xb8>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d11c      	bne.n	80043fe <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80043c4:	4b11      	ldr	r3, [pc, #68]	; (800440c <HAL_TIM_MspPostInit+0xb0>)
 80043c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c8:	4a10      	ldr	r2, [pc, #64]	; (800440c <HAL_TIM_MspPostInit+0xb0>)
 80043ca:	f043 0308 	orr.w	r3, r3, #8
 80043ce:	6313      	str	r3, [r2, #48]	; 0x30
 80043d0:	4b0e      	ldr	r3, [pc, #56]	; (800440c <HAL_TIM_MspPostInit+0xb0>)
 80043d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d4:	f003 0308 	and.w	r3, r3, #8
 80043d8:	60fb      	str	r3, [r7, #12]
 80043da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80043dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043e2:	2302      	movs	r3, #2
 80043e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e6:	2300      	movs	r3, #0
 80043e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ea:	2300      	movs	r3, #0
 80043ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80043ee:	2302      	movs	r3, #2
 80043f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043f2:	f107 0314 	add.w	r3, r7, #20
 80043f6:	4619      	mov	r1, r3
 80043f8:	4807      	ldr	r0, [pc, #28]	; (8004418 <HAL_TIM_MspPostInit+0xbc>)
 80043fa:	f001 fb1d 	bl	8005a38 <HAL_GPIO_Init>
}
 80043fe:	bf00      	nop
 8004400:	3728      	adds	r7, #40	; 0x28
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40000400 	.word	0x40000400
 800440c:	40023800 	.word	0x40023800
 8004410:	40020800 	.word	0x40020800
 8004414:	40000800 	.word	0x40000800
 8004418:	40020c00 	.word	0x40020c00

0800441c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004420:	4b14      	ldr	r3, [pc, #80]	; (8004474 <MX_USART3_UART_Init+0x58>)
 8004422:	4a15      	ldr	r2, [pc, #84]	; (8004478 <MX_USART3_UART_Init+0x5c>)
 8004424:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004426:	4b13      	ldr	r3, [pc, #76]	; (8004474 <MX_USART3_UART_Init+0x58>)
 8004428:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800442c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800442e:	4b11      	ldr	r3, [pc, #68]	; (8004474 <MX_USART3_UART_Init+0x58>)
 8004430:	2200      	movs	r2, #0
 8004432:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004434:	4b0f      	ldr	r3, [pc, #60]	; (8004474 <MX_USART3_UART_Init+0x58>)
 8004436:	2200      	movs	r2, #0
 8004438:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800443a:	4b0e      	ldr	r3, [pc, #56]	; (8004474 <MX_USART3_UART_Init+0x58>)
 800443c:	2200      	movs	r2, #0
 800443e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004440:	4b0c      	ldr	r3, [pc, #48]	; (8004474 <MX_USART3_UART_Init+0x58>)
 8004442:	220c      	movs	r2, #12
 8004444:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004446:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <MX_USART3_UART_Init+0x58>)
 8004448:	2200      	movs	r2, #0
 800444a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800444c:	4b09      	ldr	r3, [pc, #36]	; (8004474 <MX_USART3_UART_Init+0x58>)
 800444e:	2200      	movs	r2, #0
 8004450:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004452:	4b08      	ldr	r3, [pc, #32]	; (8004474 <MX_USART3_UART_Init+0x58>)
 8004454:	2200      	movs	r2, #0
 8004456:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004458:	4b06      	ldr	r3, [pc, #24]	; (8004474 <MX_USART3_UART_Init+0x58>)
 800445a:	2200      	movs	r2, #0
 800445c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800445e:	4805      	ldr	r0, [pc, #20]	; (8004474 <MX_USART3_UART_Init+0x58>)
 8004460:	f005 faf4 	bl	8009a4c <HAL_UART_Init>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800446a:	f7ff faef 	bl	8003a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800446e:	bf00      	nop
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	20002508 	.word	0x20002508
 8004478:	40004800 	.word	0x40004800

0800447c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b0aa      	sub	sp, #168	; 0xa8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004484:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	605a      	str	r2, [r3, #4]
 800448e:	609a      	str	r2, [r3, #8]
 8004490:	60da      	str	r2, [r3, #12]
 8004492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004494:	f107 0310 	add.w	r3, r7, #16
 8004498:	2284      	movs	r2, #132	; 0x84
 800449a:	2100      	movs	r1, #0
 800449c:	4618      	mov	r0, r3
 800449e:	f009 fd89 	bl	800dfb4 <memset>
  if(uartHandle->Instance==USART3)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a26      	ldr	r2, [pc, #152]	; (8004540 <HAL_UART_MspInit+0xc4>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d144      	bne.n	8004536 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80044ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044b0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80044b2:	2300      	movs	r3, #0
 80044b4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80044b6:	f107 0310 	add.w	r3, r7, #16
 80044ba:	4618      	mov	r0, r3
 80044bc:	f002 fdba 	bl	8007034 <HAL_RCCEx_PeriphCLKConfig>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80044c6:	f7ff fac1 	bl	8003a4c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80044ca:	4b1e      	ldr	r3, [pc, #120]	; (8004544 <HAL_UART_MspInit+0xc8>)
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	4a1d      	ldr	r2, [pc, #116]	; (8004544 <HAL_UART_MspInit+0xc8>)
 80044d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044d4:	6413      	str	r3, [r2, #64]	; 0x40
 80044d6:	4b1b      	ldr	r3, [pc, #108]	; (8004544 <HAL_UART_MspInit+0xc8>)
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80044e2:	4b18      	ldr	r3, [pc, #96]	; (8004544 <HAL_UART_MspInit+0xc8>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	4a17      	ldr	r2, [pc, #92]	; (8004544 <HAL_UART_MspInit+0xc8>)
 80044e8:	f043 0308 	orr.w	r3, r3, #8
 80044ec:	6313      	str	r3, [r2, #48]	; 0x30
 80044ee:	4b15      	ldr	r3, [pc, #84]	; (8004544 <HAL_UART_MspInit+0xc8>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f2:	f003 0308 	and.w	r3, r3, #8
 80044f6:	60bb      	str	r3, [r7, #8]
 80044f8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80044fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80044fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004502:	2302      	movs	r3, #2
 8004504:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004508:	2301      	movs	r3, #1
 800450a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800450e:	2303      	movs	r3, #3
 8004510:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004514:	2307      	movs	r3, #7
 8004516:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800451a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800451e:	4619      	mov	r1, r3
 8004520:	4809      	ldr	r0, [pc, #36]	; (8004548 <HAL_UART_MspInit+0xcc>)
 8004522:	f001 fa89 	bl	8005a38 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004526:	2200      	movs	r2, #0
 8004528:	2100      	movs	r1, #0
 800452a:	2027      	movs	r0, #39	; 0x27
 800452c:	f000 fec5 	bl	80052ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004530:	2027      	movs	r0, #39	; 0x27
 8004532:	f000 fede 	bl	80052f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004536:	bf00      	nop
 8004538:	37a8      	adds	r7, #168	; 0xa8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	40004800 	.word	0x40004800
 8004544:	40023800 	.word	0x40023800
 8004548:	40020c00 	.word	0x40020c00

0800454c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800454c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004584 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004550:	480d      	ldr	r0, [pc, #52]	; (8004588 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004552:	490e      	ldr	r1, [pc, #56]	; (800458c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004554:	4a0e      	ldr	r2, [pc, #56]	; (8004590 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004558:	e002      	b.n	8004560 <LoopCopyDataInit>

0800455a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800455a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800455c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800455e:	3304      	adds	r3, #4

08004560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004564:	d3f9      	bcc.n	800455a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004566:	4a0b      	ldr	r2, [pc, #44]	; (8004594 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004568:	4c0b      	ldr	r4, [pc, #44]	; (8004598 <LoopFillZerobss+0x26>)
  movs r3, #0
 800456a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800456c:	e001      	b.n	8004572 <LoopFillZerobss>

0800456e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800456e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004570:	3204      	adds	r2, #4

08004572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004574:	d3fb      	bcc.n	800456e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004576:	f7ff fce3 	bl	8003f40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800457a:	f009 fd29 	bl	800dfd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800457e:	f7ff f8e7 	bl	8003750 <main>
  bx  lr    
 8004582:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004584:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800458c:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 8004590:	0800ee78 	.word	0x0800ee78
  ldr r2, =_sbss
 8004594:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 8004598:	20002918 	.word	0x20002918

0800459c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800459c:	e7fe      	b.n	800459c <CAN1_RX0_IRQHandler>

0800459e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045a2:	2003      	movs	r0, #3
 80045a4:	f000 fe7e 	bl	80052a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80045a8:	2000      	movs	r0, #0
 80045aa:	f000 f805 	bl	80045b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045ae:	f7ff fbe3 	bl	8003d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80045c0:	4b12      	ldr	r3, [pc, #72]	; (800460c <HAL_InitTick+0x54>)
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	4b12      	ldr	r3, [pc, #72]	; (8004610 <HAL_InitTick+0x58>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	4619      	mov	r1, r3
 80045ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80045d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 fe99 	bl	800530e <HAL_SYSTICK_Config>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e00e      	b.n	8004604 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b0f      	cmp	r3, #15
 80045ea:	d80a      	bhi.n	8004602 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045ec:	2200      	movs	r2, #0
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	f04f 30ff 	mov.w	r0, #4294967295
 80045f4:	f000 fe61 	bl	80052ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045f8:	4a06      	ldr	r2, [pc, #24]	; (8004614 <HAL_InitTick+0x5c>)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	e000      	b.n	8004604 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
}
 8004604:	4618      	mov	r0, r3
 8004606:	3708      	adds	r7, #8
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	200000c8 	.word	0x200000c8
 8004610:	200000d0 	.word	0x200000d0
 8004614:	200000cc 	.word	0x200000cc

08004618 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800461c:	4b06      	ldr	r3, [pc, #24]	; (8004638 <HAL_IncTick+0x20>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	461a      	mov	r2, r3
 8004622:	4b06      	ldr	r3, [pc, #24]	; (800463c <HAL_IncTick+0x24>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4413      	add	r3, r2
 8004628:	4a04      	ldr	r2, [pc, #16]	; (800463c <HAL_IncTick+0x24>)
 800462a:	6013      	str	r3, [r2, #0]
}
 800462c:	bf00      	nop
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	200000d0 	.word	0x200000d0
 800463c:	20002590 	.word	0x20002590

08004640 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
  return uwTick;
 8004644:	4b03      	ldr	r3, [pc, #12]	; (8004654 <HAL_GetTick+0x14>)
 8004646:	681b      	ldr	r3, [r3, #0]
}
 8004648:	4618      	mov	r0, r3
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	20002590 	.word	0x20002590

08004658 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004660:	f7ff ffee 	bl	8004640 <HAL_GetTick>
 8004664:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004670:	d005      	beq.n	800467e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004672:	4b0a      	ldr	r3, [pc, #40]	; (800469c <HAL_Delay+0x44>)
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	461a      	mov	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	4413      	add	r3, r2
 800467c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800467e:	bf00      	nop
 8004680:	f7ff ffde 	bl	8004640 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	429a      	cmp	r2, r3
 800468e:	d8f7      	bhi.n	8004680 <HAL_Delay+0x28>
  {
  }
}
 8004690:	bf00      	nop
 8004692:	bf00      	nop
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	200000d0 	.word	0x200000d0

080046a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046a8:	2300      	movs	r3, #0
 80046aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e031      	b.n	800471a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d109      	bne.n	80046d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7fd fda6 	bl	8002210 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	f003 0310 	and.w	r3, r3, #16
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d116      	bne.n	800470c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046e2:	4b10      	ldr	r3, [pc, #64]	; (8004724 <HAL_ADC_Init+0x84>)
 80046e4:	4013      	ands	r3, r2
 80046e6:	f043 0202 	orr.w	r2, r3, #2
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 fc04 	bl	8004efc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	f023 0303 	bic.w	r3, r3, #3
 8004702:	f043 0201 	orr.w	r2, r3, #1
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	641a      	str	r2, [r3, #64]	; 0x40
 800470a:	e001      	b.n	8004710 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004718:	7bfb      	ldrb	r3, [r7, #15]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	ffffeefd 	.word	0xffffeefd

08004728 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8004730:	2300      	movs	r3, #0
 8004732:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800473a:	2b01      	cmp	r3, #1
 800473c:	d101      	bne.n	8004742 <HAL_ADC_Start+0x1a>
 800473e:	2302      	movs	r3, #2
 8004740:	e0ad      	b.n	800489e <HAL_ADC_Start+0x176>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b01      	cmp	r3, #1
 8004756:	d018      	beq.n	800478a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0201 	orr.w	r2, r2, #1
 8004766:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004768:	4b50      	ldr	r3, [pc, #320]	; (80048ac <HAL_ADC_Start+0x184>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a50      	ldr	r2, [pc, #320]	; (80048b0 <HAL_ADC_Start+0x188>)
 800476e:	fba2 2303 	umull	r2, r3, r2, r3
 8004772:	0c9a      	lsrs	r2, r3, #18
 8004774:	4613      	mov	r3, r2
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	4413      	add	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800477c:	e002      	b.n	8004784 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	3b01      	subs	r3, #1
 8004782:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1f9      	bne.n	800477e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b01      	cmp	r3, #1
 8004796:	d175      	bne.n	8004884 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800479c:	4b45      	ldr	r3, [pc, #276]	; (80048b4 <HAL_ADC_Start+0x18c>)
 800479e:	4013      	ands	r3, r2
 80047a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d007      	beq.n	80047c6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80047be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d2:	d106      	bne.n	80047e2 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d8:	f023 0206 	bic.w	r2, r3, #6
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	645a      	str	r2, [r3, #68]	; 0x44
 80047e0:	e002      	b.n	80047e8 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80047f8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80047fa:	4b2f      	ldr	r3, [pc, #188]	; (80048b8 <HAL_ADC_Start+0x190>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f003 031f 	and.w	r3, r3, #31
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10f      	bne.n	8004826 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d143      	bne.n	800489c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689a      	ldr	r2, [r3, #8]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004822:	609a      	str	r2, [r3, #8]
 8004824:	e03a      	b.n	800489c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a24      	ldr	r2, [pc, #144]	; (80048bc <HAL_ADC_Start+0x194>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d10e      	bne.n	800484e <HAL_ADC_Start+0x126>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d107      	bne.n	800484e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800484c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800484e:	4b1a      	ldr	r3, [pc, #104]	; (80048b8 <HAL_ADC_Start+0x190>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f003 0310 	and.w	r3, r3, #16
 8004856:	2b00      	cmp	r3, #0
 8004858:	d120      	bne.n	800489c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a18      	ldr	r2, [pc, #96]	; (80048c0 <HAL_ADC_Start+0x198>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d11b      	bne.n	800489c <HAL_ADC_Start+0x174>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d114      	bne.n	800489c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004880:	609a      	str	r2, [r3, #8]
 8004882:	e00b      	b.n	800489c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004888:	f043 0210 	orr.w	r2, r3, #16
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004894:	f043 0201 	orr.w	r2, r3, #1
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	200000c8 	.word	0x200000c8
 80048b0:	431bde83 	.word	0x431bde83
 80048b4:	fffff8fe 	.word	0xfffff8fe
 80048b8:	40012300 	.word	0x40012300
 80048bc:	40012000 	.word	0x40012000
 80048c0:	40012200 	.word	0x40012200

080048c4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80048ce:	2300      	movs	r3, #0
 80048d0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048e0:	d113      	bne.n	800490a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80048ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048f0:	d10b      	bne.n	800490a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	f043 0220 	orr.w	r2, r3, #32
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e063      	b.n	80049d2 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800490a:	f7ff fe99 	bl	8004640 <HAL_GetTick>
 800490e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004910:	e021      	b.n	8004956 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004918:	d01d      	beq.n	8004956 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d007      	beq.n	8004930 <HAL_ADC_PollForConversion+0x6c>
 8004920:	f7ff fe8e 	bl	8004640 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	683a      	ldr	r2, [r7, #0]
 800492c:	429a      	cmp	r2, r3
 800492e:	d212      	bcs.n	8004956 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b02      	cmp	r3, #2
 800493c:	d00b      	beq.n	8004956 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	f043 0204 	orr.w	r2, r3, #4
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e03d      	b.n	80049d2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b02      	cmp	r3, #2
 8004962:	d1d6      	bne.n	8004912 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f06f 0212 	mvn.w	r2, #18
 800496c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d123      	bne.n	80049d0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800498c:	2b00      	cmp	r3, #0
 800498e:	d11f      	bne.n	80049d0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004996:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800499a:	2b00      	cmp	r3, #0
 800499c:	d006      	beq.n	80049ac <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d111      	bne.n	80049d0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d105      	bne.n	80049d0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c8:	f043 0201 	orr.w	r2, r3, #1
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b086      	sub	sp, #24
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80049e2:	2300      	movs	r3, #0
 80049e4:	617b      	str	r3, [r7, #20]
 80049e6:	2300      	movs	r3, #0
 80049e8:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	f003 0320 	and.w	r3, r3, #32
 8004a08:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d049      	beq.n	8004aa4 <HAL_ADC_IRQHandler+0xca>
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d046      	beq.n	8004aa4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	f003 0310 	and.w	r3, r3, #16
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d105      	bne.n	8004a2e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d12b      	bne.n	8004a94 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d127      	bne.n	8004a94 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d006      	beq.n	8004a60 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d119      	bne.n	8004a94 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0220 	bic.w	r2, r2, #32
 8004a6e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d105      	bne.n	8004a94 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8c:	f043 0201 	orr.w	r2, r3, #1
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f8bd 	bl	8004c14 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f06f 0212 	mvn.w	r2, #18
 8004aa2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f003 0304 	and.w	r3, r3, #4
 8004aaa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d057      	beq.n	8004b6a <HAL_ADC_IRQHandler+0x190>
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d054      	beq.n	8004b6a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac4:	f003 0310 	and.w	r3, r3, #16
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d105      	bne.n	8004ad8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d139      	bne.n	8004b5a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d006      	beq.n	8004b02 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d12b      	bne.n	8004b5a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d124      	bne.n	8004b5a <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d11d      	bne.n	8004b5a <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d119      	bne.n	8004b5a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b34:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d105      	bne.n	8004b5a <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	f043 0201 	orr.w	r2, r3, #1
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 fac8 	bl	80050f0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f06f 020c 	mvn.w	r2, #12
 8004b68:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b78:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d017      	beq.n	8004bb0 <HAL_ADC_IRQHandler+0x1d6>
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d014      	beq.n	8004bb0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d10d      	bne.n	8004bb0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b98:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 f841 	bl	8004c28 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f06f 0201 	mvn.w	r2, #1
 8004bae:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f003 0320 	and.w	r3, r3, #32
 8004bb6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bbe:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d015      	beq.n	8004bf2 <HAL_ADC_IRQHandler+0x218>
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d012      	beq.n	8004bf2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd0:	f043 0202 	orr.w	r2, r3, #2
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f06f 0220 	mvn.w	r2, #32
 8004be0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f82a 	bl	8004c3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f06f 0220 	mvn.w	r2, #32
 8004bf0:	601a      	str	r2, [r3, #0]
  }
}
 8004bf2:	bf00      	nop
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d101      	bne.n	8004c6c <HAL_ADC_ConfigChannel+0x1c>
 8004c68:	2302      	movs	r3, #2
 8004c6a:	e136      	b.n	8004eda <HAL_ADC_ConfigChannel+0x28a>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b09      	cmp	r3, #9
 8004c7a:	d93a      	bls.n	8004cf2 <HAL_ADC_ConfigChannel+0xa2>
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c84:	d035      	beq.n	8004cf2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68d9      	ldr	r1, [r3, #12]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	461a      	mov	r2, r3
 8004c94:	4613      	mov	r3, r2
 8004c96:	005b      	lsls	r3, r3, #1
 8004c98:	4413      	add	r3, r2
 8004c9a:	3b1e      	subs	r3, #30
 8004c9c:	2207      	movs	r2, #7
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	43da      	mvns	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	400a      	ands	r2, r1
 8004caa:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a8d      	ldr	r2, [pc, #564]	; (8004ee8 <HAL_ADC_ConfigChannel+0x298>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d10a      	bne.n	8004ccc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68d9      	ldr	r1, [r3, #12]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	061a      	lsls	r2, r3, #24
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004cca:	e035      	b.n	8004d38 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68d9      	ldr	r1, [r3, #12]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	689a      	ldr	r2, [r3, #8]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	4618      	mov	r0, r3
 8004cde:	4603      	mov	r3, r0
 8004ce0:	005b      	lsls	r3, r3, #1
 8004ce2:	4403      	add	r3, r0
 8004ce4:	3b1e      	subs	r3, #30
 8004ce6:	409a      	lsls	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004cf0:	e022      	b.n	8004d38 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6919      	ldr	r1, [r3, #16]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	461a      	mov	r2, r3
 8004d00:	4613      	mov	r3, r2
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	4413      	add	r3, r2
 8004d06:	2207      	movs	r2, #7
 8004d08:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0c:	43da      	mvns	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	400a      	ands	r2, r1
 8004d14:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6919      	ldr	r1, [r3, #16]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	4618      	mov	r0, r3
 8004d28:	4603      	mov	r3, r0
 8004d2a:	005b      	lsls	r3, r3, #1
 8004d2c:	4403      	add	r3, r0
 8004d2e:	409a      	lsls	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	430a      	orrs	r2, r1
 8004d36:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2b06      	cmp	r3, #6
 8004d3e:	d824      	bhi.n	8004d8a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4413      	add	r3, r2
 8004d50:	3b05      	subs	r3, #5
 8004d52:	221f      	movs	r2, #31
 8004d54:	fa02 f303 	lsl.w	r3, r2, r3
 8004d58:	43da      	mvns	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	400a      	ands	r2, r1
 8004d60:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	4618      	mov	r0, r3
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	4613      	mov	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	3b05      	subs	r3, #5
 8004d7c:	fa00 f203 	lsl.w	r2, r0, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	635a      	str	r2, [r3, #52]	; 0x34
 8004d88:	e04c      	b.n	8004e24 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2b0c      	cmp	r3, #12
 8004d90:	d824      	bhi.n	8004ddc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4413      	add	r3, r2
 8004da2:	3b23      	subs	r3, #35	; 0x23
 8004da4:	221f      	movs	r2, #31
 8004da6:	fa02 f303 	lsl.w	r3, r2, r3
 8004daa:	43da      	mvns	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	400a      	ands	r2, r1
 8004db2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	3b23      	subs	r3, #35	; 0x23
 8004dce:	fa00 f203 	lsl.w	r2, r0, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	631a      	str	r2, [r3, #48]	; 0x30
 8004dda:	e023      	b.n	8004e24 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	4613      	mov	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	3b41      	subs	r3, #65	; 0x41
 8004dee:	221f      	movs	r2, #31
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	43da      	mvns	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	400a      	ands	r2, r1
 8004dfc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	4613      	mov	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	3b41      	subs	r3, #65	; 0x41
 8004e18:	fa00 f203 	lsl.w	r2, r0, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	430a      	orrs	r2, r1
 8004e22:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a30      	ldr	r2, [pc, #192]	; (8004eec <HAL_ADC_ConfigChannel+0x29c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d10a      	bne.n	8004e44 <HAL_ADC_ConfigChannel+0x1f4>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e36:	d105      	bne.n	8004e44 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004e38:	4b2d      	ldr	r3, [pc, #180]	; (8004ef0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	4a2c      	ldr	r2, [pc, #176]	; (8004ef0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004e3e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004e42:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a28      	ldr	r2, [pc, #160]	; (8004eec <HAL_ADC_ConfigChannel+0x29c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d10f      	bne.n	8004e6e <HAL_ADC_ConfigChannel+0x21e>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2b12      	cmp	r3, #18
 8004e54:	d10b      	bne.n	8004e6e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8004e56:	4b26      	ldr	r3, [pc, #152]	; (8004ef0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	4a25      	ldr	r2, [pc, #148]	; (8004ef0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004e5c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004e60:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004e62:	4b23      	ldr	r3, [pc, #140]	; (8004ef0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	4a22      	ldr	r2, [pc, #136]	; (8004ef0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004e68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e6c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a1e      	ldr	r2, [pc, #120]	; (8004eec <HAL_ADC_ConfigChannel+0x29c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d12b      	bne.n	8004ed0 <HAL_ADC_ConfigChannel+0x280>
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a1a      	ldr	r2, [pc, #104]	; (8004ee8 <HAL_ADC_ConfigChannel+0x298>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d003      	beq.n	8004e8a <HAL_ADC_ConfigChannel+0x23a>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2b11      	cmp	r3, #17
 8004e88:	d122      	bne.n	8004ed0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8004e8a:	4b19      	ldr	r3, [pc, #100]	; (8004ef0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	4a18      	ldr	r2, [pc, #96]	; (8004ef0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004e90:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004e94:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004e96:	4b16      	ldr	r3, [pc, #88]	; (8004ef0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	4a15      	ldr	r2, [pc, #84]	; (8004ef0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004e9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ea0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a10      	ldr	r2, [pc, #64]	; (8004ee8 <HAL_ADC_ConfigChannel+0x298>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d111      	bne.n	8004ed0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004eac:	4b11      	ldr	r3, [pc, #68]	; (8004ef4 <HAL_ADC_ConfigChannel+0x2a4>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a11      	ldr	r2, [pc, #68]	; (8004ef8 <HAL_ADC_ConfigChannel+0x2a8>)
 8004eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb6:	0c9a      	lsrs	r2, r3, #18
 8004eb8:	4613      	mov	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004ec2:	e002      	b.n	8004eca <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1f9      	bne.n	8004ec4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	10000012 	.word	0x10000012
 8004eec:	40012000 	.word	0x40012000
 8004ef0:	40012300 	.word	0x40012300
 8004ef4:	200000c8 	.word	0x200000c8
 8004ef8:	431bde83 	.word	0x431bde83

08004efc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004f04:	4b78      	ldr	r3, [pc, #480]	; (80050e8 <ADC_Init+0x1ec>)
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	4a77      	ldr	r2, [pc, #476]	; (80050e8 <ADC_Init+0x1ec>)
 8004f0a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004f0e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004f10:	4b75      	ldr	r3, [pc, #468]	; (80050e8 <ADC_Init+0x1ec>)
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	4973      	ldr	r1, [pc, #460]	; (80050e8 <ADC_Init+0x1ec>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6859      	ldr	r1, [r3, #4]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	021a      	lsls	r2, r3, #8
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004f50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6859      	ldr	r1, [r3, #4]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689a      	ldr	r2, [r3, #8]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689a      	ldr	r2, [r3, #8]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6899      	ldr	r1, [r3, #8]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8a:	4a58      	ldr	r2, [pc, #352]	; (80050ec <ADC_Init+0x1f0>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d022      	beq.n	8004fd6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689a      	ldr	r2, [r3, #8]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6899      	ldr	r1, [r3, #8]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689a      	ldr	r2, [r3, #8]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004fc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6899      	ldr	r1, [r3, #8]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	609a      	str	r2, [r3, #8]
 8004fd4:	e00f      	b.n	8004ff6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689a      	ldr	r2, [r3, #8]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004fe4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ff4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689a      	ldr	r2, [r3, #8]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 0202 	bic.w	r2, r2, #2
 8005004:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6899      	ldr	r1, [r3, #8]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	005a      	lsls	r2, r3, #1
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d01b      	beq.n	800505c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005032:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005042:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6859      	ldr	r1, [r3, #4]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	3b01      	subs	r3, #1
 8005050:	035a      	lsls	r2, r3, #13
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	605a      	str	r2, [r3, #4]
 800505a:	e007      	b.n	800506c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800506a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800507a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	3b01      	subs	r3, #1
 8005088:	051a      	lsls	r2, r3, #20
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80050a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6899      	ldr	r1, [r3, #8]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80050ae:	025a      	lsls	r2, r3, #9
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689a      	ldr	r2, [r3, #8]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6899      	ldr	r1, [r3, #8]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	029a      	lsls	r2, r3, #10
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	609a      	str	r2, [r3, #8]
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr
 80050e8:	40012300 	.word	0x40012300
 80050ec:	0f000001 	.word	0x0f000001

080050f0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005114:	4b0b      	ldr	r3, [pc, #44]	; (8005144 <__NVIC_SetPriorityGrouping+0x40>)
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005120:	4013      	ands	r3, r2
 8005122:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800512c:	4b06      	ldr	r3, [pc, #24]	; (8005148 <__NVIC_SetPriorityGrouping+0x44>)
 800512e:	4313      	orrs	r3, r2
 8005130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005132:	4a04      	ldr	r2, [pc, #16]	; (8005144 <__NVIC_SetPriorityGrouping+0x40>)
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	60d3      	str	r3, [r2, #12]
}
 8005138:	bf00      	nop
 800513a:	3714      	adds	r7, #20
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr
 8005144:	e000ed00 	.word	0xe000ed00
 8005148:	05fa0000 	.word	0x05fa0000

0800514c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800514c:	b480      	push	{r7}
 800514e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005150:	4b04      	ldr	r3, [pc, #16]	; (8005164 <__NVIC_GetPriorityGrouping+0x18>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	0a1b      	lsrs	r3, r3, #8
 8005156:	f003 0307 	and.w	r3, r3, #7
}
 800515a:	4618      	mov	r0, r3
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr
 8005164:	e000ed00 	.word	0xe000ed00

08005168 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	4603      	mov	r3, r0
 8005170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005176:	2b00      	cmp	r3, #0
 8005178:	db0b      	blt.n	8005192 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800517a:	79fb      	ldrb	r3, [r7, #7]
 800517c:	f003 021f 	and.w	r2, r3, #31
 8005180:	4907      	ldr	r1, [pc, #28]	; (80051a0 <__NVIC_EnableIRQ+0x38>)
 8005182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005186:	095b      	lsrs	r3, r3, #5
 8005188:	2001      	movs	r0, #1
 800518a:	fa00 f202 	lsl.w	r2, r0, r2
 800518e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005192:	bf00      	nop
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	e000e100 	.word	0xe000e100

080051a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	4603      	mov	r3, r0
 80051ac:	6039      	str	r1, [r7, #0]
 80051ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	db0a      	blt.n	80051ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	490c      	ldr	r1, [pc, #48]	; (80051f0 <__NVIC_SetPriority+0x4c>)
 80051be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051c2:	0112      	lsls	r2, r2, #4
 80051c4:	b2d2      	uxtb	r2, r2
 80051c6:	440b      	add	r3, r1
 80051c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051cc:	e00a      	b.n	80051e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	b2da      	uxtb	r2, r3
 80051d2:	4908      	ldr	r1, [pc, #32]	; (80051f4 <__NVIC_SetPriority+0x50>)
 80051d4:	79fb      	ldrb	r3, [r7, #7]
 80051d6:	f003 030f 	and.w	r3, r3, #15
 80051da:	3b04      	subs	r3, #4
 80051dc:	0112      	lsls	r2, r2, #4
 80051de:	b2d2      	uxtb	r2, r2
 80051e0:	440b      	add	r3, r1
 80051e2:	761a      	strb	r2, [r3, #24]
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr
 80051f0:	e000e100 	.word	0xe000e100
 80051f4:	e000ed00 	.word	0xe000ed00

080051f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b089      	sub	sp, #36	; 0x24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f003 0307 	and.w	r3, r3, #7
 800520a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	f1c3 0307 	rsb	r3, r3, #7
 8005212:	2b04      	cmp	r3, #4
 8005214:	bf28      	it	cs
 8005216:	2304      	movcs	r3, #4
 8005218:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	3304      	adds	r3, #4
 800521e:	2b06      	cmp	r3, #6
 8005220:	d902      	bls.n	8005228 <NVIC_EncodePriority+0x30>
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	3b03      	subs	r3, #3
 8005226:	e000      	b.n	800522a <NVIC_EncodePriority+0x32>
 8005228:	2300      	movs	r3, #0
 800522a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800522c:	f04f 32ff 	mov.w	r2, #4294967295
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	fa02 f303 	lsl.w	r3, r2, r3
 8005236:	43da      	mvns	r2, r3
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	401a      	ands	r2, r3
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005240:	f04f 31ff 	mov.w	r1, #4294967295
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	fa01 f303 	lsl.w	r3, r1, r3
 800524a:	43d9      	mvns	r1, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005250:	4313      	orrs	r3, r2
         );
}
 8005252:	4618      	mov	r0, r3
 8005254:	3724      	adds	r7, #36	; 0x24
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
	...

08005260 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	3b01      	subs	r3, #1
 800526c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005270:	d301      	bcc.n	8005276 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005272:	2301      	movs	r3, #1
 8005274:	e00f      	b.n	8005296 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005276:	4a0a      	ldr	r2, [pc, #40]	; (80052a0 <SysTick_Config+0x40>)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	3b01      	subs	r3, #1
 800527c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800527e:	210f      	movs	r1, #15
 8005280:	f04f 30ff 	mov.w	r0, #4294967295
 8005284:	f7ff ff8e 	bl	80051a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005288:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <SysTick_Config+0x40>)
 800528a:	2200      	movs	r2, #0
 800528c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800528e:	4b04      	ldr	r3, [pc, #16]	; (80052a0 <SysTick_Config+0x40>)
 8005290:	2207      	movs	r2, #7
 8005292:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	e000e010 	.word	0xe000e010

080052a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f7ff ff29 	bl	8005104 <__NVIC_SetPriorityGrouping>
}
 80052b2:	bf00      	nop
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b086      	sub	sp, #24
 80052be:	af00      	add	r7, sp, #0
 80052c0:	4603      	mov	r3, r0
 80052c2:	60b9      	str	r1, [r7, #8]
 80052c4:	607a      	str	r2, [r7, #4]
 80052c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80052c8:	2300      	movs	r3, #0
 80052ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80052cc:	f7ff ff3e 	bl	800514c <__NVIC_GetPriorityGrouping>
 80052d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	68b9      	ldr	r1, [r7, #8]
 80052d6:	6978      	ldr	r0, [r7, #20]
 80052d8:	f7ff ff8e 	bl	80051f8 <NVIC_EncodePriority>
 80052dc:	4602      	mov	r2, r0
 80052de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052e2:	4611      	mov	r1, r2
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7ff ff5d 	bl	80051a4 <__NVIC_SetPriority>
}
 80052ea:	bf00      	nop
 80052ec:	3718      	adds	r7, #24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b082      	sub	sp, #8
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	4603      	mov	r3, r0
 80052fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005300:	4618      	mov	r0, r3
 8005302:	f7ff ff31 	bl	8005168 <__NVIC_EnableIRQ>
}
 8005306:	bf00      	nop
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b082      	sub	sp, #8
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7ff ffa2 	bl	8005260 <SysTick_Config>
 800531c:	4603      	mov	r3, r0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800532a:	f000 f802 	bl	8005332 <HAL_SYSTICK_Callback>
}
 800532e:	bf00      	nop
 8005330:	bd80      	pop	{r7, pc}

08005332 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8005332:	b480      	push	{r7}
 8005334:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8005336:	bf00      	nop
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005348:	2300      	movs	r3, #0
 800534a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800534c:	f7ff f978 	bl	8004640 <HAL_GetTick>
 8005350:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d101      	bne.n	800535c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e099      	b.n	8005490 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 0201 	bic.w	r2, r2, #1
 800537a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800537c:	e00f      	b.n	800539e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800537e:	f7ff f95f 	bl	8004640 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	2b05      	cmp	r3, #5
 800538a:	d908      	bls.n	800539e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2220      	movs	r2, #32
 8005390:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2203      	movs	r2, #3
 8005396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e078      	b.n	8005490 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1e8      	bne.n	800537e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	4b38      	ldr	r3, [pc, #224]	; (8005498 <HAL_DMA_Init+0x158>)
 80053b8:	4013      	ands	r3, r2
 80053ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	d107      	bne.n	8005408 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005400:	4313      	orrs	r3, r2
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	4313      	orrs	r3, r2
 8005406:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	f023 0307 	bic.w	r3, r3, #7
 800541e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	4313      	orrs	r3, r2
 8005428:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542e:	2b04      	cmp	r3, #4
 8005430:	d117      	bne.n	8005462 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	4313      	orrs	r3, r2
 800543a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00e      	beq.n	8005462 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 fa7b 	bl	8005940 <DMA_CheckFifoParam>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d008      	beq.n	8005462 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2240      	movs	r2, #64	; 0x40
 8005454:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800545e:	2301      	movs	r3, #1
 8005460:	e016      	b.n	8005490 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 fa32 	bl	80058d4 <DMA_CalcBaseAndBitshift>
 8005470:	4603      	mov	r3, r0
 8005472:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005478:	223f      	movs	r2, #63	; 0x3f
 800547a:	409a      	lsls	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3718      	adds	r7, #24
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	f010803f 	.word	0xf010803f

0800549c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80054aa:	f7ff f8c9 	bl	8004640 <HAL_GetTick>
 80054ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d008      	beq.n	80054ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2280      	movs	r2, #128	; 0x80
 80054c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e052      	b.n	8005574 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 0216 	bic.w	r2, r2, #22
 80054dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	695a      	ldr	r2, [r3, #20]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d103      	bne.n	80054fe <HAL_DMA_Abort+0x62>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d007      	beq.n	800550e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f022 0208 	bic.w	r2, r2, #8
 800550c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 0201 	bic.w	r2, r2, #1
 800551c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800551e:	e013      	b.n	8005548 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005520:	f7ff f88e 	bl	8004640 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b05      	cmp	r3, #5
 800552c:	d90c      	bls.n	8005548 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2220      	movs	r2, #32
 8005532:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2203      	movs	r2, #3
 8005538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e015      	b.n	8005574 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1e4      	bne.n	8005520 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800555a:	223f      	movs	r2, #63	; 0x3f
 800555c:	409a      	lsls	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b02      	cmp	r3, #2
 800558e:	d004      	beq.n	800559a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2280      	movs	r2, #128	; 0x80
 8005594:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e00c      	b.n	80055b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2205      	movs	r2, #5
 800559e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f022 0201 	bic.w	r2, r2, #1
 80055b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80055c8:	2300      	movs	r3, #0
 80055ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80055cc:	4b8e      	ldr	r3, [pc, #568]	; (8005808 <HAL_DMA_IRQHandler+0x248>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a8e      	ldr	r2, [pc, #568]	; (800580c <HAL_DMA_IRQHandler+0x24c>)
 80055d2:	fba2 2303 	umull	r2, r3, r2, r3
 80055d6:	0a9b      	lsrs	r3, r3, #10
 80055d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ea:	2208      	movs	r2, #8
 80055ec:	409a      	lsls	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	4013      	ands	r3, r2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d01a      	beq.n	800562c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	2b00      	cmp	r3, #0
 8005602:	d013      	beq.n	800562c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f022 0204 	bic.w	r2, r2, #4
 8005612:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005618:	2208      	movs	r2, #8
 800561a:	409a      	lsls	r2, r3
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005624:	f043 0201 	orr.w	r2, r3, #1
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005630:	2201      	movs	r2, #1
 8005632:	409a      	lsls	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4013      	ands	r3, r2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d012      	beq.n	8005662 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00b      	beq.n	8005662 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800564e:	2201      	movs	r2, #1
 8005650:	409a      	lsls	r2, r3
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565a:	f043 0202 	orr.w	r2, r3, #2
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005666:	2204      	movs	r2, #4
 8005668:	409a      	lsls	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	4013      	ands	r3, r2
 800566e:	2b00      	cmp	r3, #0
 8005670:	d012      	beq.n	8005698 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00b      	beq.n	8005698 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005684:	2204      	movs	r2, #4
 8005686:	409a      	lsls	r2, r3
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005690:	f043 0204 	orr.w	r2, r3, #4
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800569c:	2210      	movs	r2, #16
 800569e:	409a      	lsls	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4013      	ands	r3, r2
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d043      	beq.n	8005730 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0308 	and.w	r3, r3, #8
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d03c      	beq.n	8005730 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ba:	2210      	movs	r2, #16
 80056bc:	409a      	lsls	r2, r3
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d018      	beq.n	8005702 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d108      	bne.n	80056f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d024      	beq.n	8005730 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	4798      	blx	r3
 80056ee:	e01f      	b.n	8005730 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d01b      	beq.n	8005730 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	4798      	blx	r3
 8005700:	e016      	b.n	8005730 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800570c:	2b00      	cmp	r3, #0
 800570e:	d107      	bne.n	8005720 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f022 0208 	bic.w	r2, r2, #8
 800571e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005724:	2b00      	cmp	r3, #0
 8005726:	d003      	beq.n	8005730 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005734:	2220      	movs	r2, #32
 8005736:	409a      	lsls	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	4013      	ands	r3, r2
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 808f 	beq.w	8005860 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0310 	and.w	r3, r3, #16
 800574c:	2b00      	cmp	r3, #0
 800574e:	f000 8087 	beq.w	8005860 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005756:	2220      	movs	r2, #32
 8005758:	409a      	lsls	r2, r3
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b05      	cmp	r3, #5
 8005768:	d136      	bne.n	80057d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f022 0216 	bic.w	r2, r2, #22
 8005778:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	695a      	ldr	r2, [r3, #20]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005788:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578e:	2b00      	cmp	r3, #0
 8005790:	d103      	bne.n	800579a <HAL_DMA_IRQHandler+0x1da>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005796:	2b00      	cmp	r3, #0
 8005798:	d007      	beq.n	80057aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 0208 	bic.w	r2, r2, #8
 80057a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ae:	223f      	movs	r2, #63	; 0x3f
 80057b0:	409a      	lsls	r2, r3
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d07e      	beq.n	80058cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	4798      	blx	r3
        }
        return;
 80057d6:	e079      	b.n	80058cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d01d      	beq.n	8005822 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10d      	bne.n	8005810 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d031      	beq.n	8005860 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	4798      	blx	r3
 8005804:	e02c      	b.n	8005860 <HAL_DMA_IRQHandler+0x2a0>
 8005806:	bf00      	nop
 8005808:	200000c8 	.word	0x200000c8
 800580c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005814:	2b00      	cmp	r3, #0
 8005816:	d023      	beq.n	8005860 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	4798      	blx	r3
 8005820:	e01e      	b.n	8005860 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10f      	bne.n	8005850 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f022 0210 	bic.w	r2, r2, #16
 800583e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005854:	2b00      	cmp	r3, #0
 8005856:	d003      	beq.n	8005860 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005864:	2b00      	cmp	r3, #0
 8005866:	d032      	beq.n	80058ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	2b00      	cmp	r3, #0
 8005872:	d022      	beq.n	80058ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2205      	movs	r2, #5
 8005878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f022 0201 	bic.w	r2, r2, #1
 800588a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	3301      	adds	r3, #1
 8005890:	60bb      	str	r3, [r7, #8]
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	429a      	cmp	r2, r3
 8005896:	d307      	bcc.n	80058a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1f2      	bne.n	800588c <HAL_DMA_IRQHandler+0x2cc>
 80058a6:	e000      	b.n	80058aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80058a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d005      	beq.n	80058ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	4798      	blx	r3
 80058ca:	e000      	b.n	80058ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80058cc:	bf00      	nop
    }
  }
}
 80058ce:	3718      	adds	r7, #24
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	3b10      	subs	r3, #16
 80058e4:	4a13      	ldr	r2, [pc, #76]	; (8005934 <DMA_CalcBaseAndBitshift+0x60>)
 80058e6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ea:	091b      	lsrs	r3, r3, #4
 80058ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80058ee:	4a12      	ldr	r2, [pc, #72]	; (8005938 <DMA_CalcBaseAndBitshift+0x64>)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4413      	add	r3, r2
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2b03      	cmp	r3, #3
 8005900:	d908      	bls.n	8005914 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	461a      	mov	r2, r3
 8005908:	4b0c      	ldr	r3, [pc, #48]	; (800593c <DMA_CalcBaseAndBitshift+0x68>)
 800590a:	4013      	ands	r3, r2
 800590c:	1d1a      	adds	r2, r3, #4
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	659a      	str	r2, [r3, #88]	; 0x58
 8005912:	e006      	b.n	8005922 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	461a      	mov	r2, r3
 800591a:	4b08      	ldr	r3, [pc, #32]	; (800593c <DMA_CalcBaseAndBitshift+0x68>)
 800591c:	4013      	ands	r3, r2
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005926:	4618      	mov	r0, r3
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	aaaaaaab 	.word	0xaaaaaaab
 8005938:	0800e9ec 	.word	0x0800e9ec
 800593c:	fffffc00 	.word	0xfffffc00

08005940 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005948:	2300      	movs	r3, #0
 800594a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005950:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d11f      	bne.n	800599a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	2b03      	cmp	r3, #3
 800595e:	d856      	bhi.n	8005a0e <DMA_CheckFifoParam+0xce>
 8005960:	a201      	add	r2, pc, #4	; (adr r2, 8005968 <DMA_CheckFifoParam+0x28>)
 8005962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005966:	bf00      	nop
 8005968:	08005979 	.word	0x08005979
 800596c:	0800598b 	.word	0x0800598b
 8005970:	08005979 	.word	0x08005979
 8005974:	08005a0f 	.word	0x08005a0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d046      	beq.n	8005a12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005988:	e043      	b.n	8005a12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005992:	d140      	bne.n	8005a16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005998:	e03d      	b.n	8005a16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059a2:	d121      	bne.n	80059e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	2b03      	cmp	r3, #3
 80059a8:	d837      	bhi.n	8005a1a <DMA_CheckFifoParam+0xda>
 80059aa:	a201      	add	r2, pc, #4	; (adr r2, 80059b0 <DMA_CheckFifoParam+0x70>)
 80059ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b0:	080059c1 	.word	0x080059c1
 80059b4:	080059c7 	.word	0x080059c7
 80059b8:	080059c1 	.word	0x080059c1
 80059bc:	080059d9 	.word	0x080059d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	73fb      	strb	r3, [r7, #15]
      break;
 80059c4:	e030      	b.n	8005a28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d025      	beq.n	8005a1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059d6:	e022      	b.n	8005a1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80059e0:	d11f      	bne.n	8005a22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80059e6:	e01c      	b.n	8005a22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d903      	bls.n	80059f6 <DMA_CheckFifoParam+0xb6>
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	2b03      	cmp	r3, #3
 80059f2:	d003      	beq.n	80059fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80059f4:	e018      	b.n	8005a28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	73fb      	strb	r3, [r7, #15]
      break;
 80059fa:	e015      	b.n	8005a28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00e      	beq.n	8005a26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a0c:	e00b      	b.n	8005a26 <DMA_CheckFifoParam+0xe6>
      break;
 8005a0e:	bf00      	nop
 8005a10:	e00a      	b.n	8005a28 <DMA_CheckFifoParam+0xe8>
      break;
 8005a12:	bf00      	nop
 8005a14:	e008      	b.n	8005a28 <DMA_CheckFifoParam+0xe8>
      break;
 8005a16:	bf00      	nop
 8005a18:	e006      	b.n	8005a28 <DMA_CheckFifoParam+0xe8>
      break;
 8005a1a:	bf00      	nop
 8005a1c:	e004      	b.n	8005a28 <DMA_CheckFifoParam+0xe8>
      break;
 8005a1e:	bf00      	nop
 8005a20:	e002      	b.n	8005a28 <DMA_CheckFifoParam+0xe8>
      break;   
 8005a22:	bf00      	nop
 8005a24:	e000      	b.n	8005a28 <DMA_CheckFifoParam+0xe8>
      break;
 8005a26:	bf00      	nop
    }
  } 
  
  return status; 
 8005a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop

08005a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b089      	sub	sp, #36	; 0x24
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005a42:	2300      	movs	r3, #0
 8005a44:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005a46:	2300      	movs	r3, #0
 8005a48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005a52:	2300      	movs	r3, #0
 8005a54:	61fb      	str	r3, [r7, #28]
 8005a56:	e175      	b.n	8005d44 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005a58:	2201      	movs	r2, #1
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	4013      	ands	r3, r2
 8005a6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	f040 8164 	bne.w	8005d3e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f003 0303 	and.w	r3, r3, #3
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d005      	beq.n	8005a8e <HAL_GPIO_Init+0x56>
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f003 0303 	and.w	r3, r3, #3
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d130      	bne.n	8005af0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	005b      	lsls	r3, r3, #1
 8005a98:	2203      	movs	r2, #3
 8005a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9e:	43db      	mvns	r3, r3
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	68da      	ldr	r2, [r3, #12]
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8005acc:	43db      	mvns	r3, r3
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	091b      	lsrs	r3, r3, #4
 8005ada:	f003 0201 	and.w	r2, r3, #1
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f003 0303 	and.w	r3, r3, #3
 8005af8:	2b03      	cmp	r3, #3
 8005afa:	d017      	beq.n	8005b2c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	2203      	movs	r2, #3
 8005b08:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0c:	43db      	mvns	r3, r3
 8005b0e:	69ba      	ldr	r2, [r7, #24]
 8005b10:	4013      	ands	r3, r2
 8005b12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	689a      	ldr	r2, [r3, #8]
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f003 0303 	and.w	r3, r3, #3
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d123      	bne.n	8005b80 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	08da      	lsrs	r2, r3, #3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	3208      	adds	r2, #8
 8005b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	f003 0307 	and.w	r3, r3, #7
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	220f      	movs	r2, #15
 8005b50:	fa02 f303 	lsl.w	r3, r2, r3
 8005b54:	43db      	mvns	r3, r3
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	4013      	ands	r3, r2
 8005b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	691a      	ldr	r2, [r3, #16]
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	f003 0307 	and.w	r3, r3, #7
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6c:	69ba      	ldr	r2, [r7, #24]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	08da      	lsrs	r2, r3, #3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	3208      	adds	r2, #8
 8005b7a:	69b9      	ldr	r1, [r7, #24]
 8005b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	005b      	lsls	r3, r3, #1
 8005b8a:	2203      	movs	r2, #3
 8005b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b90:	43db      	mvns	r3, r3
 8005b92:	69ba      	ldr	r2, [r7, #24]
 8005b94:	4013      	ands	r3, r2
 8005b96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f003 0203 	and.w	r2, r3, #3
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	005b      	lsls	r3, r3, #1
 8005ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	69ba      	ldr	r2, [r7, #24]
 8005bb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 80be 	beq.w	8005d3e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bc2:	4b66      	ldr	r3, [pc, #408]	; (8005d5c <HAL_GPIO_Init+0x324>)
 8005bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc6:	4a65      	ldr	r2, [pc, #404]	; (8005d5c <HAL_GPIO_Init+0x324>)
 8005bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8005bce:	4b63      	ldr	r3, [pc, #396]	; (8005d5c <HAL_GPIO_Init+0x324>)
 8005bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bd6:	60fb      	str	r3, [r7, #12]
 8005bd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005bda:	4a61      	ldr	r2, [pc, #388]	; (8005d60 <HAL_GPIO_Init+0x328>)
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	089b      	lsrs	r3, r3, #2
 8005be0:	3302      	adds	r3, #2
 8005be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	f003 0303 	and.w	r3, r3, #3
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	220f      	movs	r2, #15
 8005bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf6:	43db      	mvns	r3, r3
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a58      	ldr	r2, [pc, #352]	; (8005d64 <HAL_GPIO_Init+0x32c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d037      	beq.n	8005c76 <HAL_GPIO_Init+0x23e>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a57      	ldr	r2, [pc, #348]	; (8005d68 <HAL_GPIO_Init+0x330>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d031      	beq.n	8005c72 <HAL_GPIO_Init+0x23a>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a56      	ldr	r2, [pc, #344]	; (8005d6c <HAL_GPIO_Init+0x334>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d02b      	beq.n	8005c6e <HAL_GPIO_Init+0x236>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a55      	ldr	r2, [pc, #340]	; (8005d70 <HAL_GPIO_Init+0x338>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d025      	beq.n	8005c6a <HAL_GPIO_Init+0x232>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a54      	ldr	r2, [pc, #336]	; (8005d74 <HAL_GPIO_Init+0x33c>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d01f      	beq.n	8005c66 <HAL_GPIO_Init+0x22e>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a53      	ldr	r2, [pc, #332]	; (8005d78 <HAL_GPIO_Init+0x340>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d019      	beq.n	8005c62 <HAL_GPIO_Init+0x22a>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a52      	ldr	r2, [pc, #328]	; (8005d7c <HAL_GPIO_Init+0x344>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d013      	beq.n	8005c5e <HAL_GPIO_Init+0x226>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a51      	ldr	r2, [pc, #324]	; (8005d80 <HAL_GPIO_Init+0x348>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d00d      	beq.n	8005c5a <HAL_GPIO_Init+0x222>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a50      	ldr	r2, [pc, #320]	; (8005d84 <HAL_GPIO_Init+0x34c>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d007      	beq.n	8005c56 <HAL_GPIO_Init+0x21e>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a4f      	ldr	r2, [pc, #316]	; (8005d88 <HAL_GPIO_Init+0x350>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d101      	bne.n	8005c52 <HAL_GPIO_Init+0x21a>
 8005c4e:	2309      	movs	r3, #9
 8005c50:	e012      	b.n	8005c78 <HAL_GPIO_Init+0x240>
 8005c52:	230a      	movs	r3, #10
 8005c54:	e010      	b.n	8005c78 <HAL_GPIO_Init+0x240>
 8005c56:	2308      	movs	r3, #8
 8005c58:	e00e      	b.n	8005c78 <HAL_GPIO_Init+0x240>
 8005c5a:	2307      	movs	r3, #7
 8005c5c:	e00c      	b.n	8005c78 <HAL_GPIO_Init+0x240>
 8005c5e:	2306      	movs	r3, #6
 8005c60:	e00a      	b.n	8005c78 <HAL_GPIO_Init+0x240>
 8005c62:	2305      	movs	r3, #5
 8005c64:	e008      	b.n	8005c78 <HAL_GPIO_Init+0x240>
 8005c66:	2304      	movs	r3, #4
 8005c68:	e006      	b.n	8005c78 <HAL_GPIO_Init+0x240>
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e004      	b.n	8005c78 <HAL_GPIO_Init+0x240>
 8005c6e:	2302      	movs	r3, #2
 8005c70:	e002      	b.n	8005c78 <HAL_GPIO_Init+0x240>
 8005c72:	2301      	movs	r3, #1
 8005c74:	e000      	b.n	8005c78 <HAL_GPIO_Init+0x240>
 8005c76:	2300      	movs	r3, #0
 8005c78:	69fa      	ldr	r2, [r7, #28]
 8005c7a:	f002 0203 	and.w	r2, r2, #3
 8005c7e:	0092      	lsls	r2, r2, #2
 8005c80:	4093      	lsls	r3, r2
 8005c82:	69ba      	ldr	r2, [r7, #24]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005c88:	4935      	ldr	r1, [pc, #212]	; (8005d60 <HAL_GPIO_Init+0x328>)
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	089b      	lsrs	r3, r3, #2
 8005c8e:	3302      	adds	r3, #2
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c96:	4b3d      	ldr	r3, [pc, #244]	; (8005d8c <HAL_GPIO_Init+0x354>)
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	43db      	mvns	r3, r3
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005cba:	4a34      	ldr	r2, [pc, #208]	; (8005d8c <HAL_GPIO_Init+0x354>)
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005cc0:	4b32      	ldr	r3, [pc, #200]	; (8005d8c <HAL_GPIO_Init+0x354>)
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	43db      	mvns	r3, r3
 8005cca:	69ba      	ldr	r2, [r7, #24]
 8005ccc:	4013      	ands	r3, r2
 8005cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005cdc:	69ba      	ldr	r2, [r7, #24]
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ce4:	4a29      	ldr	r2, [pc, #164]	; (8005d8c <HAL_GPIO_Init+0x354>)
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005cea:	4b28      	ldr	r3, [pc, #160]	; (8005d8c <HAL_GPIO_Init+0x354>)
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	43db      	mvns	r3, r3
 8005cf4:	69ba      	ldr	r2, [r7, #24]
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d0e:	4a1f      	ldr	r2, [pc, #124]	; (8005d8c <HAL_GPIO_Init+0x354>)
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d14:	4b1d      	ldr	r3, [pc, #116]	; (8005d8c <HAL_GPIO_Init+0x354>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	43db      	mvns	r3, r3
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	4013      	ands	r3, r2
 8005d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d003      	beq.n	8005d38 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d38:	4a14      	ldr	r2, [pc, #80]	; (8005d8c <HAL_GPIO_Init+0x354>)
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	3301      	adds	r3, #1
 8005d42:	61fb      	str	r3, [r7, #28]
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	2b0f      	cmp	r3, #15
 8005d48:	f67f ae86 	bls.w	8005a58 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005d4c:	bf00      	nop
 8005d4e:	bf00      	nop
 8005d50:	3724      	adds	r7, #36	; 0x24
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	40023800 	.word	0x40023800
 8005d60:	40013800 	.word	0x40013800
 8005d64:	40020000 	.word	0x40020000
 8005d68:	40020400 	.word	0x40020400
 8005d6c:	40020800 	.word	0x40020800
 8005d70:	40020c00 	.word	0x40020c00
 8005d74:	40021000 	.word	0x40021000
 8005d78:	40021400 	.word	0x40021400
 8005d7c:	40021800 	.word	0x40021800
 8005d80:	40021c00 	.word	0x40021c00
 8005d84:	40022000 	.word	0x40022000
 8005d88:	40022400 	.word	0x40022400
 8005d8c:	40013c00 	.word	0x40013c00

08005d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	460b      	mov	r3, r1
 8005d9a:	807b      	strh	r3, [r7, #2]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005da0:	787b      	ldrb	r3, [r7, #1]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005da6:	887a      	ldrh	r2, [r7, #2]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005dac:	e003      	b.n	8005db6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005dae:	887b      	ldrh	r3, [r7, #2]
 8005db0:	041a      	lsls	r2, r3, #16
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	619a      	str	r2, [r3, #24]
}
 8005db6:	bf00      	nop
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
	...

08005dc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e07f      	b.n	8005ed6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d106      	bne.n	8005df0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7fd f93a 	bl	8003064 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2224      	movs	r2, #36	; 0x24
 8005df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 0201 	bic.w	r2, r2, #1
 8005e06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005e14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689a      	ldr	r2, [r3, #8]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d107      	bne.n	8005e3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	689a      	ldr	r2, [r3, #8]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e3a:	609a      	str	r2, [r3, #8]
 8005e3c:	e006      	b.n	8005e4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	689a      	ldr	r2, [r3, #8]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005e4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d104      	bne.n	8005e5e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6859      	ldr	r1, [r3, #4]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	4b1d      	ldr	r3, [pc, #116]	; (8005ee0 <HAL_I2C_Init+0x11c>)
 8005e6a:	430b      	orrs	r3, r1
 8005e6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68da      	ldr	r2, [r3, #12]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	691a      	ldr	r2, [r3, #16]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	430a      	orrs	r2, r1
 8005e96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	69d9      	ldr	r1, [r3, #28]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a1a      	ldr	r2, [r3, #32]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f042 0201 	orr.w	r2, r2, #1
 8005eb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2220      	movs	r2, #32
 8005ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	02008000 	.word	0x02008000

08005ee4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b088      	sub	sp, #32
 8005ee8:	af02      	add	r7, sp, #8
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	607a      	str	r2, [r7, #4]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	817b      	strh	r3, [r7, #10]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	2b20      	cmp	r3, #32
 8005f02:	f040 80da 	bne.w	80060ba <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d101      	bne.n	8005f14 <HAL_I2C_Master_Transmit+0x30>
 8005f10:	2302      	movs	r3, #2
 8005f12:	e0d3      	b.n	80060bc <HAL_I2C_Master_Transmit+0x1d8>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f1c:	f7fe fb90 	bl	8004640 <HAL_GetTick>
 8005f20:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	9300      	str	r3, [sp, #0]
 8005f26:	2319      	movs	r3, #25
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f000 f8f0 	bl	8006114 <I2C_WaitOnFlagUntilTimeout>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e0be      	b.n	80060bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2221      	movs	r2, #33	; 0x21
 8005f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2210      	movs	r2, #16
 8005f4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	893a      	ldrh	r2, [r7, #8]
 8005f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	2bff      	cmp	r3, #255	; 0xff
 8005f6e:	d90e      	bls.n	8005f8e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	22ff      	movs	r2, #255	; 0xff
 8005f74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	8979      	ldrh	r1, [r7, #10]
 8005f7e:	4b51      	ldr	r3, [pc, #324]	; (80060c4 <HAL_I2C_Master_Transmit+0x1e0>)
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f000 fa60 	bl	800644c <I2C_TransferConfig>
 8005f8c:	e06c      	b.n	8006068 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f9c:	b2da      	uxtb	r2, r3
 8005f9e:	8979      	ldrh	r1, [r7, #10]
 8005fa0:	4b48      	ldr	r3, [pc, #288]	; (80060c4 <HAL_I2C_Master_Transmit+0x1e0>)
 8005fa2:	9300      	str	r3, [sp, #0]
 8005fa4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f000 fa4f 	bl	800644c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005fae:	e05b      	b.n	8006068 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	6a39      	ldr	r1, [r7, #32]
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f000 f8ed 	bl	8006194 <I2C_WaitOnTXISFlagUntilTimeout>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d001      	beq.n	8005fc4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e07b      	b.n	80060bc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc8:	781a      	ldrb	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd4:	1c5a      	adds	r2, r3, #1
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fec:	3b01      	subs	r3, #1
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d034      	beq.n	8006068 <HAL_I2C_Master_Transmit+0x184>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006002:	2b00      	cmp	r3, #0
 8006004:	d130      	bne.n	8006068 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	9300      	str	r3, [sp, #0]
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	2200      	movs	r2, #0
 800600e:	2180      	movs	r1, #128	; 0x80
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f000 f87f 	bl	8006114 <I2C_WaitOnFlagUntilTimeout>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d001      	beq.n	8006020 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e04d      	b.n	80060bc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006024:	b29b      	uxth	r3, r3
 8006026:	2bff      	cmp	r3, #255	; 0xff
 8006028:	d90e      	bls.n	8006048 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	22ff      	movs	r2, #255	; 0xff
 800602e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006034:	b2da      	uxtb	r2, r3
 8006036:	8979      	ldrh	r1, [r7, #10]
 8006038:	2300      	movs	r3, #0
 800603a:	9300      	str	r3, [sp, #0]
 800603c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f000 fa03 	bl	800644c <I2C_TransferConfig>
 8006046:	e00f      	b.n	8006068 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800604c:	b29a      	uxth	r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006056:	b2da      	uxtb	r2, r3
 8006058:	8979      	ldrh	r1, [r7, #10]
 800605a:	2300      	movs	r3, #0
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f000 f9f2 	bl	800644c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800606c:	b29b      	uxth	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d19e      	bne.n	8005fb0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	6a39      	ldr	r1, [r7, #32]
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f000 f8cc 	bl	8006214 <I2C_WaitOnSTOPFlagUntilTimeout>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e01a      	b.n	80060bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2220      	movs	r2, #32
 800608c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6859      	ldr	r1, [r3, #4]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	4b0b      	ldr	r3, [pc, #44]	; (80060c8 <HAL_I2C_Master_Transmit+0x1e4>)
 800609a:	400b      	ands	r3, r1
 800609c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2220      	movs	r2, #32
 80060a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80060b6:	2300      	movs	r3, #0
 80060b8:	e000      	b.n	80060bc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80060ba:	2302      	movs	r3, #2
  }
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3718      	adds	r7, #24
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	80002000 	.word	0x80002000
 80060c8:	fe00e800 	.word	0xfe00e800

080060cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d103      	bne.n	80060ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2200      	movs	r2, #0
 80060e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	f003 0301 	and.w	r3, r3, #1
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d007      	beq.n	8006108 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	699a      	ldr	r2, [r3, #24]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f042 0201 	orr.w	r2, r2, #1
 8006106:	619a      	str	r2, [r3, #24]
  }
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	603b      	str	r3, [r7, #0]
 8006120:	4613      	mov	r3, r2
 8006122:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006124:	e022      	b.n	800616c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612c:	d01e      	beq.n	800616c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800612e:	f7fe fa87 	bl	8004640 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	429a      	cmp	r2, r3
 800613c:	d302      	bcc.n	8006144 <I2C_WaitOnFlagUntilTimeout+0x30>
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d113      	bne.n	800616c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006148:	f043 0220 	orr.w	r2, r3, #32
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2220      	movs	r2, #32
 8006154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e00f      	b.n	800618c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	699a      	ldr	r2, [r3, #24]
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	4013      	ands	r3, r2
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	429a      	cmp	r2, r3
 800617a:	bf0c      	ite	eq
 800617c:	2301      	moveq	r3, #1
 800617e:	2300      	movne	r3, #0
 8006180:	b2db      	uxtb	r3, r3
 8006182:	461a      	mov	r2, r3
 8006184:	79fb      	ldrb	r3, [r7, #7]
 8006186:	429a      	cmp	r2, r3
 8006188:	d0cd      	beq.n	8006126 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80061a0:	e02c      	b.n	80061fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	68b9      	ldr	r1, [r7, #8]
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 f870 	bl	800628c <I2C_IsErrorOccurred>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e02a      	b.n	800620c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061bc:	d01e      	beq.n	80061fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061be:	f7fe fa3f 	bl	8004640 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	68ba      	ldr	r2, [r7, #8]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d302      	bcc.n	80061d4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d113      	bne.n	80061fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d8:	f043 0220 	orr.w	r2, r3, #32
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2220      	movs	r2, #32
 80061e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e007      	b.n	800620c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	f003 0302 	and.w	r3, r3, #2
 8006206:	2b02      	cmp	r3, #2
 8006208:	d1cb      	bne.n	80061a2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006220:	e028      	b.n	8006274 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	68b9      	ldr	r1, [r7, #8]
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f000 f830 	bl	800628c <I2C_IsErrorOccurred>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d001      	beq.n	8006236 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e026      	b.n	8006284 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006236:	f7fe fa03 	bl	8004640 <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	429a      	cmp	r2, r3
 8006244:	d302      	bcc.n	800624c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d113      	bne.n	8006274 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006250:	f043 0220 	orr.w	r2, r3, #32
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2220      	movs	r2, #32
 800625c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e007      	b.n	8006284 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	f003 0320 	and.w	r3, r3, #32
 800627e:	2b20      	cmp	r3, #32
 8006280:	d1cf      	bne.n	8006222 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b08a      	sub	sp, #40	; 0x28
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006298:	2300      	movs	r3, #0
 800629a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80062a6:	2300      	movs	r3, #0
 80062a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	f003 0310 	and.w	r3, r3, #16
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d068      	beq.n	800638a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2210      	movs	r2, #16
 80062be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80062c0:	e049      	b.n	8006356 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c8:	d045      	beq.n	8006356 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80062ca:	f7fe f9b9 	bl	8004640 <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d302      	bcc.n	80062e0 <I2C_IsErrorOccurred+0x54>
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d13a      	bne.n	8006356 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80062f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006302:	d121      	bne.n	8006348 <I2C_IsErrorOccurred+0xbc>
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800630a:	d01d      	beq.n	8006348 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800630c:	7cfb      	ldrb	r3, [r7, #19]
 800630e:	2b20      	cmp	r3, #32
 8006310:	d01a      	beq.n	8006348 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	685a      	ldr	r2, [r3, #4]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006320:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006322:	f7fe f98d 	bl	8004640 <HAL_GetTick>
 8006326:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006328:	e00e      	b.n	8006348 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800632a:	f7fe f989 	bl	8004640 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	2b19      	cmp	r3, #25
 8006336:	d907      	bls.n	8006348 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006338:	6a3b      	ldr	r3, [r7, #32]
 800633a:	f043 0320 	orr.w	r3, r3, #32
 800633e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006346:	e006      	b.n	8006356 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	f003 0320 	and.w	r3, r3, #32
 8006352:	2b20      	cmp	r3, #32
 8006354:	d1e9      	bne.n	800632a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	f003 0320 	and.w	r3, r3, #32
 8006360:	2b20      	cmp	r3, #32
 8006362:	d003      	beq.n	800636c <I2C_IsErrorOccurred+0xe0>
 8006364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006368:	2b00      	cmp	r3, #0
 800636a:	d0aa      	beq.n	80062c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800636c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006370:	2b00      	cmp	r3, #0
 8006372:	d103      	bne.n	800637c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2220      	movs	r2, #32
 800637a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800637c:	6a3b      	ldr	r3, [r7, #32]
 800637e:	f043 0304 	orr.w	r3, r3, #4
 8006382:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00b      	beq.n	80063b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800639c:	6a3b      	ldr	r3, [r7, #32]
 800639e:	f043 0301 	orr.w	r3, r3, #1
 80063a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00b      	beq.n	80063d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	f043 0308 	orr.w	r3, r3, #8
 80063c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80063ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00b      	beq.n	80063f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80063e0:	6a3b      	ldr	r3, [r7, #32]
 80063e2:	f043 0302 	orr.w	r3, r3, #2
 80063e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80063f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d01c      	beq.n	800643a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f7ff fe63 	bl	80060cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6859      	ldr	r1, [r3, #4]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	4b0d      	ldr	r3, [pc, #52]	; (8006448 <I2C_IsErrorOccurred+0x1bc>)
 8006412:	400b      	ands	r3, r1
 8006414:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800641a:	6a3b      	ldr	r3, [r7, #32]
 800641c:	431a      	orrs	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2220      	movs	r2, #32
 8006426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800643a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800643e:	4618      	mov	r0, r3
 8006440:	3728      	adds	r7, #40	; 0x28
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	fe00e800 	.word	0xfe00e800

0800644c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	607b      	str	r3, [r7, #4]
 8006456:	460b      	mov	r3, r1
 8006458:	817b      	strh	r3, [r7, #10]
 800645a:	4613      	mov	r3, r2
 800645c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800645e:	897b      	ldrh	r3, [r7, #10]
 8006460:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006464:	7a7b      	ldrb	r3, [r7, #9]
 8006466:	041b      	lsls	r3, r3, #16
 8006468:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800646c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	4313      	orrs	r3, r2
 8006476:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800647a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	6a3b      	ldr	r3, [r7, #32]
 8006484:	0d5b      	lsrs	r3, r3, #21
 8006486:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800648a:	4b08      	ldr	r3, [pc, #32]	; (80064ac <I2C_TransferConfig+0x60>)
 800648c:	430b      	orrs	r3, r1
 800648e:	43db      	mvns	r3, r3
 8006490:	ea02 0103 	and.w	r1, r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	430a      	orrs	r2, r1
 800649c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800649e:	bf00      	nop
 80064a0:	371c      	adds	r7, #28
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	03ff63ff 	.word	0x03ff63ff

080064b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b20      	cmp	r3, #32
 80064c4:	d138      	bne.n	8006538 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d101      	bne.n	80064d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80064d0:	2302      	movs	r3, #2
 80064d2:	e032      	b.n	800653a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2224      	movs	r2, #36	; 0x24
 80064e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f022 0201 	bic.w	r2, r2, #1
 80064f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006502:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6819      	ldr	r1, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	683a      	ldr	r2, [r7, #0]
 8006510:	430a      	orrs	r2, r1
 8006512:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f042 0201 	orr.w	r2, r2, #1
 8006522:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2220      	movs	r2, #32
 8006528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006534:	2300      	movs	r3, #0
 8006536:	e000      	b.n	800653a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006538:	2302      	movs	r3, #2
  }
}
 800653a:	4618      	mov	r0, r3
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr

08006546 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006546:	b480      	push	{r7}
 8006548:	b085      	sub	sp, #20
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2b20      	cmp	r3, #32
 800655a:	d139      	bne.n	80065d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006562:	2b01      	cmp	r3, #1
 8006564:	d101      	bne.n	800656a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006566:	2302      	movs	r3, #2
 8006568:	e033      	b.n	80065d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2224      	movs	r2, #36	; 0x24
 8006576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f022 0201 	bic.w	r2, r2, #1
 8006588:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006598:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	021b      	lsls	r3, r3, #8
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f042 0201 	orr.w	r2, r2, #1
 80065ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2220      	movs	r2, #32
 80065c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80065cc:	2300      	movs	r3, #0
 80065ce:	e000      	b.n	80065d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80065d0:	2302      	movs	r3, #2
  }
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3714      	adds	r7, #20
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
	...

080065e0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80065e0:	b480      	push	{r7}
 80065e2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065e4:	4b05      	ldr	r3, [pc, #20]	; (80065fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a04      	ldr	r2, [pc, #16]	; (80065fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80065ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065ee:	6013      	str	r3, [r2, #0]
}
 80065f0:	bf00      	nop
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	40007000 	.word	0x40007000

08006600 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006606:	2300      	movs	r3, #0
 8006608:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800660a:	4b23      	ldr	r3, [pc, #140]	; (8006698 <HAL_PWREx_EnableOverDrive+0x98>)
 800660c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660e:	4a22      	ldr	r2, [pc, #136]	; (8006698 <HAL_PWREx_EnableOverDrive+0x98>)
 8006610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006614:	6413      	str	r3, [r2, #64]	; 0x40
 8006616:	4b20      	ldr	r3, [pc, #128]	; (8006698 <HAL_PWREx_EnableOverDrive+0x98>)
 8006618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800661e:	603b      	str	r3, [r7, #0]
 8006620:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006622:	4b1e      	ldr	r3, [pc, #120]	; (800669c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a1d      	ldr	r2, [pc, #116]	; (800669c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800662c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800662e:	f7fe f807 	bl	8004640 <HAL_GetTick>
 8006632:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006634:	e009      	b.n	800664a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006636:	f7fe f803 	bl	8004640 <HAL_GetTick>
 800663a:	4602      	mov	r2, r0
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006644:	d901      	bls.n	800664a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e022      	b.n	8006690 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800664a:	4b14      	ldr	r3, [pc, #80]	; (800669c <HAL_PWREx_EnableOverDrive+0x9c>)
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006656:	d1ee      	bne.n	8006636 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006658:	4b10      	ldr	r3, [pc, #64]	; (800669c <HAL_PWREx_EnableOverDrive+0x9c>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a0f      	ldr	r2, [pc, #60]	; (800669c <HAL_PWREx_EnableOverDrive+0x9c>)
 800665e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006662:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006664:	f7fd ffec 	bl	8004640 <HAL_GetTick>
 8006668:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800666a:	e009      	b.n	8006680 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800666c:	f7fd ffe8 	bl	8004640 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800667a:	d901      	bls.n	8006680 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e007      	b.n	8006690 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006680:	4b06      	ldr	r3, [pc, #24]	; (800669c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006688:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800668c:	d1ee      	bne.n	800666c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	40023800 	.word	0x40023800
 800669c:	40007000 	.word	0x40007000

080066a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80066a8:	2300      	movs	r3, #0
 80066aa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d101      	bne.n	80066b6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e291      	b.n	8006bda <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f000 8087 	beq.w	80067d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80066c4:	4b96      	ldr	r3, [pc, #600]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f003 030c 	and.w	r3, r3, #12
 80066cc:	2b04      	cmp	r3, #4
 80066ce:	d00c      	beq.n	80066ea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066d0:	4b93      	ldr	r3, [pc, #588]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f003 030c 	and.w	r3, r3, #12
 80066d8:	2b08      	cmp	r3, #8
 80066da:	d112      	bne.n	8006702 <HAL_RCC_OscConfig+0x62>
 80066dc:	4b90      	ldr	r3, [pc, #576]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066e8:	d10b      	bne.n	8006702 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066ea:	4b8d      	ldr	r3, [pc, #564]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d06c      	beq.n	80067d0 <HAL_RCC_OscConfig+0x130>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d168      	bne.n	80067d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e26b      	b.n	8006bda <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800670a:	d106      	bne.n	800671a <HAL_RCC_OscConfig+0x7a>
 800670c:	4b84      	ldr	r3, [pc, #528]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a83      	ldr	r2, [pc, #524]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 8006712:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006716:	6013      	str	r3, [r2, #0]
 8006718:	e02e      	b.n	8006778 <HAL_RCC_OscConfig+0xd8>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10c      	bne.n	800673c <HAL_RCC_OscConfig+0x9c>
 8006722:	4b7f      	ldr	r3, [pc, #508]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a7e      	ldr	r2, [pc, #504]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 8006728:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800672c:	6013      	str	r3, [r2, #0]
 800672e:	4b7c      	ldr	r3, [pc, #496]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a7b      	ldr	r2, [pc, #492]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 8006734:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006738:	6013      	str	r3, [r2, #0]
 800673a:	e01d      	b.n	8006778 <HAL_RCC_OscConfig+0xd8>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006744:	d10c      	bne.n	8006760 <HAL_RCC_OscConfig+0xc0>
 8006746:	4b76      	ldr	r3, [pc, #472]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a75      	ldr	r2, [pc, #468]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 800674c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006750:	6013      	str	r3, [r2, #0]
 8006752:	4b73      	ldr	r3, [pc, #460]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a72      	ldr	r2, [pc, #456]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 8006758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800675c:	6013      	str	r3, [r2, #0]
 800675e:	e00b      	b.n	8006778 <HAL_RCC_OscConfig+0xd8>
 8006760:	4b6f      	ldr	r3, [pc, #444]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a6e      	ldr	r2, [pc, #440]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 8006766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800676a:	6013      	str	r3, [r2, #0]
 800676c:	4b6c      	ldr	r3, [pc, #432]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a6b      	ldr	r2, [pc, #428]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 8006772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d013      	beq.n	80067a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006780:	f7fd ff5e 	bl	8004640 <HAL_GetTick>
 8006784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006786:	e008      	b.n	800679a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006788:	f7fd ff5a 	bl	8004640 <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	2b64      	cmp	r3, #100	; 0x64
 8006794:	d901      	bls.n	800679a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e21f      	b.n	8006bda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800679a:	4b61      	ldr	r3, [pc, #388]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d0f0      	beq.n	8006788 <HAL_RCC_OscConfig+0xe8>
 80067a6:	e014      	b.n	80067d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a8:	f7fd ff4a 	bl	8004640 <HAL_GetTick>
 80067ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067ae:	e008      	b.n	80067c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067b0:	f7fd ff46 	bl	8004640 <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	2b64      	cmp	r3, #100	; 0x64
 80067bc:	d901      	bls.n	80067c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e20b      	b.n	8006bda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067c2:	4b57      	ldr	r3, [pc, #348]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1f0      	bne.n	80067b0 <HAL_RCC_OscConfig+0x110>
 80067ce:	e000      	b.n	80067d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0302 	and.w	r3, r3, #2
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d069      	beq.n	80068b2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80067de:	4b50      	ldr	r3, [pc, #320]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f003 030c 	and.w	r3, r3, #12
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00b      	beq.n	8006802 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067ea:	4b4d      	ldr	r3, [pc, #308]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f003 030c 	and.w	r3, r3, #12
 80067f2:	2b08      	cmp	r3, #8
 80067f4:	d11c      	bne.n	8006830 <HAL_RCC_OscConfig+0x190>
 80067f6:	4b4a      	ldr	r3, [pc, #296]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d116      	bne.n	8006830 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006802:	4b47      	ldr	r3, [pc, #284]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d005      	beq.n	800681a <HAL_RCC_OscConfig+0x17a>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d001      	beq.n	800681a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e1df      	b.n	8006bda <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800681a:	4b41      	ldr	r3, [pc, #260]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	00db      	lsls	r3, r3, #3
 8006828:	493d      	ldr	r1, [pc, #244]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 800682a:	4313      	orrs	r3, r2
 800682c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800682e:	e040      	b.n	80068b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d023      	beq.n	8006880 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006838:	4b39      	ldr	r3, [pc, #228]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a38      	ldr	r2, [pc, #224]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 800683e:	f043 0301 	orr.w	r3, r3, #1
 8006842:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006844:	f7fd fefc 	bl	8004640 <HAL_GetTick>
 8006848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800684a:	e008      	b.n	800685e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800684c:	f7fd fef8 	bl	8004640 <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	2b02      	cmp	r3, #2
 8006858:	d901      	bls.n	800685e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e1bd      	b.n	8006bda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800685e:	4b30      	ldr	r3, [pc, #192]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0302 	and.w	r3, r3, #2
 8006866:	2b00      	cmp	r3, #0
 8006868:	d0f0      	beq.n	800684c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800686a:	4b2d      	ldr	r3, [pc, #180]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	00db      	lsls	r3, r3, #3
 8006878:	4929      	ldr	r1, [pc, #164]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 800687a:	4313      	orrs	r3, r2
 800687c:	600b      	str	r3, [r1, #0]
 800687e:	e018      	b.n	80068b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006880:	4b27      	ldr	r3, [pc, #156]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a26      	ldr	r2, [pc, #152]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 8006886:	f023 0301 	bic.w	r3, r3, #1
 800688a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800688c:	f7fd fed8 	bl	8004640 <HAL_GetTick>
 8006890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006892:	e008      	b.n	80068a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006894:	f7fd fed4 	bl	8004640 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d901      	bls.n	80068a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e199      	b.n	8006bda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068a6:	4b1e      	ldr	r3, [pc, #120]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0302 	and.w	r3, r3, #2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1f0      	bne.n	8006894 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0308 	and.w	r3, r3, #8
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d038      	beq.n	8006930 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d019      	beq.n	80068fa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068c6:	4b16      	ldr	r3, [pc, #88]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 80068c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ca:	4a15      	ldr	r2, [pc, #84]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 80068cc:	f043 0301 	orr.w	r3, r3, #1
 80068d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068d2:	f7fd feb5 	bl	8004640 <HAL_GetTick>
 80068d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068d8:	e008      	b.n	80068ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068da:	f7fd feb1 	bl	8004640 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d901      	bls.n	80068ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e176      	b.n	8006bda <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068ec:	4b0c      	ldr	r3, [pc, #48]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 80068ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0f0      	beq.n	80068da <HAL_RCC_OscConfig+0x23a>
 80068f8:	e01a      	b.n	8006930 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068fa:	4b09      	ldr	r3, [pc, #36]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 80068fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068fe:	4a08      	ldr	r2, [pc, #32]	; (8006920 <HAL_RCC_OscConfig+0x280>)
 8006900:	f023 0301 	bic.w	r3, r3, #1
 8006904:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006906:	f7fd fe9b 	bl	8004640 <HAL_GetTick>
 800690a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800690c:	e00a      	b.n	8006924 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800690e:	f7fd fe97 	bl	8004640 <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	2b02      	cmp	r3, #2
 800691a:	d903      	bls.n	8006924 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e15c      	b.n	8006bda <HAL_RCC_OscConfig+0x53a>
 8006920:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006924:	4b91      	ldr	r3, [pc, #580]	; (8006b6c <HAL_RCC_OscConfig+0x4cc>)
 8006926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006928:	f003 0302 	and.w	r3, r3, #2
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1ee      	bne.n	800690e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 0304 	and.w	r3, r3, #4
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 80a4 	beq.w	8006a86 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800693e:	4b8b      	ldr	r3, [pc, #556]	; (8006b6c <HAL_RCC_OscConfig+0x4cc>)
 8006940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10d      	bne.n	8006966 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800694a:	4b88      	ldr	r3, [pc, #544]	; (8006b6c <HAL_RCC_OscConfig+0x4cc>)
 800694c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694e:	4a87      	ldr	r2, [pc, #540]	; (8006b6c <HAL_RCC_OscConfig+0x4cc>)
 8006950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006954:	6413      	str	r3, [r2, #64]	; 0x40
 8006956:	4b85      	ldr	r3, [pc, #532]	; (8006b6c <HAL_RCC_OscConfig+0x4cc>)
 8006958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800695e:	60bb      	str	r3, [r7, #8]
 8006960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006962:	2301      	movs	r3, #1
 8006964:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006966:	4b82      	ldr	r3, [pc, #520]	; (8006b70 <HAL_RCC_OscConfig+0x4d0>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800696e:	2b00      	cmp	r3, #0
 8006970:	d118      	bne.n	80069a4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006972:	4b7f      	ldr	r3, [pc, #508]	; (8006b70 <HAL_RCC_OscConfig+0x4d0>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a7e      	ldr	r2, [pc, #504]	; (8006b70 <HAL_RCC_OscConfig+0x4d0>)
 8006978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800697c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800697e:	f7fd fe5f 	bl	8004640 <HAL_GetTick>
 8006982:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006984:	e008      	b.n	8006998 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006986:	f7fd fe5b 	bl	8004640 <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	2b64      	cmp	r3, #100	; 0x64
 8006992:	d901      	bls.n	8006998 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e120      	b.n	8006bda <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006998:	4b75      	ldr	r3, [pc, #468]	; (8006b70 <HAL_RCC_OscConfig+0x4d0>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d0f0      	beq.n	8006986 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d106      	bne.n	80069ba <HAL_RCC_OscConfig+0x31a>
 80069ac:	4b6f      	ldr	r3, [pc, #444]	; (8006b6c <HAL_RCC_OscConfig+0x4cc>)
 80069ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b0:	4a6e      	ldr	r2, [pc, #440]	; (8006b6c <HAL_RCC_OscConfig+0x4cc>)
 80069b2:	f043 0301 	orr.w	r3, r3, #1
 80069b6:	6713      	str	r3, [r2, #112]	; 0x70
 80069b8:	e02d      	b.n	8006a16 <HAL_RCC_OscConfig+0x376>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10c      	bne.n	80069dc <HAL_RCC_OscConfig+0x33c>
 80069c2:	4b6a      	ldr	r3, [pc, #424]	; (8006b6c <HAL_RCC_OscConfig+0x4cc>)
 80069c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c6:	4a69      	ldr	r2, [pc, #420]	; (8006b6c <HAL_RCC_OscConfig+0x4cc>)
 80069c8:	f023 0301 	bic.w	r3, r3, #1
 80069cc:	6713      	str	r3, [r2, #112]	; 0x70
 80069ce:	4b67      	ldr	r3, [pc, #412]	; (8006b6c <HAL_RCC_OscConfig+0x4cc>)
 80069d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d2:	4a66      	ldr	r2, [pc, #408]	; (8006b6c <HAL_RCC_OscConfig+0x4cc>)
 80069d4:	f023 0304 	bic.w	r3, r3, #4
 80069d8:	6713      	str	r3, [r2, #112]	; 0x70
 80069da:	e01c      	b.n	8006a16 <HAL_RCC_OscConfig+0x376>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	2b05      	cmp	r3, #5
 80069e2:	d10c      	bne.n	80069fe <HAL_RCC_OscConfig+0x35e>
 80069e4:	4b61      	ldr	r3, [pc, #388]	; (8006b6c <HAL_RCC_OscConfig+0x4cc>)
 80069e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e8:	4a60      	ldr	r2, [pc, #384]	; (8006b6c <HAL_RCC_OscConfig+0x4cc>)
 80069ea:	f043 0304 	orr.w	r3, r3, #4
 80069ee:	6713      	str	r3, [r2, #112]	; 0x70
 80069f0:	4b5e      	ldr	r3, [pc, #376]	; (8006b6c <HAL_RCC_OscConfig+0x4cc>)
 80069f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f4:	4a5d      	ldr	r2, [pc, #372]	; (8006b6c <HAL_RCC_OscConfig+0x4cc>)
 80069f6:	f043 0301 	orr.w	r3, r3, #1
 80069fa:	6713      	str	r3, [r2, #112]	; 0x70
 80069fc:	e00b      	b.n	8006a16 <HAL_RCC_OscConfig+0x376>
 80069fe:	4b5b      	ldr	r3, [pc, #364]	; (8006b6c <HAL_RCC_OscConfig+0x4cc>)
 8006a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a02:	4a5a      	ldr	r2, [pc, #360]	; (8006b6c <HAL_RCC_OscConfig+0x4cc>)
 8006a04:	f023 0301 	bic.w	r3, r3, #1
 8006a08:	6713      	str	r3, [r2, #112]	; 0x70
 8006a0a:	4b58      	ldr	r3, [pc, #352]	; (8006b6c <HAL_RCC_OscConfig+0x4cc>)
 8006a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a0e:	4a57      	ldr	r2, [pc, #348]	; (8006b6c <HAL_RCC_OscConfig+0x4cc>)
 8006a10:	f023 0304 	bic.w	r3, r3, #4
 8006a14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d015      	beq.n	8006a4a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a1e:	f7fd fe0f 	bl	8004640 <HAL_GetTick>
 8006a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a24:	e00a      	b.n	8006a3c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a26:	f7fd fe0b 	bl	8004640 <HAL_GetTick>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d901      	bls.n	8006a3c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e0ce      	b.n	8006bda <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a3c:	4b4b      	ldr	r3, [pc, #300]	; (8006b6c <HAL_RCC_OscConfig+0x4cc>)
 8006a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a40:	f003 0302 	and.w	r3, r3, #2
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d0ee      	beq.n	8006a26 <HAL_RCC_OscConfig+0x386>
 8006a48:	e014      	b.n	8006a74 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a4a:	f7fd fdf9 	bl	8004640 <HAL_GetTick>
 8006a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a50:	e00a      	b.n	8006a68 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a52:	f7fd fdf5 	bl	8004640 <HAL_GetTick>
 8006a56:	4602      	mov	r2, r0
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d901      	bls.n	8006a68 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e0b8      	b.n	8006bda <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a68:	4b40      	ldr	r3, [pc, #256]	; (8006b6c <HAL_RCC_OscConfig+0x4cc>)
 8006a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a6c:	f003 0302 	and.w	r3, r3, #2
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1ee      	bne.n	8006a52 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006a74:	7dfb      	ldrb	r3, [r7, #23]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d105      	bne.n	8006a86 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a7a:	4b3c      	ldr	r3, [pc, #240]	; (8006b6c <HAL_RCC_OscConfig+0x4cc>)
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7e:	4a3b      	ldr	r2, [pc, #236]	; (8006b6c <HAL_RCC_OscConfig+0x4cc>)
 8006a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f000 80a4 	beq.w	8006bd8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a90:	4b36      	ldr	r3, [pc, #216]	; (8006b6c <HAL_RCC_OscConfig+0x4cc>)
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f003 030c 	and.w	r3, r3, #12
 8006a98:	2b08      	cmp	r3, #8
 8006a9a:	d06b      	beq.n	8006b74 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d149      	bne.n	8006b38 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aa4:	4b31      	ldr	r3, [pc, #196]	; (8006b6c <HAL_RCC_OscConfig+0x4cc>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a30      	ldr	r2, [pc, #192]	; (8006b6c <HAL_RCC_OscConfig+0x4cc>)
 8006aaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006aae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab0:	f7fd fdc6 	bl	8004640 <HAL_GetTick>
 8006ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ab6:	e008      	b.n	8006aca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ab8:	f7fd fdc2 	bl	8004640 <HAL_GetTick>
 8006abc:	4602      	mov	r2, r0
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d901      	bls.n	8006aca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e087      	b.n	8006bda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aca:	4b28      	ldr	r3, [pc, #160]	; (8006b6c <HAL_RCC_OscConfig+0x4cc>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1f0      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	69da      	ldr	r2, [r3, #28]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	431a      	orrs	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae4:	019b      	lsls	r3, r3, #6
 8006ae6:	431a      	orrs	r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aec:	085b      	lsrs	r3, r3, #1
 8006aee:	3b01      	subs	r3, #1
 8006af0:	041b      	lsls	r3, r3, #16
 8006af2:	431a      	orrs	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af8:	061b      	lsls	r3, r3, #24
 8006afa:	4313      	orrs	r3, r2
 8006afc:	4a1b      	ldr	r2, [pc, #108]	; (8006b6c <HAL_RCC_OscConfig+0x4cc>)
 8006afe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b02:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b04:	4b19      	ldr	r3, [pc, #100]	; (8006b6c <HAL_RCC_OscConfig+0x4cc>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a18      	ldr	r2, [pc, #96]	; (8006b6c <HAL_RCC_OscConfig+0x4cc>)
 8006b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b10:	f7fd fd96 	bl	8004640 <HAL_GetTick>
 8006b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b16:	e008      	b.n	8006b2a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b18:	f7fd fd92 	bl	8004640 <HAL_GetTick>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d901      	bls.n	8006b2a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e057      	b.n	8006bda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b2a:	4b10      	ldr	r3, [pc, #64]	; (8006b6c <HAL_RCC_OscConfig+0x4cc>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d0f0      	beq.n	8006b18 <HAL_RCC_OscConfig+0x478>
 8006b36:	e04f      	b.n	8006bd8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b38:	4b0c      	ldr	r3, [pc, #48]	; (8006b6c <HAL_RCC_OscConfig+0x4cc>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a0b      	ldr	r2, [pc, #44]	; (8006b6c <HAL_RCC_OscConfig+0x4cc>)
 8006b3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b44:	f7fd fd7c 	bl	8004640 <HAL_GetTick>
 8006b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b4a:	e008      	b.n	8006b5e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b4c:	f7fd fd78 	bl	8004640 <HAL_GetTick>
 8006b50:	4602      	mov	r2, r0
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d901      	bls.n	8006b5e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e03d      	b.n	8006bda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b5e:	4b03      	ldr	r3, [pc, #12]	; (8006b6c <HAL_RCC_OscConfig+0x4cc>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1f0      	bne.n	8006b4c <HAL_RCC_OscConfig+0x4ac>
 8006b6a:	e035      	b.n	8006bd8 <HAL_RCC_OscConfig+0x538>
 8006b6c:	40023800 	.word	0x40023800
 8006b70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006b74:	4b1b      	ldr	r3, [pc, #108]	; (8006be4 <HAL_RCC_OscConfig+0x544>)
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d028      	beq.n	8006bd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d121      	bne.n	8006bd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d11a      	bne.n	8006bd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006baa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d111      	bne.n	8006bd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bba:	085b      	lsrs	r3, r3, #1
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d107      	bne.n	8006bd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d001      	beq.n	8006bd8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e000      	b.n	8006bda <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3718      	adds	r7, #24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	40023800 	.word	0x40023800

08006be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d101      	bne.n	8006c00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e0d0      	b.n	8006da2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c00:	4b6a      	ldr	r3, [pc, #424]	; (8006dac <HAL_RCC_ClockConfig+0x1c4>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 030f 	and.w	r3, r3, #15
 8006c08:	683a      	ldr	r2, [r7, #0]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d910      	bls.n	8006c30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c0e:	4b67      	ldr	r3, [pc, #412]	; (8006dac <HAL_RCC_ClockConfig+0x1c4>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f023 020f 	bic.w	r2, r3, #15
 8006c16:	4965      	ldr	r1, [pc, #404]	; (8006dac <HAL_RCC_ClockConfig+0x1c4>)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c1e:	4b63      	ldr	r3, [pc, #396]	; (8006dac <HAL_RCC_ClockConfig+0x1c4>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 030f 	and.w	r3, r3, #15
 8006c26:	683a      	ldr	r2, [r7, #0]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d001      	beq.n	8006c30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e0b8      	b.n	8006da2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0302 	and.w	r3, r3, #2
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d020      	beq.n	8006c7e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0304 	and.w	r3, r3, #4
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d005      	beq.n	8006c54 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c48:	4b59      	ldr	r3, [pc, #356]	; (8006db0 <HAL_RCC_ClockConfig+0x1c8>)
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	4a58      	ldr	r2, [pc, #352]	; (8006db0 <HAL_RCC_ClockConfig+0x1c8>)
 8006c4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c52:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0308 	and.w	r3, r3, #8
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d005      	beq.n	8006c6c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c60:	4b53      	ldr	r3, [pc, #332]	; (8006db0 <HAL_RCC_ClockConfig+0x1c8>)
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	4a52      	ldr	r2, [pc, #328]	; (8006db0 <HAL_RCC_ClockConfig+0x1c8>)
 8006c66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c6c:	4b50      	ldr	r3, [pc, #320]	; (8006db0 <HAL_RCC_ClockConfig+0x1c8>)
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	494d      	ldr	r1, [pc, #308]	; (8006db0 <HAL_RCC_ClockConfig+0x1c8>)
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 0301 	and.w	r3, r3, #1
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d040      	beq.n	8006d0c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d107      	bne.n	8006ca2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c92:	4b47      	ldr	r3, [pc, #284]	; (8006db0 <HAL_RCC_ClockConfig+0x1c8>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d115      	bne.n	8006cca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e07f      	b.n	8006da2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d107      	bne.n	8006cba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006caa:	4b41      	ldr	r3, [pc, #260]	; (8006db0 <HAL_RCC_ClockConfig+0x1c8>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d109      	bne.n	8006cca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e073      	b.n	8006da2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cba:	4b3d      	ldr	r3, [pc, #244]	; (8006db0 <HAL_RCC_ClockConfig+0x1c8>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0302 	and.w	r3, r3, #2
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d101      	bne.n	8006cca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e06b      	b.n	8006da2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cca:	4b39      	ldr	r3, [pc, #228]	; (8006db0 <HAL_RCC_ClockConfig+0x1c8>)
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f023 0203 	bic.w	r2, r3, #3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	4936      	ldr	r1, [pc, #216]	; (8006db0 <HAL_RCC_ClockConfig+0x1c8>)
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cdc:	f7fd fcb0 	bl	8004640 <HAL_GetTick>
 8006ce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ce2:	e00a      	b.n	8006cfa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ce4:	f7fd fcac 	bl	8004640 <HAL_GetTick>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d901      	bls.n	8006cfa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e053      	b.n	8006da2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cfa:	4b2d      	ldr	r3, [pc, #180]	; (8006db0 <HAL_RCC_ClockConfig+0x1c8>)
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f003 020c 	and.w	r2, r3, #12
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d1eb      	bne.n	8006ce4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d0c:	4b27      	ldr	r3, [pc, #156]	; (8006dac <HAL_RCC_ClockConfig+0x1c4>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 030f 	and.w	r3, r3, #15
 8006d14:	683a      	ldr	r2, [r7, #0]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d210      	bcs.n	8006d3c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d1a:	4b24      	ldr	r3, [pc, #144]	; (8006dac <HAL_RCC_ClockConfig+0x1c4>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f023 020f 	bic.w	r2, r3, #15
 8006d22:	4922      	ldr	r1, [pc, #136]	; (8006dac <HAL_RCC_ClockConfig+0x1c4>)
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d2a:	4b20      	ldr	r3, [pc, #128]	; (8006dac <HAL_RCC_ClockConfig+0x1c4>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 030f 	and.w	r3, r3, #15
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d001      	beq.n	8006d3c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e032      	b.n	8006da2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0304 	and.w	r3, r3, #4
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d008      	beq.n	8006d5a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d48:	4b19      	ldr	r3, [pc, #100]	; (8006db0 <HAL_RCC_ClockConfig+0x1c8>)
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	4916      	ldr	r1, [pc, #88]	; (8006db0 <HAL_RCC_ClockConfig+0x1c8>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0308 	and.w	r3, r3, #8
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d009      	beq.n	8006d7a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006d66:	4b12      	ldr	r3, [pc, #72]	; (8006db0 <HAL_RCC_ClockConfig+0x1c8>)
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	00db      	lsls	r3, r3, #3
 8006d74:	490e      	ldr	r1, [pc, #56]	; (8006db0 <HAL_RCC_ClockConfig+0x1c8>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006d7a:	f000 f821 	bl	8006dc0 <HAL_RCC_GetSysClockFreq>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	4b0b      	ldr	r3, [pc, #44]	; (8006db0 <HAL_RCC_ClockConfig+0x1c8>)
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	091b      	lsrs	r3, r3, #4
 8006d86:	f003 030f 	and.w	r3, r3, #15
 8006d8a:	490a      	ldr	r1, [pc, #40]	; (8006db4 <HAL_RCC_ClockConfig+0x1cc>)
 8006d8c:	5ccb      	ldrb	r3, [r1, r3]
 8006d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d92:	4a09      	ldr	r2, [pc, #36]	; (8006db8 <HAL_RCC_ClockConfig+0x1d0>)
 8006d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006d96:	4b09      	ldr	r3, [pc, #36]	; (8006dbc <HAL_RCC_ClockConfig+0x1d4>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7fd fc0c 	bl	80045b8 <HAL_InitTick>

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	40023c00 	.word	0x40023c00
 8006db0:	40023800 	.word	0x40023800
 8006db4:	0800e9d4 	.word	0x0800e9d4
 8006db8:	200000c8 	.word	0x200000c8
 8006dbc:	200000cc 	.word	0x200000cc

08006dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dc4:	b094      	sub	sp, #80	; 0x50
 8006dc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	647b      	str	r3, [r7, #68]	; 0x44
 8006dcc:	2300      	movs	r3, #0
 8006dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006dd8:	4b79      	ldr	r3, [pc, #484]	; (8006fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	f003 030c 	and.w	r3, r3, #12
 8006de0:	2b08      	cmp	r3, #8
 8006de2:	d00d      	beq.n	8006e00 <HAL_RCC_GetSysClockFreq+0x40>
 8006de4:	2b08      	cmp	r3, #8
 8006de6:	f200 80e1 	bhi.w	8006fac <HAL_RCC_GetSysClockFreq+0x1ec>
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d002      	beq.n	8006df4 <HAL_RCC_GetSysClockFreq+0x34>
 8006dee:	2b04      	cmp	r3, #4
 8006df0:	d003      	beq.n	8006dfa <HAL_RCC_GetSysClockFreq+0x3a>
 8006df2:	e0db      	b.n	8006fac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006df4:	4b73      	ldr	r3, [pc, #460]	; (8006fc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006df6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006df8:	e0db      	b.n	8006fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006dfa:	4b73      	ldr	r3, [pc, #460]	; (8006fc8 <HAL_RCC_GetSysClockFreq+0x208>)
 8006dfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006dfe:	e0d8      	b.n	8006fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e00:	4b6f      	ldr	r3, [pc, #444]	; (8006fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e08:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006e0a:	4b6d      	ldr	r3, [pc, #436]	; (8006fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d063      	beq.n	8006ede <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e16:	4b6a      	ldr	r3, [pc, #424]	; (8006fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	099b      	lsrs	r3, r3, #6
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e28:	633b      	str	r3, [r7, #48]	; 0x30
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8006e2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006e32:	4622      	mov	r2, r4
 8006e34:	462b      	mov	r3, r5
 8006e36:	f04f 0000 	mov.w	r0, #0
 8006e3a:	f04f 0100 	mov.w	r1, #0
 8006e3e:	0159      	lsls	r1, r3, #5
 8006e40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e44:	0150      	lsls	r0, r2, #5
 8006e46:	4602      	mov	r2, r0
 8006e48:	460b      	mov	r3, r1
 8006e4a:	4621      	mov	r1, r4
 8006e4c:	1a51      	subs	r1, r2, r1
 8006e4e:	6139      	str	r1, [r7, #16]
 8006e50:	4629      	mov	r1, r5
 8006e52:	eb63 0301 	sbc.w	r3, r3, r1
 8006e56:	617b      	str	r3, [r7, #20]
 8006e58:	f04f 0200 	mov.w	r2, #0
 8006e5c:	f04f 0300 	mov.w	r3, #0
 8006e60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e64:	4659      	mov	r1, fp
 8006e66:	018b      	lsls	r3, r1, #6
 8006e68:	4651      	mov	r1, sl
 8006e6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e6e:	4651      	mov	r1, sl
 8006e70:	018a      	lsls	r2, r1, #6
 8006e72:	4651      	mov	r1, sl
 8006e74:	ebb2 0801 	subs.w	r8, r2, r1
 8006e78:	4659      	mov	r1, fp
 8006e7a:	eb63 0901 	sbc.w	r9, r3, r1
 8006e7e:	f04f 0200 	mov.w	r2, #0
 8006e82:	f04f 0300 	mov.w	r3, #0
 8006e86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e92:	4690      	mov	r8, r2
 8006e94:	4699      	mov	r9, r3
 8006e96:	4623      	mov	r3, r4
 8006e98:	eb18 0303 	adds.w	r3, r8, r3
 8006e9c:	60bb      	str	r3, [r7, #8]
 8006e9e:	462b      	mov	r3, r5
 8006ea0:	eb49 0303 	adc.w	r3, r9, r3
 8006ea4:	60fb      	str	r3, [r7, #12]
 8006ea6:	f04f 0200 	mov.w	r2, #0
 8006eaa:	f04f 0300 	mov.w	r3, #0
 8006eae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006eb2:	4629      	mov	r1, r5
 8006eb4:	024b      	lsls	r3, r1, #9
 8006eb6:	4621      	mov	r1, r4
 8006eb8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006ebc:	4621      	mov	r1, r4
 8006ebe:	024a      	lsls	r2, r1, #9
 8006ec0:	4610      	mov	r0, r2
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006eca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ecc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ed0:	f7f9 fedc 	bl	8000c8c <__aeabi_uldivmod>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	4613      	mov	r3, r2
 8006eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006edc:	e058      	b.n	8006f90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ede:	4b38      	ldr	r3, [pc, #224]	; (8006fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	099b      	lsrs	r3, r3, #6
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	4611      	mov	r1, r2
 8006eea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006eee:	623b      	str	r3, [r7, #32]
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ef4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006ef8:	4642      	mov	r2, r8
 8006efa:	464b      	mov	r3, r9
 8006efc:	f04f 0000 	mov.w	r0, #0
 8006f00:	f04f 0100 	mov.w	r1, #0
 8006f04:	0159      	lsls	r1, r3, #5
 8006f06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f0a:	0150      	lsls	r0, r2, #5
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	460b      	mov	r3, r1
 8006f10:	4641      	mov	r1, r8
 8006f12:	ebb2 0a01 	subs.w	sl, r2, r1
 8006f16:	4649      	mov	r1, r9
 8006f18:	eb63 0b01 	sbc.w	fp, r3, r1
 8006f1c:	f04f 0200 	mov.w	r2, #0
 8006f20:	f04f 0300 	mov.w	r3, #0
 8006f24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006f28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006f2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006f30:	ebb2 040a 	subs.w	r4, r2, sl
 8006f34:	eb63 050b 	sbc.w	r5, r3, fp
 8006f38:	f04f 0200 	mov.w	r2, #0
 8006f3c:	f04f 0300 	mov.w	r3, #0
 8006f40:	00eb      	lsls	r3, r5, #3
 8006f42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f46:	00e2      	lsls	r2, r4, #3
 8006f48:	4614      	mov	r4, r2
 8006f4a:	461d      	mov	r5, r3
 8006f4c:	4643      	mov	r3, r8
 8006f4e:	18e3      	adds	r3, r4, r3
 8006f50:	603b      	str	r3, [r7, #0]
 8006f52:	464b      	mov	r3, r9
 8006f54:	eb45 0303 	adc.w	r3, r5, r3
 8006f58:	607b      	str	r3, [r7, #4]
 8006f5a:	f04f 0200 	mov.w	r2, #0
 8006f5e:	f04f 0300 	mov.w	r3, #0
 8006f62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f66:	4629      	mov	r1, r5
 8006f68:	028b      	lsls	r3, r1, #10
 8006f6a:	4621      	mov	r1, r4
 8006f6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f70:	4621      	mov	r1, r4
 8006f72:	028a      	lsls	r2, r1, #10
 8006f74:	4610      	mov	r0, r2
 8006f76:	4619      	mov	r1, r3
 8006f78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	61bb      	str	r3, [r7, #24]
 8006f7e:	61fa      	str	r2, [r7, #28]
 8006f80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f84:	f7f9 fe82 	bl	8000c8c <__aeabi_uldivmod>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006f90:	4b0b      	ldr	r3, [pc, #44]	; (8006fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	0c1b      	lsrs	r3, r3, #16
 8006f96:	f003 0303 	and.w	r3, r3, #3
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	005b      	lsls	r3, r3, #1
 8006f9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8006fa0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006faa:	e002      	b.n	8006fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006fac:	4b05      	ldr	r3, [pc, #20]	; (8006fc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006fae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006fb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3750      	adds	r7, #80	; 0x50
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fbe:	bf00      	nop
 8006fc0:	40023800 	.word	0x40023800
 8006fc4:	00f42400 	.word	0x00f42400
 8006fc8:	007a1200 	.word	0x007a1200

08006fcc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fd0:	4b03      	ldr	r3, [pc, #12]	; (8006fe0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	200000c8 	.word	0x200000c8

08006fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006fe8:	f7ff fff0 	bl	8006fcc <HAL_RCC_GetHCLKFreq>
 8006fec:	4602      	mov	r2, r0
 8006fee:	4b05      	ldr	r3, [pc, #20]	; (8007004 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	0a9b      	lsrs	r3, r3, #10
 8006ff4:	f003 0307 	and.w	r3, r3, #7
 8006ff8:	4903      	ldr	r1, [pc, #12]	; (8007008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ffa:	5ccb      	ldrb	r3, [r1, r3]
 8006ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007000:	4618      	mov	r0, r3
 8007002:	bd80      	pop	{r7, pc}
 8007004:	40023800 	.word	0x40023800
 8007008:	0800e9e4 	.word	0x0800e9e4

0800700c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007010:	f7ff ffdc 	bl	8006fcc <HAL_RCC_GetHCLKFreq>
 8007014:	4602      	mov	r2, r0
 8007016:	4b05      	ldr	r3, [pc, #20]	; (800702c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	0b5b      	lsrs	r3, r3, #13
 800701c:	f003 0307 	and.w	r3, r3, #7
 8007020:	4903      	ldr	r1, [pc, #12]	; (8007030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007022:	5ccb      	ldrb	r3, [r1, r3]
 8007024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007028:	4618      	mov	r0, r3
 800702a:	bd80      	pop	{r7, pc}
 800702c:	40023800 	.word	0x40023800
 8007030:	0800e9e4 	.word	0x0800e9e4

08007034 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b088      	sub	sp, #32
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800703c:	2300      	movs	r3, #0
 800703e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007040:	2300      	movs	r3, #0
 8007042:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007044:	2300      	movs	r3, #0
 8007046:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007048:	2300      	movs	r3, #0
 800704a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800704c:	2300      	movs	r3, #0
 800704e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0301 	and.w	r3, r3, #1
 8007058:	2b00      	cmp	r3, #0
 800705a:	d012      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800705c:	4b69      	ldr	r3, [pc, #420]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	4a68      	ldr	r2, [pc, #416]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007062:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007066:	6093      	str	r3, [r2, #8]
 8007068:	4b66      	ldr	r3, [pc, #408]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800706a:	689a      	ldr	r2, [r3, #8]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007070:	4964      	ldr	r1, [pc, #400]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007072:	4313      	orrs	r3, r2
 8007074:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800707e:	2301      	movs	r3, #1
 8007080:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800708a:	2b00      	cmp	r3, #0
 800708c:	d017      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800708e:	4b5d      	ldr	r3, [pc, #372]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007094:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800709c:	4959      	ldr	r1, [pc, #356]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800709e:	4313      	orrs	r3, r2
 80070a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070ac:	d101      	bne.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80070ae:	2301      	movs	r3, #1
 80070b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80070ba:	2301      	movs	r3, #1
 80070bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d017      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80070ca:	4b4e      	ldr	r3, [pc, #312]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d8:	494a      	ldr	r1, [pc, #296]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070da:	4313      	orrs	r3, r2
 80070dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070e8:	d101      	bne.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80070ea:	2301      	movs	r3, #1
 80070ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80070f6:	2301      	movs	r3, #1
 80070f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d001      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007106:	2301      	movs	r3, #1
 8007108:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0320 	and.w	r3, r3, #32
 8007112:	2b00      	cmp	r3, #0
 8007114:	f000 808b 	beq.w	800722e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007118:	4b3a      	ldr	r3, [pc, #232]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800711a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711c:	4a39      	ldr	r2, [pc, #228]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800711e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007122:	6413      	str	r3, [r2, #64]	; 0x40
 8007124:	4b37      	ldr	r3, [pc, #220]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800712c:	60bb      	str	r3, [r7, #8]
 800712e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007130:	4b35      	ldr	r3, [pc, #212]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a34      	ldr	r2, [pc, #208]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800713a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800713c:	f7fd fa80 	bl	8004640 <HAL_GetTick>
 8007140:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007142:	e008      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007144:	f7fd fa7c 	bl	8004640 <HAL_GetTick>
 8007148:	4602      	mov	r2, r0
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	2b64      	cmp	r3, #100	; 0x64
 8007150:	d901      	bls.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e357      	b.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007156:	4b2c      	ldr	r3, [pc, #176]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800715e:	2b00      	cmp	r3, #0
 8007160:	d0f0      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007162:	4b28      	ldr	r3, [pc, #160]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800716a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d035      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800717a:	693a      	ldr	r2, [r7, #16]
 800717c:	429a      	cmp	r2, r3
 800717e:	d02e      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007180:	4b20      	ldr	r3, [pc, #128]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007188:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800718a:	4b1e      	ldr	r3, [pc, #120]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800718c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800718e:	4a1d      	ldr	r2, [pc, #116]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007194:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007196:	4b1b      	ldr	r3, [pc, #108]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800719a:	4a1a      	ldr	r2, [pc, #104]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800719c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80071a2:	4a18      	ldr	r2, [pc, #96]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80071a8:	4b16      	ldr	r3, [pc, #88]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ac:	f003 0301 	and.w	r3, r3, #1
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d114      	bne.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b4:	f7fd fa44 	bl	8004640 <HAL_GetTick>
 80071b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071ba:	e00a      	b.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071bc:	f7fd fa40 	bl	8004640 <HAL_GetTick>
 80071c0:	4602      	mov	r2, r0
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	1ad3      	subs	r3, r2, r3
 80071c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d901      	bls.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e319      	b.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071d2:	4b0c      	ldr	r3, [pc, #48]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071d6:	f003 0302 	and.w	r3, r3, #2
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d0ee      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071ea:	d111      	bne.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80071ec:	4b05      	ldr	r3, [pc, #20]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80071f8:	4b04      	ldr	r3, [pc, #16]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80071fa:	400b      	ands	r3, r1
 80071fc:	4901      	ldr	r1, [pc, #4]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071fe:	4313      	orrs	r3, r2
 8007200:	608b      	str	r3, [r1, #8]
 8007202:	e00b      	b.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007204:	40023800 	.word	0x40023800
 8007208:	40007000 	.word	0x40007000
 800720c:	0ffffcff 	.word	0x0ffffcff
 8007210:	4baa      	ldr	r3, [pc, #680]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	4aa9      	ldr	r2, [pc, #676]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007216:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800721a:	6093      	str	r3, [r2, #8]
 800721c:	4ba7      	ldr	r3, [pc, #668]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800721e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007228:	49a4      	ldr	r1, [pc, #656]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800722a:	4313      	orrs	r3, r2
 800722c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 0310 	and.w	r3, r3, #16
 8007236:	2b00      	cmp	r3, #0
 8007238:	d010      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800723a:	4ba0      	ldr	r3, [pc, #640]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800723c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007240:	4a9e      	ldr	r2, [pc, #632]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007242:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007246:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800724a:	4b9c      	ldr	r3, [pc, #624]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800724c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007254:	4999      	ldr	r1, [pc, #612]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007256:	4313      	orrs	r3, r2
 8007258:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00a      	beq.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007268:	4b94      	ldr	r3, [pc, #592]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800726a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800726e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007276:	4991      	ldr	r1, [pc, #580]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007278:	4313      	orrs	r3, r2
 800727a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00a      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800728a:	4b8c      	ldr	r3, [pc, #560]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800728c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007290:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007298:	4988      	ldr	r1, [pc, #544]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800729a:	4313      	orrs	r3, r2
 800729c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00a      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80072ac:	4b83      	ldr	r3, [pc, #524]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072ba:	4980      	ldr	r1, [pc, #512]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072bc:	4313      	orrs	r3, r2
 80072be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00a      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80072ce:	4b7b      	ldr	r3, [pc, #492]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072dc:	4977      	ldr	r1, [pc, #476]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072de:	4313      	orrs	r3, r2
 80072e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00a      	beq.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80072f0:	4b72      	ldr	r3, [pc, #456]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072f6:	f023 0203 	bic.w	r2, r3, #3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072fe:	496f      	ldr	r1, [pc, #444]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007300:	4313      	orrs	r3, r2
 8007302:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00a      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007312:	4b6a      	ldr	r3, [pc, #424]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007318:	f023 020c 	bic.w	r2, r3, #12
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007320:	4966      	ldr	r1, [pc, #408]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007322:	4313      	orrs	r3, r2
 8007324:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00a      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007334:	4b61      	ldr	r3, [pc, #388]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800733a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007342:	495e      	ldr	r1, [pc, #376]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007344:	4313      	orrs	r3, r2
 8007346:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00a      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007356:	4b59      	ldr	r3, [pc, #356]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800735c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007364:	4955      	ldr	r1, [pc, #340]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007366:	4313      	orrs	r3, r2
 8007368:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00a      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007378:	4b50      	ldr	r3, [pc, #320]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800737a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800737e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007386:	494d      	ldr	r1, [pc, #308]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007388:	4313      	orrs	r3, r2
 800738a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00a      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800739a:	4b48      	ldr	r3, [pc, #288]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800739c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073a8:	4944      	ldr	r1, [pc, #272]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073aa:	4313      	orrs	r3, r2
 80073ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00a      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80073bc:	4b3f      	ldr	r3, [pc, #252]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ca:	493c      	ldr	r1, [pc, #240]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073cc:	4313      	orrs	r3, r2
 80073ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00a      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80073de:	4b37      	ldr	r3, [pc, #220]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073ec:	4933      	ldr	r1, [pc, #204]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073ee:	4313      	orrs	r3, r2
 80073f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00a      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007400:	4b2e      	ldr	r3, [pc, #184]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007406:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800740e:	492b      	ldr	r1, [pc, #172]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007410:	4313      	orrs	r3, r2
 8007412:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800741e:	2b00      	cmp	r3, #0
 8007420:	d011      	beq.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007422:	4b26      	ldr	r3, [pc, #152]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007428:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007430:	4922      	ldr	r1, [pc, #136]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007432:	4313      	orrs	r3, r2
 8007434:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800743c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007440:	d101      	bne.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007442:	2301      	movs	r3, #1
 8007444:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 0308 	and.w	r3, r3, #8
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007452:	2301      	movs	r3, #1
 8007454:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00a      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007462:	4b16      	ldr	r3, [pc, #88]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007468:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007470:	4912      	ldr	r1, [pc, #72]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007472:	4313      	orrs	r3, r2
 8007474:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00b      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007484:	4b0d      	ldr	r3, [pc, #52]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800748a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007494:	4909      	ldr	r1, [pc, #36]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007496:	4313      	orrs	r3, r2
 8007498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d006      	beq.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f000 80d9 	beq.w	8007662 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80074b0:	4b02      	ldr	r3, [pc, #8]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a01      	ldr	r2, [pc, #4]	; (80074bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80074ba:	e001      	b.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80074bc:	40023800 	.word	0x40023800
 80074c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074c2:	f7fd f8bd 	bl	8004640 <HAL_GetTick>
 80074c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80074c8:	e008      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80074ca:	f7fd f8b9 	bl	8004640 <HAL_GetTick>
 80074ce:	4602      	mov	r2, r0
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	2b64      	cmp	r3, #100	; 0x64
 80074d6:	d901      	bls.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074d8:	2303      	movs	r3, #3
 80074da:	e194      	b.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80074dc:	4b6c      	ldr	r3, [pc, #432]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1f0      	bne.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0301 	and.w	r3, r3, #1
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d021      	beq.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d11d      	bne.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80074fc:	4b64      	ldr	r3, [pc, #400]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007502:	0c1b      	lsrs	r3, r3, #16
 8007504:	f003 0303 	and.w	r3, r3, #3
 8007508:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800750a:	4b61      	ldr	r3, [pc, #388]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800750c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007510:	0e1b      	lsrs	r3, r3, #24
 8007512:	f003 030f 	and.w	r3, r3, #15
 8007516:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	019a      	lsls	r2, r3, #6
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	041b      	lsls	r3, r3, #16
 8007522:	431a      	orrs	r2, r3
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	061b      	lsls	r3, r3, #24
 8007528:	431a      	orrs	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	071b      	lsls	r3, r3, #28
 8007530:	4957      	ldr	r1, [pc, #348]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007532:	4313      	orrs	r3, r2
 8007534:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d004      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007548:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800754c:	d00a      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007556:	2b00      	cmp	r3, #0
 8007558:	d02e      	beq.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007562:	d129      	bne.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007564:	4b4a      	ldr	r3, [pc, #296]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007566:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800756a:	0c1b      	lsrs	r3, r3, #16
 800756c:	f003 0303 	and.w	r3, r3, #3
 8007570:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007572:	4b47      	ldr	r3, [pc, #284]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007574:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007578:	0f1b      	lsrs	r3, r3, #28
 800757a:	f003 0307 	and.w	r3, r3, #7
 800757e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	019a      	lsls	r2, r3, #6
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	041b      	lsls	r3, r3, #16
 800758a:	431a      	orrs	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	061b      	lsls	r3, r3, #24
 8007592:	431a      	orrs	r2, r3
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	071b      	lsls	r3, r3, #28
 8007598:	493d      	ldr	r1, [pc, #244]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800759a:	4313      	orrs	r3, r2
 800759c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80075a0:	4b3b      	ldr	r3, [pc, #236]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80075a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075a6:	f023 021f 	bic.w	r2, r3, #31
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ae:	3b01      	subs	r3, #1
 80075b0:	4937      	ldr	r1, [pc, #220]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80075b2:	4313      	orrs	r3, r2
 80075b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d01d      	beq.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80075c4:	4b32      	ldr	r3, [pc, #200]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80075c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075ca:	0e1b      	lsrs	r3, r3, #24
 80075cc:	f003 030f 	and.w	r3, r3, #15
 80075d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80075d2:	4b2f      	ldr	r3, [pc, #188]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80075d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075d8:	0f1b      	lsrs	r3, r3, #28
 80075da:	f003 0307 	and.w	r3, r3, #7
 80075de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	019a      	lsls	r2, r3, #6
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	041b      	lsls	r3, r3, #16
 80075ec:	431a      	orrs	r2, r3
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	061b      	lsls	r3, r3, #24
 80075f2:	431a      	orrs	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	071b      	lsls	r3, r3, #28
 80075f8:	4925      	ldr	r1, [pc, #148]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80075fa:	4313      	orrs	r3, r2
 80075fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d011      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	019a      	lsls	r2, r3, #6
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	041b      	lsls	r3, r3, #16
 8007618:	431a      	orrs	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	061b      	lsls	r3, r3, #24
 8007620:	431a      	orrs	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	071b      	lsls	r3, r3, #28
 8007628:	4919      	ldr	r1, [pc, #100]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800762a:	4313      	orrs	r3, r2
 800762c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007630:	4b17      	ldr	r3, [pc, #92]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a16      	ldr	r2, [pc, #88]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007636:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800763a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800763c:	f7fd f800 	bl	8004640 <HAL_GetTick>
 8007640:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007642:	e008      	b.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007644:	f7fc fffc 	bl	8004640 <HAL_GetTick>
 8007648:	4602      	mov	r2, r0
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	2b64      	cmp	r3, #100	; 0x64
 8007650:	d901      	bls.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e0d7      	b.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007656:	4b0e      	ldr	r3, [pc, #56]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d0f0      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	2b01      	cmp	r3, #1
 8007666:	f040 80cd 	bne.w	8007804 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800766a:	4b09      	ldr	r3, [pc, #36]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a08      	ldr	r2, [pc, #32]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007670:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007674:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007676:	f7fc ffe3 	bl	8004640 <HAL_GetTick>
 800767a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800767c:	e00a      	b.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800767e:	f7fc ffdf 	bl	8004640 <HAL_GetTick>
 8007682:	4602      	mov	r2, r0
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	1ad3      	subs	r3, r2, r3
 8007688:	2b64      	cmp	r3, #100	; 0x64
 800768a:	d903      	bls.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	e0ba      	b.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007690:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007694:	4b5e      	ldr	r3, [pc, #376]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800769c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076a0:	d0ed      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d003      	beq.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d009      	beq.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d02e      	beq.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d12a      	bne.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80076ca:	4b51      	ldr	r3, [pc, #324]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80076cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076d0:	0c1b      	lsrs	r3, r3, #16
 80076d2:	f003 0303 	and.w	r3, r3, #3
 80076d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80076d8:	4b4d      	ldr	r3, [pc, #308]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80076da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076de:	0f1b      	lsrs	r3, r3, #28
 80076e0:	f003 0307 	and.w	r3, r3, #7
 80076e4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	019a      	lsls	r2, r3, #6
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	041b      	lsls	r3, r3, #16
 80076f0:	431a      	orrs	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	699b      	ldr	r3, [r3, #24]
 80076f6:	061b      	lsls	r3, r3, #24
 80076f8:	431a      	orrs	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	071b      	lsls	r3, r3, #28
 80076fe:	4944      	ldr	r1, [pc, #272]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007700:	4313      	orrs	r3, r2
 8007702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007706:	4b42      	ldr	r3, [pc, #264]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007708:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800770c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007714:	3b01      	subs	r3, #1
 8007716:	021b      	lsls	r3, r3, #8
 8007718:	493d      	ldr	r1, [pc, #244]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800771a:	4313      	orrs	r3, r2
 800771c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007728:	2b00      	cmp	r3, #0
 800772a:	d022      	beq.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007730:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007734:	d11d      	bne.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007736:	4b36      	ldr	r3, [pc, #216]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800773c:	0e1b      	lsrs	r3, r3, #24
 800773e:	f003 030f 	and.w	r3, r3, #15
 8007742:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007744:	4b32      	ldr	r3, [pc, #200]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800774a:	0f1b      	lsrs	r3, r3, #28
 800774c:	f003 0307 	and.w	r3, r3, #7
 8007750:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	695b      	ldr	r3, [r3, #20]
 8007756:	019a      	lsls	r2, r3, #6
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6a1b      	ldr	r3, [r3, #32]
 800775c:	041b      	lsls	r3, r3, #16
 800775e:	431a      	orrs	r2, r3
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	061b      	lsls	r3, r3, #24
 8007764:	431a      	orrs	r2, r3
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	071b      	lsls	r3, r3, #28
 800776a:	4929      	ldr	r1, [pc, #164]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800776c:	4313      	orrs	r3, r2
 800776e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 0308 	and.w	r3, r3, #8
 800777a:	2b00      	cmp	r3, #0
 800777c:	d028      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800777e:	4b24      	ldr	r3, [pc, #144]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007784:	0e1b      	lsrs	r3, r3, #24
 8007786:	f003 030f 	and.w	r3, r3, #15
 800778a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800778c:	4b20      	ldr	r3, [pc, #128]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800778e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007792:	0c1b      	lsrs	r3, r3, #16
 8007794:	f003 0303 	and.w	r3, r3, #3
 8007798:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	695b      	ldr	r3, [r3, #20]
 800779e:	019a      	lsls	r2, r3, #6
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	041b      	lsls	r3, r3, #16
 80077a4:	431a      	orrs	r2, r3
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	061b      	lsls	r3, r3, #24
 80077aa:	431a      	orrs	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	69db      	ldr	r3, [r3, #28]
 80077b0:	071b      	lsls	r3, r3, #28
 80077b2:	4917      	ldr	r1, [pc, #92]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077b4:	4313      	orrs	r3, r2
 80077b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80077ba:	4b15      	ldr	r3, [pc, #84]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c8:	4911      	ldr	r1, [pc, #68]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077ca:	4313      	orrs	r3, r2
 80077cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80077d0:	4b0f      	ldr	r3, [pc, #60]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a0e      	ldr	r2, [pc, #56]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077dc:	f7fc ff30 	bl	8004640 <HAL_GetTick>
 80077e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80077e2:	e008      	b.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80077e4:	f7fc ff2c 	bl	8004640 <HAL_GetTick>
 80077e8:	4602      	mov	r2, r0
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	2b64      	cmp	r3, #100	; 0x64
 80077f0:	d901      	bls.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	e007      	b.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80077f6:	4b06      	ldr	r3, [pc, #24]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007802:	d1ef      	bne.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3720      	adds	r7, #32
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	40023800 	.word	0x40023800

08007814 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d101      	bne.n	8007826 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	e09d      	b.n	8007962 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782a:	2b00      	cmp	r3, #0
 800782c:	d108      	bne.n	8007840 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007836:	d009      	beq.n	800784c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	61da      	str	r2, [r3, #28]
 800783e:	e005      	b.n	800784c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d106      	bne.n	800786c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f7fc f9f2 	bl	8003c50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2202      	movs	r2, #2
 8007870:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007882:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800788c:	d902      	bls.n	8007894 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800788e:	2300      	movs	r3, #0
 8007890:	60fb      	str	r3, [r7, #12]
 8007892:	e002      	b.n	800789a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007898:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80078a2:	d007      	beq.n	80078b4 <HAL_SPI_Init+0xa0>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80078ac:	d002      	beq.n	80078b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80078c4:	431a      	orrs	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	f003 0302 	and.w	r3, r3, #2
 80078ce:	431a      	orrs	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	695b      	ldr	r3, [r3, #20]
 80078d4:	f003 0301 	and.w	r3, r3, #1
 80078d8:	431a      	orrs	r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078e2:	431a      	orrs	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	69db      	ldr	r3, [r3, #28]
 80078e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078ec:	431a      	orrs	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078f6:	ea42 0103 	orr.w	r1, r2, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078fe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	430a      	orrs	r2, r1
 8007908:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	699b      	ldr	r3, [r3, #24]
 800790e:	0c1b      	lsrs	r3, r3, #16
 8007910:	f003 0204 	and.w	r2, r3, #4
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007918:	f003 0310 	and.w	r3, r3, #16
 800791c:	431a      	orrs	r2, r3
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007922:	f003 0308 	and.w	r3, r3, #8
 8007926:	431a      	orrs	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007930:	ea42 0103 	orr.w	r1, r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	430a      	orrs	r2, r1
 8007940:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	69da      	ldr	r2, [r3, #28]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007950:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b088      	sub	sp, #32
 800796e:	af00      	add	r7, sp, #0
 8007970:	60f8      	str	r0, [r7, #12]
 8007972:	60b9      	str	r1, [r7, #8]
 8007974:	603b      	str	r3, [r7, #0]
 8007976:	4613      	mov	r3, r2
 8007978:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007984:	2b01      	cmp	r3, #1
 8007986:	d101      	bne.n	800798c <HAL_SPI_Transmit+0x22>
 8007988:	2302      	movs	r3, #2
 800798a:	e158      	b.n	8007c3e <HAL_SPI_Transmit+0x2d4>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007994:	f7fc fe54 	bl	8004640 <HAL_GetTick>
 8007998:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800799a:	88fb      	ldrh	r3, [r7, #6]
 800799c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d002      	beq.n	80079b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80079aa:	2302      	movs	r3, #2
 80079ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80079ae:	e13d      	b.n	8007c2c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d002      	beq.n	80079bc <HAL_SPI_Transmit+0x52>
 80079b6:	88fb      	ldrh	r3, [r7, #6]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d102      	bne.n	80079c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80079c0:	e134      	b.n	8007c2c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2203      	movs	r2, #3
 80079c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2200      	movs	r2, #0
 80079ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	88fa      	ldrh	r2, [r7, #6]
 80079da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	88fa      	ldrh	r2, [r7, #6]
 80079e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2200      	movs	r2, #0
 80079fc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a0c:	d10f      	bne.n	8007a2e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a38:	2b40      	cmp	r3, #64	; 0x40
 8007a3a:	d007      	beq.n	8007a4c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a54:	d94b      	bls.n	8007aee <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d002      	beq.n	8007a64 <HAL_SPI_Transmit+0xfa>
 8007a5e:	8afb      	ldrh	r3, [r7, #22]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d13e      	bne.n	8007ae2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a68:	881a      	ldrh	r2, [r3, #0]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a74:	1c9a      	adds	r2, r3, #2
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	3b01      	subs	r3, #1
 8007a82:	b29a      	uxth	r2, r3
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a88:	e02b      	b.n	8007ae2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	f003 0302 	and.w	r3, r3, #2
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d112      	bne.n	8007abe <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a9c:	881a      	ldrh	r2, [r3, #0]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa8:	1c9a      	adds	r2, r3, #2
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007abc:	e011      	b.n	8007ae2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007abe:	f7fc fdbf 	bl	8004640 <HAL_GetTick>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	1ad3      	subs	r3, r2, r3
 8007ac8:	683a      	ldr	r2, [r7, #0]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d803      	bhi.n	8007ad6 <HAL_SPI_Transmit+0x16c>
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad4:	d102      	bne.n	8007adc <HAL_SPI_Transmit+0x172>
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d102      	bne.n	8007ae2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007adc:	2303      	movs	r3, #3
 8007ade:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007ae0:	e0a4      	b.n	8007c2c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1ce      	bne.n	8007a8a <HAL_SPI_Transmit+0x120>
 8007aec:	e07c      	b.n	8007be8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d002      	beq.n	8007afc <HAL_SPI_Transmit+0x192>
 8007af6:	8afb      	ldrh	r3, [r7, #22]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d170      	bne.n	8007bde <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d912      	bls.n	8007b2c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0a:	881a      	ldrh	r2, [r3, #0]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b16:	1c9a      	adds	r2, r3, #2
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	3b02      	subs	r3, #2
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b2a:	e058      	b.n	8007bde <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	330c      	adds	r3, #12
 8007b36:	7812      	ldrb	r2, [r2, #0]
 8007b38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b3e:	1c5a      	adds	r2, r3, #1
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007b52:	e044      	b.n	8007bde <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	f003 0302 	and.w	r3, r3, #2
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	d12b      	bne.n	8007bba <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d912      	bls.n	8007b92 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b70:	881a      	ldrh	r2, [r3, #0]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7c:	1c9a      	adds	r2, r3, #2
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	3b02      	subs	r3, #2
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b90:	e025      	b.n	8007bde <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	330c      	adds	r3, #12
 8007b9c:	7812      	ldrb	r2, [r2, #0]
 8007b9e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba4:	1c5a      	adds	r2, r3, #1
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007bb8:	e011      	b.n	8007bde <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bba:	f7fc fd41 	bl	8004640 <HAL_GetTick>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	1ad3      	subs	r3, r2, r3
 8007bc4:	683a      	ldr	r2, [r7, #0]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d803      	bhi.n	8007bd2 <HAL_SPI_Transmit+0x268>
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bd0:	d102      	bne.n	8007bd8 <HAL_SPI_Transmit+0x26e>
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d102      	bne.n	8007bde <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007bdc:	e026      	b.n	8007c2c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d1b5      	bne.n	8007b54 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007be8:	69ba      	ldr	r2, [r7, #24]
 8007bea:	6839      	ldr	r1, [r7, #0]
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f000 fd07 	bl	8008600 <SPI_EndRxTxTransaction>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d002      	beq.n	8007bfe <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2220      	movs	r2, #32
 8007bfc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10a      	bne.n	8007c1c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c06:	2300      	movs	r3, #0
 8007c08:	613b      	str	r3, [r7, #16]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	613b      	str	r3, [r7, #16]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	613b      	str	r3, [r7, #16]
 8007c1a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d002      	beq.n	8007c2a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	77fb      	strb	r3, [r7, #31]
 8007c28:	e000      	b.n	8007c2c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007c2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007c3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3720      	adds	r7, #32
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b088      	sub	sp, #32
 8007c4a:	af02      	add	r7, sp, #8
 8007c4c:	60f8      	str	r0, [r7, #12]
 8007c4e:	60b9      	str	r1, [r7, #8]
 8007c50:	603b      	str	r3, [r7, #0]
 8007c52:	4613      	mov	r3, r2
 8007c54:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007c56:	2300      	movs	r3, #0
 8007c58:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c62:	d112      	bne.n	8007c8a <HAL_SPI_Receive+0x44>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d10e      	bne.n	8007c8a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2204      	movs	r2, #4
 8007c70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007c74:	88fa      	ldrh	r2, [r7, #6]
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	9300      	str	r3, [sp, #0]
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	68b9      	ldr	r1, [r7, #8]
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	f000 f910 	bl	8007ea6 <HAL_SPI_TransmitReceive>
 8007c86:	4603      	mov	r3, r0
 8007c88:	e109      	b.n	8007e9e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d101      	bne.n	8007c98 <HAL_SPI_Receive+0x52>
 8007c94:	2302      	movs	r3, #2
 8007c96:	e102      	b.n	8007e9e <HAL_SPI_Receive+0x258>
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ca0:	f7fc fcce 	bl	8004640 <HAL_GetTick>
 8007ca4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d002      	beq.n	8007cb8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007cb2:	2302      	movs	r3, #2
 8007cb4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007cb6:	e0e9      	b.n	8007e8c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d002      	beq.n	8007cc4 <HAL_SPI_Receive+0x7e>
 8007cbe:	88fb      	ldrh	r3, [r7, #6]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d102      	bne.n	8007cca <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007cc8:	e0e0      	b.n	8007e8c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2204      	movs	r2, #4
 8007cce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	68ba      	ldr	r2, [r7, #8]
 8007cdc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	88fa      	ldrh	r2, [r7, #6]
 8007ce2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	88fa      	ldrh	r2, [r7, #6]
 8007cea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2200      	movs	r2, #0
 8007d04:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d14:	d908      	bls.n	8007d28 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	685a      	ldr	r2, [r3, #4]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d24:	605a      	str	r2, [r3, #4]
 8007d26:	e007      	b.n	8007d38 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	685a      	ldr	r2, [r3, #4]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d36:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d40:	d10f      	bne.n	8007d62 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007d60:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d6c:	2b40      	cmp	r3, #64	; 0x40
 8007d6e:	d007      	beq.n	8007d80 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d7e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d88:	d867      	bhi.n	8007e5a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007d8a:	e030      	b.n	8007dee <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	f003 0301 	and.w	r3, r3, #1
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d117      	bne.n	8007dca <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f103 020c 	add.w	r2, r3, #12
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da6:	7812      	ldrb	r2, [r2, #0]
 8007da8:	b2d2      	uxtb	r2, r2
 8007daa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db0:	1c5a      	adds	r2, r3, #1
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007dc8:	e011      	b.n	8007dee <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007dca:	f7fc fc39 	bl	8004640 <HAL_GetTick>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	1ad3      	subs	r3, r2, r3
 8007dd4:	683a      	ldr	r2, [r7, #0]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d803      	bhi.n	8007de2 <HAL_SPI_Receive+0x19c>
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de0:	d102      	bne.n	8007de8 <HAL_SPI_Receive+0x1a2>
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d102      	bne.n	8007dee <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8007de8:	2303      	movs	r3, #3
 8007dea:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007dec:	e04e      	b.n	8007e8c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1c8      	bne.n	8007d8c <HAL_SPI_Receive+0x146>
 8007dfa:	e034      	b.n	8007e66 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	f003 0301 	and.w	r3, r3, #1
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d115      	bne.n	8007e36 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68da      	ldr	r2, [r3, #12]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e14:	b292      	uxth	r2, r2
 8007e16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1c:	1c9a      	adds	r2, r3, #2
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	b29a      	uxth	r2, r3
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007e34:	e011      	b.n	8007e5a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e36:	f7fc fc03 	bl	8004640 <HAL_GetTick>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	1ad3      	subs	r3, r2, r3
 8007e40:	683a      	ldr	r2, [r7, #0]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d803      	bhi.n	8007e4e <HAL_SPI_Receive+0x208>
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e4c:	d102      	bne.n	8007e54 <HAL_SPI_Receive+0x20e>
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d102      	bne.n	8007e5a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8007e54:	2303      	movs	r3, #3
 8007e56:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007e58:	e018      	b.n	8007e8c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1ca      	bne.n	8007dfc <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e66:	693a      	ldr	r2, [r7, #16]
 8007e68:	6839      	ldr	r1, [r7, #0]
 8007e6a:	68f8      	ldr	r0, [r7, #12]
 8007e6c:	f000 fb4c 	bl	8008508 <SPI_EndRxTransaction>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d002      	beq.n	8007e7c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2220      	movs	r2, #32
 8007e7a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d002      	beq.n	8007e8a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	75fb      	strb	r3, [r7, #23]
 8007e88:	e000      	b.n	8007e8c <HAL_SPI_Receive+0x246>
  }

error :
 8007e8a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3718      	adds	r7, #24
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b08a      	sub	sp, #40	; 0x28
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	60f8      	str	r0, [r7, #12]
 8007eae:	60b9      	str	r1, [r7, #8]
 8007eb0:	607a      	str	r2, [r7, #4]
 8007eb2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d101      	bne.n	8007ecc <HAL_SPI_TransmitReceive+0x26>
 8007ec8:	2302      	movs	r3, #2
 8007eca:	e1fb      	b.n	80082c4 <HAL_SPI_TransmitReceive+0x41e>
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ed4:	f7fc fbb4 	bl	8004640 <HAL_GetTick>
 8007ed8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ee0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007ee8:	887b      	ldrh	r3, [r7, #2]
 8007eea:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007eec:	887b      	ldrh	r3, [r7, #2]
 8007eee:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007ef0:	7efb      	ldrb	r3, [r7, #27]
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d00e      	beq.n	8007f14 <HAL_SPI_TransmitReceive+0x6e>
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007efc:	d106      	bne.n	8007f0c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d102      	bne.n	8007f0c <HAL_SPI_TransmitReceive+0x66>
 8007f06:	7efb      	ldrb	r3, [r7, #27]
 8007f08:	2b04      	cmp	r3, #4
 8007f0a:	d003      	beq.n	8007f14 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007f0c:	2302      	movs	r3, #2
 8007f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007f12:	e1cd      	b.n	80082b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d005      	beq.n	8007f26 <HAL_SPI_TransmitReceive+0x80>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d002      	beq.n	8007f26 <HAL_SPI_TransmitReceive+0x80>
 8007f20:	887b      	ldrh	r3, [r7, #2]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d103      	bne.n	8007f2e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007f2c:	e1c0      	b.n	80082b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b04      	cmp	r3, #4
 8007f38:	d003      	beq.n	8007f42 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2205      	movs	r2, #5
 8007f3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2200      	movs	r2, #0
 8007f46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	887a      	ldrh	r2, [r7, #2]
 8007f52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	887a      	ldrh	r2, [r7, #2]
 8007f5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	887a      	ldrh	r2, [r7, #2]
 8007f68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	887a      	ldrh	r2, [r7, #2]
 8007f6e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2200      	movs	r2, #0
 8007f74:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f84:	d802      	bhi.n	8007f8c <HAL_SPI_TransmitReceive+0xe6>
 8007f86:	8a3b      	ldrh	r3, [r7, #16]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d908      	bls.n	8007f9e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	685a      	ldr	r2, [r3, #4]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007f9a:	605a      	str	r2, [r3, #4]
 8007f9c:	e007      	b.n	8007fae <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	685a      	ldr	r2, [r3, #4]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007fac:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fb8:	2b40      	cmp	r3, #64	; 0x40
 8007fba:	d007      	beq.n	8007fcc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007fd4:	d97c      	bls.n	80080d0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d002      	beq.n	8007fe4 <HAL_SPI_TransmitReceive+0x13e>
 8007fde:	8a7b      	ldrh	r3, [r7, #18]
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d169      	bne.n	80080b8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe8:	881a      	ldrh	r2, [r3, #0]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff4:	1c9a      	adds	r2, r3, #2
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	3b01      	subs	r3, #1
 8008002:	b29a      	uxth	r2, r3
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008008:	e056      	b.n	80080b8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	f003 0302 	and.w	r3, r3, #2
 8008014:	2b02      	cmp	r3, #2
 8008016:	d11b      	bne.n	8008050 <HAL_SPI_TransmitReceive+0x1aa>
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800801c:	b29b      	uxth	r3, r3
 800801e:	2b00      	cmp	r3, #0
 8008020:	d016      	beq.n	8008050 <HAL_SPI_TransmitReceive+0x1aa>
 8008022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008024:	2b01      	cmp	r3, #1
 8008026:	d113      	bne.n	8008050 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800802c:	881a      	ldrh	r2, [r3, #0]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008038:	1c9a      	adds	r2, r3, #2
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008042:	b29b      	uxth	r3, r3
 8008044:	3b01      	subs	r3, #1
 8008046:	b29a      	uxth	r2, r3
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800804c:	2300      	movs	r3, #0
 800804e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	2b01      	cmp	r3, #1
 800805c:	d11c      	bne.n	8008098 <HAL_SPI_TransmitReceive+0x1f2>
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008064:	b29b      	uxth	r3, r3
 8008066:	2b00      	cmp	r3, #0
 8008068:	d016      	beq.n	8008098 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68da      	ldr	r2, [r3, #12]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008074:	b292      	uxth	r2, r2
 8008076:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807c:	1c9a      	adds	r2, r3, #2
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008088:	b29b      	uxth	r3, r3
 800808a:	3b01      	subs	r3, #1
 800808c:	b29a      	uxth	r2, r3
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008094:	2301      	movs	r3, #1
 8008096:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008098:	f7fc fad2 	bl	8004640 <HAL_GetTick>
 800809c:	4602      	mov	r2, r0
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	1ad3      	subs	r3, r2, r3
 80080a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d807      	bhi.n	80080b8 <HAL_SPI_TransmitReceive+0x212>
 80080a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ae:	d003      	beq.n	80080b8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80080b0:	2303      	movs	r3, #3
 80080b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80080b6:	e0fb      	b.n	80082b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080bc:	b29b      	uxth	r3, r3
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d1a3      	bne.n	800800a <HAL_SPI_TransmitReceive+0x164>
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d19d      	bne.n	800800a <HAL_SPI_TransmitReceive+0x164>
 80080ce:	e0df      	b.n	8008290 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d003      	beq.n	80080e0 <HAL_SPI_TransmitReceive+0x23a>
 80080d8:	8a7b      	ldrh	r3, [r7, #18]
 80080da:	2b01      	cmp	r3, #1
 80080dc:	f040 80cb 	bne.w	8008276 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d912      	bls.n	8008110 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ee:	881a      	ldrh	r2, [r3, #0]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080fa:	1c9a      	adds	r2, r3, #2
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008104:	b29b      	uxth	r3, r3
 8008106:	3b02      	subs	r3, #2
 8008108:	b29a      	uxth	r2, r3
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800810e:	e0b2      	b.n	8008276 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	330c      	adds	r3, #12
 800811a:	7812      	ldrb	r2, [r2, #0]
 800811c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008122:	1c5a      	adds	r2, r3, #1
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800812c:	b29b      	uxth	r3, r3
 800812e:	3b01      	subs	r3, #1
 8008130:	b29a      	uxth	r2, r3
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008136:	e09e      	b.n	8008276 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	f003 0302 	and.w	r3, r3, #2
 8008142:	2b02      	cmp	r3, #2
 8008144:	d134      	bne.n	80081b0 <HAL_SPI_TransmitReceive+0x30a>
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800814a:	b29b      	uxth	r3, r3
 800814c:	2b00      	cmp	r3, #0
 800814e:	d02f      	beq.n	80081b0 <HAL_SPI_TransmitReceive+0x30a>
 8008150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008152:	2b01      	cmp	r3, #1
 8008154:	d12c      	bne.n	80081b0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800815a:	b29b      	uxth	r3, r3
 800815c:	2b01      	cmp	r3, #1
 800815e:	d912      	bls.n	8008186 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008164:	881a      	ldrh	r2, [r3, #0]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008170:	1c9a      	adds	r2, r3, #2
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800817a:	b29b      	uxth	r3, r3
 800817c:	3b02      	subs	r3, #2
 800817e:	b29a      	uxth	r2, r3
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008184:	e012      	b.n	80081ac <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	330c      	adds	r3, #12
 8008190:	7812      	ldrb	r2, [r2, #0]
 8008192:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008198:	1c5a      	adds	r2, r3, #1
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	3b01      	subs	r3, #1
 80081a6:	b29a      	uxth	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80081ac:	2300      	movs	r3, #0
 80081ae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	f003 0301 	and.w	r3, r3, #1
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d148      	bne.n	8008250 <HAL_SPI_TransmitReceive+0x3aa>
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d042      	beq.n	8008250 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d923      	bls.n	800821e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68da      	ldr	r2, [r3, #12]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e0:	b292      	uxth	r2, r2
 80081e2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e8:	1c9a      	adds	r2, r3, #2
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	3b02      	subs	r3, #2
 80081f8:	b29a      	uxth	r2, r3
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008206:	b29b      	uxth	r3, r3
 8008208:	2b01      	cmp	r3, #1
 800820a:	d81f      	bhi.n	800824c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	685a      	ldr	r2, [r3, #4]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800821a:	605a      	str	r2, [r3, #4]
 800821c:	e016      	b.n	800824c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f103 020c 	add.w	r2, r3, #12
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822a:	7812      	ldrb	r2, [r2, #0]
 800822c:	b2d2      	uxtb	r2, r2
 800822e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008234:	1c5a      	adds	r2, r3, #1
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008240:	b29b      	uxth	r3, r3
 8008242:	3b01      	subs	r3, #1
 8008244:	b29a      	uxth	r2, r3
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800824c:	2301      	movs	r3, #1
 800824e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008250:	f7fc f9f6 	bl	8004640 <HAL_GetTick>
 8008254:	4602      	mov	r2, r0
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800825c:	429a      	cmp	r2, r3
 800825e:	d803      	bhi.n	8008268 <HAL_SPI_TransmitReceive+0x3c2>
 8008260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008266:	d102      	bne.n	800826e <HAL_SPI_TransmitReceive+0x3c8>
 8008268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826a:	2b00      	cmp	r3, #0
 800826c:	d103      	bne.n	8008276 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800826e:	2303      	movs	r3, #3
 8008270:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008274:	e01c      	b.n	80082b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800827a:	b29b      	uxth	r3, r3
 800827c:	2b00      	cmp	r3, #0
 800827e:	f47f af5b 	bne.w	8008138 <HAL_SPI_TransmitReceive+0x292>
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008288:	b29b      	uxth	r3, r3
 800828a:	2b00      	cmp	r3, #0
 800828c:	f47f af54 	bne.w	8008138 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008290:	69fa      	ldr	r2, [r7, #28]
 8008292:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008294:	68f8      	ldr	r0, [r7, #12]
 8008296:	f000 f9b3 	bl	8008600 <SPI_EndRxTxTransaction>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d006      	beq.n	80082ae <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2220      	movs	r2, #32
 80082aa:	661a      	str	r2, [r3, #96]	; 0x60
 80082ac:	e000      	b.n	80082b0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80082ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80082c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3728      	adds	r7, #40	; 0x28
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b088      	sub	sp, #32
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	603b      	str	r3, [r7, #0]
 80082d8:	4613      	mov	r3, r2
 80082da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80082dc:	f7fc f9b0 	bl	8004640 <HAL_GetTick>
 80082e0:	4602      	mov	r2, r0
 80082e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e4:	1a9b      	subs	r3, r3, r2
 80082e6:	683a      	ldr	r2, [r7, #0]
 80082e8:	4413      	add	r3, r2
 80082ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80082ec:	f7fc f9a8 	bl	8004640 <HAL_GetTick>
 80082f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80082f2:	4b39      	ldr	r3, [pc, #228]	; (80083d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	015b      	lsls	r3, r3, #5
 80082f8:	0d1b      	lsrs	r3, r3, #20
 80082fa:	69fa      	ldr	r2, [r7, #28]
 80082fc:	fb02 f303 	mul.w	r3, r2, r3
 8008300:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008302:	e054      	b.n	80083ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800830a:	d050      	beq.n	80083ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800830c:	f7fc f998 	bl	8004640 <HAL_GetTick>
 8008310:	4602      	mov	r2, r0
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	1ad3      	subs	r3, r2, r3
 8008316:	69fa      	ldr	r2, [r7, #28]
 8008318:	429a      	cmp	r2, r3
 800831a:	d902      	bls.n	8008322 <SPI_WaitFlagStateUntilTimeout+0x56>
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d13d      	bne.n	800839e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	685a      	ldr	r2, [r3, #4]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008330:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800833a:	d111      	bne.n	8008360 <SPI_WaitFlagStateUntilTimeout+0x94>
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008344:	d004      	beq.n	8008350 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800834e:	d107      	bne.n	8008360 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800835e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008368:	d10f      	bne.n	800838a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008378:	601a      	str	r2, [r3, #0]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008388:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2201      	movs	r2, #1
 800838e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2200      	movs	r2, #0
 8008396:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800839a:	2303      	movs	r3, #3
 800839c:	e017      	b.n	80083ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d101      	bne.n	80083a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80083a4:	2300      	movs	r3, #0
 80083a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	3b01      	subs	r3, #1
 80083ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	689a      	ldr	r2, [r3, #8]
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	4013      	ands	r3, r2
 80083b8:	68ba      	ldr	r2, [r7, #8]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	bf0c      	ite	eq
 80083be:	2301      	moveq	r3, #1
 80083c0:	2300      	movne	r3, #0
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	461a      	mov	r2, r3
 80083c6:	79fb      	ldrb	r3, [r7, #7]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d19b      	bne.n	8008304 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3720      	adds	r7, #32
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	200000c8 	.word	0x200000c8

080083dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b08a      	sub	sp, #40	; 0x28
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	607a      	str	r2, [r7, #4]
 80083e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80083ea:	2300      	movs	r3, #0
 80083ec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80083ee:	f7fc f927 	bl	8004640 <HAL_GetTick>
 80083f2:	4602      	mov	r2, r0
 80083f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f6:	1a9b      	subs	r3, r3, r2
 80083f8:	683a      	ldr	r2, [r7, #0]
 80083fa:	4413      	add	r3, r2
 80083fc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80083fe:	f7fc f91f 	bl	8004640 <HAL_GetTick>
 8008402:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	330c      	adds	r3, #12
 800840a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800840c:	4b3d      	ldr	r3, [pc, #244]	; (8008504 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	4613      	mov	r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	4413      	add	r3, r2
 8008416:	00da      	lsls	r2, r3, #3
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	0d1b      	lsrs	r3, r3, #20
 800841c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800841e:	fb02 f303 	mul.w	r3, r2, r3
 8008422:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008424:	e060      	b.n	80084e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800842c:	d107      	bne.n	800843e <SPI_WaitFifoStateUntilTimeout+0x62>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d104      	bne.n	800843e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	b2db      	uxtb	r3, r3
 800843a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800843c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008444:	d050      	beq.n	80084e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008446:	f7fc f8fb 	bl	8004640 <HAL_GetTick>
 800844a:	4602      	mov	r2, r0
 800844c:	6a3b      	ldr	r3, [r7, #32]
 800844e:	1ad3      	subs	r3, r2, r3
 8008450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008452:	429a      	cmp	r2, r3
 8008454:	d902      	bls.n	800845c <SPI_WaitFifoStateUntilTimeout+0x80>
 8008456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008458:	2b00      	cmp	r3, #0
 800845a:	d13d      	bne.n	80084d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	685a      	ldr	r2, [r3, #4]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800846a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008474:	d111      	bne.n	800849a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800847e:	d004      	beq.n	800848a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008488:	d107      	bne.n	800849a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008498:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800849e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084a2:	d10f      	bne.n	80084c4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084b2:	601a      	str	r2, [r3, #0]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80084d4:	2303      	movs	r3, #3
 80084d6:	e010      	b.n	80084fa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d101      	bne.n	80084e2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80084de:	2300      	movs	r3, #0
 80084e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	3b01      	subs	r3, #1
 80084e6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	689a      	ldr	r2, [r3, #8]
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	4013      	ands	r3, r2
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d196      	bne.n	8008426 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3728      	adds	r7, #40	; 0x28
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	200000c8 	.word	0x200000c8

08008508 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b088      	sub	sp, #32
 800850c:	af02      	add	r7, sp, #8
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800851c:	d111      	bne.n	8008542 <SPI_EndRxTransaction+0x3a>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008526:	d004      	beq.n	8008532 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008530:	d107      	bne.n	8008542 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008540:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800854a:	d112      	bne.n	8008572 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	9300      	str	r3, [sp, #0]
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	2200      	movs	r2, #0
 8008554:	2180      	movs	r1, #128	; 0x80
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	f7ff feb8 	bl	80082cc <SPI_WaitFlagStateUntilTimeout>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d021      	beq.n	80085a6 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008566:	f043 0220 	orr.w	r2, r3, #32
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800856e:	2303      	movs	r3, #3
 8008570:	e03d      	b.n	80085ee <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008572:	4b21      	ldr	r3, [pc, #132]	; (80085f8 <SPI_EndRxTransaction+0xf0>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a21      	ldr	r2, [pc, #132]	; (80085fc <SPI_EndRxTransaction+0xf4>)
 8008578:	fba2 2303 	umull	r2, r3, r2, r3
 800857c:	0d5b      	lsrs	r3, r3, #21
 800857e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008582:	fb02 f303 	mul.w	r3, r2, r3
 8008586:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00a      	beq.n	80085a4 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	3b01      	subs	r3, #1
 8008592:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800859e:	2b80      	cmp	r3, #128	; 0x80
 80085a0:	d0f2      	beq.n	8008588 <SPI_EndRxTransaction+0x80>
 80085a2:	e000      	b.n	80085a6 <SPI_EndRxTransaction+0x9e>
        break;
 80085a4:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085ae:	d11d      	bne.n	80085ec <SPI_EndRxTransaction+0xe4>
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085b8:	d004      	beq.n	80085c4 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085c2:	d113      	bne.n	80085ec <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	9300      	str	r3, [sp, #0]
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f7ff ff03 	bl	80083dc <SPI_WaitFifoStateUntilTimeout>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d007      	beq.n	80085ec <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085e0:	f043 0220 	orr.w	r2, r3, #32
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80085e8:	2303      	movs	r3, #3
 80085ea:	e000      	b.n	80085ee <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3718      	adds	r7, #24
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	200000c8 	.word	0x200000c8
 80085fc:	165e9f81 	.word	0x165e9f81

08008600 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b088      	sub	sp, #32
 8008604:	af02      	add	r7, sp, #8
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	9300      	str	r3, [sp, #0]
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	2200      	movs	r2, #0
 8008614:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f7ff fedf 	bl	80083dc <SPI_WaitFifoStateUntilTimeout>
 800861e:	4603      	mov	r3, r0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d007      	beq.n	8008634 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008628:	f043 0220 	orr.w	r2, r3, #32
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008630:	2303      	movs	r3, #3
 8008632:	e046      	b.n	80086c2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008634:	4b25      	ldr	r3, [pc, #148]	; (80086cc <SPI_EndRxTxTransaction+0xcc>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a25      	ldr	r2, [pc, #148]	; (80086d0 <SPI_EndRxTxTransaction+0xd0>)
 800863a:	fba2 2303 	umull	r2, r3, r2, r3
 800863e:	0d5b      	lsrs	r3, r3, #21
 8008640:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008644:	fb02 f303 	mul.w	r3, r2, r3
 8008648:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008652:	d112      	bne.n	800867a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	9300      	str	r3, [sp, #0]
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	2200      	movs	r2, #0
 800865c:	2180      	movs	r1, #128	; 0x80
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f7ff fe34 	bl	80082cc <SPI_WaitFlagStateUntilTimeout>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d016      	beq.n	8008698 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800866e:	f043 0220 	orr.w	r2, r3, #32
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008676:	2303      	movs	r3, #3
 8008678:	e023      	b.n	80086c2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00a      	beq.n	8008696 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	3b01      	subs	r3, #1
 8008684:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008690:	2b80      	cmp	r3, #128	; 0x80
 8008692:	d0f2      	beq.n	800867a <SPI_EndRxTxTransaction+0x7a>
 8008694:	e000      	b.n	8008698 <SPI_EndRxTxTransaction+0x98>
        break;
 8008696:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	9300      	str	r3, [sp, #0]
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	2200      	movs	r2, #0
 80086a0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f7ff fe99 	bl	80083dc <SPI_WaitFifoStateUntilTimeout>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d007      	beq.n	80086c0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086b4:	f043 0220 	orr.w	r2, r3, #32
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80086bc:	2303      	movs	r3, #3
 80086be:	e000      	b.n	80086c2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3718      	adds	r7, #24
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	200000c8 	.word	0x200000c8
 80086d0:	165e9f81 	.word	0x165e9f81

080086d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d101      	bne.n	80086e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e049      	b.n	800877a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d106      	bne.n	8008700 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f7fb fdb6 	bl	800426c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2202      	movs	r2, #2
 8008704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	3304      	adds	r3, #4
 8008710:	4619      	mov	r1, r3
 8008712:	4610      	mov	r0, r2
 8008714:	f000 fd30 	bl	8009178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2201      	movs	r2, #1
 800873c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2201      	movs	r2, #1
 800874c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008778:	2300      	movs	r3, #0
}
 800877a:	4618      	mov	r0, r3
 800877c:	3708      	adds	r7, #8
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
	...

08008784 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008792:	b2db      	uxtb	r3, r3
 8008794:	2b01      	cmp	r3, #1
 8008796:	d001      	beq.n	800879c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	e054      	b.n	8008846 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2202      	movs	r2, #2
 80087a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	68da      	ldr	r2, [r3, #12]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f042 0201 	orr.w	r2, r2, #1
 80087b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a26      	ldr	r2, [pc, #152]	; (8008854 <HAL_TIM_Base_Start_IT+0xd0>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d022      	beq.n	8008804 <HAL_TIM_Base_Start_IT+0x80>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087c6:	d01d      	beq.n	8008804 <HAL_TIM_Base_Start_IT+0x80>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a22      	ldr	r2, [pc, #136]	; (8008858 <HAL_TIM_Base_Start_IT+0xd4>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d018      	beq.n	8008804 <HAL_TIM_Base_Start_IT+0x80>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a21      	ldr	r2, [pc, #132]	; (800885c <HAL_TIM_Base_Start_IT+0xd8>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d013      	beq.n	8008804 <HAL_TIM_Base_Start_IT+0x80>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a1f      	ldr	r2, [pc, #124]	; (8008860 <HAL_TIM_Base_Start_IT+0xdc>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d00e      	beq.n	8008804 <HAL_TIM_Base_Start_IT+0x80>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a1e      	ldr	r2, [pc, #120]	; (8008864 <HAL_TIM_Base_Start_IT+0xe0>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d009      	beq.n	8008804 <HAL_TIM_Base_Start_IT+0x80>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a1c      	ldr	r2, [pc, #112]	; (8008868 <HAL_TIM_Base_Start_IT+0xe4>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d004      	beq.n	8008804 <HAL_TIM_Base_Start_IT+0x80>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a1b      	ldr	r2, [pc, #108]	; (800886c <HAL_TIM_Base_Start_IT+0xe8>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d115      	bne.n	8008830 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	689a      	ldr	r2, [r3, #8]
 800880a:	4b19      	ldr	r3, [pc, #100]	; (8008870 <HAL_TIM_Base_Start_IT+0xec>)
 800880c:	4013      	ands	r3, r2
 800880e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2b06      	cmp	r3, #6
 8008814:	d015      	beq.n	8008842 <HAL_TIM_Base_Start_IT+0xbe>
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800881c:	d011      	beq.n	8008842 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f042 0201 	orr.w	r2, r2, #1
 800882c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800882e:	e008      	b.n	8008842 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f042 0201 	orr.w	r2, r2, #1
 800883e:	601a      	str	r2, [r3, #0]
 8008840:	e000      	b.n	8008844 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008842:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3714      	adds	r7, #20
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	40010000 	.word	0x40010000
 8008858:	40000400 	.word	0x40000400
 800885c:	40000800 	.word	0x40000800
 8008860:	40000c00 	.word	0x40000c00
 8008864:	40010400 	.word	0x40010400
 8008868:	40014000 	.word	0x40014000
 800886c:	40001800 	.word	0x40001800
 8008870:	00010007 	.word	0x00010007

08008874 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d101      	bne.n	8008886 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008882:	2301      	movs	r3, #1
 8008884:	e049      	b.n	800891a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800888c:	b2db      	uxtb	r3, r3
 800888e:	2b00      	cmp	r3, #0
 8008890:	d106      	bne.n	80088a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2200      	movs	r2, #0
 8008896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 f841 	bl	8008922 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2202      	movs	r2, #2
 80088a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	3304      	adds	r3, #4
 80088b0:	4619      	mov	r1, r3
 80088b2:	4610      	mov	r0, r2
 80088b4:	f000 fc60 	bl	8009178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2201      	movs	r2, #1
 80088ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2201      	movs	r2, #1
 8008914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008918:	2300      	movs	r3, #0
}
 800891a:	4618      	mov	r0, r3
 800891c:	3708      	adds	r7, #8
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008922:	b480      	push	{r7}
 8008924:	b083      	sub	sp, #12
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800892a:	bf00      	nop
 800892c:	370c      	adds	r7, #12
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr
	...

08008938 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d109      	bne.n	800895c <HAL_TIM_PWM_Start+0x24>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800894e:	b2db      	uxtb	r3, r3
 8008950:	2b01      	cmp	r3, #1
 8008952:	bf14      	ite	ne
 8008954:	2301      	movne	r3, #1
 8008956:	2300      	moveq	r3, #0
 8008958:	b2db      	uxtb	r3, r3
 800895a:	e03c      	b.n	80089d6 <HAL_TIM_PWM_Start+0x9e>
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	2b04      	cmp	r3, #4
 8008960:	d109      	bne.n	8008976 <HAL_TIM_PWM_Start+0x3e>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008968:	b2db      	uxtb	r3, r3
 800896a:	2b01      	cmp	r3, #1
 800896c:	bf14      	ite	ne
 800896e:	2301      	movne	r3, #1
 8008970:	2300      	moveq	r3, #0
 8008972:	b2db      	uxtb	r3, r3
 8008974:	e02f      	b.n	80089d6 <HAL_TIM_PWM_Start+0x9e>
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	2b08      	cmp	r3, #8
 800897a:	d109      	bne.n	8008990 <HAL_TIM_PWM_Start+0x58>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008982:	b2db      	uxtb	r3, r3
 8008984:	2b01      	cmp	r3, #1
 8008986:	bf14      	ite	ne
 8008988:	2301      	movne	r3, #1
 800898a:	2300      	moveq	r3, #0
 800898c:	b2db      	uxtb	r3, r3
 800898e:	e022      	b.n	80089d6 <HAL_TIM_PWM_Start+0x9e>
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	2b0c      	cmp	r3, #12
 8008994:	d109      	bne.n	80089aa <HAL_TIM_PWM_Start+0x72>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800899c:	b2db      	uxtb	r3, r3
 800899e:	2b01      	cmp	r3, #1
 80089a0:	bf14      	ite	ne
 80089a2:	2301      	movne	r3, #1
 80089a4:	2300      	moveq	r3, #0
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	e015      	b.n	80089d6 <HAL_TIM_PWM_Start+0x9e>
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	2b10      	cmp	r3, #16
 80089ae:	d109      	bne.n	80089c4 <HAL_TIM_PWM_Start+0x8c>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	bf14      	ite	ne
 80089bc:	2301      	movne	r3, #1
 80089be:	2300      	moveq	r3, #0
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	e008      	b.n	80089d6 <HAL_TIM_PWM_Start+0x9e>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	bf14      	ite	ne
 80089d0:	2301      	movne	r3, #1
 80089d2:	2300      	moveq	r3, #0
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d001      	beq.n	80089de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	e092      	b.n	8008b04 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d104      	bne.n	80089ee <HAL_TIM_PWM_Start+0xb6>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2202      	movs	r2, #2
 80089e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089ec:	e023      	b.n	8008a36 <HAL_TIM_PWM_Start+0xfe>
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	2b04      	cmp	r3, #4
 80089f2:	d104      	bne.n	80089fe <HAL_TIM_PWM_Start+0xc6>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2202      	movs	r2, #2
 80089f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089fc:	e01b      	b.n	8008a36 <HAL_TIM_PWM_Start+0xfe>
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	2b08      	cmp	r3, #8
 8008a02:	d104      	bne.n	8008a0e <HAL_TIM_PWM_Start+0xd6>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2202      	movs	r2, #2
 8008a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a0c:	e013      	b.n	8008a36 <HAL_TIM_PWM_Start+0xfe>
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	2b0c      	cmp	r3, #12
 8008a12:	d104      	bne.n	8008a1e <HAL_TIM_PWM_Start+0xe6>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2202      	movs	r2, #2
 8008a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a1c:	e00b      	b.n	8008a36 <HAL_TIM_PWM_Start+0xfe>
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	2b10      	cmp	r3, #16
 8008a22:	d104      	bne.n	8008a2e <HAL_TIM_PWM_Start+0xf6>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2202      	movs	r2, #2
 8008a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a2c:	e003      	b.n	8008a36 <HAL_TIM_PWM_Start+0xfe>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2202      	movs	r2, #2
 8008a32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	6839      	ldr	r1, [r7, #0]
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f000 ff32 	bl	80098a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a30      	ldr	r2, [pc, #192]	; (8008b0c <HAL_TIM_PWM_Start+0x1d4>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d004      	beq.n	8008a58 <HAL_TIM_PWM_Start+0x120>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a2f      	ldr	r2, [pc, #188]	; (8008b10 <HAL_TIM_PWM_Start+0x1d8>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d101      	bne.n	8008a5c <HAL_TIM_PWM_Start+0x124>
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e000      	b.n	8008a5e <HAL_TIM_PWM_Start+0x126>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d007      	beq.n	8008a72 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a25      	ldr	r2, [pc, #148]	; (8008b0c <HAL_TIM_PWM_Start+0x1d4>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d022      	beq.n	8008ac2 <HAL_TIM_PWM_Start+0x18a>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a84:	d01d      	beq.n	8008ac2 <HAL_TIM_PWM_Start+0x18a>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a22      	ldr	r2, [pc, #136]	; (8008b14 <HAL_TIM_PWM_Start+0x1dc>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d018      	beq.n	8008ac2 <HAL_TIM_PWM_Start+0x18a>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a20      	ldr	r2, [pc, #128]	; (8008b18 <HAL_TIM_PWM_Start+0x1e0>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d013      	beq.n	8008ac2 <HAL_TIM_PWM_Start+0x18a>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a1f      	ldr	r2, [pc, #124]	; (8008b1c <HAL_TIM_PWM_Start+0x1e4>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d00e      	beq.n	8008ac2 <HAL_TIM_PWM_Start+0x18a>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a19      	ldr	r2, [pc, #100]	; (8008b10 <HAL_TIM_PWM_Start+0x1d8>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d009      	beq.n	8008ac2 <HAL_TIM_PWM_Start+0x18a>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a1b      	ldr	r2, [pc, #108]	; (8008b20 <HAL_TIM_PWM_Start+0x1e8>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d004      	beq.n	8008ac2 <HAL_TIM_PWM_Start+0x18a>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a19      	ldr	r2, [pc, #100]	; (8008b24 <HAL_TIM_PWM_Start+0x1ec>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d115      	bne.n	8008aee <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	689a      	ldr	r2, [r3, #8]
 8008ac8:	4b17      	ldr	r3, [pc, #92]	; (8008b28 <HAL_TIM_PWM_Start+0x1f0>)
 8008aca:	4013      	ands	r3, r2
 8008acc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2b06      	cmp	r3, #6
 8008ad2:	d015      	beq.n	8008b00 <HAL_TIM_PWM_Start+0x1c8>
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ada:	d011      	beq.n	8008b00 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f042 0201 	orr.w	r2, r2, #1
 8008aea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aec:	e008      	b.n	8008b00 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f042 0201 	orr.w	r2, r2, #1
 8008afc:	601a      	str	r2, [r3, #0]
 8008afe:	e000      	b.n	8008b02 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b02:	2300      	movs	r3, #0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3710      	adds	r7, #16
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	40010000 	.word	0x40010000
 8008b10:	40010400 	.word	0x40010400
 8008b14:	40000400 	.word	0x40000400
 8008b18:	40000800 	.word	0x40000800
 8008b1c:	40000c00 	.word	0x40000c00
 8008b20:	40014000 	.word	0x40014000
 8008b24:	40001800 	.word	0x40001800
 8008b28:	00010007 	.word	0x00010007

08008b2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	f003 0302 	and.w	r3, r3, #2
 8008b3e:	2b02      	cmp	r3, #2
 8008b40:	d122      	bne.n	8008b88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	f003 0302 	and.w	r3, r3, #2
 8008b4c:	2b02      	cmp	r3, #2
 8008b4e:	d11b      	bne.n	8008b88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f06f 0202 	mvn.w	r2, #2
 8008b58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	699b      	ldr	r3, [r3, #24]
 8008b66:	f003 0303 	and.w	r3, r3, #3
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d003      	beq.n	8008b76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 fae4 	bl	800913c <HAL_TIM_IC_CaptureCallback>
 8008b74:	e005      	b.n	8008b82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fad6 	bl	8009128 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 fae7 	bl	8009150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	691b      	ldr	r3, [r3, #16]
 8008b8e:	f003 0304 	and.w	r3, r3, #4
 8008b92:	2b04      	cmp	r3, #4
 8008b94:	d122      	bne.n	8008bdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	f003 0304 	and.w	r3, r3, #4
 8008ba0:	2b04      	cmp	r3, #4
 8008ba2:	d11b      	bne.n	8008bdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f06f 0204 	mvn.w	r2, #4
 8008bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2202      	movs	r2, #2
 8008bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	699b      	ldr	r3, [r3, #24]
 8008bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d003      	beq.n	8008bca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 faba 	bl	800913c <HAL_TIM_IC_CaptureCallback>
 8008bc8:	e005      	b.n	8008bd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 faac 	bl	8009128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 fabd 	bl	8009150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	691b      	ldr	r3, [r3, #16]
 8008be2:	f003 0308 	and.w	r3, r3, #8
 8008be6:	2b08      	cmp	r3, #8
 8008be8:	d122      	bne.n	8008c30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	f003 0308 	and.w	r3, r3, #8
 8008bf4:	2b08      	cmp	r3, #8
 8008bf6:	d11b      	bne.n	8008c30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f06f 0208 	mvn.w	r2, #8
 8008c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2204      	movs	r2, #4
 8008c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	69db      	ldr	r3, [r3, #28]
 8008c0e:	f003 0303 	and.w	r3, r3, #3
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d003      	beq.n	8008c1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 fa90 	bl	800913c <HAL_TIM_IC_CaptureCallback>
 8008c1c:	e005      	b.n	8008c2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 fa82 	bl	8009128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 fa93 	bl	8009150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	691b      	ldr	r3, [r3, #16]
 8008c36:	f003 0310 	and.w	r3, r3, #16
 8008c3a:	2b10      	cmp	r3, #16
 8008c3c:	d122      	bne.n	8008c84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	68db      	ldr	r3, [r3, #12]
 8008c44:	f003 0310 	and.w	r3, r3, #16
 8008c48:	2b10      	cmp	r3, #16
 8008c4a:	d11b      	bne.n	8008c84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f06f 0210 	mvn.w	r2, #16
 8008c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2208      	movs	r2, #8
 8008c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	69db      	ldr	r3, [r3, #28]
 8008c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d003      	beq.n	8008c72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 fa66 	bl	800913c <HAL_TIM_IC_CaptureCallback>
 8008c70:	e005      	b.n	8008c7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 fa58 	bl	8009128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 fa69 	bl	8009150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	691b      	ldr	r3, [r3, #16]
 8008c8a:	f003 0301 	and.w	r3, r3, #1
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d10e      	bne.n	8008cb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	f003 0301 	and.w	r3, r3, #1
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d107      	bne.n	8008cb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f06f 0201 	mvn.w	r2, #1
 8008ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f7fa fb80 	bl	80033b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cba:	2b80      	cmp	r3, #128	; 0x80
 8008cbc:	d10e      	bne.n	8008cdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cc8:	2b80      	cmp	r3, #128	; 0x80
 8008cca:	d107      	bne.n	8008cdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 fea4 	bl	8009a24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cea:	d10e      	bne.n	8008d0a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cf6:	2b80      	cmp	r3, #128	; 0x80
 8008cf8:	d107      	bne.n	8008d0a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 fe97 	bl	8009a38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d14:	2b40      	cmp	r3, #64	; 0x40
 8008d16:	d10e      	bne.n	8008d36 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d22:	2b40      	cmp	r3, #64	; 0x40
 8008d24:	d107      	bne.n	8008d36 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 fa17 	bl	8009164 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	691b      	ldr	r3, [r3, #16]
 8008d3c:	f003 0320 	and.w	r3, r3, #32
 8008d40:	2b20      	cmp	r3, #32
 8008d42:	d10e      	bne.n	8008d62 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	f003 0320 	and.w	r3, r3, #32
 8008d4e:	2b20      	cmp	r3, #32
 8008d50:	d107      	bne.n	8008d62 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f06f 0220 	mvn.w	r2, #32
 8008d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fe57 	bl	8009a10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d62:	bf00      	nop
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
	...

08008d6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b086      	sub	sp, #24
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d101      	bne.n	8008d8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008d86:	2302      	movs	r3, #2
 8008d88:	e0ff      	b.n	8008f8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2b14      	cmp	r3, #20
 8008d96:	f200 80f0 	bhi.w	8008f7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008d9a:	a201      	add	r2, pc, #4	; (adr r2, 8008da0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da0:	08008df5 	.word	0x08008df5
 8008da4:	08008f7b 	.word	0x08008f7b
 8008da8:	08008f7b 	.word	0x08008f7b
 8008dac:	08008f7b 	.word	0x08008f7b
 8008db0:	08008e35 	.word	0x08008e35
 8008db4:	08008f7b 	.word	0x08008f7b
 8008db8:	08008f7b 	.word	0x08008f7b
 8008dbc:	08008f7b 	.word	0x08008f7b
 8008dc0:	08008e77 	.word	0x08008e77
 8008dc4:	08008f7b 	.word	0x08008f7b
 8008dc8:	08008f7b 	.word	0x08008f7b
 8008dcc:	08008f7b 	.word	0x08008f7b
 8008dd0:	08008eb7 	.word	0x08008eb7
 8008dd4:	08008f7b 	.word	0x08008f7b
 8008dd8:	08008f7b 	.word	0x08008f7b
 8008ddc:	08008f7b 	.word	0x08008f7b
 8008de0:	08008ef9 	.word	0x08008ef9
 8008de4:	08008f7b 	.word	0x08008f7b
 8008de8:	08008f7b 	.word	0x08008f7b
 8008dec:	08008f7b 	.word	0x08008f7b
 8008df0:	08008f39 	.word	0x08008f39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	68b9      	ldr	r1, [r7, #8]
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f000 fa5c 	bl	80092b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	699a      	ldr	r2, [r3, #24]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f042 0208 	orr.w	r2, r2, #8
 8008e0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	699a      	ldr	r2, [r3, #24]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f022 0204 	bic.w	r2, r2, #4
 8008e1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	6999      	ldr	r1, [r3, #24]
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	691a      	ldr	r2, [r3, #16]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	430a      	orrs	r2, r1
 8008e30:	619a      	str	r2, [r3, #24]
      break;
 8008e32:	e0a5      	b.n	8008f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	68b9      	ldr	r1, [r7, #8]
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f000 faae 	bl	800939c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	699a      	ldr	r2, [r3, #24]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	699a      	ldr	r2, [r3, #24]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	6999      	ldr	r1, [r3, #24]
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	021a      	lsls	r2, r3, #8
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	430a      	orrs	r2, r1
 8008e72:	619a      	str	r2, [r3, #24]
      break;
 8008e74:	e084      	b.n	8008f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	68b9      	ldr	r1, [r7, #8]
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f000 fb05 	bl	800948c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	69da      	ldr	r2, [r3, #28]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f042 0208 	orr.w	r2, r2, #8
 8008e90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	69da      	ldr	r2, [r3, #28]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f022 0204 	bic.w	r2, r2, #4
 8008ea0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	69d9      	ldr	r1, [r3, #28]
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	691a      	ldr	r2, [r3, #16]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	430a      	orrs	r2, r1
 8008eb2:	61da      	str	r2, [r3, #28]
      break;
 8008eb4:	e064      	b.n	8008f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	68b9      	ldr	r1, [r7, #8]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f000 fb5b 	bl	8009578 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	69da      	ldr	r2, [r3, #28]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ed0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	69da      	ldr	r2, [r3, #28]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	69d9      	ldr	r1, [r3, #28]
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	691b      	ldr	r3, [r3, #16]
 8008eec:	021a      	lsls	r2, r3, #8
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	430a      	orrs	r2, r1
 8008ef4:	61da      	str	r2, [r3, #28]
      break;
 8008ef6:	e043      	b.n	8008f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	68b9      	ldr	r1, [r7, #8]
 8008efe:	4618      	mov	r0, r3
 8008f00:	f000 fb92 	bl	8009628 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f042 0208 	orr.w	r2, r2, #8
 8008f12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f022 0204 	bic.w	r2, r2, #4
 8008f22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	691a      	ldr	r2, [r3, #16]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	430a      	orrs	r2, r1
 8008f34:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008f36:	e023      	b.n	8008f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68b9      	ldr	r1, [r7, #8]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f000 fbc4 	bl	80096cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	021a      	lsls	r2, r3, #8
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	430a      	orrs	r2, r1
 8008f76:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008f78:	e002      	b.n	8008f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	75fb      	strb	r3, [r7, #23]
      break;
 8008f7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2200      	movs	r2, #0
 8008f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3718      	adds	r7, #24
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop

08008f94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d101      	bne.n	8008fb0 <HAL_TIM_ConfigClockSource+0x1c>
 8008fac:	2302      	movs	r3, #2
 8008fae:	e0b4      	b.n	800911a <HAL_TIM_ConfigClockSource+0x186>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2202      	movs	r2, #2
 8008fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008fc8:	68ba      	ldr	r2, [r7, #8]
 8008fca:	4b56      	ldr	r3, [pc, #344]	; (8009124 <HAL_TIM_ConfigClockSource+0x190>)
 8008fcc:	4013      	ands	r3, r2
 8008fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008fd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	68ba      	ldr	r2, [r7, #8]
 8008fde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fe8:	d03e      	beq.n	8009068 <HAL_TIM_ConfigClockSource+0xd4>
 8008fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fee:	f200 8087 	bhi.w	8009100 <HAL_TIM_ConfigClockSource+0x16c>
 8008ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ff6:	f000 8086 	beq.w	8009106 <HAL_TIM_ConfigClockSource+0x172>
 8008ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ffe:	d87f      	bhi.n	8009100 <HAL_TIM_ConfigClockSource+0x16c>
 8009000:	2b70      	cmp	r3, #112	; 0x70
 8009002:	d01a      	beq.n	800903a <HAL_TIM_ConfigClockSource+0xa6>
 8009004:	2b70      	cmp	r3, #112	; 0x70
 8009006:	d87b      	bhi.n	8009100 <HAL_TIM_ConfigClockSource+0x16c>
 8009008:	2b60      	cmp	r3, #96	; 0x60
 800900a:	d050      	beq.n	80090ae <HAL_TIM_ConfigClockSource+0x11a>
 800900c:	2b60      	cmp	r3, #96	; 0x60
 800900e:	d877      	bhi.n	8009100 <HAL_TIM_ConfigClockSource+0x16c>
 8009010:	2b50      	cmp	r3, #80	; 0x50
 8009012:	d03c      	beq.n	800908e <HAL_TIM_ConfigClockSource+0xfa>
 8009014:	2b50      	cmp	r3, #80	; 0x50
 8009016:	d873      	bhi.n	8009100 <HAL_TIM_ConfigClockSource+0x16c>
 8009018:	2b40      	cmp	r3, #64	; 0x40
 800901a:	d058      	beq.n	80090ce <HAL_TIM_ConfigClockSource+0x13a>
 800901c:	2b40      	cmp	r3, #64	; 0x40
 800901e:	d86f      	bhi.n	8009100 <HAL_TIM_ConfigClockSource+0x16c>
 8009020:	2b30      	cmp	r3, #48	; 0x30
 8009022:	d064      	beq.n	80090ee <HAL_TIM_ConfigClockSource+0x15a>
 8009024:	2b30      	cmp	r3, #48	; 0x30
 8009026:	d86b      	bhi.n	8009100 <HAL_TIM_ConfigClockSource+0x16c>
 8009028:	2b20      	cmp	r3, #32
 800902a:	d060      	beq.n	80090ee <HAL_TIM_ConfigClockSource+0x15a>
 800902c:	2b20      	cmp	r3, #32
 800902e:	d867      	bhi.n	8009100 <HAL_TIM_ConfigClockSource+0x16c>
 8009030:	2b00      	cmp	r3, #0
 8009032:	d05c      	beq.n	80090ee <HAL_TIM_ConfigClockSource+0x15a>
 8009034:	2b10      	cmp	r3, #16
 8009036:	d05a      	beq.n	80090ee <HAL_TIM_ConfigClockSource+0x15a>
 8009038:	e062      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800904a:	f000 fc0d 	bl	8009868 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800905c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	68ba      	ldr	r2, [r7, #8]
 8009064:	609a      	str	r2, [r3, #8]
      break;
 8009066:	e04f      	b.n	8009108 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009078:	f000 fbf6 	bl	8009868 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	689a      	ldr	r2, [r3, #8]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800908a:	609a      	str	r2, [r3, #8]
      break;
 800908c:	e03c      	b.n	8009108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800909a:	461a      	mov	r2, r3
 800909c:	f000 fb6a 	bl	8009774 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2150      	movs	r1, #80	; 0x50
 80090a6:	4618      	mov	r0, r3
 80090a8:	f000 fbc3 	bl	8009832 <TIM_ITRx_SetConfig>
      break;
 80090ac:	e02c      	b.n	8009108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80090ba:	461a      	mov	r2, r3
 80090bc:	f000 fb89 	bl	80097d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2160      	movs	r1, #96	; 0x60
 80090c6:	4618      	mov	r0, r3
 80090c8:	f000 fbb3 	bl	8009832 <TIM_ITRx_SetConfig>
      break;
 80090cc:	e01c      	b.n	8009108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090da:	461a      	mov	r2, r3
 80090dc:	f000 fb4a 	bl	8009774 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2140      	movs	r1, #64	; 0x40
 80090e6:	4618      	mov	r0, r3
 80090e8:	f000 fba3 	bl	8009832 <TIM_ITRx_SetConfig>
      break;
 80090ec:	e00c      	b.n	8009108 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4619      	mov	r1, r3
 80090f8:	4610      	mov	r0, r2
 80090fa:	f000 fb9a 	bl	8009832 <TIM_ITRx_SetConfig>
      break;
 80090fe:	e003      	b.n	8009108 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009100:	2301      	movs	r3, #1
 8009102:	73fb      	strb	r3, [r7, #15]
      break;
 8009104:	e000      	b.n	8009108 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009106:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2201      	movs	r2, #1
 800910c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009118:	7bfb      	ldrb	r3, [r7, #15]
}
 800911a:	4618      	mov	r0, r3
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	fffeff88 	.word	0xfffeff88

08009128 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009130:	bf00      	nop
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009144:	bf00      	nop
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009158:	bf00      	nop
 800915a:	370c      	adds	r7, #12
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800916c:	bf00      	nop
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009178:	b480      	push	{r7}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	4a40      	ldr	r2, [pc, #256]	; (800928c <TIM_Base_SetConfig+0x114>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d013      	beq.n	80091b8 <TIM_Base_SetConfig+0x40>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009196:	d00f      	beq.n	80091b8 <TIM_Base_SetConfig+0x40>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	4a3d      	ldr	r2, [pc, #244]	; (8009290 <TIM_Base_SetConfig+0x118>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d00b      	beq.n	80091b8 <TIM_Base_SetConfig+0x40>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	4a3c      	ldr	r2, [pc, #240]	; (8009294 <TIM_Base_SetConfig+0x11c>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d007      	beq.n	80091b8 <TIM_Base_SetConfig+0x40>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	4a3b      	ldr	r2, [pc, #236]	; (8009298 <TIM_Base_SetConfig+0x120>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d003      	beq.n	80091b8 <TIM_Base_SetConfig+0x40>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	4a3a      	ldr	r2, [pc, #232]	; (800929c <TIM_Base_SetConfig+0x124>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d108      	bne.n	80091ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	68fa      	ldr	r2, [r7, #12]
 80091c6:	4313      	orrs	r3, r2
 80091c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4a2f      	ldr	r2, [pc, #188]	; (800928c <TIM_Base_SetConfig+0x114>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d02b      	beq.n	800922a <TIM_Base_SetConfig+0xb2>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091d8:	d027      	beq.n	800922a <TIM_Base_SetConfig+0xb2>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4a2c      	ldr	r2, [pc, #176]	; (8009290 <TIM_Base_SetConfig+0x118>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d023      	beq.n	800922a <TIM_Base_SetConfig+0xb2>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4a2b      	ldr	r2, [pc, #172]	; (8009294 <TIM_Base_SetConfig+0x11c>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d01f      	beq.n	800922a <TIM_Base_SetConfig+0xb2>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	4a2a      	ldr	r2, [pc, #168]	; (8009298 <TIM_Base_SetConfig+0x120>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d01b      	beq.n	800922a <TIM_Base_SetConfig+0xb2>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4a29      	ldr	r2, [pc, #164]	; (800929c <TIM_Base_SetConfig+0x124>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d017      	beq.n	800922a <TIM_Base_SetConfig+0xb2>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	4a28      	ldr	r2, [pc, #160]	; (80092a0 <TIM_Base_SetConfig+0x128>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d013      	beq.n	800922a <TIM_Base_SetConfig+0xb2>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4a27      	ldr	r2, [pc, #156]	; (80092a4 <TIM_Base_SetConfig+0x12c>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d00f      	beq.n	800922a <TIM_Base_SetConfig+0xb2>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4a26      	ldr	r2, [pc, #152]	; (80092a8 <TIM_Base_SetConfig+0x130>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d00b      	beq.n	800922a <TIM_Base_SetConfig+0xb2>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4a25      	ldr	r2, [pc, #148]	; (80092ac <TIM_Base_SetConfig+0x134>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d007      	beq.n	800922a <TIM_Base_SetConfig+0xb2>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4a24      	ldr	r2, [pc, #144]	; (80092b0 <TIM_Base_SetConfig+0x138>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d003      	beq.n	800922a <TIM_Base_SetConfig+0xb2>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4a23      	ldr	r2, [pc, #140]	; (80092b4 <TIM_Base_SetConfig+0x13c>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d108      	bne.n	800923c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	4313      	orrs	r3, r2
 800923a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	695b      	ldr	r3, [r3, #20]
 8009246:	4313      	orrs	r3, r2
 8009248:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	689a      	ldr	r2, [r3, #8]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a0a      	ldr	r2, [pc, #40]	; (800928c <TIM_Base_SetConfig+0x114>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d003      	beq.n	8009270 <TIM_Base_SetConfig+0xf8>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4a0c      	ldr	r2, [pc, #48]	; (800929c <TIM_Base_SetConfig+0x124>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d103      	bne.n	8009278 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	691a      	ldr	r2, [r3, #16]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2201      	movs	r2, #1
 800927c:	615a      	str	r2, [r3, #20]
}
 800927e:	bf00      	nop
 8009280:	3714      	adds	r7, #20
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop
 800928c:	40010000 	.word	0x40010000
 8009290:	40000400 	.word	0x40000400
 8009294:	40000800 	.word	0x40000800
 8009298:	40000c00 	.word	0x40000c00
 800929c:	40010400 	.word	0x40010400
 80092a0:	40014000 	.word	0x40014000
 80092a4:	40014400 	.word	0x40014400
 80092a8:	40014800 	.word	0x40014800
 80092ac:	40001800 	.word	0x40001800
 80092b0:	40001c00 	.word	0x40001c00
 80092b4:	40002000 	.word	0x40002000

080092b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b087      	sub	sp, #28
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6a1b      	ldr	r3, [r3, #32]
 80092c6:	f023 0201 	bic.w	r2, r3, #1
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6a1b      	ldr	r3, [r3, #32]
 80092d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	699b      	ldr	r3, [r3, #24]
 80092de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80092e0:	68fa      	ldr	r2, [r7, #12]
 80092e2:	4b2b      	ldr	r3, [pc, #172]	; (8009390 <TIM_OC1_SetConfig+0xd8>)
 80092e4:	4013      	ands	r3, r2
 80092e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f023 0303 	bic.w	r3, r3, #3
 80092ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68fa      	ldr	r2, [r7, #12]
 80092f6:	4313      	orrs	r3, r2
 80092f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	f023 0302 	bic.w	r3, r3, #2
 8009300:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	697a      	ldr	r2, [r7, #20]
 8009308:	4313      	orrs	r3, r2
 800930a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	4a21      	ldr	r2, [pc, #132]	; (8009394 <TIM_OC1_SetConfig+0xdc>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d003      	beq.n	800931c <TIM_OC1_SetConfig+0x64>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	4a20      	ldr	r2, [pc, #128]	; (8009398 <TIM_OC1_SetConfig+0xe0>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d10c      	bne.n	8009336 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	f023 0308 	bic.w	r3, r3, #8
 8009322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	697a      	ldr	r2, [r7, #20]
 800932a:	4313      	orrs	r3, r2
 800932c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	f023 0304 	bic.w	r3, r3, #4
 8009334:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	4a16      	ldr	r2, [pc, #88]	; (8009394 <TIM_OC1_SetConfig+0xdc>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d003      	beq.n	8009346 <TIM_OC1_SetConfig+0x8e>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	4a15      	ldr	r2, [pc, #84]	; (8009398 <TIM_OC1_SetConfig+0xe0>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d111      	bne.n	800936a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800934c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009354:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	695b      	ldr	r3, [r3, #20]
 800935a:	693a      	ldr	r2, [r7, #16]
 800935c:	4313      	orrs	r3, r2
 800935e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	699b      	ldr	r3, [r3, #24]
 8009364:	693a      	ldr	r2, [r7, #16]
 8009366:	4313      	orrs	r3, r2
 8009368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	693a      	ldr	r2, [r7, #16]
 800936e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	68fa      	ldr	r2, [r7, #12]
 8009374:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	685a      	ldr	r2, [r3, #4]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	697a      	ldr	r2, [r7, #20]
 8009382:	621a      	str	r2, [r3, #32]
}
 8009384:	bf00      	nop
 8009386:	371c      	adds	r7, #28
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr
 8009390:	fffeff8f 	.word	0xfffeff8f
 8009394:	40010000 	.word	0x40010000
 8009398:	40010400 	.word	0x40010400

0800939c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800939c:	b480      	push	{r7}
 800939e:	b087      	sub	sp, #28
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6a1b      	ldr	r3, [r3, #32]
 80093aa:	f023 0210 	bic.w	r2, r3, #16
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a1b      	ldr	r3, [r3, #32]
 80093b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	699b      	ldr	r3, [r3, #24]
 80093c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80093c4:	68fa      	ldr	r2, [r7, #12]
 80093c6:	4b2e      	ldr	r3, [pc, #184]	; (8009480 <TIM_OC2_SetConfig+0xe4>)
 80093c8:	4013      	ands	r3, r2
 80093ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	021b      	lsls	r3, r3, #8
 80093da:	68fa      	ldr	r2, [r7, #12]
 80093dc:	4313      	orrs	r3, r2
 80093de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	f023 0320 	bic.w	r3, r3, #32
 80093e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	011b      	lsls	r3, r3, #4
 80093ee:	697a      	ldr	r2, [r7, #20]
 80093f0:	4313      	orrs	r3, r2
 80093f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	4a23      	ldr	r2, [pc, #140]	; (8009484 <TIM_OC2_SetConfig+0xe8>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d003      	beq.n	8009404 <TIM_OC2_SetConfig+0x68>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4a22      	ldr	r2, [pc, #136]	; (8009488 <TIM_OC2_SetConfig+0xec>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d10d      	bne.n	8009420 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800940a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	011b      	lsls	r3, r3, #4
 8009412:	697a      	ldr	r2, [r7, #20]
 8009414:	4313      	orrs	r3, r2
 8009416:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800941e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4a18      	ldr	r2, [pc, #96]	; (8009484 <TIM_OC2_SetConfig+0xe8>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d003      	beq.n	8009430 <TIM_OC2_SetConfig+0x94>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4a17      	ldr	r2, [pc, #92]	; (8009488 <TIM_OC2_SetConfig+0xec>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d113      	bne.n	8009458 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009436:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800943e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	695b      	ldr	r3, [r3, #20]
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	693a      	ldr	r2, [r7, #16]
 8009448:	4313      	orrs	r3, r2
 800944a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	699b      	ldr	r3, [r3, #24]
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	693a      	ldr	r2, [r7, #16]
 8009454:	4313      	orrs	r3, r2
 8009456:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	693a      	ldr	r2, [r7, #16]
 800945c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	68fa      	ldr	r2, [r7, #12]
 8009462:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	685a      	ldr	r2, [r3, #4]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	697a      	ldr	r2, [r7, #20]
 8009470:	621a      	str	r2, [r3, #32]
}
 8009472:	bf00      	nop
 8009474:	371c      	adds	r7, #28
 8009476:	46bd      	mov	sp, r7
 8009478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947c:	4770      	bx	lr
 800947e:	bf00      	nop
 8009480:	feff8fff 	.word	0xfeff8fff
 8009484:	40010000 	.word	0x40010000
 8009488:	40010400 	.word	0x40010400

0800948c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800948c:	b480      	push	{r7}
 800948e:	b087      	sub	sp, #28
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6a1b      	ldr	r3, [r3, #32]
 800949a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6a1b      	ldr	r3, [r3, #32]
 80094a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	69db      	ldr	r3, [r3, #28]
 80094b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80094b4:	68fa      	ldr	r2, [r7, #12]
 80094b6:	4b2d      	ldr	r3, [pc, #180]	; (800956c <TIM_OC3_SetConfig+0xe0>)
 80094b8:	4013      	ands	r3, r2
 80094ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f023 0303 	bic.w	r3, r3, #3
 80094c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	68fa      	ldr	r2, [r7, #12]
 80094ca:	4313      	orrs	r3, r2
 80094cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80094d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	021b      	lsls	r3, r3, #8
 80094dc:	697a      	ldr	r2, [r7, #20]
 80094de:	4313      	orrs	r3, r2
 80094e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4a22      	ldr	r2, [pc, #136]	; (8009570 <TIM_OC3_SetConfig+0xe4>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d003      	beq.n	80094f2 <TIM_OC3_SetConfig+0x66>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4a21      	ldr	r2, [pc, #132]	; (8009574 <TIM_OC3_SetConfig+0xe8>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d10d      	bne.n	800950e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80094f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	68db      	ldr	r3, [r3, #12]
 80094fe:	021b      	lsls	r3, r3, #8
 8009500:	697a      	ldr	r2, [r7, #20]
 8009502:	4313      	orrs	r3, r2
 8009504:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800950c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	4a17      	ldr	r2, [pc, #92]	; (8009570 <TIM_OC3_SetConfig+0xe4>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d003      	beq.n	800951e <TIM_OC3_SetConfig+0x92>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	4a16      	ldr	r2, [pc, #88]	; (8009574 <TIM_OC3_SetConfig+0xe8>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d113      	bne.n	8009546 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009524:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800952c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	695b      	ldr	r3, [r3, #20]
 8009532:	011b      	lsls	r3, r3, #4
 8009534:	693a      	ldr	r2, [r7, #16]
 8009536:	4313      	orrs	r3, r2
 8009538:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	699b      	ldr	r3, [r3, #24]
 800953e:	011b      	lsls	r3, r3, #4
 8009540:	693a      	ldr	r2, [r7, #16]
 8009542:	4313      	orrs	r3, r2
 8009544:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	693a      	ldr	r2, [r7, #16]
 800954a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	68fa      	ldr	r2, [r7, #12]
 8009550:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	685a      	ldr	r2, [r3, #4]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	697a      	ldr	r2, [r7, #20]
 800955e:	621a      	str	r2, [r3, #32]
}
 8009560:	bf00      	nop
 8009562:	371c      	adds	r7, #28
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr
 800956c:	fffeff8f 	.word	0xfffeff8f
 8009570:	40010000 	.word	0x40010000
 8009574:	40010400 	.word	0x40010400

08009578 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009578:	b480      	push	{r7}
 800957a:	b087      	sub	sp, #28
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6a1b      	ldr	r3, [r3, #32]
 8009586:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6a1b      	ldr	r3, [r3, #32]
 8009592:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	69db      	ldr	r3, [r3, #28]
 800959e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	4b1e      	ldr	r3, [pc, #120]	; (800961c <TIM_OC4_SetConfig+0xa4>)
 80095a4:	4013      	ands	r3, r2
 80095a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	021b      	lsls	r3, r3, #8
 80095b6:	68fa      	ldr	r2, [r7, #12]
 80095b8:	4313      	orrs	r3, r2
 80095ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80095c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	031b      	lsls	r3, r3, #12
 80095ca:	693a      	ldr	r2, [r7, #16]
 80095cc:	4313      	orrs	r3, r2
 80095ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4a13      	ldr	r2, [pc, #76]	; (8009620 <TIM_OC4_SetConfig+0xa8>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d003      	beq.n	80095e0 <TIM_OC4_SetConfig+0x68>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	4a12      	ldr	r2, [pc, #72]	; (8009624 <TIM_OC4_SetConfig+0xac>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d109      	bne.n	80095f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80095e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	695b      	ldr	r3, [r3, #20]
 80095ec:	019b      	lsls	r3, r3, #6
 80095ee:	697a      	ldr	r2, [r7, #20]
 80095f0:	4313      	orrs	r3, r2
 80095f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	697a      	ldr	r2, [r7, #20]
 80095f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	685a      	ldr	r2, [r3, #4]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	693a      	ldr	r2, [r7, #16]
 800960c:	621a      	str	r2, [r3, #32]
}
 800960e:	bf00      	nop
 8009610:	371c      	adds	r7, #28
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr
 800961a:	bf00      	nop
 800961c:	feff8fff 	.word	0xfeff8fff
 8009620:	40010000 	.word	0x40010000
 8009624:	40010400 	.word	0x40010400

08009628 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009628:	b480      	push	{r7}
 800962a:	b087      	sub	sp, #28
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6a1b      	ldr	r3, [r3, #32]
 8009636:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6a1b      	ldr	r3, [r3, #32]
 8009642:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800964e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009650:	68fa      	ldr	r2, [r7, #12]
 8009652:	4b1b      	ldr	r3, [pc, #108]	; (80096c0 <TIM_OC5_SetConfig+0x98>)
 8009654:	4013      	ands	r3, r2
 8009656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	4313      	orrs	r3, r2
 8009660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009668:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	689b      	ldr	r3, [r3, #8]
 800966e:	041b      	lsls	r3, r3, #16
 8009670:	693a      	ldr	r2, [r7, #16]
 8009672:	4313      	orrs	r3, r2
 8009674:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	4a12      	ldr	r2, [pc, #72]	; (80096c4 <TIM_OC5_SetConfig+0x9c>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d003      	beq.n	8009686 <TIM_OC5_SetConfig+0x5e>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4a11      	ldr	r2, [pc, #68]	; (80096c8 <TIM_OC5_SetConfig+0xa0>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d109      	bne.n	800969a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800968c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	695b      	ldr	r3, [r3, #20]
 8009692:	021b      	lsls	r3, r3, #8
 8009694:	697a      	ldr	r2, [r7, #20]
 8009696:	4313      	orrs	r3, r2
 8009698:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	697a      	ldr	r2, [r7, #20]
 800969e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	68fa      	ldr	r2, [r7, #12]
 80096a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	685a      	ldr	r2, [r3, #4]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	693a      	ldr	r2, [r7, #16]
 80096b2:	621a      	str	r2, [r3, #32]
}
 80096b4:	bf00      	nop
 80096b6:	371c      	adds	r7, #28
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr
 80096c0:	fffeff8f 	.word	0xfffeff8f
 80096c4:	40010000 	.word	0x40010000
 80096c8:	40010400 	.word	0x40010400

080096cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b087      	sub	sp, #28
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a1b      	ldr	r3, [r3, #32]
 80096da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a1b      	ldr	r3, [r3, #32]
 80096e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80096f4:	68fa      	ldr	r2, [r7, #12]
 80096f6:	4b1c      	ldr	r3, [pc, #112]	; (8009768 <TIM_OC6_SetConfig+0x9c>)
 80096f8:	4013      	ands	r3, r2
 80096fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	021b      	lsls	r3, r3, #8
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	4313      	orrs	r3, r2
 8009706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800970e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	051b      	lsls	r3, r3, #20
 8009716:	693a      	ldr	r2, [r7, #16]
 8009718:	4313      	orrs	r3, r2
 800971a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	4a13      	ldr	r2, [pc, #76]	; (800976c <TIM_OC6_SetConfig+0xa0>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d003      	beq.n	800972c <TIM_OC6_SetConfig+0x60>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	4a12      	ldr	r2, [pc, #72]	; (8009770 <TIM_OC6_SetConfig+0xa4>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d109      	bne.n	8009740 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009732:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	695b      	ldr	r3, [r3, #20]
 8009738:	029b      	lsls	r3, r3, #10
 800973a:	697a      	ldr	r2, [r7, #20]
 800973c:	4313      	orrs	r3, r2
 800973e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	697a      	ldr	r2, [r7, #20]
 8009744:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	68fa      	ldr	r2, [r7, #12]
 800974a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	685a      	ldr	r2, [r3, #4]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	693a      	ldr	r2, [r7, #16]
 8009758:	621a      	str	r2, [r3, #32]
}
 800975a:	bf00      	nop
 800975c:	371c      	adds	r7, #28
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop
 8009768:	feff8fff 	.word	0xfeff8fff
 800976c:	40010000 	.word	0x40010000
 8009770:	40010400 	.word	0x40010400

08009774 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009774:	b480      	push	{r7}
 8009776:	b087      	sub	sp, #28
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6a1b      	ldr	r3, [r3, #32]
 8009784:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6a1b      	ldr	r3, [r3, #32]
 800978a:	f023 0201 	bic.w	r2, r3, #1
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	699b      	ldr	r3, [r3, #24]
 8009796:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800979e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	011b      	lsls	r3, r3, #4
 80097a4:	693a      	ldr	r2, [r7, #16]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	f023 030a 	bic.w	r3, r3, #10
 80097b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80097b2:	697a      	ldr	r2, [r7, #20]
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	693a      	ldr	r2, [r7, #16]
 80097be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	697a      	ldr	r2, [r7, #20]
 80097c4:	621a      	str	r2, [r3, #32]
}
 80097c6:	bf00      	nop
 80097c8:	371c      	adds	r7, #28
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr

080097d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097d2:	b480      	push	{r7}
 80097d4:	b087      	sub	sp, #28
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	60f8      	str	r0, [r7, #12]
 80097da:	60b9      	str	r1, [r7, #8]
 80097dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	6a1b      	ldr	r3, [r3, #32]
 80097e2:	f023 0210 	bic.w	r2, r3, #16
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	699b      	ldr	r3, [r3, #24]
 80097ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6a1b      	ldr	r3, [r3, #32]
 80097f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80097fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	031b      	lsls	r3, r3, #12
 8009802:	697a      	ldr	r2, [r7, #20]
 8009804:	4313      	orrs	r3, r2
 8009806:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800980e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	011b      	lsls	r3, r3, #4
 8009814:	693a      	ldr	r2, [r7, #16]
 8009816:	4313      	orrs	r3, r2
 8009818:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	697a      	ldr	r2, [r7, #20]
 800981e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	693a      	ldr	r2, [r7, #16]
 8009824:	621a      	str	r2, [r3, #32]
}
 8009826:	bf00      	nop
 8009828:	371c      	adds	r7, #28
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr

08009832 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009832:	b480      	push	{r7}
 8009834:	b085      	sub	sp, #20
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
 800983a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009848:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800984a:	683a      	ldr	r2, [r7, #0]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	4313      	orrs	r3, r2
 8009850:	f043 0307 	orr.w	r3, r3, #7
 8009854:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	68fa      	ldr	r2, [r7, #12]
 800985a:	609a      	str	r2, [r3, #8]
}
 800985c:	bf00      	nop
 800985e:	3714      	adds	r7, #20
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009868:	b480      	push	{r7}
 800986a:	b087      	sub	sp, #28
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	607a      	str	r2, [r7, #4]
 8009874:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009882:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	021a      	lsls	r2, r3, #8
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	431a      	orrs	r2, r3
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	4313      	orrs	r3, r2
 8009890:	697a      	ldr	r2, [r7, #20]
 8009892:	4313      	orrs	r3, r2
 8009894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	697a      	ldr	r2, [r7, #20]
 800989a:	609a      	str	r2, [r3, #8]
}
 800989c:	bf00      	nop
 800989e:	371c      	adds	r7, #28
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr

080098a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b087      	sub	sp, #28
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	60b9      	str	r1, [r7, #8]
 80098b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	f003 031f 	and.w	r3, r3, #31
 80098ba:	2201      	movs	r2, #1
 80098bc:	fa02 f303 	lsl.w	r3, r2, r3
 80098c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	6a1a      	ldr	r2, [r3, #32]
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	43db      	mvns	r3, r3
 80098ca:	401a      	ands	r2, r3
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6a1a      	ldr	r2, [r3, #32]
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	f003 031f 	and.w	r3, r3, #31
 80098da:	6879      	ldr	r1, [r7, #4]
 80098dc:	fa01 f303 	lsl.w	r3, r1, r3
 80098e0:	431a      	orrs	r2, r3
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	621a      	str	r2, [r3, #32]
}
 80098e6:	bf00      	nop
 80098e8:	371c      	adds	r7, #28
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr
	...

080098f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b085      	sub	sp, #20
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009904:	2b01      	cmp	r3, #1
 8009906:	d101      	bne.n	800990c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009908:	2302      	movs	r3, #2
 800990a:	e06d      	b.n	80099e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2201      	movs	r2, #1
 8009910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2202      	movs	r2, #2
 8009918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a30      	ldr	r2, [pc, #192]	; (80099f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d004      	beq.n	8009940 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a2f      	ldr	r2, [pc, #188]	; (80099f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d108      	bne.n	8009952 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009946:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	4313      	orrs	r3, r2
 8009950:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009958:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	4313      	orrs	r3, r2
 8009962:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	68fa      	ldr	r2, [r7, #12]
 800996a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a20      	ldr	r2, [pc, #128]	; (80099f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d022      	beq.n	80099bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800997e:	d01d      	beq.n	80099bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a1d      	ldr	r2, [pc, #116]	; (80099fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d018      	beq.n	80099bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a1c      	ldr	r2, [pc, #112]	; (8009a00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d013      	beq.n	80099bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a1a      	ldr	r2, [pc, #104]	; (8009a04 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d00e      	beq.n	80099bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a15      	ldr	r2, [pc, #84]	; (80099f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d009      	beq.n	80099bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a16      	ldr	r2, [pc, #88]	; (8009a08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d004      	beq.n	80099bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a15      	ldr	r2, [pc, #84]	; (8009a0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d10c      	bne.n	80099d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	68ba      	ldr	r2, [r7, #8]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	68ba      	ldr	r2, [r7, #8]
 80099d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2201      	movs	r2, #1
 80099da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2200      	movs	r2, #0
 80099e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3714      	adds	r7, #20
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr
 80099f4:	40010000 	.word	0x40010000
 80099f8:	40010400 	.word	0x40010400
 80099fc:	40000400 	.word	0x40000400
 8009a00:	40000800 	.word	0x40000800
 8009a04:	40000c00 	.word	0x40000c00
 8009a08:	40014000 	.word	0x40014000
 8009a0c:	40001800 	.word	0x40001800

08009a10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a18:	bf00      	nop
 8009a1a:	370c      	adds	r7, #12
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr

08009a24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009a2c:	bf00      	nop
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009a40:	bf00      	nop
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d101      	bne.n	8009a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e040      	b.n	8009ae0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d106      	bne.n	8009a74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f7fa fd04 	bl	800447c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2224      	movs	r2, #36	; 0x24
 8009a78:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f022 0201 	bic.w	r2, r2, #1
 8009a88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 fbe6 	bl	800a25c <UART_SetConfig>
 8009a90:	4603      	mov	r3, r0
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d101      	bne.n	8009a9a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	e022      	b.n	8009ae0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d002      	beq.n	8009aa8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 fe3e 	bl	800a724 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	685a      	ldr	r2, [r3, #4]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009ab6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	689a      	ldr	r2, [r3, #8]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009ac6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f042 0201 	orr.w	r2, r2, #1
 8009ad6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 fec5 	bl	800a868 <UART_CheckIdleState>
 8009ade:	4603      	mov	r3, r0
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3708      	adds	r7, #8
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b08a      	sub	sp, #40	; 0x28
 8009aec:	af02      	add	r7, sp, #8
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	60b9      	str	r1, [r7, #8]
 8009af2:	603b      	str	r3, [r7, #0]
 8009af4:	4613      	mov	r3, r2
 8009af6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009afc:	2b20      	cmp	r3, #32
 8009afe:	d171      	bne.n	8009be4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d002      	beq.n	8009b0c <HAL_UART_Transmit+0x24>
 8009b06:	88fb      	ldrh	r3, [r7, #6]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d101      	bne.n	8009b10 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	e06a      	b.n	8009be6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2200      	movs	r2, #0
 8009b14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2221      	movs	r2, #33	; 0x21
 8009b1c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009b1e:	f7fa fd8f 	bl	8004640 <HAL_GetTick>
 8009b22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	88fa      	ldrh	r2, [r7, #6]
 8009b28:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	88fa      	ldrh	r2, [r7, #6]
 8009b30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b3c:	d108      	bne.n	8009b50 <HAL_UART_Transmit+0x68>
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	691b      	ldr	r3, [r3, #16]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d104      	bne.n	8009b50 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009b46:	2300      	movs	r3, #0
 8009b48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	61bb      	str	r3, [r7, #24]
 8009b4e:	e003      	b.n	8009b58 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b54:	2300      	movs	r3, #0
 8009b56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009b58:	e02c      	b.n	8009bb4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	9300      	str	r3, [sp, #0]
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	2200      	movs	r2, #0
 8009b62:	2180      	movs	r1, #128	; 0x80
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f000 feb6 	bl	800a8d6 <UART_WaitOnFlagUntilTimeout>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d001      	beq.n	8009b74 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8009b70:	2303      	movs	r3, #3
 8009b72:	e038      	b.n	8009be6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8009b74:	69fb      	ldr	r3, [r7, #28]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d10b      	bne.n	8009b92 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009b7a:	69bb      	ldr	r3, [r7, #24]
 8009b7c:	881b      	ldrh	r3, [r3, #0]
 8009b7e:	461a      	mov	r2, r3
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b88:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	3302      	adds	r3, #2
 8009b8e:	61bb      	str	r3, [r7, #24]
 8009b90:	e007      	b.n	8009ba2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	781a      	ldrb	r2, [r3, #0]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	3b01      	subs	r3, #1
 8009bac:	b29a      	uxth	r2, r3
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d1cc      	bne.n	8009b5a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	9300      	str	r3, [sp, #0]
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	2140      	movs	r1, #64	; 0x40
 8009bca:	68f8      	ldr	r0, [r7, #12]
 8009bcc:	f000 fe83 	bl	800a8d6 <UART_WaitOnFlagUntilTimeout>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d001      	beq.n	8009bda <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8009bd6:	2303      	movs	r3, #3
 8009bd8:	e005      	b.n	8009be6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2220      	movs	r2, #32
 8009bde:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009be0:	2300      	movs	r3, #0
 8009be2:	e000      	b.n	8009be6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8009be4:	2302      	movs	r3, #2
  }
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3720      	adds	r7, #32
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b08a      	sub	sp, #40	; 0x28
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	60f8      	str	r0, [r7, #12]
 8009bf6:	60b9      	str	r1, [r7, #8]
 8009bf8:	4613      	mov	r3, r2
 8009bfa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c02:	2b20      	cmp	r3, #32
 8009c04:	d132      	bne.n	8009c6c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d002      	beq.n	8009c12 <HAL_UART_Receive_IT+0x24>
 8009c0c:	88fb      	ldrh	r3, [r7, #6]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d101      	bne.n	8009c16 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	e02b      	b.n	8009c6e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d018      	beq.n	8009c5c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	e853 3f00 	ldrex	r3, [r3]
 8009c36:	613b      	str	r3, [r7, #16]
   return(result);
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	461a      	mov	r2, r3
 8009c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c48:	623b      	str	r3, [r7, #32]
 8009c4a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c4c:	69f9      	ldr	r1, [r7, #28]
 8009c4e:	6a3a      	ldr	r2, [r7, #32]
 8009c50:	e841 2300 	strex	r3, r2, [r1]
 8009c54:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d1e6      	bne.n	8009c2a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009c5c:	88fb      	ldrh	r3, [r7, #6]
 8009c5e:	461a      	mov	r2, r3
 8009c60:	68b9      	ldr	r1, [r7, #8]
 8009c62:	68f8      	ldr	r0, [r7, #12]
 8009c64:	f000 fefe 	bl	800aa64 <UART_Start_Receive_IT>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	e000      	b.n	8009c6e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8009c6c:	2302      	movs	r3, #2
  }
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3728      	adds	r7, #40	; 0x28
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
	...

08009c78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b0ba      	sub	sp, #232	; 0xe8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	69db      	ldr	r3, [r3, #28]
 8009c86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	689b      	ldr	r3, [r3, #8]
 8009c9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009c9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009ca2:	f640 030f 	movw	r3, #2063	; 0x80f
 8009ca6:	4013      	ands	r3, r2
 8009ca8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009cac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d115      	bne.n	8009ce0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cb8:	f003 0320 	and.w	r3, r3, #32
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d00f      	beq.n	8009ce0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cc4:	f003 0320 	and.w	r3, r3, #32
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d009      	beq.n	8009ce0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	f000 8297 	beq.w	800a204 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	4798      	blx	r3
      }
      return;
 8009cde:	e291      	b.n	800a204 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009ce0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	f000 8117 	beq.w	8009f18 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009cea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009cee:	f003 0301 	and.w	r3, r3, #1
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d106      	bne.n	8009d04 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009cf6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009cfa:	4b85      	ldr	r3, [pc, #532]	; (8009f10 <HAL_UART_IRQHandler+0x298>)
 8009cfc:	4013      	ands	r3, r2
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	f000 810a 	beq.w	8009f18 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d08:	f003 0301 	and.w	r3, r3, #1
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d011      	beq.n	8009d34 <HAL_UART_IRQHandler+0xbc>
 8009d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d00b      	beq.n	8009d34 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	2201      	movs	r2, #1
 8009d22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d2a:	f043 0201 	orr.w	r2, r3, #1
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d38:	f003 0302 	and.w	r3, r3, #2
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d011      	beq.n	8009d64 <HAL_UART_IRQHandler+0xec>
 8009d40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d44:	f003 0301 	and.w	r3, r3, #1
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d00b      	beq.n	8009d64 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	2202      	movs	r2, #2
 8009d52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d5a:	f043 0204 	orr.w	r2, r3, #4
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d68:	f003 0304 	and.w	r3, r3, #4
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d011      	beq.n	8009d94 <HAL_UART_IRQHandler+0x11c>
 8009d70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d74:	f003 0301 	and.w	r3, r3, #1
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d00b      	beq.n	8009d94 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	2204      	movs	r2, #4
 8009d82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d8a:	f043 0202 	orr.w	r2, r3, #2
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d98:	f003 0308 	and.w	r3, r3, #8
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d017      	beq.n	8009dd0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009da4:	f003 0320 	and.w	r3, r3, #32
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d105      	bne.n	8009db8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009dac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009db0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d00b      	beq.n	8009dd0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	2208      	movs	r2, #8
 8009dbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009dc6:	f043 0208 	orr.w	r2, r3, #8
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d012      	beq.n	8009e02 <HAL_UART_IRQHandler+0x18a>
 8009ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009de0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d00c      	beq.n	8009e02 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009df0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009df8:	f043 0220 	orr.w	r2, r3, #32
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	f000 81fd 	beq.w	800a208 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e12:	f003 0320 	and.w	r3, r3, #32
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00d      	beq.n	8009e36 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e1e:	f003 0320 	and.w	r3, r3, #32
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d007      	beq.n	8009e36 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d003      	beq.n	8009e36 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	689b      	ldr	r3, [r3, #8]
 8009e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e4a:	2b40      	cmp	r3, #64	; 0x40
 8009e4c:	d005      	beq.n	8009e5a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009e4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009e52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d04f      	beq.n	8009efa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 fec8 	bl	800abf0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e6a:	2b40      	cmp	r3, #64	; 0x40
 8009e6c:	d141      	bne.n	8009ef2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	3308      	adds	r3, #8
 8009e74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009e7c:	e853 3f00 	ldrex	r3, [r3]
 8009e80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009e84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009e88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	3308      	adds	r3, #8
 8009e96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009e9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009e9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009ea6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009eaa:	e841 2300 	strex	r3, r2, [r1]
 8009eae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009eb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d1d9      	bne.n	8009e6e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d013      	beq.n	8009eea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ec6:	4a13      	ldr	r2, [pc, #76]	; (8009f14 <HAL_UART_IRQHandler+0x29c>)
 8009ec8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7fb fb54 	bl	800557c <HAL_DMA_Abort_IT>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d017      	beq.n	8009f0a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009ee4:	4610      	mov	r0, r2
 8009ee6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ee8:	e00f      	b.n	8009f0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 f9a0 	bl	800a230 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ef0:	e00b      	b.n	8009f0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 f99c 	bl	800a230 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ef8:	e007      	b.n	8009f0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 f998 	bl	800a230 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8009f08:	e17e      	b.n	800a208 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f0a:	bf00      	nop
    return;
 8009f0c:	e17c      	b.n	800a208 <HAL_UART_IRQHandler+0x590>
 8009f0e:	bf00      	nop
 8009f10:	04000120 	.word	0x04000120
 8009f14:	0800acb9 	.word	0x0800acb9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	f040 814c 	bne.w	800a1ba <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f26:	f003 0310 	and.w	r3, r3, #16
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	f000 8145 	beq.w	800a1ba <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f34:	f003 0310 	and.w	r3, r3, #16
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	f000 813e 	beq.w	800a1ba <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2210      	movs	r2, #16
 8009f44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f50:	2b40      	cmp	r3, #64	; 0x40
 8009f52:	f040 80b6 	bne.w	800a0c2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009f62:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	f000 8150 	beq.w	800a20c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009f72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009f76:	429a      	cmp	r2, r3
 8009f78:	f080 8148 	bcs.w	800a20c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009f82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f8a:	69db      	ldr	r3, [r3, #28]
 8009f8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f90:	f000 8086 	beq.w	800a0a0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009fa0:	e853 3f00 	ldrex	r3, [r3]
 8009fa4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009fa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009fac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	461a      	mov	r2, r3
 8009fba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009fbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009fc2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009fca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009fce:	e841 2300 	strex	r3, r2, [r1]
 8009fd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009fd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d1da      	bne.n	8009f94 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	3308      	adds	r3, #8
 8009fe4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009fe8:	e853 3f00 	ldrex	r3, [r3]
 8009fec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009fee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ff0:	f023 0301 	bic.w	r3, r3, #1
 8009ff4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	3308      	adds	r3, #8
 8009ffe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a002:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a006:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a008:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a00a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a00e:	e841 2300 	strex	r3, r2, [r1]
 800a012:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a014:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a016:	2b00      	cmp	r3, #0
 800a018:	d1e1      	bne.n	8009fde <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	3308      	adds	r3, #8
 800a020:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a022:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a024:	e853 3f00 	ldrex	r3, [r3]
 800a028:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a02a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a02c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a030:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	3308      	adds	r3, #8
 800a03a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a03e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a040:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a042:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a044:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a046:	e841 2300 	strex	r3, r2, [r1]
 800a04a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a04c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d1e3      	bne.n	800a01a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2220      	movs	r2, #32
 800a056:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2200      	movs	r2, #0
 800a05e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a068:	e853 3f00 	ldrex	r3, [r3]
 800a06c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a06e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a070:	f023 0310 	bic.w	r3, r3, #16
 800a074:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	461a      	mov	r2, r3
 800a07e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a082:	65bb      	str	r3, [r7, #88]	; 0x58
 800a084:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a086:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a088:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a08a:	e841 2300 	strex	r3, r2, [r1]
 800a08e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a092:	2b00      	cmp	r3, #0
 800a094:	d1e4      	bne.n	800a060 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7fb f9fe 	bl	800549c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2202      	movs	r2, #2
 800a0a4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	1ad3      	subs	r3, r2, r3
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 f8c2 	bl	800a244 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a0c0:	e0a4      	b.n	800a20c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	1ad3      	subs	r3, r2, r3
 800a0d2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	f000 8096 	beq.w	800a210 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800a0e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	f000 8091 	beq.w	800a210 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f6:	e853 3f00 	ldrex	r3, [r3]
 800a0fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a0fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a102:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	461a      	mov	r2, r3
 800a10c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a110:	647b      	str	r3, [r7, #68]	; 0x44
 800a112:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a114:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a116:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a118:	e841 2300 	strex	r3, r2, [r1]
 800a11c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a11e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a120:	2b00      	cmp	r3, #0
 800a122:	d1e4      	bne.n	800a0ee <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	3308      	adds	r3, #8
 800a12a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12e:	e853 3f00 	ldrex	r3, [r3]
 800a132:	623b      	str	r3, [r7, #32]
   return(result);
 800a134:	6a3b      	ldr	r3, [r7, #32]
 800a136:	f023 0301 	bic.w	r3, r3, #1
 800a13a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	3308      	adds	r3, #8
 800a144:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a148:	633a      	str	r2, [r7, #48]	; 0x30
 800a14a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a14c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a14e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a150:	e841 2300 	strex	r3, r2, [r1]
 800a154:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d1e3      	bne.n	800a124 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2220      	movs	r2, #32
 800a160:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2200      	movs	r2, #0
 800a16e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	e853 3f00 	ldrex	r3, [r3]
 800a17c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f023 0310 	bic.w	r3, r3, #16
 800a184:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	461a      	mov	r2, r3
 800a18e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a192:	61fb      	str	r3, [r7, #28]
 800a194:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a196:	69b9      	ldr	r1, [r7, #24]
 800a198:	69fa      	ldr	r2, [r7, #28]
 800a19a:	e841 2300 	strex	r3, r2, [r1]
 800a19e:	617b      	str	r3, [r7, #20]
   return(result);
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d1e4      	bne.n	800a170 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2202      	movs	r2, #2
 800a1aa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a1ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 f846 	bl	800a244 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a1b8:	e02a      	b.n	800a210 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a1ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d00e      	beq.n	800a1e4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a1c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d008      	beq.n	800a1e4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d01c      	beq.n	800a214 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	4798      	blx	r3
    }
    return;
 800a1e2:	e017      	b.n	800a214 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a1e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d012      	beq.n	800a216 <HAL_UART_IRQHandler+0x59e>
 800a1f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00c      	beq.n	800a216 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 fd71 	bl	800ace4 <UART_EndTransmit_IT>
    return;
 800a202:	e008      	b.n	800a216 <HAL_UART_IRQHandler+0x59e>
      return;
 800a204:	bf00      	nop
 800a206:	e006      	b.n	800a216 <HAL_UART_IRQHandler+0x59e>
    return;
 800a208:	bf00      	nop
 800a20a:	e004      	b.n	800a216 <HAL_UART_IRQHandler+0x59e>
      return;
 800a20c:	bf00      	nop
 800a20e:	e002      	b.n	800a216 <HAL_UART_IRQHandler+0x59e>
      return;
 800a210:	bf00      	nop
 800a212:	e000      	b.n	800a216 <HAL_UART_IRQHandler+0x59e>
    return;
 800a214:	bf00      	nop
  }

}
 800a216:	37e8      	adds	r7, #232	; 0xe8
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a224:	bf00      	nop
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a238:	bf00      	nop
 800a23a:	370c      	adds	r7, #12
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr

0800a244 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	460b      	mov	r3, r1
 800a24e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a250:	bf00      	nop
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr

0800a25c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b088      	sub	sp, #32
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a264:	2300      	movs	r3, #0
 800a266:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	689a      	ldr	r2, [r3, #8]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	691b      	ldr	r3, [r3, #16]
 800a270:	431a      	orrs	r2, r3
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	695b      	ldr	r3, [r3, #20]
 800a276:	431a      	orrs	r2, r3
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	69db      	ldr	r3, [r3, #28]
 800a27c:	4313      	orrs	r3, r2
 800a27e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	4ba6      	ldr	r3, [pc, #664]	; (800a520 <UART_SetConfig+0x2c4>)
 800a288:	4013      	ands	r3, r2
 800a28a:	687a      	ldr	r2, [r7, #4]
 800a28c:	6812      	ldr	r2, [r2, #0]
 800a28e:	6979      	ldr	r1, [r7, #20]
 800a290:	430b      	orrs	r3, r1
 800a292:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	68da      	ldr	r2, [r3, #12]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	430a      	orrs	r2, r1
 800a2a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	699b      	ldr	r3, [r3, #24]
 800a2ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6a1b      	ldr	r3, [r3, #32]
 800a2b4:	697a      	ldr	r2, [r7, #20]
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	697a      	ldr	r2, [r7, #20]
 800a2ca:	430a      	orrs	r2, r1
 800a2cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4a94      	ldr	r2, [pc, #592]	; (800a524 <UART_SetConfig+0x2c8>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d120      	bne.n	800a31a <UART_SetConfig+0xbe>
 800a2d8:	4b93      	ldr	r3, [pc, #588]	; (800a528 <UART_SetConfig+0x2cc>)
 800a2da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2de:	f003 0303 	and.w	r3, r3, #3
 800a2e2:	2b03      	cmp	r3, #3
 800a2e4:	d816      	bhi.n	800a314 <UART_SetConfig+0xb8>
 800a2e6:	a201      	add	r2, pc, #4	; (adr r2, 800a2ec <UART_SetConfig+0x90>)
 800a2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ec:	0800a2fd 	.word	0x0800a2fd
 800a2f0:	0800a309 	.word	0x0800a309
 800a2f4:	0800a303 	.word	0x0800a303
 800a2f8:	0800a30f 	.word	0x0800a30f
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	77fb      	strb	r3, [r7, #31]
 800a300:	e150      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a302:	2302      	movs	r3, #2
 800a304:	77fb      	strb	r3, [r7, #31]
 800a306:	e14d      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a308:	2304      	movs	r3, #4
 800a30a:	77fb      	strb	r3, [r7, #31]
 800a30c:	e14a      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a30e:	2308      	movs	r3, #8
 800a310:	77fb      	strb	r3, [r7, #31]
 800a312:	e147      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a314:	2310      	movs	r3, #16
 800a316:	77fb      	strb	r3, [r7, #31]
 800a318:	e144      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a83      	ldr	r2, [pc, #524]	; (800a52c <UART_SetConfig+0x2d0>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d132      	bne.n	800a38a <UART_SetConfig+0x12e>
 800a324:	4b80      	ldr	r3, [pc, #512]	; (800a528 <UART_SetConfig+0x2cc>)
 800a326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a32a:	f003 030c 	and.w	r3, r3, #12
 800a32e:	2b0c      	cmp	r3, #12
 800a330:	d828      	bhi.n	800a384 <UART_SetConfig+0x128>
 800a332:	a201      	add	r2, pc, #4	; (adr r2, 800a338 <UART_SetConfig+0xdc>)
 800a334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a338:	0800a36d 	.word	0x0800a36d
 800a33c:	0800a385 	.word	0x0800a385
 800a340:	0800a385 	.word	0x0800a385
 800a344:	0800a385 	.word	0x0800a385
 800a348:	0800a379 	.word	0x0800a379
 800a34c:	0800a385 	.word	0x0800a385
 800a350:	0800a385 	.word	0x0800a385
 800a354:	0800a385 	.word	0x0800a385
 800a358:	0800a373 	.word	0x0800a373
 800a35c:	0800a385 	.word	0x0800a385
 800a360:	0800a385 	.word	0x0800a385
 800a364:	0800a385 	.word	0x0800a385
 800a368:	0800a37f 	.word	0x0800a37f
 800a36c:	2300      	movs	r3, #0
 800a36e:	77fb      	strb	r3, [r7, #31]
 800a370:	e118      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a372:	2302      	movs	r3, #2
 800a374:	77fb      	strb	r3, [r7, #31]
 800a376:	e115      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a378:	2304      	movs	r3, #4
 800a37a:	77fb      	strb	r3, [r7, #31]
 800a37c:	e112      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a37e:	2308      	movs	r3, #8
 800a380:	77fb      	strb	r3, [r7, #31]
 800a382:	e10f      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a384:	2310      	movs	r3, #16
 800a386:	77fb      	strb	r3, [r7, #31]
 800a388:	e10c      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a68      	ldr	r2, [pc, #416]	; (800a530 <UART_SetConfig+0x2d4>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d120      	bne.n	800a3d6 <UART_SetConfig+0x17a>
 800a394:	4b64      	ldr	r3, [pc, #400]	; (800a528 <UART_SetConfig+0x2cc>)
 800a396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a39a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a39e:	2b30      	cmp	r3, #48	; 0x30
 800a3a0:	d013      	beq.n	800a3ca <UART_SetConfig+0x16e>
 800a3a2:	2b30      	cmp	r3, #48	; 0x30
 800a3a4:	d814      	bhi.n	800a3d0 <UART_SetConfig+0x174>
 800a3a6:	2b20      	cmp	r3, #32
 800a3a8:	d009      	beq.n	800a3be <UART_SetConfig+0x162>
 800a3aa:	2b20      	cmp	r3, #32
 800a3ac:	d810      	bhi.n	800a3d0 <UART_SetConfig+0x174>
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d002      	beq.n	800a3b8 <UART_SetConfig+0x15c>
 800a3b2:	2b10      	cmp	r3, #16
 800a3b4:	d006      	beq.n	800a3c4 <UART_SetConfig+0x168>
 800a3b6:	e00b      	b.n	800a3d0 <UART_SetConfig+0x174>
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	77fb      	strb	r3, [r7, #31]
 800a3bc:	e0f2      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a3be:	2302      	movs	r3, #2
 800a3c0:	77fb      	strb	r3, [r7, #31]
 800a3c2:	e0ef      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a3c4:	2304      	movs	r3, #4
 800a3c6:	77fb      	strb	r3, [r7, #31]
 800a3c8:	e0ec      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a3ca:	2308      	movs	r3, #8
 800a3cc:	77fb      	strb	r3, [r7, #31]
 800a3ce:	e0e9      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a3d0:	2310      	movs	r3, #16
 800a3d2:	77fb      	strb	r3, [r7, #31]
 800a3d4:	e0e6      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a56      	ldr	r2, [pc, #344]	; (800a534 <UART_SetConfig+0x2d8>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d120      	bne.n	800a422 <UART_SetConfig+0x1c6>
 800a3e0:	4b51      	ldr	r3, [pc, #324]	; (800a528 <UART_SetConfig+0x2cc>)
 800a3e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a3ea:	2bc0      	cmp	r3, #192	; 0xc0
 800a3ec:	d013      	beq.n	800a416 <UART_SetConfig+0x1ba>
 800a3ee:	2bc0      	cmp	r3, #192	; 0xc0
 800a3f0:	d814      	bhi.n	800a41c <UART_SetConfig+0x1c0>
 800a3f2:	2b80      	cmp	r3, #128	; 0x80
 800a3f4:	d009      	beq.n	800a40a <UART_SetConfig+0x1ae>
 800a3f6:	2b80      	cmp	r3, #128	; 0x80
 800a3f8:	d810      	bhi.n	800a41c <UART_SetConfig+0x1c0>
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d002      	beq.n	800a404 <UART_SetConfig+0x1a8>
 800a3fe:	2b40      	cmp	r3, #64	; 0x40
 800a400:	d006      	beq.n	800a410 <UART_SetConfig+0x1b4>
 800a402:	e00b      	b.n	800a41c <UART_SetConfig+0x1c0>
 800a404:	2300      	movs	r3, #0
 800a406:	77fb      	strb	r3, [r7, #31]
 800a408:	e0cc      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a40a:	2302      	movs	r3, #2
 800a40c:	77fb      	strb	r3, [r7, #31]
 800a40e:	e0c9      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a410:	2304      	movs	r3, #4
 800a412:	77fb      	strb	r3, [r7, #31]
 800a414:	e0c6      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a416:	2308      	movs	r3, #8
 800a418:	77fb      	strb	r3, [r7, #31]
 800a41a:	e0c3      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a41c:	2310      	movs	r3, #16
 800a41e:	77fb      	strb	r3, [r7, #31]
 800a420:	e0c0      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a44      	ldr	r2, [pc, #272]	; (800a538 <UART_SetConfig+0x2dc>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d125      	bne.n	800a478 <UART_SetConfig+0x21c>
 800a42c:	4b3e      	ldr	r3, [pc, #248]	; (800a528 <UART_SetConfig+0x2cc>)
 800a42e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a436:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a43a:	d017      	beq.n	800a46c <UART_SetConfig+0x210>
 800a43c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a440:	d817      	bhi.n	800a472 <UART_SetConfig+0x216>
 800a442:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a446:	d00b      	beq.n	800a460 <UART_SetConfig+0x204>
 800a448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a44c:	d811      	bhi.n	800a472 <UART_SetConfig+0x216>
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d003      	beq.n	800a45a <UART_SetConfig+0x1fe>
 800a452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a456:	d006      	beq.n	800a466 <UART_SetConfig+0x20a>
 800a458:	e00b      	b.n	800a472 <UART_SetConfig+0x216>
 800a45a:	2300      	movs	r3, #0
 800a45c:	77fb      	strb	r3, [r7, #31]
 800a45e:	e0a1      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a460:	2302      	movs	r3, #2
 800a462:	77fb      	strb	r3, [r7, #31]
 800a464:	e09e      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a466:	2304      	movs	r3, #4
 800a468:	77fb      	strb	r3, [r7, #31]
 800a46a:	e09b      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a46c:	2308      	movs	r3, #8
 800a46e:	77fb      	strb	r3, [r7, #31]
 800a470:	e098      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a472:	2310      	movs	r3, #16
 800a474:	77fb      	strb	r3, [r7, #31]
 800a476:	e095      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a2f      	ldr	r2, [pc, #188]	; (800a53c <UART_SetConfig+0x2e0>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d125      	bne.n	800a4ce <UART_SetConfig+0x272>
 800a482:	4b29      	ldr	r3, [pc, #164]	; (800a528 <UART_SetConfig+0x2cc>)
 800a484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a488:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a48c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a490:	d017      	beq.n	800a4c2 <UART_SetConfig+0x266>
 800a492:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a496:	d817      	bhi.n	800a4c8 <UART_SetConfig+0x26c>
 800a498:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a49c:	d00b      	beq.n	800a4b6 <UART_SetConfig+0x25a>
 800a49e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4a2:	d811      	bhi.n	800a4c8 <UART_SetConfig+0x26c>
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d003      	beq.n	800a4b0 <UART_SetConfig+0x254>
 800a4a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4ac:	d006      	beq.n	800a4bc <UART_SetConfig+0x260>
 800a4ae:	e00b      	b.n	800a4c8 <UART_SetConfig+0x26c>
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	77fb      	strb	r3, [r7, #31]
 800a4b4:	e076      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a4b6:	2302      	movs	r3, #2
 800a4b8:	77fb      	strb	r3, [r7, #31]
 800a4ba:	e073      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a4bc:	2304      	movs	r3, #4
 800a4be:	77fb      	strb	r3, [r7, #31]
 800a4c0:	e070      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a4c2:	2308      	movs	r3, #8
 800a4c4:	77fb      	strb	r3, [r7, #31]
 800a4c6:	e06d      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a4c8:	2310      	movs	r3, #16
 800a4ca:	77fb      	strb	r3, [r7, #31]
 800a4cc:	e06a      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a1b      	ldr	r2, [pc, #108]	; (800a540 <UART_SetConfig+0x2e4>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d138      	bne.n	800a54a <UART_SetConfig+0x2ee>
 800a4d8:	4b13      	ldr	r3, [pc, #76]	; (800a528 <UART_SetConfig+0x2cc>)
 800a4da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4de:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a4e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a4e6:	d017      	beq.n	800a518 <UART_SetConfig+0x2bc>
 800a4e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a4ec:	d82a      	bhi.n	800a544 <UART_SetConfig+0x2e8>
 800a4ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4f2:	d00b      	beq.n	800a50c <UART_SetConfig+0x2b0>
 800a4f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4f8:	d824      	bhi.n	800a544 <UART_SetConfig+0x2e8>
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d003      	beq.n	800a506 <UART_SetConfig+0x2aa>
 800a4fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a502:	d006      	beq.n	800a512 <UART_SetConfig+0x2b6>
 800a504:	e01e      	b.n	800a544 <UART_SetConfig+0x2e8>
 800a506:	2300      	movs	r3, #0
 800a508:	77fb      	strb	r3, [r7, #31]
 800a50a:	e04b      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a50c:	2302      	movs	r3, #2
 800a50e:	77fb      	strb	r3, [r7, #31]
 800a510:	e048      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a512:	2304      	movs	r3, #4
 800a514:	77fb      	strb	r3, [r7, #31]
 800a516:	e045      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a518:	2308      	movs	r3, #8
 800a51a:	77fb      	strb	r3, [r7, #31]
 800a51c:	e042      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a51e:	bf00      	nop
 800a520:	efff69f3 	.word	0xefff69f3
 800a524:	40011000 	.word	0x40011000
 800a528:	40023800 	.word	0x40023800
 800a52c:	40004400 	.word	0x40004400
 800a530:	40004800 	.word	0x40004800
 800a534:	40004c00 	.word	0x40004c00
 800a538:	40005000 	.word	0x40005000
 800a53c:	40011400 	.word	0x40011400
 800a540:	40007800 	.word	0x40007800
 800a544:	2310      	movs	r3, #16
 800a546:	77fb      	strb	r3, [r7, #31]
 800a548:	e02c      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4a72      	ldr	r2, [pc, #456]	; (800a718 <UART_SetConfig+0x4bc>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d125      	bne.n	800a5a0 <UART_SetConfig+0x344>
 800a554:	4b71      	ldr	r3, [pc, #452]	; (800a71c <UART_SetConfig+0x4c0>)
 800a556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a55a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a55e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a562:	d017      	beq.n	800a594 <UART_SetConfig+0x338>
 800a564:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a568:	d817      	bhi.n	800a59a <UART_SetConfig+0x33e>
 800a56a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a56e:	d00b      	beq.n	800a588 <UART_SetConfig+0x32c>
 800a570:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a574:	d811      	bhi.n	800a59a <UART_SetConfig+0x33e>
 800a576:	2b00      	cmp	r3, #0
 800a578:	d003      	beq.n	800a582 <UART_SetConfig+0x326>
 800a57a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a57e:	d006      	beq.n	800a58e <UART_SetConfig+0x332>
 800a580:	e00b      	b.n	800a59a <UART_SetConfig+0x33e>
 800a582:	2300      	movs	r3, #0
 800a584:	77fb      	strb	r3, [r7, #31]
 800a586:	e00d      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a588:	2302      	movs	r3, #2
 800a58a:	77fb      	strb	r3, [r7, #31]
 800a58c:	e00a      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a58e:	2304      	movs	r3, #4
 800a590:	77fb      	strb	r3, [r7, #31]
 800a592:	e007      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a594:	2308      	movs	r3, #8
 800a596:	77fb      	strb	r3, [r7, #31]
 800a598:	e004      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a59a:	2310      	movs	r3, #16
 800a59c:	77fb      	strb	r3, [r7, #31]
 800a59e:	e001      	b.n	800a5a4 <UART_SetConfig+0x348>
 800a5a0:	2310      	movs	r3, #16
 800a5a2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	69db      	ldr	r3, [r3, #28]
 800a5a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5ac:	d15b      	bne.n	800a666 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a5ae:	7ffb      	ldrb	r3, [r7, #31]
 800a5b0:	2b08      	cmp	r3, #8
 800a5b2:	d828      	bhi.n	800a606 <UART_SetConfig+0x3aa>
 800a5b4:	a201      	add	r2, pc, #4	; (adr r2, 800a5bc <UART_SetConfig+0x360>)
 800a5b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ba:	bf00      	nop
 800a5bc:	0800a5e1 	.word	0x0800a5e1
 800a5c0:	0800a5e9 	.word	0x0800a5e9
 800a5c4:	0800a5f1 	.word	0x0800a5f1
 800a5c8:	0800a607 	.word	0x0800a607
 800a5cc:	0800a5f7 	.word	0x0800a5f7
 800a5d0:	0800a607 	.word	0x0800a607
 800a5d4:	0800a607 	.word	0x0800a607
 800a5d8:	0800a607 	.word	0x0800a607
 800a5dc:	0800a5ff 	.word	0x0800a5ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5e0:	f7fc fd00 	bl	8006fe4 <HAL_RCC_GetPCLK1Freq>
 800a5e4:	61b8      	str	r0, [r7, #24]
        break;
 800a5e6:	e013      	b.n	800a610 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5e8:	f7fc fd10 	bl	800700c <HAL_RCC_GetPCLK2Freq>
 800a5ec:	61b8      	str	r0, [r7, #24]
        break;
 800a5ee:	e00f      	b.n	800a610 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a5f0:	4b4b      	ldr	r3, [pc, #300]	; (800a720 <UART_SetConfig+0x4c4>)
 800a5f2:	61bb      	str	r3, [r7, #24]
        break;
 800a5f4:	e00c      	b.n	800a610 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a5f6:	f7fc fbe3 	bl	8006dc0 <HAL_RCC_GetSysClockFreq>
 800a5fa:	61b8      	str	r0, [r7, #24]
        break;
 800a5fc:	e008      	b.n	800a610 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a602:	61bb      	str	r3, [r7, #24]
        break;
 800a604:	e004      	b.n	800a610 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a606:	2300      	movs	r3, #0
 800a608:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a60a:	2301      	movs	r3, #1
 800a60c:	77bb      	strb	r3, [r7, #30]
        break;
 800a60e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d074      	beq.n	800a700 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a616:	69bb      	ldr	r3, [r7, #24]
 800a618:	005a      	lsls	r2, r3, #1
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	085b      	lsrs	r3, r3, #1
 800a620:	441a      	add	r2, r3
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	fbb2 f3f3 	udiv	r3, r2, r3
 800a62a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	2b0f      	cmp	r3, #15
 800a630:	d916      	bls.n	800a660 <UART_SetConfig+0x404>
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a638:	d212      	bcs.n	800a660 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	f023 030f 	bic.w	r3, r3, #15
 800a642:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	085b      	lsrs	r3, r3, #1
 800a648:	b29b      	uxth	r3, r3
 800a64a:	f003 0307 	and.w	r3, r3, #7
 800a64e:	b29a      	uxth	r2, r3
 800a650:	89fb      	ldrh	r3, [r7, #14]
 800a652:	4313      	orrs	r3, r2
 800a654:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	89fa      	ldrh	r2, [r7, #14]
 800a65c:	60da      	str	r2, [r3, #12]
 800a65e:	e04f      	b.n	800a700 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a660:	2301      	movs	r3, #1
 800a662:	77bb      	strb	r3, [r7, #30]
 800a664:	e04c      	b.n	800a700 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a666:	7ffb      	ldrb	r3, [r7, #31]
 800a668:	2b08      	cmp	r3, #8
 800a66a:	d828      	bhi.n	800a6be <UART_SetConfig+0x462>
 800a66c:	a201      	add	r2, pc, #4	; (adr r2, 800a674 <UART_SetConfig+0x418>)
 800a66e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a672:	bf00      	nop
 800a674:	0800a699 	.word	0x0800a699
 800a678:	0800a6a1 	.word	0x0800a6a1
 800a67c:	0800a6a9 	.word	0x0800a6a9
 800a680:	0800a6bf 	.word	0x0800a6bf
 800a684:	0800a6af 	.word	0x0800a6af
 800a688:	0800a6bf 	.word	0x0800a6bf
 800a68c:	0800a6bf 	.word	0x0800a6bf
 800a690:	0800a6bf 	.word	0x0800a6bf
 800a694:	0800a6b7 	.word	0x0800a6b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a698:	f7fc fca4 	bl	8006fe4 <HAL_RCC_GetPCLK1Freq>
 800a69c:	61b8      	str	r0, [r7, #24]
        break;
 800a69e:	e013      	b.n	800a6c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6a0:	f7fc fcb4 	bl	800700c <HAL_RCC_GetPCLK2Freq>
 800a6a4:	61b8      	str	r0, [r7, #24]
        break;
 800a6a6:	e00f      	b.n	800a6c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a6a8:	4b1d      	ldr	r3, [pc, #116]	; (800a720 <UART_SetConfig+0x4c4>)
 800a6aa:	61bb      	str	r3, [r7, #24]
        break;
 800a6ac:	e00c      	b.n	800a6c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6ae:	f7fc fb87 	bl	8006dc0 <HAL_RCC_GetSysClockFreq>
 800a6b2:	61b8      	str	r0, [r7, #24]
        break;
 800a6b4:	e008      	b.n	800a6c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6ba:	61bb      	str	r3, [r7, #24]
        break;
 800a6bc:	e004      	b.n	800a6c8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	77bb      	strb	r3, [r7, #30]
        break;
 800a6c6:	bf00      	nop
    }

    if (pclk != 0U)
 800a6c8:	69bb      	ldr	r3, [r7, #24]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d018      	beq.n	800a700 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	085a      	lsrs	r2, r3, #1
 800a6d4:	69bb      	ldr	r3, [r7, #24]
 800a6d6:	441a      	add	r2, r3
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	2b0f      	cmp	r3, #15
 800a6e6:	d909      	bls.n	800a6fc <UART_SetConfig+0x4a0>
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6ee:	d205      	bcs.n	800a6fc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	b29a      	uxth	r2, r3
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	60da      	str	r2, [r3, #12]
 800a6fa:	e001      	b.n	800a700 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2200      	movs	r2, #0
 800a704:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2200      	movs	r2, #0
 800a70a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a70c:	7fbb      	ldrb	r3, [r7, #30]
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3720      	adds	r7, #32
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop
 800a718:	40007c00 	.word	0x40007c00
 800a71c:	40023800 	.word	0x40023800
 800a720:	00f42400 	.word	0x00f42400

0800a724 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a730:	f003 0301 	and.w	r3, r3, #1
 800a734:	2b00      	cmp	r3, #0
 800a736:	d00a      	beq.n	800a74e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	430a      	orrs	r2, r1
 800a74c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a752:	f003 0302 	and.w	r3, r3, #2
 800a756:	2b00      	cmp	r3, #0
 800a758:	d00a      	beq.n	800a770 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	430a      	orrs	r2, r1
 800a76e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a774:	f003 0304 	and.w	r3, r3, #4
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d00a      	beq.n	800a792 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	430a      	orrs	r2, r1
 800a790:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a796:	f003 0308 	and.w	r3, r3, #8
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d00a      	beq.n	800a7b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	430a      	orrs	r2, r1
 800a7b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b8:	f003 0310 	and.w	r3, r3, #16
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d00a      	beq.n	800a7d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	689b      	ldr	r3, [r3, #8]
 800a7c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	430a      	orrs	r2, r1
 800a7d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7da:	f003 0320 	and.w	r3, r3, #32
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d00a      	beq.n	800a7f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	430a      	orrs	r2, r1
 800a7f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a800:	2b00      	cmp	r3, #0
 800a802:	d01a      	beq.n	800a83a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	430a      	orrs	r2, r1
 800a818:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a81e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a822:	d10a      	bne.n	800a83a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	430a      	orrs	r2, r1
 800a838:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a842:	2b00      	cmp	r3, #0
 800a844:	d00a      	beq.n	800a85c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	430a      	orrs	r2, r1
 800a85a:	605a      	str	r2, [r3, #4]
  }
}
 800a85c:	bf00      	nop
 800a85e:	370c      	adds	r7, #12
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr

0800a868 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b086      	sub	sp, #24
 800a86c:	af02      	add	r7, sp, #8
 800a86e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a878:	f7f9 fee2 	bl	8004640 <HAL_GetTick>
 800a87c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f003 0308 	and.w	r3, r3, #8
 800a888:	2b08      	cmp	r3, #8
 800a88a:	d10e      	bne.n	800a8aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a88c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a890:	9300      	str	r3, [sp, #0]
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2200      	movs	r2, #0
 800a896:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 f81b 	bl	800a8d6 <UART_WaitOnFlagUntilTimeout>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d001      	beq.n	800a8aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8a6:	2303      	movs	r3, #3
 800a8a8:	e011      	b.n	800a8ce <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2220      	movs	r2, #32
 800a8ae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2220      	movs	r2, #32
 800a8b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a8cc:	2300      	movs	r3, #0
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3710      	adds	r7, #16
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}

0800a8d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a8d6:	b580      	push	{r7, lr}
 800a8d8:	b09c      	sub	sp, #112	; 0x70
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	60f8      	str	r0, [r7, #12]
 800a8de:	60b9      	str	r1, [r7, #8]
 800a8e0:	603b      	str	r3, [r7, #0]
 800a8e2:	4613      	mov	r3, r2
 800a8e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8e6:	e0a7      	b.n	800aa38 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ee:	f000 80a3 	beq.w	800aa38 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8f2:	f7f9 fea5 	bl	8004640 <HAL_GetTick>
 800a8f6:	4602      	mov	r2, r0
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	1ad3      	subs	r3, r2, r3
 800a8fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d302      	bcc.n	800a908 <UART_WaitOnFlagUntilTimeout+0x32>
 800a902:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a904:	2b00      	cmp	r3, #0
 800a906:	d13f      	bne.n	800a988 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a90e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a910:	e853 3f00 	ldrex	r3, [r3]
 800a914:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a918:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a91c:	667b      	str	r3, [r7, #100]	; 0x64
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	461a      	mov	r2, r3
 800a924:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a926:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a928:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a92a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a92c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a92e:	e841 2300 	strex	r3, r2, [r1]
 800a932:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a936:	2b00      	cmp	r3, #0
 800a938:	d1e6      	bne.n	800a908 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	3308      	adds	r3, #8
 800a940:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a944:	e853 3f00 	ldrex	r3, [r3]
 800a948:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a94c:	f023 0301 	bic.w	r3, r3, #1
 800a950:	663b      	str	r3, [r7, #96]	; 0x60
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	3308      	adds	r3, #8
 800a958:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a95a:	64ba      	str	r2, [r7, #72]	; 0x48
 800a95c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a95e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a960:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a962:	e841 2300 	strex	r3, r2, [r1]
 800a966:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d1e5      	bne.n	800a93a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2220      	movs	r2, #32
 800a972:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2220      	movs	r2, #32
 800a978:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2200      	movs	r2, #0
 800a980:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800a984:	2303      	movs	r3, #3
 800a986:	e068      	b.n	800aa5a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f003 0304 	and.w	r3, r3, #4
 800a992:	2b00      	cmp	r3, #0
 800a994:	d050      	beq.n	800aa38 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	69db      	ldr	r3, [r3, #28]
 800a99c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a9a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9a4:	d148      	bne.n	800aa38 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a9ae:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b8:	e853 3f00 	ldrex	r3, [r3]
 800a9bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a9c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9ce:	637b      	str	r3, [r7, #52]	; 0x34
 800a9d0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a9d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9d6:	e841 2300 	strex	r3, r2, [r1]
 800a9da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d1e6      	bne.n	800a9b0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	3308      	adds	r3, #8
 800a9e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	e853 3f00 	ldrex	r3, [r3]
 800a9f0:	613b      	str	r3, [r7, #16]
   return(result);
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	f023 0301 	bic.w	r3, r3, #1
 800a9f8:	66bb      	str	r3, [r7, #104]	; 0x68
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	3308      	adds	r3, #8
 800aa00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aa02:	623a      	str	r2, [r7, #32]
 800aa04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa06:	69f9      	ldr	r1, [r7, #28]
 800aa08:	6a3a      	ldr	r2, [r7, #32]
 800aa0a:	e841 2300 	strex	r3, r2, [r1]
 800aa0e:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa10:	69bb      	ldr	r3, [r7, #24]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d1e5      	bne.n	800a9e2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2220      	movs	r2, #32
 800aa1a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2220      	movs	r2, #32
 800aa20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2220      	movs	r2, #32
 800aa28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800aa34:	2303      	movs	r3, #3
 800aa36:	e010      	b.n	800aa5a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	69da      	ldr	r2, [r3, #28]
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	4013      	ands	r3, r2
 800aa42:	68ba      	ldr	r2, [r7, #8]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	bf0c      	ite	eq
 800aa48:	2301      	moveq	r3, #1
 800aa4a:	2300      	movne	r3, #0
 800aa4c:	b2db      	uxtb	r3, r3
 800aa4e:	461a      	mov	r2, r3
 800aa50:	79fb      	ldrb	r3, [r7, #7]
 800aa52:	429a      	cmp	r2, r3
 800aa54:	f43f af48 	beq.w	800a8e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa58:	2300      	movs	r3, #0
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3770      	adds	r7, #112	; 0x70
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
	...

0800aa64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b097      	sub	sp, #92	; 0x5c
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	60b9      	str	r1, [r7, #8]
 800aa6e:	4613      	mov	r3, r2
 800aa70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	68ba      	ldr	r2, [r7, #8]
 800aa76:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	88fa      	ldrh	r2, [r7, #6]
 800aa7c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	88fa      	ldrh	r2, [r7, #6]
 800aa84:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	689b      	ldr	r3, [r3, #8]
 800aa92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa96:	d10e      	bne.n	800aab6 <UART_Start_Receive_IT+0x52>
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	691b      	ldr	r3, [r3, #16]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d105      	bne.n	800aaac <UART_Start_Receive_IT+0x48>
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800aaa6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aaaa:	e02d      	b.n	800ab08 <UART_Start_Receive_IT+0xa4>
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	22ff      	movs	r2, #255	; 0xff
 800aab0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aab4:	e028      	b.n	800ab08 <UART_Start_Receive_IT+0xa4>
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	689b      	ldr	r3, [r3, #8]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d10d      	bne.n	800aada <UART_Start_Receive_IT+0x76>
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	691b      	ldr	r3, [r3, #16]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d104      	bne.n	800aad0 <UART_Start_Receive_IT+0x6c>
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	22ff      	movs	r2, #255	; 0xff
 800aaca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aace:	e01b      	b.n	800ab08 <UART_Start_Receive_IT+0xa4>
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	227f      	movs	r2, #127	; 0x7f
 800aad4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aad8:	e016      	b.n	800ab08 <UART_Start_Receive_IT+0xa4>
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	689b      	ldr	r3, [r3, #8]
 800aade:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aae2:	d10d      	bne.n	800ab00 <UART_Start_Receive_IT+0x9c>
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	691b      	ldr	r3, [r3, #16]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d104      	bne.n	800aaf6 <UART_Start_Receive_IT+0x92>
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	227f      	movs	r2, #127	; 0x7f
 800aaf0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aaf4:	e008      	b.n	800ab08 <UART_Start_Receive_IT+0xa4>
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	223f      	movs	r2, #63	; 0x3f
 800aafa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aafe:	e003      	b.n	800ab08 <UART_Start_Receive_IT+0xa4>
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	2200      	movs	r2, #0
 800ab04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2222      	movs	r2, #34	; 0x22
 800ab14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	3308      	adds	r3, #8
 800ab1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab22:	e853 3f00 	ldrex	r3, [r3]
 800ab26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ab28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab2a:	f043 0301 	orr.w	r3, r3, #1
 800ab2e:	657b      	str	r3, [r7, #84]	; 0x54
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	3308      	adds	r3, #8
 800ab36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ab38:	64ba      	str	r2, [r7, #72]	; 0x48
 800ab3a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab3c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ab3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab40:	e841 2300 	strex	r3, r2, [r1]
 800ab44:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ab46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d1e5      	bne.n	800ab18 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	689b      	ldr	r3, [r3, #8]
 800ab50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab54:	d107      	bne.n	800ab66 <UART_Start_Receive_IT+0x102>
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	691b      	ldr	r3, [r3, #16]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d103      	bne.n	800ab66 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	4a21      	ldr	r2, [pc, #132]	; (800abe8 <UART_Start_Receive_IT+0x184>)
 800ab62:	669a      	str	r2, [r3, #104]	; 0x68
 800ab64:	e002      	b.n	800ab6c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	4a20      	ldr	r2, [pc, #128]	; (800abec <UART_Start_Receive_IT+0x188>)
 800ab6a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	691b      	ldr	r3, [r3, #16]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d019      	beq.n	800aba8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7c:	e853 3f00 	ldrex	r3, [r3]
 800ab80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab84:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ab88:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	461a      	mov	r2, r3
 800ab90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab92:	637b      	str	r3, [r7, #52]	; 0x34
 800ab94:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab9a:	e841 2300 	strex	r3, r2, [r1]
 800ab9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d1e6      	bne.n	800ab74 <UART_Start_Receive_IT+0x110>
 800aba6:	e018      	b.n	800abda <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	e853 3f00 	ldrex	r3, [r3]
 800abb4:	613b      	str	r3, [r7, #16]
   return(result);
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	f043 0320 	orr.w	r3, r3, #32
 800abbc:	653b      	str	r3, [r7, #80]	; 0x50
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	461a      	mov	r2, r3
 800abc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abc6:	623b      	str	r3, [r7, #32]
 800abc8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abca:	69f9      	ldr	r1, [r7, #28]
 800abcc:	6a3a      	ldr	r2, [r7, #32]
 800abce:	e841 2300 	strex	r3, r2, [r1]
 800abd2:	61bb      	str	r3, [r7, #24]
   return(result);
 800abd4:	69bb      	ldr	r3, [r7, #24]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d1e6      	bne.n	800aba8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800abda:	2300      	movs	r3, #0
}
 800abdc:	4618      	mov	r0, r3
 800abde:	375c      	adds	r7, #92	; 0x5c
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr
 800abe8:	0800ae9f 	.word	0x0800ae9f
 800abec:	0800ad39 	.word	0x0800ad39

0800abf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b095      	sub	sp, #84	; 0x54
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac00:	e853 3f00 	ldrex	r3, [r3]
 800ac04:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ac06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ac0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	461a      	mov	r2, r3
 800ac14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac16:	643b      	str	r3, [r7, #64]	; 0x40
 800ac18:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ac1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac1e:	e841 2300 	strex	r3, r2, [r1]
 800ac22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ac24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d1e6      	bne.n	800abf8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	3308      	adds	r3, #8
 800ac30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac32:	6a3b      	ldr	r3, [r7, #32]
 800ac34:	e853 3f00 	ldrex	r3, [r3]
 800ac38:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac3a:	69fb      	ldr	r3, [r7, #28]
 800ac3c:	f023 0301 	bic.w	r3, r3, #1
 800ac40:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	3308      	adds	r3, #8
 800ac48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ac4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac52:	e841 2300 	strex	r3, r2, [r1]
 800ac56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d1e5      	bne.n	800ac2a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	d118      	bne.n	800ac98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	e853 3f00 	ldrex	r3, [r3]
 800ac72:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	f023 0310 	bic.w	r3, r3, #16
 800ac7a:	647b      	str	r3, [r7, #68]	; 0x44
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	461a      	mov	r2, r3
 800ac82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac84:	61bb      	str	r3, [r7, #24]
 800ac86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac88:	6979      	ldr	r1, [r7, #20]
 800ac8a:	69ba      	ldr	r2, [r7, #24]
 800ac8c:	e841 2300 	strex	r3, r2, [r1]
 800ac90:	613b      	str	r3, [r7, #16]
   return(result);
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d1e6      	bne.n	800ac66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2220      	movs	r2, #32
 800ac9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2200      	movs	r2, #0
 800aca4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2200      	movs	r2, #0
 800acaa:	669a      	str	r2, [r3, #104]	; 0x68
}
 800acac:	bf00      	nop
 800acae:	3754      	adds	r7, #84	; 0x54
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2200      	movs	r2, #0
 800acca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2200      	movs	r2, #0
 800acd2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800acd6:	68f8      	ldr	r0, [r7, #12]
 800acd8:	f7ff faaa 	bl	800a230 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acdc:	bf00      	nop
 800acde:	3710      	adds	r7, #16
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b088      	sub	sp, #32
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	e853 3f00 	ldrex	r3, [r3]
 800acf8:	60bb      	str	r3, [r7, #8]
   return(result);
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad00:	61fb      	str	r3, [r7, #28]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	461a      	mov	r2, r3
 800ad08:	69fb      	ldr	r3, [r7, #28]
 800ad0a:	61bb      	str	r3, [r7, #24]
 800ad0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad0e:	6979      	ldr	r1, [r7, #20]
 800ad10:	69ba      	ldr	r2, [r7, #24]
 800ad12:	e841 2300 	strex	r3, r2, [r1]
 800ad16:	613b      	str	r3, [r7, #16]
   return(result);
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d1e6      	bne.n	800acec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2220      	movs	r2, #32
 800ad22:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2200      	movs	r2, #0
 800ad28:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f7ff fa76 	bl	800a21c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad30:	bf00      	nop
 800ad32:	3720      	adds	r7, #32
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b096      	sub	sp, #88	; 0x58
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ad46:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad50:	2b22      	cmp	r3, #34	; 0x22
 800ad52:	f040 8098 	bne.w	800ae86 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad5c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ad60:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800ad64:	b2d9      	uxtb	r1, r3
 800ad66:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800ad6a:	b2da      	uxtb	r2, r3
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad70:	400a      	ands	r2, r1
 800ad72:	b2d2      	uxtb	r2, r2
 800ad74:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad7a:	1c5a      	adds	r2, r3, #1
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ad86:	b29b      	uxth	r3, r3
 800ad88:	3b01      	subs	r3, #1
 800ad8a:	b29a      	uxth	r2, r3
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ad98:	b29b      	uxth	r3, r3
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d17b      	bne.n	800ae96 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ada4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ada6:	e853 3f00 	ldrex	r3, [r3]
 800adaa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800adac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800adb2:	653b      	str	r3, [r7, #80]	; 0x50
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	461a      	mov	r2, r3
 800adba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adbc:	647b      	str	r3, [r7, #68]	; 0x44
 800adbe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800adc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800adc4:	e841 2300 	strex	r3, r2, [r1]
 800adc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800adca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d1e6      	bne.n	800ad9e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	3308      	adds	r3, #8
 800add6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adda:	e853 3f00 	ldrex	r3, [r3]
 800adde:	623b      	str	r3, [r7, #32]
   return(result);
 800ade0:	6a3b      	ldr	r3, [r7, #32]
 800ade2:	f023 0301 	bic.w	r3, r3, #1
 800ade6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	3308      	adds	r3, #8
 800adee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800adf0:	633a      	str	r2, [r7, #48]	; 0x30
 800adf2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800adf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adf8:	e841 2300 	strex	r3, r2, [r1]
 800adfc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800adfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d1e5      	bne.n	800add0 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2220      	movs	r2, #32
 800ae08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2200      	movs	r2, #0
 800ae16:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d12e      	bne.n	800ae7e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2200      	movs	r2, #0
 800ae24:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	e853 3f00 	ldrex	r3, [r3]
 800ae32:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f023 0310 	bic.w	r3, r3, #16
 800ae3a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	461a      	mov	r2, r3
 800ae42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae44:	61fb      	str	r3, [r7, #28]
 800ae46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae48:	69b9      	ldr	r1, [r7, #24]
 800ae4a:	69fa      	ldr	r2, [r7, #28]
 800ae4c:	e841 2300 	strex	r3, r2, [r1]
 800ae50:	617b      	str	r3, [r7, #20]
   return(result);
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d1e6      	bne.n	800ae26 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	69db      	ldr	r3, [r3, #28]
 800ae5e:	f003 0310 	and.w	r3, r3, #16
 800ae62:	2b10      	cmp	r3, #16
 800ae64:	d103      	bne.n	800ae6e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	2210      	movs	r2, #16
 800ae6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ae74:	4619      	mov	r1, r3
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f7ff f9e4 	bl	800a244 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ae7c:	e00b      	b.n	800ae96 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f7f8 fbb6 	bl	80035f0 <HAL_UART_RxCpltCallback>
}
 800ae84:	e007      	b.n	800ae96 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	699a      	ldr	r2, [r3, #24]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f042 0208 	orr.w	r2, r2, #8
 800ae94:	619a      	str	r2, [r3, #24]
}
 800ae96:	bf00      	nop
 800ae98:	3758      	adds	r7, #88	; 0x58
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}

0800ae9e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ae9e:	b580      	push	{r7, lr}
 800aea0:	b096      	sub	sp, #88	; 0x58
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aeac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aeb6:	2b22      	cmp	r3, #34	; 0x22
 800aeb8:	f040 8098 	bne.w	800afec <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeca:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800aecc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800aed0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800aed4:	4013      	ands	r3, r2
 800aed6:	b29a      	uxth	r2, r3
 800aed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aeda:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aee0:	1c9a      	adds	r2, r3, #2
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aeec:	b29b      	uxth	r3, r3
 800aeee:	3b01      	subs	r3, #1
 800aef0:	b29a      	uxth	r2, r3
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aefe:	b29b      	uxth	r3, r3
 800af00:	2b00      	cmp	r3, #0
 800af02:	d17b      	bne.n	800affc <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af0c:	e853 3f00 	ldrex	r3, [r3]
 800af10:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800af12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af18:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	461a      	mov	r2, r3
 800af20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af22:	643b      	str	r3, [r7, #64]	; 0x40
 800af24:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800af28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af2a:	e841 2300 	strex	r3, r2, [r1]
 800af2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800af30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af32:	2b00      	cmp	r3, #0
 800af34:	d1e6      	bne.n	800af04 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	3308      	adds	r3, #8
 800af3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af3e:	6a3b      	ldr	r3, [r7, #32]
 800af40:	e853 3f00 	ldrex	r3, [r3]
 800af44:	61fb      	str	r3, [r7, #28]
   return(result);
 800af46:	69fb      	ldr	r3, [r7, #28]
 800af48:	f023 0301 	bic.w	r3, r3, #1
 800af4c:	64bb      	str	r3, [r7, #72]	; 0x48
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	3308      	adds	r3, #8
 800af54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af56:	62fa      	str	r2, [r7, #44]	; 0x2c
 800af58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af5e:	e841 2300 	strex	r3, r2, [r1]
 800af62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800af64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af66:	2b00      	cmp	r3, #0
 800af68:	d1e5      	bne.n	800af36 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2220      	movs	r2, #32
 800af6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2200      	movs	r2, #0
 800af76:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2200      	movs	r2, #0
 800af7c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af82:	2b01      	cmp	r3, #1
 800af84:	d12e      	bne.n	800afe4 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2200      	movs	r2, #0
 800af8a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	e853 3f00 	ldrex	r3, [r3]
 800af98:	60bb      	str	r3, [r7, #8]
   return(result);
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	f023 0310 	bic.w	r3, r3, #16
 800afa0:	647b      	str	r3, [r7, #68]	; 0x44
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	461a      	mov	r2, r3
 800afa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800afaa:	61bb      	str	r3, [r7, #24]
 800afac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afae:	6979      	ldr	r1, [r7, #20]
 800afb0:	69ba      	ldr	r2, [r7, #24]
 800afb2:	e841 2300 	strex	r3, r2, [r1]
 800afb6:	613b      	str	r3, [r7, #16]
   return(result);
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d1e6      	bne.n	800af8c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	69db      	ldr	r3, [r3, #28]
 800afc4:	f003 0310 	and.w	r3, r3, #16
 800afc8:	2b10      	cmp	r3, #16
 800afca:	d103      	bne.n	800afd4 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	2210      	movs	r2, #16
 800afd2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800afda:	4619      	mov	r1, r3
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f7ff f931 	bl	800a244 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800afe2:	e00b      	b.n	800affc <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f7f8 fb03 	bl	80035f0 <HAL_UART_RxCpltCallback>
}
 800afea:	e007      	b.n	800affc <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	699a      	ldr	r2, [r3, #24]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f042 0208 	orr.w	r2, r2, #8
 800affa:	619a      	str	r2, [r3, #24]
}
 800affc:	bf00      	nop
 800affe:	3758      	adds	r7, #88	; 0x58
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b008:	4904      	ldr	r1, [pc, #16]	; (800b01c <MX_FATFS_Init+0x18>)
 800b00a:	4805      	ldr	r0, [pc, #20]	; (800b020 <MX_FATFS_Init+0x1c>)
 800b00c:	f002 fedc 	bl	800ddc8 <FATFS_LinkDriver>
 800b010:	4603      	mov	r3, r0
 800b012:	461a      	mov	r2, r3
 800b014:	4b03      	ldr	r3, [pc, #12]	; (800b024 <MX_FATFS_Init+0x20>)
 800b016:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b018:	bf00      	nop
 800b01a:	bd80      	pop	{r7, pc}
 800b01c:	20002598 	.word	0x20002598
 800b020:	200000d4 	.word	0x200000d4
 800b024:	20002594 	.word	0x20002594

0800b028 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b028:	b480      	push	{r7}
 800b02a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b02c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b02e:	4618      	mov	r0, r3
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr

0800b038 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b082      	sub	sp, #8
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	4603      	mov	r3, r0
 800b040:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	SD_disk_initialize (pdrv);
 800b042:	79fb      	ldrb	r3, [r7, #7]
 800b044:	4618      	mov	r0, r3
 800b046:	f7f7 fb31 	bl	80026ac <SD_disk_initialize>
  /* USER CODE END INIT */
}
 800b04a:	bf00      	nop
 800b04c:	4618      	mov	r0, r3
 800b04e:	3708      	adds	r7, #8
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	af00      	add	r7, sp, #0
 800b05a:	4603      	mov	r3, r0
 800b05c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	SD_disk_status (pdrv);
 800b05e:	79fb      	ldrb	r3, [r7, #7]
 800b060:	4618      	mov	r0, r3
 800b062:	f7f7 fc09 	bl	8002878 <SD_disk_status>
  /* USER CODE END STATUS */
}
 800b066:	bf00      	nop
 800b068:	4618      	mov	r0, r3
 800b06a:	3708      	adds	r7, #8
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b084      	sub	sp, #16
 800b074:	af00      	add	r7, sp, #0
 800b076:	60b9      	str	r1, [r7, #8]
 800b078:	607a      	str	r2, [r7, #4]
 800b07a:	603b      	str	r3, [r7, #0]
 800b07c:	4603      	mov	r3, r0
 800b07e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	SD_disk_read (pdrv, buff, sector, count);
 800b080:	7bf8      	ldrb	r0, [r7, #15]
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	687a      	ldr	r2, [r7, #4]
 800b086:	68b9      	ldr	r1, [r7, #8]
 800b088:	f7f7 fc0c 	bl	80028a4 <SD_disk_read>
  /* USER CODE END READ */
}
 800b08c:	bf00      	nop
 800b08e:	4618      	mov	r0, r3
 800b090:	3710      	adds	r7, #16
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}

0800b096 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b096:	b580      	push	{r7, lr}
 800b098:	b084      	sub	sp, #16
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	60b9      	str	r1, [r7, #8]
 800b09e:	607a      	str	r2, [r7, #4]
 800b0a0:	603b      	str	r3, [r7, #0]
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	SD_disk_write (pdrv, buff, sector, count);
 800b0a6:	7bf8      	ldrb	r0, [r7, #15]
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	687a      	ldr	r2, [r7, #4]
 800b0ac:	68b9      	ldr	r1, [r7, #8]
 800b0ae:	f7f7 fc63 	bl	8002978 <SD_disk_write>
  /* USER CODE END WRITE */
}
 800b0b2:	bf00      	nop
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3710      	adds	r7, #16
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}

0800b0bc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	603a      	str	r2, [r7, #0]
 800b0c6:	71fb      	strb	r3, [r7, #7]
 800b0c8:	460b      	mov	r3, r1
 800b0ca:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	SD_disk_ioctl (pdrv, cmd, buff);
 800b0cc:	79fb      	ldrb	r3, [r7, #7]
 800b0ce:	79b9      	ldrb	r1, [r7, #6]
 800b0d0:	683a      	ldr	r2, [r7, #0]
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f7f7 fcd4 	bl	8002a80 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 800b0d8:	bf00      	nop
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3708      	adds	r7, #8
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
	...

0800b0e4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b084      	sub	sp, #16
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b0ee:	79fb      	ldrb	r3, [r7, #7]
 800b0f0:	4a08      	ldr	r2, [pc, #32]	; (800b114 <disk_status+0x30>)
 800b0f2:	009b      	lsls	r3, r3, #2
 800b0f4:	4413      	add	r3, r2
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	79fa      	ldrb	r2, [r7, #7]
 800b0fc:	4905      	ldr	r1, [pc, #20]	; (800b114 <disk_status+0x30>)
 800b0fe:	440a      	add	r2, r1
 800b100:	7a12      	ldrb	r2, [r2, #8]
 800b102:	4610      	mov	r0, r2
 800b104:	4798      	blx	r3
 800b106:	4603      	mov	r3, r0
 800b108:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b10a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3710      	adds	r7, #16
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}
 800b114:	200027c4 	.word	0x200027c4

0800b118 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b084      	sub	sp, #16
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	4603      	mov	r3, r0
 800b120:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b122:	2300      	movs	r3, #0
 800b124:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b126:	79fb      	ldrb	r3, [r7, #7]
 800b128:	4a0d      	ldr	r2, [pc, #52]	; (800b160 <disk_initialize+0x48>)
 800b12a:	5cd3      	ldrb	r3, [r2, r3]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d111      	bne.n	800b154 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b130:	79fb      	ldrb	r3, [r7, #7]
 800b132:	4a0b      	ldr	r2, [pc, #44]	; (800b160 <disk_initialize+0x48>)
 800b134:	2101      	movs	r1, #1
 800b136:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b138:	79fb      	ldrb	r3, [r7, #7]
 800b13a:	4a09      	ldr	r2, [pc, #36]	; (800b160 <disk_initialize+0x48>)
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	4413      	add	r3, r2
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	79fa      	ldrb	r2, [r7, #7]
 800b146:	4906      	ldr	r1, [pc, #24]	; (800b160 <disk_initialize+0x48>)
 800b148:	440a      	add	r2, r1
 800b14a:	7a12      	ldrb	r2, [r2, #8]
 800b14c:	4610      	mov	r0, r2
 800b14e:	4798      	blx	r3
 800b150:	4603      	mov	r3, r0
 800b152:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b154:	7bfb      	ldrb	r3, [r7, #15]
}
 800b156:	4618      	mov	r0, r3
 800b158:	3710      	adds	r7, #16
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	200027c4 	.word	0x200027c4

0800b164 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b164:	b590      	push	{r4, r7, lr}
 800b166:	b087      	sub	sp, #28
 800b168:	af00      	add	r7, sp, #0
 800b16a:	60b9      	str	r1, [r7, #8]
 800b16c:	607a      	str	r2, [r7, #4]
 800b16e:	603b      	str	r3, [r7, #0]
 800b170:	4603      	mov	r3, r0
 800b172:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b174:	7bfb      	ldrb	r3, [r7, #15]
 800b176:	4a0a      	ldr	r2, [pc, #40]	; (800b1a0 <disk_read+0x3c>)
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	4413      	add	r3, r2
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	689c      	ldr	r4, [r3, #8]
 800b180:	7bfb      	ldrb	r3, [r7, #15]
 800b182:	4a07      	ldr	r2, [pc, #28]	; (800b1a0 <disk_read+0x3c>)
 800b184:	4413      	add	r3, r2
 800b186:	7a18      	ldrb	r0, [r3, #8]
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	687a      	ldr	r2, [r7, #4]
 800b18c:	68b9      	ldr	r1, [r7, #8]
 800b18e:	47a0      	blx	r4
 800b190:	4603      	mov	r3, r0
 800b192:	75fb      	strb	r3, [r7, #23]
  return res;
 800b194:	7dfb      	ldrb	r3, [r7, #23]
}
 800b196:	4618      	mov	r0, r3
 800b198:	371c      	adds	r7, #28
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd90      	pop	{r4, r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	200027c4 	.word	0x200027c4

0800b1a4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b1a4:	b590      	push	{r4, r7, lr}
 800b1a6:	b087      	sub	sp, #28
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	60b9      	str	r1, [r7, #8]
 800b1ac:	607a      	str	r2, [r7, #4]
 800b1ae:	603b      	str	r3, [r7, #0]
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b1b4:	7bfb      	ldrb	r3, [r7, #15]
 800b1b6:	4a0a      	ldr	r2, [pc, #40]	; (800b1e0 <disk_write+0x3c>)
 800b1b8:	009b      	lsls	r3, r3, #2
 800b1ba:	4413      	add	r3, r2
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	68dc      	ldr	r4, [r3, #12]
 800b1c0:	7bfb      	ldrb	r3, [r7, #15]
 800b1c2:	4a07      	ldr	r2, [pc, #28]	; (800b1e0 <disk_write+0x3c>)
 800b1c4:	4413      	add	r3, r2
 800b1c6:	7a18      	ldrb	r0, [r3, #8]
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	687a      	ldr	r2, [r7, #4]
 800b1cc:	68b9      	ldr	r1, [r7, #8]
 800b1ce:	47a0      	blx	r4
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	75fb      	strb	r3, [r7, #23]
  return res;
 800b1d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	371c      	adds	r7, #28
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd90      	pop	{r4, r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	200027c4 	.word	0x200027c4

0800b1e4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b084      	sub	sp, #16
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	603a      	str	r2, [r7, #0]
 800b1ee:	71fb      	strb	r3, [r7, #7]
 800b1f0:	460b      	mov	r3, r1
 800b1f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b1f4:	79fb      	ldrb	r3, [r7, #7]
 800b1f6:	4a09      	ldr	r2, [pc, #36]	; (800b21c <disk_ioctl+0x38>)
 800b1f8:	009b      	lsls	r3, r3, #2
 800b1fa:	4413      	add	r3, r2
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	691b      	ldr	r3, [r3, #16]
 800b200:	79fa      	ldrb	r2, [r7, #7]
 800b202:	4906      	ldr	r1, [pc, #24]	; (800b21c <disk_ioctl+0x38>)
 800b204:	440a      	add	r2, r1
 800b206:	7a10      	ldrb	r0, [r2, #8]
 800b208:	79b9      	ldrb	r1, [r7, #6]
 800b20a:	683a      	ldr	r2, [r7, #0]
 800b20c:	4798      	blx	r3
 800b20e:	4603      	mov	r3, r0
 800b210:	73fb      	strb	r3, [r7, #15]
  return res;
 800b212:	7bfb      	ldrb	r3, [r7, #15]
}
 800b214:	4618      	mov	r0, r3
 800b216:	3710      	adds	r7, #16
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	200027c4 	.word	0x200027c4

0800b220 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b220:	b480      	push	{r7}
 800b222:	b085      	sub	sp, #20
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	3301      	adds	r3, #1
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b230:	89fb      	ldrh	r3, [r7, #14]
 800b232:	021b      	lsls	r3, r3, #8
 800b234:	b21a      	sxth	r2, r3
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	b21b      	sxth	r3, r3
 800b23c:	4313      	orrs	r3, r2
 800b23e:	b21b      	sxth	r3, r3
 800b240:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b242:	89fb      	ldrh	r3, [r7, #14]
}
 800b244:	4618      	mov	r0, r3
 800b246:	3714      	adds	r7, #20
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b250:	b480      	push	{r7}
 800b252:	b085      	sub	sp, #20
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	3303      	adds	r3, #3
 800b25c:	781b      	ldrb	r3, [r3, #0]
 800b25e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	021b      	lsls	r3, r3, #8
 800b264:	687a      	ldr	r2, [r7, #4]
 800b266:	3202      	adds	r2, #2
 800b268:	7812      	ldrb	r2, [r2, #0]
 800b26a:	4313      	orrs	r3, r2
 800b26c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	021b      	lsls	r3, r3, #8
 800b272:	687a      	ldr	r2, [r7, #4]
 800b274:	3201      	adds	r2, #1
 800b276:	7812      	ldrb	r2, [r2, #0]
 800b278:	4313      	orrs	r3, r2
 800b27a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	021b      	lsls	r3, r3, #8
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	7812      	ldrb	r2, [r2, #0]
 800b284:	4313      	orrs	r3, r2
 800b286:	60fb      	str	r3, [r7, #12]
	return rv;
 800b288:	68fb      	ldr	r3, [r7, #12]
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3714      	adds	r7, #20
 800b28e:	46bd      	mov	sp, r7
 800b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b294:	4770      	bx	lr

0800b296 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b296:	b480      	push	{r7}
 800b298:	b083      	sub	sp, #12
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	6078      	str	r0, [r7, #4]
 800b29e:	460b      	mov	r3, r1
 800b2a0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	1c5a      	adds	r2, r3, #1
 800b2a6:	607a      	str	r2, [r7, #4]
 800b2a8:	887a      	ldrh	r2, [r7, #2]
 800b2aa:	b2d2      	uxtb	r2, r2
 800b2ac:	701a      	strb	r2, [r3, #0]
 800b2ae:	887b      	ldrh	r3, [r7, #2]
 800b2b0:	0a1b      	lsrs	r3, r3, #8
 800b2b2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	1c5a      	adds	r2, r3, #1
 800b2b8:	607a      	str	r2, [r7, #4]
 800b2ba:	887a      	ldrh	r2, [r7, #2]
 800b2bc:	b2d2      	uxtb	r2, r2
 800b2be:	701a      	strb	r2, [r3, #0]
}
 800b2c0:	bf00      	nop
 800b2c2:	370c      	adds	r7, #12
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr

0800b2cc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b083      	sub	sp, #12
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	1c5a      	adds	r2, r3, #1
 800b2da:	607a      	str	r2, [r7, #4]
 800b2dc:	683a      	ldr	r2, [r7, #0]
 800b2de:	b2d2      	uxtb	r2, r2
 800b2e0:	701a      	strb	r2, [r3, #0]
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	0a1b      	lsrs	r3, r3, #8
 800b2e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	1c5a      	adds	r2, r3, #1
 800b2ec:	607a      	str	r2, [r7, #4]
 800b2ee:	683a      	ldr	r2, [r7, #0]
 800b2f0:	b2d2      	uxtb	r2, r2
 800b2f2:	701a      	strb	r2, [r3, #0]
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	0a1b      	lsrs	r3, r3, #8
 800b2f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	1c5a      	adds	r2, r3, #1
 800b2fe:	607a      	str	r2, [r7, #4]
 800b300:	683a      	ldr	r2, [r7, #0]
 800b302:	b2d2      	uxtb	r2, r2
 800b304:	701a      	strb	r2, [r3, #0]
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	0a1b      	lsrs	r3, r3, #8
 800b30a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	1c5a      	adds	r2, r3, #1
 800b310:	607a      	str	r2, [r7, #4]
 800b312:	683a      	ldr	r2, [r7, #0]
 800b314:	b2d2      	uxtb	r2, r2
 800b316:	701a      	strb	r2, [r3, #0]
}
 800b318:	bf00      	nop
 800b31a:	370c      	adds	r7, #12
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr

0800b324 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b324:	b480      	push	{r7}
 800b326:	b087      	sub	sp, #28
 800b328:	af00      	add	r7, sp, #0
 800b32a:	60f8      	str	r0, [r7, #12]
 800b32c:	60b9      	str	r1, [r7, #8]
 800b32e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d00d      	beq.n	800b35a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b33e:	693a      	ldr	r2, [r7, #16]
 800b340:	1c53      	adds	r3, r2, #1
 800b342:	613b      	str	r3, [r7, #16]
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	1c59      	adds	r1, r3, #1
 800b348:	6179      	str	r1, [r7, #20]
 800b34a:	7812      	ldrb	r2, [r2, #0]
 800b34c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	3b01      	subs	r3, #1
 800b352:	607b      	str	r3, [r7, #4]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d1f1      	bne.n	800b33e <mem_cpy+0x1a>
	}
}
 800b35a:	bf00      	nop
 800b35c:	371c      	adds	r7, #28
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr

0800b366 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b366:	b480      	push	{r7}
 800b368:	b087      	sub	sp, #28
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	60f8      	str	r0, [r7, #12]
 800b36e:	60b9      	str	r1, [r7, #8]
 800b370:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	1c5a      	adds	r2, r3, #1
 800b37a:	617a      	str	r2, [r7, #20]
 800b37c:	68ba      	ldr	r2, [r7, #8]
 800b37e:	b2d2      	uxtb	r2, r2
 800b380:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	3b01      	subs	r3, #1
 800b386:	607b      	str	r3, [r7, #4]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d1f3      	bne.n	800b376 <mem_set+0x10>
}
 800b38e:	bf00      	nop
 800b390:	bf00      	nop
 800b392:	371c      	adds	r7, #28
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr

0800b39c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b39c:	b480      	push	{r7}
 800b39e:	b089      	sub	sp, #36	; 0x24
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	60f8      	str	r0, [r7, #12]
 800b3a4:	60b9      	str	r1, [r7, #8]
 800b3a6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	61fb      	str	r3, [r7, #28]
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b3b4:	69fb      	ldr	r3, [r7, #28]
 800b3b6:	1c5a      	adds	r2, r3, #1
 800b3b8:	61fa      	str	r2, [r7, #28]
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	4619      	mov	r1, r3
 800b3be:	69bb      	ldr	r3, [r7, #24]
 800b3c0:	1c5a      	adds	r2, r3, #1
 800b3c2:	61ba      	str	r2, [r7, #24]
 800b3c4:	781b      	ldrb	r3, [r3, #0]
 800b3c6:	1acb      	subs	r3, r1, r3
 800b3c8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	3b01      	subs	r3, #1
 800b3ce:	607b      	str	r3, [r7, #4]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d002      	beq.n	800b3dc <mem_cmp+0x40>
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d0eb      	beq.n	800b3b4 <mem_cmp+0x18>

	return r;
 800b3dc:	697b      	ldr	r3, [r7, #20]
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3724      	adds	r7, #36	; 0x24
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr

0800b3ea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b3ea:	b480      	push	{r7}
 800b3ec:	b083      	sub	sp, #12
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
 800b3f2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b3f4:	e002      	b.n	800b3fc <chk_chr+0x12>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	3301      	adds	r3, #1
 800b3fa:	607b      	str	r3, [r7, #4]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d005      	beq.n	800b410 <chk_chr+0x26>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	461a      	mov	r2, r3
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d1f2      	bne.n	800b3f6 <chk_chr+0xc>
	return *str;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	781b      	ldrb	r3, [r3, #0]
}
 800b414:	4618      	mov	r0, r3
 800b416:	370c      	adds	r7, #12
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr

0800b420 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b420:	b480      	push	{r7}
 800b422:	b085      	sub	sp, #20
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b42a:	2300      	movs	r3, #0
 800b42c:	60bb      	str	r3, [r7, #8]
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	60fb      	str	r3, [r7, #12]
 800b432:	e029      	b.n	800b488 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b434:	4a27      	ldr	r2, [pc, #156]	; (800b4d4 <chk_lock+0xb4>)
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	011b      	lsls	r3, r3, #4
 800b43a:	4413      	add	r3, r2
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d01d      	beq.n	800b47e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b442:	4a24      	ldr	r2, [pc, #144]	; (800b4d4 <chk_lock+0xb4>)
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	011b      	lsls	r3, r3, #4
 800b448:	4413      	add	r3, r2
 800b44a:	681a      	ldr	r2, [r3, #0]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	429a      	cmp	r2, r3
 800b452:	d116      	bne.n	800b482 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b454:	4a1f      	ldr	r2, [pc, #124]	; (800b4d4 <chk_lock+0xb4>)
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	011b      	lsls	r3, r3, #4
 800b45a:	4413      	add	r3, r2
 800b45c:	3304      	adds	r3, #4
 800b45e:	681a      	ldr	r2, [r3, #0]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b464:	429a      	cmp	r2, r3
 800b466:	d10c      	bne.n	800b482 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b468:	4a1a      	ldr	r2, [pc, #104]	; (800b4d4 <chk_lock+0xb4>)
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	011b      	lsls	r3, r3, #4
 800b46e:	4413      	add	r3, r2
 800b470:	3308      	adds	r3, #8
 800b472:	681a      	ldr	r2, [r3, #0]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b478:	429a      	cmp	r2, r3
 800b47a:	d102      	bne.n	800b482 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b47c:	e007      	b.n	800b48e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b47e:	2301      	movs	r3, #1
 800b480:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	3301      	adds	r3, #1
 800b486:	60fb      	str	r3, [r7, #12]
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	d9d2      	bls.n	800b434 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2b02      	cmp	r3, #2
 800b492:	d109      	bne.n	800b4a8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d102      	bne.n	800b4a0 <chk_lock+0x80>
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	2b02      	cmp	r3, #2
 800b49e:	d101      	bne.n	800b4a4 <chk_lock+0x84>
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	e010      	b.n	800b4c6 <chk_lock+0xa6>
 800b4a4:	2312      	movs	r3, #18
 800b4a6:	e00e      	b.n	800b4c6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d108      	bne.n	800b4c0 <chk_lock+0xa0>
 800b4ae:	4a09      	ldr	r2, [pc, #36]	; (800b4d4 <chk_lock+0xb4>)
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	011b      	lsls	r3, r3, #4
 800b4b4:	4413      	add	r3, r2
 800b4b6:	330c      	adds	r3, #12
 800b4b8:	881b      	ldrh	r3, [r3, #0]
 800b4ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4be:	d101      	bne.n	800b4c4 <chk_lock+0xa4>
 800b4c0:	2310      	movs	r3, #16
 800b4c2:	e000      	b.n	800b4c6 <chk_lock+0xa6>
 800b4c4:	2300      	movs	r3, #0
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3714      	adds	r7, #20
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d0:	4770      	bx	lr
 800b4d2:	bf00      	nop
 800b4d4:	200025a4 	.word	0x200025a4

0800b4d8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b083      	sub	sp, #12
 800b4dc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	607b      	str	r3, [r7, #4]
 800b4e2:	e002      	b.n	800b4ea <enq_lock+0x12>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	607b      	str	r3, [r7, #4]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2b01      	cmp	r3, #1
 800b4ee:	d806      	bhi.n	800b4fe <enq_lock+0x26>
 800b4f0:	4a09      	ldr	r2, [pc, #36]	; (800b518 <enq_lock+0x40>)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	011b      	lsls	r3, r3, #4
 800b4f6:	4413      	add	r3, r2
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d1f2      	bne.n	800b4e4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2b02      	cmp	r3, #2
 800b502:	bf14      	ite	ne
 800b504:	2301      	movne	r3, #1
 800b506:	2300      	moveq	r3, #0
 800b508:	b2db      	uxtb	r3, r3
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	370c      	adds	r7, #12
 800b50e:	46bd      	mov	sp, r7
 800b510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b514:	4770      	bx	lr
 800b516:	bf00      	nop
 800b518:	200025a4 	.word	0x200025a4

0800b51c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b085      	sub	sp, #20
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b526:	2300      	movs	r3, #0
 800b528:	60fb      	str	r3, [r7, #12]
 800b52a:	e01f      	b.n	800b56c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b52c:	4a41      	ldr	r2, [pc, #260]	; (800b634 <inc_lock+0x118>)
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	011b      	lsls	r3, r3, #4
 800b532:	4413      	add	r3, r2
 800b534:	681a      	ldr	r2, [r3, #0]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d113      	bne.n	800b566 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b53e:	4a3d      	ldr	r2, [pc, #244]	; (800b634 <inc_lock+0x118>)
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	011b      	lsls	r3, r3, #4
 800b544:	4413      	add	r3, r2
 800b546:	3304      	adds	r3, #4
 800b548:	681a      	ldr	r2, [r3, #0]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b54e:	429a      	cmp	r2, r3
 800b550:	d109      	bne.n	800b566 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b552:	4a38      	ldr	r2, [pc, #224]	; (800b634 <inc_lock+0x118>)
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	011b      	lsls	r3, r3, #4
 800b558:	4413      	add	r3, r2
 800b55a:	3308      	adds	r3, #8
 800b55c:	681a      	ldr	r2, [r3, #0]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b562:	429a      	cmp	r2, r3
 800b564:	d006      	beq.n	800b574 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	3301      	adds	r3, #1
 800b56a:	60fb      	str	r3, [r7, #12]
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	2b01      	cmp	r3, #1
 800b570:	d9dc      	bls.n	800b52c <inc_lock+0x10>
 800b572:	e000      	b.n	800b576 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b574:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2b02      	cmp	r3, #2
 800b57a:	d132      	bne.n	800b5e2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b57c:	2300      	movs	r3, #0
 800b57e:	60fb      	str	r3, [r7, #12]
 800b580:	e002      	b.n	800b588 <inc_lock+0x6c>
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	3301      	adds	r3, #1
 800b586:	60fb      	str	r3, [r7, #12]
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2b01      	cmp	r3, #1
 800b58c:	d806      	bhi.n	800b59c <inc_lock+0x80>
 800b58e:	4a29      	ldr	r2, [pc, #164]	; (800b634 <inc_lock+0x118>)
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	011b      	lsls	r3, r3, #4
 800b594:	4413      	add	r3, r2
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d1f2      	bne.n	800b582 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2b02      	cmp	r3, #2
 800b5a0:	d101      	bne.n	800b5a6 <inc_lock+0x8a>
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	e040      	b.n	800b628 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681a      	ldr	r2, [r3, #0]
 800b5aa:	4922      	ldr	r1, [pc, #136]	; (800b634 <inc_lock+0x118>)
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	011b      	lsls	r3, r3, #4
 800b5b0:	440b      	add	r3, r1
 800b5b2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	689a      	ldr	r2, [r3, #8]
 800b5b8:	491e      	ldr	r1, [pc, #120]	; (800b634 <inc_lock+0x118>)
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	011b      	lsls	r3, r3, #4
 800b5be:	440b      	add	r3, r1
 800b5c0:	3304      	adds	r3, #4
 800b5c2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	695a      	ldr	r2, [r3, #20]
 800b5c8:	491a      	ldr	r1, [pc, #104]	; (800b634 <inc_lock+0x118>)
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	011b      	lsls	r3, r3, #4
 800b5ce:	440b      	add	r3, r1
 800b5d0:	3308      	adds	r3, #8
 800b5d2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b5d4:	4a17      	ldr	r2, [pc, #92]	; (800b634 <inc_lock+0x118>)
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	011b      	lsls	r3, r3, #4
 800b5da:	4413      	add	r3, r2
 800b5dc:	330c      	adds	r3, #12
 800b5de:	2200      	movs	r2, #0
 800b5e0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d009      	beq.n	800b5fc <inc_lock+0xe0>
 800b5e8:	4a12      	ldr	r2, [pc, #72]	; (800b634 <inc_lock+0x118>)
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	011b      	lsls	r3, r3, #4
 800b5ee:	4413      	add	r3, r2
 800b5f0:	330c      	adds	r3, #12
 800b5f2:	881b      	ldrh	r3, [r3, #0]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d001      	beq.n	800b5fc <inc_lock+0xe0>
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	e015      	b.n	800b628 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d108      	bne.n	800b614 <inc_lock+0xf8>
 800b602:	4a0c      	ldr	r2, [pc, #48]	; (800b634 <inc_lock+0x118>)
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	011b      	lsls	r3, r3, #4
 800b608:	4413      	add	r3, r2
 800b60a:	330c      	adds	r3, #12
 800b60c:	881b      	ldrh	r3, [r3, #0]
 800b60e:	3301      	adds	r3, #1
 800b610:	b29a      	uxth	r2, r3
 800b612:	e001      	b.n	800b618 <inc_lock+0xfc>
 800b614:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b618:	4906      	ldr	r1, [pc, #24]	; (800b634 <inc_lock+0x118>)
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	011b      	lsls	r3, r3, #4
 800b61e:	440b      	add	r3, r1
 800b620:	330c      	adds	r3, #12
 800b622:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	3301      	adds	r3, #1
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3714      	adds	r7, #20
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	4770      	bx	lr
 800b634:	200025a4 	.word	0x200025a4

0800b638 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b638:	b480      	push	{r7}
 800b63a:	b085      	sub	sp, #20
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	3b01      	subs	r3, #1
 800b644:	607b      	str	r3, [r7, #4]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2b01      	cmp	r3, #1
 800b64a:	d825      	bhi.n	800b698 <dec_lock+0x60>
		n = Files[i].ctr;
 800b64c:	4a17      	ldr	r2, [pc, #92]	; (800b6ac <dec_lock+0x74>)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	011b      	lsls	r3, r3, #4
 800b652:	4413      	add	r3, r2
 800b654:	330c      	adds	r3, #12
 800b656:	881b      	ldrh	r3, [r3, #0]
 800b658:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b65a:	89fb      	ldrh	r3, [r7, #14]
 800b65c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b660:	d101      	bne.n	800b666 <dec_lock+0x2e>
 800b662:	2300      	movs	r3, #0
 800b664:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b666:	89fb      	ldrh	r3, [r7, #14]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d002      	beq.n	800b672 <dec_lock+0x3a>
 800b66c:	89fb      	ldrh	r3, [r7, #14]
 800b66e:	3b01      	subs	r3, #1
 800b670:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b672:	4a0e      	ldr	r2, [pc, #56]	; (800b6ac <dec_lock+0x74>)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	011b      	lsls	r3, r3, #4
 800b678:	4413      	add	r3, r2
 800b67a:	330c      	adds	r3, #12
 800b67c:	89fa      	ldrh	r2, [r7, #14]
 800b67e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b680:	89fb      	ldrh	r3, [r7, #14]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d105      	bne.n	800b692 <dec_lock+0x5a>
 800b686:	4a09      	ldr	r2, [pc, #36]	; (800b6ac <dec_lock+0x74>)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	011b      	lsls	r3, r3, #4
 800b68c:	4413      	add	r3, r2
 800b68e:	2200      	movs	r2, #0
 800b690:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b692:	2300      	movs	r3, #0
 800b694:	737b      	strb	r3, [r7, #13]
 800b696:	e001      	b.n	800b69c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b698:	2302      	movs	r3, #2
 800b69a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b69c:	7b7b      	ldrb	r3, [r7, #13]
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3714      	adds	r7, #20
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a8:	4770      	bx	lr
 800b6aa:	bf00      	nop
 800b6ac:	200025a4 	.word	0x200025a4

0800b6b0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b085      	sub	sp, #20
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	60fb      	str	r3, [r7, #12]
 800b6bc:	e010      	b.n	800b6e0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b6be:	4a0d      	ldr	r2, [pc, #52]	; (800b6f4 <clear_lock+0x44>)
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	011b      	lsls	r3, r3, #4
 800b6c4:	4413      	add	r3, r2
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	687a      	ldr	r2, [r7, #4]
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d105      	bne.n	800b6da <clear_lock+0x2a>
 800b6ce:	4a09      	ldr	r2, [pc, #36]	; (800b6f4 <clear_lock+0x44>)
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	011b      	lsls	r3, r3, #4
 800b6d4:	4413      	add	r3, r2
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	3301      	adds	r3, #1
 800b6de:	60fb      	str	r3, [r7, #12]
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	2b01      	cmp	r3, #1
 800b6e4:	d9eb      	bls.n	800b6be <clear_lock+0xe>
	}
}
 800b6e6:	bf00      	nop
 800b6e8:	bf00      	nop
 800b6ea:	3714      	adds	r7, #20
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr
 800b6f4:	200025a4 	.word	0x200025a4

0800b6f8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b086      	sub	sp, #24
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b700:	2300      	movs	r3, #0
 800b702:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	78db      	ldrb	r3, [r3, #3]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d034      	beq.n	800b776 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b710:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	7858      	ldrb	r0, [r3, #1]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b71c:	2301      	movs	r3, #1
 800b71e:	697a      	ldr	r2, [r7, #20]
 800b720:	f7ff fd40 	bl	800b1a4 <disk_write>
 800b724:	4603      	mov	r3, r0
 800b726:	2b00      	cmp	r3, #0
 800b728:	d002      	beq.n	800b730 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b72a:	2301      	movs	r3, #1
 800b72c:	73fb      	strb	r3, [r7, #15]
 800b72e:	e022      	b.n	800b776 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2200      	movs	r2, #0
 800b734:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b73a:	697a      	ldr	r2, [r7, #20]
 800b73c:	1ad2      	subs	r2, r2, r3
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6a1b      	ldr	r3, [r3, #32]
 800b742:	429a      	cmp	r2, r3
 800b744:	d217      	bcs.n	800b776 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	789b      	ldrb	r3, [r3, #2]
 800b74a:	613b      	str	r3, [r7, #16]
 800b74c:	e010      	b.n	800b770 <sync_window+0x78>
					wsect += fs->fsize;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6a1b      	ldr	r3, [r3, #32]
 800b752:	697a      	ldr	r2, [r7, #20]
 800b754:	4413      	add	r3, r2
 800b756:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	7858      	ldrb	r0, [r3, #1]
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b762:	2301      	movs	r3, #1
 800b764:	697a      	ldr	r2, [r7, #20]
 800b766:	f7ff fd1d 	bl	800b1a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	3b01      	subs	r3, #1
 800b76e:	613b      	str	r3, [r7, #16]
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	2b01      	cmp	r3, #1
 800b774:	d8eb      	bhi.n	800b74e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b776:	7bfb      	ldrb	r3, [r7, #15]
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3718      	adds	r7, #24
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b084      	sub	sp, #16
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b78a:	2300      	movs	r3, #0
 800b78c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b792:	683a      	ldr	r2, [r7, #0]
 800b794:	429a      	cmp	r2, r3
 800b796:	d01b      	beq.n	800b7d0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f7ff ffad 	bl	800b6f8 <sync_window>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b7a2:	7bfb      	ldrb	r3, [r7, #15]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d113      	bne.n	800b7d0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	7858      	ldrb	r0, [r3, #1]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	683a      	ldr	r2, [r7, #0]
 800b7b6:	f7ff fcd5 	bl	800b164 <disk_read>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d004      	beq.n	800b7ca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b7c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b7c4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	683a      	ldr	r2, [r7, #0]
 800b7ce:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800b7d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3710      	adds	r7, #16
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}
	...

0800b7dc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b084      	sub	sp, #16
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f7ff ff87 	bl	800b6f8 <sync_window>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b7ee:	7bfb      	ldrb	r3, [r7, #15]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d159      	bne.n	800b8a8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	2b03      	cmp	r3, #3
 800b7fa:	d149      	bne.n	800b890 <sync_fs+0xb4>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	791b      	ldrb	r3, [r3, #4]
 800b800:	2b01      	cmp	r3, #1
 800b802:	d145      	bne.n	800b890 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	899b      	ldrh	r3, [r3, #12]
 800b80e:	461a      	mov	r2, r3
 800b810:	2100      	movs	r1, #0
 800b812:	f7ff fda8 	bl	800b366 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	3338      	adds	r3, #56	; 0x38
 800b81a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b81e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b822:	4618      	mov	r0, r3
 800b824:	f7ff fd37 	bl	800b296 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	3338      	adds	r3, #56	; 0x38
 800b82c:	4921      	ldr	r1, [pc, #132]	; (800b8b4 <sync_fs+0xd8>)
 800b82e:	4618      	mov	r0, r3
 800b830:	f7ff fd4c 	bl	800b2cc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	3338      	adds	r3, #56	; 0x38
 800b838:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b83c:	491e      	ldr	r1, [pc, #120]	; (800b8b8 <sync_fs+0xdc>)
 800b83e:	4618      	mov	r0, r3
 800b840:	f7ff fd44 	bl	800b2cc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	3338      	adds	r3, #56	; 0x38
 800b848:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	699b      	ldr	r3, [r3, #24]
 800b850:	4619      	mov	r1, r3
 800b852:	4610      	mov	r0, r2
 800b854:	f7ff fd3a 	bl	800b2cc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	3338      	adds	r3, #56	; 0x38
 800b85c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	695b      	ldr	r3, [r3, #20]
 800b864:	4619      	mov	r1, r3
 800b866:	4610      	mov	r0, r2
 800b868:	f7ff fd30 	bl	800b2cc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b870:	1c5a      	adds	r2, r3, #1
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	7858      	ldrb	r0, [r3, #1]
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b884:	2301      	movs	r3, #1
 800b886:	f7ff fc8d 	bl	800b1a4 <disk_write>
			fs->fsi_flag = 0;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2200      	movs	r2, #0
 800b88e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	785b      	ldrb	r3, [r3, #1]
 800b894:	2200      	movs	r2, #0
 800b896:	2100      	movs	r1, #0
 800b898:	4618      	mov	r0, r3
 800b89a:	f7ff fca3 	bl	800b1e4 <disk_ioctl>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d001      	beq.n	800b8a8 <sync_fs+0xcc>
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b8a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3710      	adds	r7, #16
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	41615252 	.word	0x41615252
 800b8b8:	61417272 	.word	0x61417272

0800b8bc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b083      	sub	sp, #12
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	3b02      	subs	r3, #2
 800b8ca:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	69db      	ldr	r3, [r3, #28]
 800b8d0:	3b02      	subs	r3, #2
 800b8d2:	683a      	ldr	r2, [r7, #0]
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d301      	bcc.n	800b8dc <clust2sect+0x20>
 800b8d8:	2300      	movs	r3, #0
 800b8da:	e008      	b.n	800b8ee <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	895b      	ldrh	r3, [r3, #10]
 800b8e0:	461a      	mov	r2, r3
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	fb03 f202 	mul.w	r2, r3, r2
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8ec:	4413      	add	r3, r2
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	370c      	adds	r7, #12
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f8:	4770      	bx	lr

0800b8fa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b8fa:	b580      	push	{r7, lr}
 800b8fc:	b086      	sub	sp, #24
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	6078      	str	r0, [r7, #4]
 800b902:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	2b01      	cmp	r3, #1
 800b90e:	d904      	bls.n	800b91a <get_fat+0x20>
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	69db      	ldr	r3, [r3, #28]
 800b914:	683a      	ldr	r2, [r7, #0]
 800b916:	429a      	cmp	r2, r3
 800b918:	d302      	bcc.n	800b920 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b91a:	2301      	movs	r3, #1
 800b91c:	617b      	str	r3, [r7, #20]
 800b91e:	e0bb      	b.n	800ba98 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b920:	f04f 33ff 	mov.w	r3, #4294967295
 800b924:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	2b03      	cmp	r3, #3
 800b92c:	f000 8083 	beq.w	800ba36 <get_fat+0x13c>
 800b930:	2b03      	cmp	r3, #3
 800b932:	f300 80a7 	bgt.w	800ba84 <get_fat+0x18a>
 800b936:	2b01      	cmp	r3, #1
 800b938:	d002      	beq.n	800b940 <get_fat+0x46>
 800b93a:	2b02      	cmp	r3, #2
 800b93c:	d056      	beq.n	800b9ec <get_fat+0xf2>
 800b93e:	e0a1      	b.n	800ba84 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	60fb      	str	r3, [r7, #12]
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	085b      	lsrs	r3, r3, #1
 800b948:	68fa      	ldr	r2, [r7, #12]
 800b94a:	4413      	add	r3, r2
 800b94c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b94e:	693b      	ldr	r3, [r7, #16]
 800b950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	899b      	ldrh	r3, [r3, #12]
 800b956:	4619      	mov	r1, r3
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b95e:	4413      	add	r3, r2
 800b960:	4619      	mov	r1, r3
 800b962:	6938      	ldr	r0, [r7, #16]
 800b964:	f7ff ff0c 	bl	800b780 <move_window>
 800b968:	4603      	mov	r3, r0
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	f040 808d 	bne.w	800ba8a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	1c5a      	adds	r2, r3, #1
 800b974:	60fa      	str	r2, [r7, #12]
 800b976:	693a      	ldr	r2, [r7, #16]
 800b978:	8992      	ldrh	r2, [r2, #12]
 800b97a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b97e:	fb01 f202 	mul.w	r2, r1, r2
 800b982:	1a9b      	subs	r3, r3, r2
 800b984:	693a      	ldr	r2, [r7, #16]
 800b986:	4413      	add	r3, r2
 800b988:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b98c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	899b      	ldrh	r3, [r3, #12]
 800b996:	4619      	mov	r1, r3
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b99e:	4413      	add	r3, r2
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	6938      	ldr	r0, [r7, #16]
 800b9a4:	f7ff feec 	bl	800b780 <move_window>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d16f      	bne.n	800ba8e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	899b      	ldrh	r3, [r3, #12]
 800b9b2:	461a      	mov	r2, r3
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	fbb3 f1f2 	udiv	r1, r3, r2
 800b9ba:	fb01 f202 	mul.w	r2, r1, r2
 800b9be:	1a9b      	subs	r3, r3, r2
 800b9c0:	693a      	ldr	r2, [r7, #16]
 800b9c2:	4413      	add	r3, r2
 800b9c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b9c8:	021b      	lsls	r3, r3, #8
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	f003 0301 	and.w	r3, r3, #1
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d002      	beq.n	800b9e2 <get_fat+0xe8>
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	091b      	lsrs	r3, r3, #4
 800b9e0:	e002      	b.n	800b9e8 <get_fat+0xee>
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b9e8:	617b      	str	r3, [r7, #20]
			break;
 800b9ea:	e055      	b.n	800ba98 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	899b      	ldrh	r3, [r3, #12]
 800b9f4:	085b      	lsrs	r3, r3, #1
 800b9f6:	b29b      	uxth	r3, r3
 800b9f8:	4619      	mov	r1, r3
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	fbb3 f3f1 	udiv	r3, r3, r1
 800ba00:	4413      	add	r3, r2
 800ba02:	4619      	mov	r1, r3
 800ba04:	6938      	ldr	r0, [r7, #16]
 800ba06:	f7ff febb 	bl	800b780 <move_window>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d140      	bne.n	800ba92 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	005b      	lsls	r3, r3, #1
 800ba1a:	693a      	ldr	r2, [r7, #16]
 800ba1c:	8992      	ldrh	r2, [r2, #12]
 800ba1e:	fbb3 f0f2 	udiv	r0, r3, r2
 800ba22:	fb00 f202 	mul.w	r2, r0, r2
 800ba26:	1a9b      	subs	r3, r3, r2
 800ba28:	440b      	add	r3, r1
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f7ff fbf8 	bl	800b220 <ld_word>
 800ba30:	4603      	mov	r3, r0
 800ba32:	617b      	str	r3, [r7, #20]
			break;
 800ba34:	e030      	b.n	800ba98 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	899b      	ldrh	r3, [r3, #12]
 800ba3e:	089b      	lsrs	r3, r3, #2
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	4619      	mov	r1, r3
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	fbb3 f3f1 	udiv	r3, r3, r1
 800ba4a:	4413      	add	r3, r2
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	6938      	ldr	r0, [r7, #16]
 800ba50:	f7ff fe96 	bl	800b780 <move_window>
 800ba54:	4603      	mov	r3, r0
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d11d      	bne.n	800ba96 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	693a      	ldr	r2, [r7, #16]
 800ba66:	8992      	ldrh	r2, [r2, #12]
 800ba68:	fbb3 f0f2 	udiv	r0, r3, r2
 800ba6c:	fb00 f202 	mul.w	r2, r0, r2
 800ba70:	1a9b      	subs	r3, r3, r2
 800ba72:	440b      	add	r3, r1
 800ba74:	4618      	mov	r0, r3
 800ba76:	f7ff fbeb 	bl	800b250 <ld_dword>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ba80:	617b      	str	r3, [r7, #20]
			break;
 800ba82:	e009      	b.n	800ba98 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ba84:	2301      	movs	r3, #1
 800ba86:	617b      	str	r3, [r7, #20]
 800ba88:	e006      	b.n	800ba98 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ba8a:	bf00      	nop
 800ba8c:	e004      	b.n	800ba98 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ba8e:	bf00      	nop
 800ba90:	e002      	b.n	800ba98 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ba92:	bf00      	nop
 800ba94:	e000      	b.n	800ba98 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ba96:	bf00      	nop
		}
	}

	return val;
 800ba98:	697b      	ldr	r3, [r7, #20]
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3718      	adds	r7, #24
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}

0800baa2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800baa2:	b590      	push	{r4, r7, lr}
 800baa4:	b089      	sub	sp, #36	; 0x24
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	60f8      	str	r0, [r7, #12]
 800baaa:	60b9      	str	r1, [r7, #8]
 800baac:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800baae:	2302      	movs	r3, #2
 800bab0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	2b01      	cmp	r3, #1
 800bab6:	f240 8109 	bls.w	800bccc <put_fat+0x22a>
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	69db      	ldr	r3, [r3, #28]
 800babe:	68ba      	ldr	r2, [r7, #8]
 800bac0:	429a      	cmp	r2, r3
 800bac2:	f080 8103 	bcs.w	800bccc <put_fat+0x22a>
		switch (fs->fs_type) {
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	2b03      	cmp	r3, #3
 800bacc:	f000 80b6 	beq.w	800bc3c <put_fat+0x19a>
 800bad0:	2b03      	cmp	r3, #3
 800bad2:	f300 80fb 	bgt.w	800bccc <put_fat+0x22a>
 800bad6:	2b01      	cmp	r3, #1
 800bad8:	d003      	beq.n	800bae2 <put_fat+0x40>
 800bada:	2b02      	cmp	r3, #2
 800badc:	f000 8083 	beq.w	800bbe6 <put_fat+0x144>
 800bae0:	e0f4      	b.n	800bccc <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	61bb      	str	r3, [r7, #24]
 800bae6:	69bb      	ldr	r3, [r7, #24]
 800bae8:	085b      	lsrs	r3, r3, #1
 800baea:	69ba      	ldr	r2, [r7, #24]
 800baec:	4413      	add	r3, r2
 800baee:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	899b      	ldrh	r3, [r3, #12]
 800baf8:	4619      	mov	r1, r3
 800bafa:	69bb      	ldr	r3, [r7, #24]
 800bafc:	fbb3 f3f1 	udiv	r3, r3, r1
 800bb00:	4413      	add	r3, r2
 800bb02:	4619      	mov	r1, r3
 800bb04:	68f8      	ldr	r0, [r7, #12]
 800bb06:	f7ff fe3b 	bl	800b780 <move_window>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bb0e:	7ffb      	ldrb	r3, [r7, #31]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	f040 80d4 	bne.w	800bcbe <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bb1c:	69bb      	ldr	r3, [r7, #24]
 800bb1e:	1c5a      	adds	r2, r3, #1
 800bb20:	61ba      	str	r2, [r7, #24]
 800bb22:	68fa      	ldr	r2, [r7, #12]
 800bb24:	8992      	ldrh	r2, [r2, #12]
 800bb26:	fbb3 f0f2 	udiv	r0, r3, r2
 800bb2a:	fb00 f202 	mul.w	r2, r0, r2
 800bb2e:	1a9b      	subs	r3, r3, r2
 800bb30:	440b      	add	r3, r1
 800bb32:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	f003 0301 	and.w	r3, r3, #1
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d00d      	beq.n	800bb5a <put_fat+0xb8>
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	781b      	ldrb	r3, [r3, #0]
 800bb42:	b25b      	sxtb	r3, r3
 800bb44:	f003 030f 	and.w	r3, r3, #15
 800bb48:	b25a      	sxtb	r2, r3
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	b2db      	uxtb	r3, r3
 800bb4e:	011b      	lsls	r3, r3, #4
 800bb50:	b25b      	sxtb	r3, r3
 800bb52:	4313      	orrs	r3, r2
 800bb54:	b25b      	sxtb	r3, r3
 800bb56:	b2db      	uxtb	r3, r3
 800bb58:	e001      	b.n	800bb5e <put_fat+0xbc>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	b2db      	uxtb	r3, r3
 800bb5e:	697a      	ldr	r2, [r7, #20]
 800bb60:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2201      	movs	r2, #1
 800bb66:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	899b      	ldrh	r3, [r3, #12]
 800bb70:	4619      	mov	r1, r3
 800bb72:	69bb      	ldr	r3, [r7, #24]
 800bb74:	fbb3 f3f1 	udiv	r3, r3, r1
 800bb78:	4413      	add	r3, r2
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	68f8      	ldr	r0, [r7, #12]
 800bb7e:	f7ff fdff 	bl	800b780 <move_window>
 800bb82:	4603      	mov	r3, r0
 800bb84:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bb86:	7ffb      	ldrb	r3, [r7, #31]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	f040 809a 	bne.w	800bcc2 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	899b      	ldrh	r3, [r3, #12]
 800bb98:	461a      	mov	r2, r3
 800bb9a:	69bb      	ldr	r3, [r7, #24]
 800bb9c:	fbb3 f0f2 	udiv	r0, r3, r2
 800bba0:	fb00 f202 	mul.w	r2, r0, r2
 800bba4:	1a9b      	subs	r3, r3, r2
 800bba6:	440b      	add	r3, r1
 800bba8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	f003 0301 	and.w	r3, r3, #1
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d003      	beq.n	800bbbc <put_fat+0x11a>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	091b      	lsrs	r3, r3, #4
 800bbb8:	b2db      	uxtb	r3, r3
 800bbba:	e00e      	b.n	800bbda <put_fat+0x138>
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	781b      	ldrb	r3, [r3, #0]
 800bbc0:	b25b      	sxtb	r3, r3
 800bbc2:	f023 030f 	bic.w	r3, r3, #15
 800bbc6:	b25a      	sxtb	r2, r3
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	0a1b      	lsrs	r3, r3, #8
 800bbcc:	b25b      	sxtb	r3, r3
 800bbce:	f003 030f 	and.w	r3, r3, #15
 800bbd2:	b25b      	sxtb	r3, r3
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	b25b      	sxtb	r3, r3
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	697a      	ldr	r2, [r7, #20]
 800bbdc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	70da      	strb	r2, [r3, #3]
			break;
 800bbe4:	e072      	b.n	800bccc <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	899b      	ldrh	r3, [r3, #12]
 800bbee:	085b      	lsrs	r3, r3, #1
 800bbf0:	b29b      	uxth	r3, r3
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	fbb3 f3f1 	udiv	r3, r3, r1
 800bbfa:	4413      	add	r3, r2
 800bbfc:	4619      	mov	r1, r3
 800bbfe:	68f8      	ldr	r0, [r7, #12]
 800bc00:	f7ff fdbe 	bl	800b780 <move_window>
 800bc04:	4603      	mov	r3, r0
 800bc06:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bc08:	7ffb      	ldrb	r3, [r7, #31]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d15b      	bne.n	800bcc6 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	005b      	lsls	r3, r3, #1
 800bc18:	68fa      	ldr	r2, [r7, #12]
 800bc1a:	8992      	ldrh	r2, [r2, #12]
 800bc1c:	fbb3 f0f2 	udiv	r0, r3, r2
 800bc20:	fb00 f202 	mul.w	r2, r0, r2
 800bc24:	1a9b      	subs	r3, r3, r2
 800bc26:	440b      	add	r3, r1
 800bc28:	687a      	ldr	r2, [r7, #4]
 800bc2a:	b292      	uxth	r2, r2
 800bc2c:	4611      	mov	r1, r2
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7ff fb31 	bl	800b296 <st_word>
			fs->wflag = 1;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2201      	movs	r2, #1
 800bc38:	70da      	strb	r2, [r3, #3]
			break;
 800bc3a:	e047      	b.n	800bccc <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	899b      	ldrh	r3, [r3, #12]
 800bc44:	089b      	lsrs	r3, r3, #2
 800bc46:	b29b      	uxth	r3, r3
 800bc48:	4619      	mov	r1, r3
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	fbb3 f3f1 	udiv	r3, r3, r1
 800bc50:	4413      	add	r3, r2
 800bc52:	4619      	mov	r1, r3
 800bc54:	68f8      	ldr	r0, [r7, #12]
 800bc56:	f7ff fd93 	bl	800b780 <move_window>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bc5e:	7ffb      	ldrb	r3, [r7, #31]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d132      	bne.n	800bcca <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	68fa      	ldr	r2, [r7, #12]
 800bc76:	8992      	ldrh	r2, [r2, #12]
 800bc78:	fbb3 f0f2 	udiv	r0, r3, r2
 800bc7c:	fb00 f202 	mul.w	r2, r0, r2
 800bc80:	1a9b      	subs	r3, r3, r2
 800bc82:	440b      	add	r3, r1
 800bc84:	4618      	mov	r0, r3
 800bc86:	f7ff fae3 	bl	800b250 <ld_dword>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bc90:	4323      	orrs	r3, r4
 800bc92:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	009b      	lsls	r3, r3, #2
 800bc9e:	68fa      	ldr	r2, [r7, #12]
 800bca0:	8992      	ldrh	r2, [r2, #12]
 800bca2:	fbb3 f0f2 	udiv	r0, r3, r2
 800bca6:	fb00 f202 	mul.w	r2, r0, r2
 800bcaa:	1a9b      	subs	r3, r3, r2
 800bcac:	440b      	add	r3, r1
 800bcae:	6879      	ldr	r1, [r7, #4]
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f7ff fb0b 	bl	800b2cc <st_dword>
			fs->wflag = 1;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2201      	movs	r2, #1
 800bcba:	70da      	strb	r2, [r3, #3]
			break;
 800bcbc:	e006      	b.n	800bccc <put_fat+0x22a>
			if (res != FR_OK) break;
 800bcbe:	bf00      	nop
 800bcc0:	e004      	b.n	800bccc <put_fat+0x22a>
			if (res != FR_OK) break;
 800bcc2:	bf00      	nop
 800bcc4:	e002      	b.n	800bccc <put_fat+0x22a>
			if (res != FR_OK) break;
 800bcc6:	bf00      	nop
 800bcc8:	e000      	b.n	800bccc <put_fat+0x22a>
			if (res != FR_OK) break;
 800bcca:	bf00      	nop
		}
	}
	return res;
 800bccc:	7ffb      	ldrb	r3, [r7, #31]
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3724      	adds	r7, #36	; 0x24
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd90      	pop	{r4, r7, pc}

0800bcd6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bcd6:	b580      	push	{r7, lr}
 800bcd8:	b088      	sub	sp, #32
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	60f8      	str	r0, [r7, #12]
 800bcde:	60b9      	str	r1, [r7, #8]
 800bce0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bce2:	2300      	movs	r3, #0
 800bce4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	2b01      	cmp	r3, #1
 800bcf0:	d904      	bls.n	800bcfc <remove_chain+0x26>
 800bcf2:	69bb      	ldr	r3, [r7, #24]
 800bcf4:	69db      	ldr	r3, [r3, #28]
 800bcf6:	68ba      	ldr	r2, [r7, #8]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d301      	bcc.n	800bd00 <remove_chain+0x2a>
 800bcfc:	2302      	movs	r3, #2
 800bcfe:	e04b      	b.n	800bd98 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d00c      	beq.n	800bd20 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800bd06:	f04f 32ff 	mov.w	r2, #4294967295
 800bd0a:	6879      	ldr	r1, [r7, #4]
 800bd0c:	69b8      	ldr	r0, [r7, #24]
 800bd0e:	f7ff fec8 	bl	800baa2 <put_fat>
 800bd12:	4603      	mov	r3, r0
 800bd14:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bd16:	7ffb      	ldrb	r3, [r7, #31]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d001      	beq.n	800bd20 <remove_chain+0x4a>
 800bd1c:	7ffb      	ldrb	r3, [r7, #31]
 800bd1e:	e03b      	b.n	800bd98 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bd20:	68b9      	ldr	r1, [r7, #8]
 800bd22:	68f8      	ldr	r0, [r7, #12]
 800bd24:	f7ff fde9 	bl	800b8fa <get_fat>
 800bd28:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d031      	beq.n	800bd94 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d101      	bne.n	800bd3a <remove_chain+0x64>
 800bd36:	2302      	movs	r3, #2
 800bd38:	e02e      	b.n	800bd98 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd40:	d101      	bne.n	800bd46 <remove_chain+0x70>
 800bd42:	2301      	movs	r3, #1
 800bd44:	e028      	b.n	800bd98 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800bd46:	2200      	movs	r2, #0
 800bd48:	68b9      	ldr	r1, [r7, #8]
 800bd4a:	69b8      	ldr	r0, [r7, #24]
 800bd4c:	f7ff fea9 	bl	800baa2 <put_fat>
 800bd50:	4603      	mov	r3, r0
 800bd52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bd54:	7ffb      	ldrb	r3, [r7, #31]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d001      	beq.n	800bd5e <remove_chain+0x88>
 800bd5a:	7ffb      	ldrb	r3, [r7, #31]
 800bd5c:	e01c      	b.n	800bd98 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bd5e:	69bb      	ldr	r3, [r7, #24]
 800bd60:	699a      	ldr	r2, [r3, #24]
 800bd62:	69bb      	ldr	r3, [r7, #24]
 800bd64:	69db      	ldr	r3, [r3, #28]
 800bd66:	3b02      	subs	r3, #2
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	d20b      	bcs.n	800bd84 <remove_chain+0xae>
			fs->free_clst++;
 800bd6c:	69bb      	ldr	r3, [r7, #24]
 800bd6e:	699b      	ldr	r3, [r3, #24]
 800bd70:	1c5a      	adds	r2, r3, #1
 800bd72:	69bb      	ldr	r3, [r7, #24]
 800bd74:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800bd76:	69bb      	ldr	r3, [r7, #24]
 800bd78:	791b      	ldrb	r3, [r3, #4]
 800bd7a:	f043 0301 	orr.w	r3, r3, #1
 800bd7e:	b2da      	uxtb	r2, r3
 800bd80:	69bb      	ldr	r3, [r7, #24]
 800bd82:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bd88:	69bb      	ldr	r3, [r7, #24]
 800bd8a:	69db      	ldr	r3, [r3, #28]
 800bd8c:	68ba      	ldr	r2, [r7, #8]
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d3c6      	bcc.n	800bd20 <remove_chain+0x4a>
 800bd92:	e000      	b.n	800bd96 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bd94:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bd96:	2300      	movs	r3, #0
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3720      	adds	r7, #32
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b088      	sub	sp, #32
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d10d      	bne.n	800bdd2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	695b      	ldr	r3, [r3, #20]
 800bdba:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bdbc:	69bb      	ldr	r3, [r7, #24]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d004      	beq.n	800bdcc <create_chain+0x2c>
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	69db      	ldr	r3, [r3, #28]
 800bdc6:	69ba      	ldr	r2, [r7, #24]
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d31b      	bcc.n	800be04 <create_chain+0x64>
 800bdcc:	2301      	movs	r3, #1
 800bdce:	61bb      	str	r3, [r7, #24]
 800bdd0:	e018      	b.n	800be04 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bdd2:	6839      	ldr	r1, [r7, #0]
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f7ff fd90 	bl	800b8fa <get_fat>
 800bdda:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2b01      	cmp	r3, #1
 800bde0:	d801      	bhi.n	800bde6 <create_chain+0x46>
 800bde2:	2301      	movs	r3, #1
 800bde4:	e070      	b.n	800bec8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdec:	d101      	bne.n	800bdf2 <create_chain+0x52>
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	e06a      	b.n	800bec8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	69db      	ldr	r3, [r3, #28]
 800bdf6:	68fa      	ldr	r2, [r7, #12]
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d201      	bcs.n	800be00 <create_chain+0x60>
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	e063      	b.n	800bec8 <create_chain+0x128>
		scl = clst;
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800be04:	69bb      	ldr	r3, [r7, #24]
 800be06:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800be08:	69fb      	ldr	r3, [r7, #28]
 800be0a:	3301      	adds	r3, #1
 800be0c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	69db      	ldr	r3, [r3, #28]
 800be12:	69fa      	ldr	r2, [r7, #28]
 800be14:	429a      	cmp	r2, r3
 800be16:	d307      	bcc.n	800be28 <create_chain+0x88>
				ncl = 2;
 800be18:	2302      	movs	r3, #2
 800be1a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800be1c:	69fa      	ldr	r2, [r7, #28]
 800be1e:	69bb      	ldr	r3, [r7, #24]
 800be20:	429a      	cmp	r2, r3
 800be22:	d901      	bls.n	800be28 <create_chain+0x88>
 800be24:	2300      	movs	r3, #0
 800be26:	e04f      	b.n	800bec8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800be28:	69f9      	ldr	r1, [r7, #28]
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f7ff fd65 	bl	800b8fa <get_fat>
 800be30:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d00e      	beq.n	800be56 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d003      	beq.n	800be46 <create_chain+0xa6>
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be44:	d101      	bne.n	800be4a <create_chain+0xaa>
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	e03e      	b.n	800bec8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800be4a:	69fa      	ldr	r2, [r7, #28]
 800be4c:	69bb      	ldr	r3, [r7, #24]
 800be4e:	429a      	cmp	r2, r3
 800be50:	d1da      	bne.n	800be08 <create_chain+0x68>
 800be52:	2300      	movs	r3, #0
 800be54:	e038      	b.n	800bec8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800be56:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800be58:	f04f 32ff 	mov.w	r2, #4294967295
 800be5c:	69f9      	ldr	r1, [r7, #28]
 800be5e:	6938      	ldr	r0, [r7, #16]
 800be60:	f7ff fe1f 	bl	800baa2 <put_fat>
 800be64:	4603      	mov	r3, r0
 800be66:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800be68:	7dfb      	ldrb	r3, [r7, #23]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d109      	bne.n	800be82 <create_chain+0xe2>
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d006      	beq.n	800be82 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800be74:	69fa      	ldr	r2, [r7, #28]
 800be76:	6839      	ldr	r1, [r7, #0]
 800be78:	6938      	ldr	r0, [r7, #16]
 800be7a:	f7ff fe12 	bl	800baa2 <put_fat>
 800be7e:	4603      	mov	r3, r0
 800be80:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800be82:	7dfb      	ldrb	r3, [r7, #23]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d116      	bne.n	800beb6 <create_chain+0x116>
		fs->last_clst = ncl;
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	69fa      	ldr	r2, [r7, #28]
 800be8c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	699a      	ldr	r2, [r3, #24]
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	69db      	ldr	r3, [r3, #28]
 800be96:	3b02      	subs	r3, #2
 800be98:	429a      	cmp	r2, r3
 800be9a:	d804      	bhi.n	800bea6 <create_chain+0x106>
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	699b      	ldr	r3, [r3, #24]
 800bea0:	1e5a      	subs	r2, r3, #1
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	791b      	ldrb	r3, [r3, #4]
 800beaa:	f043 0301 	orr.w	r3, r3, #1
 800beae:	b2da      	uxtb	r2, r3
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	711a      	strb	r2, [r3, #4]
 800beb4:	e007      	b.n	800bec6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800beb6:	7dfb      	ldrb	r3, [r7, #23]
 800beb8:	2b01      	cmp	r3, #1
 800beba:	d102      	bne.n	800bec2 <create_chain+0x122>
 800bebc:	f04f 33ff 	mov.w	r3, #4294967295
 800bec0:	e000      	b.n	800bec4 <create_chain+0x124>
 800bec2:	2301      	movs	r3, #1
 800bec4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bec6:	69fb      	ldr	r3, [r7, #28]
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3720      	adds	r7, #32
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}

0800bed0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b087      	sub	sp, #28
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bee4:	3304      	adds	r3, #4
 800bee6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	899b      	ldrh	r3, [r3, #12]
 800beec:	461a      	mov	r2, r3
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	fbb3 f3f2 	udiv	r3, r3, r2
 800bef4:	68fa      	ldr	r2, [r7, #12]
 800bef6:	8952      	ldrh	r2, [r2, #10]
 800bef8:	fbb3 f3f2 	udiv	r3, r3, r2
 800befc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	1d1a      	adds	r2, r3, #4
 800bf02:	613a      	str	r2, [r7, #16]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d101      	bne.n	800bf12 <clmt_clust+0x42>
 800bf0e:	2300      	movs	r3, #0
 800bf10:	e010      	b.n	800bf34 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800bf12:	697a      	ldr	r2, [r7, #20]
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d307      	bcc.n	800bf2a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800bf1a:	697a      	ldr	r2, [r7, #20]
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	1ad3      	subs	r3, r2, r3
 800bf20:	617b      	str	r3, [r7, #20]
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	3304      	adds	r3, #4
 800bf26:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bf28:	e7e9      	b.n	800befe <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800bf2a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	681a      	ldr	r2, [r3, #0]
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	4413      	add	r3, r2
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	371c      	adds	r7, #28
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr

0800bf40 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b086      	sub	sp, #24
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bf56:	d204      	bcs.n	800bf62 <dir_sdi+0x22>
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	f003 031f 	and.w	r3, r3, #31
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d001      	beq.n	800bf66 <dir_sdi+0x26>
		return FR_INT_ERR;
 800bf62:	2302      	movs	r3, #2
 800bf64:	e071      	b.n	800c04a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	683a      	ldr	r2, [r7, #0]
 800bf6a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	689b      	ldr	r3, [r3, #8]
 800bf70:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d106      	bne.n	800bf86 <dir_sdi+0x46>
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	2b02      	cmp	r3, #2
 800bf7e:	d902      	bls.n	800bf86 <dir_sdi+0x46>
		clst = fs->dirbase;
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf84:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d10c      	bne.n	800bfa6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	095b      	lsrs	r3, r3, #5
 800bf90:	693a      	ldr	r2, [r7, #16]
 800bf92:	8912      	ldrh	r2, [r2, #8]
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d301      	bcc.n	800bf9c <dir_sdi+0x5c>
 800bf98:	2302      	movs	r3, #2
 800bf9a:	e056      	b.n	800c04a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	61da      	str	r2, [r3, #28]
 800bfa4:	e02d      	b.n	800c002 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	895b      	ldrh	r3, [r3, #10]
 800bfaa:	461a      	mov	r2, r3
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	899b      	ldrh	r3, [r3, #12]
 800bfb0:	fb02 f303 	mul.w	r3, r2, r3
 800bfb4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bfb6:	e019      	b.n	800bfec <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6979      	ldr	r1, [r7, #20]
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f7ff fc9c 	bl	800b8fa <get_fat>
 800bfc2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfca:	d101      	bne.n	800bfd0 <dir_sdi+0x90>
 800bfcc:	2301      	movs	r3, #1
 800bfce:	e03c      	b.n	800c04a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	2b01      	cmp	r3, #1
 800bfd4:	d904      	bls.n	800bfe0 <dir_sdi+0xa0>
 800bfd6:	693b      	ldr	r3, [r7, #16]
 800bfd8:	69db      	ldr	r3, [r3, #28]
 800bfda:	697a      	ldr	r2, [r7, #20]
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	d301      	bcc.n	800bfe4 <dir_sdi+0xa4>
 800bfe0:	2302      	movs	r3, #2
 800bfe2:	e032      	b.n	800c04a <dir_sdi+0x10a>
			ofs -= csz;
 800bfe4:	683a      	ldr	r2, [r7, #0]
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	1ad3      	subs	r3, r2, r3
 800bfea:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bfec:	683a      	ldr	r2, [r7, #0]
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d2e1      	bcs.n	800bfb8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800bff4:	6979      	ldr	r1, [r7, #20]
 800bff6:	6938      	ldr	r0, [r7, #16]
 800bff8:	f7ff fc60 	bl	800b8bc <clust2sect>
 800bffc:	4602      	mov	r2, r0
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	697a      	ldr	r2, [r7, #20]
 800c006:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	69db      	ldr	r3, [r3, #28]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d101      	bne.n	800c014 <dir_sdi+0xd4>
 800c010:	2302      	movs	r3, #2
 800c012:	e01a      	b.n	800c04a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	69da      	ldr	r2, [r3, #28]
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	899b      	ldrh	r3, [r3, #12]
 800c01c:	4619      	mov	r1, r3
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	fbb3 f3f1 	udiv	r3, r3, r1
 800c024:	441a      	add	r2, r3
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	899b      	ldrh	r3, [r3, #12]
 800c034:	461a      	mov	r2, r3
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	fbb3 f0f2 	udiv	r0, r3, r2
 800c03c:	fb00 f202 	mul.w	r2, r0, r2
 800c040:	1a9b      	subs	r3, r3, r2
 800c042:	18ca      	adds	r2, r1, r3
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c048:	2300      	movs	r3, #0
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3718      	adds	r7, #24
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}

0800c052 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c052:	b580      	push	{r7, lr}
 800c054:	b086      	sub	sp, #24
 800c056:	af00      	add	r7, sp, #0
 800c058:	6078      	str	r0, [r7, #4]
 800c05a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	695b      	ldr	r3, [r3, #20]
 800c066:	3320      	adds	r3, #32
 800c068:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	69db      	ldr	r3, [r3, #28]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d003      	beq.n	800c07a <dir_next+0x28>
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c078:	d301      	bcc.n	800c07e <dir_next+0x2c>
 800c07a:	2304      	movs	r3, #4
 800c07c:	e0bb      	b.n	800c1f6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	899b      	ldrh	r3, [r3, #12]
 800c082:	461a      	mov	r2, r3
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	fbb3 f1f2 	udiv	r1, r3, r2
 800c08a:	fb01 f202 	mul.w	r2, r1, r2
 800c08e:	1a9b      	subs	r3, r3, r2
 800c090:	2b00      	cmp	r3, #0
 800c092:	f040 809d 	bne.w	800c1d0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	69db      	ldr	r3, [r3, #28]
 800c09a:	1c5a      	adds	r2, r3, #1
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	699b      	ldr	r3, [r3, #24]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d10b      	bne.n	800c0c0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	095b      	lsrs	r3, r3, #5
 800c0ac:	68fa      	ldr	r2, [r7, #12]
 800c0ae:	8912      	ldrh	r2, [r2, #8]
 800c0b0:	4293      	cmp	r3, r2
 800c0b2:	f0c0 808d 	bcc.w	800c1d0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	61da      	str	r2, [r3, #28]
 800c0bc:	2304      	movs	r3, #4
 800c0be:	e09a      	b.n	800c1f6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	899b      	ldrh	r3, [r3, #12]
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0cc:	68fa      	ldr	r2, [r7, #12]
 800c0ce:	8952      	ldrh	r2, [r2, #10]
 800c0d0:	3a01      	subs	r2, #1
 800c0d2:	4013      	ands	r3, r2
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d17b      	bne.n	800c1d0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c0d8:	687a      	ldr	r2, [r7, #4]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	699b      	ldr	r3, [r3, #24]
 800c0de:	4619      	mov	r1, r3
 800c0e0:	4610      	mov	r0, r2
 800c0e2:	f7ff fc0a 	bl	800b8fa <get_fat>
 800c0e6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	2b01      	cmp	r3, #1
 800c0ec:	d801      	bhi.n	800c0f2 <dir_next+0xa0>
 800c0ee:	2302      	movs	r3, #2
 800c0f0:	e081      	b.n	800c1f6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0f8:	d101      	bne.n	800c0fe <dir_next+0xac>
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	e07b      	b.n	800c1f6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	69db      	ldr	r3, [r3, #28]
 800c102:	697a      	ldr	r2, [r7, #20]
 800c104:	429a      	cmp	r2, r3
 800c106:	d359      	bcc.n	800c1bc <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d104      	bne.n	800c118 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2200      	movs	r2, #0
 800c112:	61da      	str	r2, [r3, #28]
 800c114:	2304      	movs	r3, #4
 800c116:	e06e      	b.n	800c1f6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c118:	687a      	ldr	r2, [r7, #4]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	699b      	ldr	r3, [r3, #24]
 800c11e:	4619      	mov	r1, r3
 800c120:	4610      	mov	r0, r2
 800c122:	f7ff fe3d 	bl	800bda0 <create_chain>
 800c126:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d101      	bne.n	800c132 <dir_next+0xe0>
 800c12e:	2307      	movs	r3, #7
 800c130:	e061      	b.n	800c1f6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	2b01      	cmp	r3, #1
 800c136:	d101      	bne.n	800c13c <dir_next+0xea>
 800c138:	2302      	movs	r3, #2
 800c13a:	e05c      	b.n	800c1f6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c142:	d101      	bne.n	800c148 <dir_next+0xf6>
 800c144:	2301      	movs	r3, #1
 800c146:	e056      	b.n	800c1f6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c148:	68f8      	ldr	r0, [r7, #12]
 800c14a:	f7ff fad5 	bl	800b6f8 <sync_window>
 800c14e:	4603      	mov	r3, r0
 800c150:	2b00      	cmp	r3, #0
 800c152:	d001      	beq.n	800c158 <dir_next+0x106>
 800c154:	2301      	movs	r3, #1
 800c156:	e04e      	b.n	800c1f6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	899b      	ldrh	r3, [r3, #12]
 800c162:	461a      	mov	r2, r3
 800c164:	2100      	movs	r1, #0
 800c166:	f7ff f8fe 	bl	800b366 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c16a:	2300      	movs	r3, #0
 800c16c:	613b      	str	r3, [r7, #16]
 800c16e:	6979      	ldr	r1, [r7, #20]
 800c170:	68f8      	ldr	r0, [r7, #12]
 800c172:	f7ff fba3 	bl	800b8bc <clust2sect>
 800c176:	4602      	mov	r2, r0
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	635a      	str	r2, [r3, #52]	; 0x34
 800c17c:	e012      	b.n	800c1a4 <dir_next+0x152>
						fs->wflag = 1;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	2201      	movs	r2, #1
 800c182:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c184:	68f8      	ldr	r0, [r7, #12]
 800c186:	f7ff fab7 	bl	800b6f8 <sync_window>
 800c18a:	4603      	mov	r3, r0
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d001      	beq.n	800c194 <dir_next+0x142>
 800c190:	2301      	movs	r3, #1
 800c192:	e030      	b.n	800c1f6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	3301      	adds	r3, #1
 800c198:	613b      	str	r3, [r7, #16]
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c19e:	1c5a      	adds	r2, r3, #1
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	635a      	str	r2, [r3, #52]	; 0x34
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	895b      	ldrh	r3, [r3, #10]
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d3e6      	bcc.n	800c17e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	1ad2      	subs	r2, r2, r3
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	697a      	ldr	r2, [r7, #20]
 800c1c0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c1c2:	6979      	ldr	r1, [r7, #20]
 800c1c4:	68f8      	ldr	r0, [r7, #12]
 800c1c6:	f7ff fb79 	bl	800b8bc <clust2sect>
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	68ba      	ldr	r2, [r7, #8]
 800c1d4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	899b      	ldrh	r3, [r3, #12]
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	fbb3 f0f2 	udiv	r0, r3, r2
 800c1e8:	fb00 f202 	mul.w	r2, r0, r2
 800c1ec:	1a9b      	subs	r3, r3, r2
 800c1ee:	18ca      	adds	r2, r1, r3
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c1f4:	2300      	movs	r3, #0
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3718      	adds	r7, #24
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}

0800c1fe <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c1fe:	b580      	push	{r7, lr}
 800c200:	b086      	sub	sp, #24
 800c202:	af00      	add	r7, sp, #0
 800c204:	6078      	str	r0, [r7, #4]
 800c206:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c20e:	2100      	movs	r1, #0
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f7ff fe95 	bl	800bf40 <dir_sdi>
 800c216:	4603      	mov	r3, r0
 800c218:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c21a:	7dfb      	ldrb	r3, [r7, #23]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d12b      	bne.n	800c278 <dir_alloc+0x7a>
		n = 0;
 800c220:	2300      	movs	r3, #0
 800c222:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	69db      	ldr	r3, [r3, #28]
 800c228:	4619      	mov	r1, r3
 800c22a:	68f8      	ldr	r0, [r7, #12]
 800c22c:	f7ff faa8 	bl	800b780 <move_window>
 800c230:	4603      	mov	r3, r0
 800c232:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c234:	7dfb      	ldrb	r3, [r7, #23]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d11d      	bne.n	800c276 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6a1b      	ldr	r3, [r3, #32]
 800c23e:	781b      	ldrb	r3, [r3, #0]
 800c240:	2be5      	cmp	r3, #229	; 0xe5
 800c242:	d004      	beq.n	800c24e <dir_alloc+0x50>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6a1b      	ldr	r3, [r3, #32]
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d107      	bne.n	800c25e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	3301      	adds	r3, #1
 800c252:	613b      	str	r3, [r7, #16]
 800c254:	693a      	ldr	r2, [r7, #16]
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	429a      	cmp	r2, r3
 800c25a:	d102      	bne.n	800c262 <dir_alloc+0x64>
 800c25c:	e00c      	b.n	800c278 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c25e:	2300      	movs	r3, #0
 800c260:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c262:	2101      	movs	r1, #1
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f7ff fef4 	bl	800c052 <dir_next>
 800c26a:	4603      	mov	r3, r0
 800c26c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c26e:	7dfb      	ldrb	r3, [r7, #23]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d0d7      	beq.n	800c224 <dir_alloc+0x26>
 800c274:	e000      	b.n	800c278 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c276:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c278:	7dfb      	ldrb	r3, [r7, #23]
 800c27a:	2b04      	cmp	r3, #4
 800c27c:	d101      	bne.n	800c282 <dir_alloc+0x84>
 800c27e:	2307      	movs	r3, #7
 800c280:	75fb      	strb	r3, [r7, #23]
	return res;
 800c282:	7dfb      	ldrb	r3, [r7, #23]
}
 800c284:	4618      	mov	r0, r3
 800c286:	3718      	adds	r7, #24
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b084      	sub	sp, #16
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	331a      	adds	r3, #26
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7fe ffc0 	bl	800b220 <ld_word>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	2b03      	cmp	r3, #3
 800c2aa:	d109      	bne.n	800c2c0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	3314      	adds	r3, #20
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f7fe ffb5 	bl	800b220 <ld_word>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	041b      	lsls	r3, r3, #16
 800c2ba:	68fa      	ldr	r2, [r7, #12]
 800c2bc:	4313      	orrs	r3, r2
 800c2be:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3710      	adds	r7, #16
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}

0800c2ca <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c2ca:	b580      	push	{r7, lr}
 800c2cc:	b084      	sub	sp, #16
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	60f8      	str	r0, [r7, #12]
 800c2d2:	60b9      	str	r1, [r7, #8]
 800c2d4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	331a      	adds	r3, #26
 800c2da:	687a      	ldr	r2, [r7, #4]
 800c2dc:	b292      	uxth	r2, r2
 800c2de:	4611      	mov	r1, r2
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f7fe ffd8 	bl	800b296 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	781b      	ldrb	r3, [r3, #0]
 800c2ea:	2b03      	cmp	r3, #3
 800c2ec:	d109      	bne.n	800c302 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	f103 0214 	add.w	r2, r3, #20
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	0c1b      	lsrs	r3, r3, #16
 800c2f8:	b29b      	uxth	r3, r3
 800c2fa:	4619      	mov	r1, r3
 800c2fc:	4610      	mov	r0, r2
 800c2fe:	f7fe ffca 	bl	800b296 <st_word>
	}
}
 800c302:	bf00      	nop
 800c304:	3710      	adds	r7, #16
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
	...

0800c30c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c30c:	b590      	push	{r4, r7, lr}
 800c30e:	b087      	sub	sp, #28
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	331a      	adds	r3, #26
 800c31a:	4618      	mov	r0, r3
 800c31c:	f7fe ff80 	bl	800b220 <ld_word>
 800c320:	4603      	mov	r3, r0
 800c322:	2b00      	cmp	r3, #0
 800c324:	d001      	beq.n	800c32a <cmp_lfn+0x1e>
 800c326:	2300      	movs	r3, #0
 800c328:	e059      	b.n	800c3de <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	781b      	ldrb	r3, [r3, #0]
 800c32e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c332:	1e5a      	subs	r2, r3, #1
 800c334:	4613      	mov	r3, r2
 800c336:	005b      	lsls	r3, r3, #1
 800c338:	4413      	add	r3, r2
 800c33a:	009b      	lsls	r3, r3, #2
 800c33c:	4413      	add	r3, r2
 800c33e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c340:	2301      	movs	r3, #1
 800c342:	81fb      	strh	r3, [r7, #14]
 800c344:	2300      	movs	r3, #0
 800c346:	613b      	str	r3, [r7, #16]
 800c348:	e033      	b.n	800c3b2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c34a:	4a27      	ldr	r2, [pc, #156]	; (800c3e8 <cmp_lfn+0xdc>)
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	4413      	add	r3, r2
 800c350:	781b      	ldrb	r3, [r3, #0]
 800c352:	461a      	mov	r2, r3
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	4413      	add	r3, r2
 800c358:	4618      	mov	r0, r3
 800c35a:	f7fe ff61 	bl	800b220 <ld_word>
 800c35e:	4603      	mov	r3, r0
 800c360:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c362:	89fb      	ldrh	r3, [r7, #14]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d01a      	beq.n	800c39e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	2bfe      	cmp	r3, #254	; 0xfe
 800c36c:	d812      	bhi.n	800c394 <cmp_lfn+0x88>
 800c36e:	89bb      	ldrh	r3, [r7, #12]
 800c370:	4618      	mov	r0, r3
 800c372:	f001 fd75 	bl	800de60 <ff_wtoupper>
 800c376:	4603      	mov	r3, r0
 800c378:	461c      	mov	r4, r3
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	1c5a      	adds	r2, r3, #1
 800c37e:	617a      	str	r2, [r7, #20]
 800c380:	005b      	lsls	r3, r3, #1
 800c382:	687a      	ldr	r2, [r7, #4]
 800c384:	4413      	add	r3, r2
 800c386:	881b      	ldrh	r3, [r3, #0]
 800c388:	4618      	mov	r0, r3
 800c38a:	f001 fd69 	bl	800de60 <ff_wtoupper>
 800c38e:	4603      	mov	r3, r0
 800c390:	429c      	cmp	r4, r3
 800c392:	d001      	beq.n	800c398 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c394:	2300      	movs	r3, #0
 800c396:	e022      	b.n	800c3de <cmp_lfn+0xd2>
			}
			wc = uc;
 800c398:	89bb      	ldrh	r3, [r7, #12]
 800c39a:	81fb      	strh	r3, [r7, #14]
 800c39c:	e006      	b.n	800c3ac <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c39e:	89bb      	ldrh	r3, [r7, #12]
 800c3a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d001      	beq.n	800c3ac <cmp_lfn+0xa0>
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	e018      	b.n	800c3de <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	3301      	adds	r3, #1
 800c3b0:	613b      	str	r3, [r7, #16]
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	2b0c      	cmp	r3, #12
 800c3b6:	d9c8      	bls.n	800c34a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	781b      	ldrb	r3, [r3, #0]
 800c3bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d00b      	beq.n	800c3dc <cmp_lfn+0xd0>
 800c3c4:	89fb      	ldrh	r3, [r7, #14]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d008      	beq.n	800c3dc <cmp_lfn+0xd0>
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	005b      	lsls	r3, r3, #1
 800c3ce:	687a      	ldr	r2, [r7, #4]
 800c3d0:	4413      	add	r3, r2
 800c3d2:	881b      	ldrh	r3, [r3, #0]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d001      	beq.n	800c3dc <cmp_lfn+0xd0>
 800c3d8:	2300      	movs	r3, #0
 800c3da:	e000      	b.n	800c3de <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c3dc:	2301      	movs	r3, #1
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	371c      	adds	r7, #28
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd90      	pop	{r4, r7, pc}
 800c3e6:	bf00      	nop
 800c3e8:	0800ea74 	.word	0x0800ea74

0800c3ec <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b088      	sub	sp, #32
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	60f8      	str	r0, [r7, #12]
 800c3f4:	60b9      	str	r1, [r7, #8]
 800c3f6:	4611      	mov	r1, r2
 800c3f8:	461a      	mov	r2, r3
 800c3fa:	460b      	mov	r3, r1
 800c3fc:	71fb      	strb	r3, [r7, #7]
 800c3fe:	4613      	mov	r3, r2
 800c400:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	330d      	adds	r3, #13
 800c406:	79ba      	ldrb	r2, [r7, #6]
 800c408:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	330b      	adds	r3, #11
 800c40e:	220f      	movs	r2, #15
 800c410:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	330c      	adds	r3, #12
 800c416:	2200      	movs	r2, #0
 800c418:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	331a      	adds	r3, #26
 800c41e:	2100      	movs	r1, #0
 800c420:	4618      	mov	r0, r3
 800c422:	f7fe ff38 	bl	800b296 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c426:	79fb      	ldrb	r3, [r7, #7]
 800c428:	1e5a      	subs	r2, r3, #1
 800c42a:	4613      	mov	r3, r2
 800c42c:	005b      	lsls	r3, r3, #1
 800c42e:	4413      	add	r3, r2
 800c430:	009b      	lsls	r3, r3, #2
 800c432:	4413      	add	r3, r2
 800c434:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c436:	2300      	movs	r3, #0
 800c438:	82fb      	strh	r3, [r7, #22]
 800c43a:	2300      	movs	r3, #0
 800c43c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c43e:	8afb      	ldrh	r3, [r7, #22]
 800c440:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c444:	4293      	cmp	r3, r2
 800c446:	d007      	beq.n	800c458 <put_lfn+0x6c>
 800c448:	69fb      	ldr	r3, [r7, #28]
 800c44a:	1c5a      	adds	r2, r3, #1
 800c44c:	61fa      	str	r2, [r7, #28]
 800c44e:	005b      	lsls	r3, r3, #1
 800c450:	68fa      	ldr	r2, [r7, #12]
 800c452:	4413      	add	r3, r2
 800c454:	881b      	ldrh	r3, [r3, #0]
 800c456:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c458:	4a17      	ldr	r2, [pc, #92]	; (800c4b8 <put_lfn+0xcc>)
 800c45a:	69bb      	ldr	r3, [r7, #24]
 800c45c:	4413      	add	r3, r2
 800c45e:	781b      	ldrb	r3, [r3, #0]
 800c460:	461a      	mov	r2, r3
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	4413      	add	r3, r2
 800c466:	8afa      	ldrh	r2, [r7, #22]
 800c468:	4611      	mov	r1, r2
 800c46a:	4618      	mov	r0, r3
 800c46c:	f7fe ff13 	bl	800b296 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c470:	8afb      	ldrh	r3, [r7, #22]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d102      	bne.n	800c47c <put_lfn+0x90>
 800c476:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c47a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c47c:	69bb      	ldr	r3, [r7, #24]
 800c47e:	3301      	adds	r3, #1
 800c480:	61bb      	str	r3, [r7, #24]
 800c482:	69bb      	ldr	r3, [r7, #24]
 800c484:	2b0c      	cmp	r3, #12
 800c486:	d9da      	bls.n	800c43e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c488:	8afb      	ldrh	r3, [r7, #22]
 800c48a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c48e:	4293      	cmp	r3, r2
 800c490:	d006      	beq.n	800c4a0 <put_lfn+0xb4>
 800c492:	69fb      	ldr	r3, [r7, #28]
 800c494:	005b      	lsls	r3, r3, #1
 800c496:	68fa      	ldr	r2, [r7, #12]
 800c498:	4413      	add	r3, r2
 800c49a:	881b      	ldrh	r3, [r3, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d103      	bne.n	800c4a8 <put_lfn+0xbc>
 800c4a0:	79fb      	ldrb	r3, [r7, #7]
 800c4a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4a6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	79fa      	ldrb	r2, [r7, #7]
 800c4ac:	701a      	strb	r2, [r3, #0]
}
 800c4ae:	bf00      	nop
 800c4b0:	3720      	adds	r7, #32
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	bf00      	nop
 800c4b8:	0800ea74 	.word	0x0800ea74

0800c4bc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b08c      	sub	sp, #48	; 0x30
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	60f8      	str	r0, [r7, #12]
 800c4c4:	60b9      	str	r1, [r7, #8]
 800c4c6:	607a      	str	r2, [r7, #4]
 800c4c8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c4ca:	220b      	movs	r2, #11
 800c4cc:	68b9      	ldr	r1, [r7, #8]
 800c4ce:	68f8      	ldr	r0, [r7, #12]
 800c4d0:	f7fe ff28 	bl	800b324 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	2b05      	cmp	r3, #5
 800c4d8:	d929      	bls.n	800c52e <gen_numname+0x72>
		sr = seq;
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c4de:	e020      	b.n	800c522 <gen_numname+0x66>
			wc = *lfn++;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	1c9a      	adds	r2, r3, #2
 800c4e4:	607a      	str	r2, [r7, #4]
 800c4e6:	881b      	ldrh	r3, [r3, #0]
 800c4e8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	62bb      	str	r3, [r7, #40]	; 0x28
 800c4ee:	e015      	b.n	800c51c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800c4f0:	69fb      	ldr	r3, [r7, #28]
 800c4f2:	005a      	lsls	r2, r3, #1
 800c4f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c4f6:	f003 0301 	and.w	r3, r3, #1
 800c4fa:	4413      	add	r3, r2
 800c4fc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c4fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c500:	085b      	lsrs	r3, r3, #1
 800c502:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c504:	69fb      	ldr	r3, [r7, #28]
 800c506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d003      	beq.n	800c516 <gen_numname+0x5a>
 800c50e:	69fa      	ldr	r2, [r7, #28]
 800c510:	4b30      	ldr	r3, [pc, #192]	; (800c5d4 <gen_numname+0x118>)
 800c512:	4053      	eors	r3, r2
 800c514:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c518:	3301      	adds	r3, #1
 800c51a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c51e:	2b0f      	cmp	r3, #15
 800c520:	d9e6      	bls.n	800c4f0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	881b      	ldrh	r3, [r3, #0]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d1da      	bne.n	800c4e0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c52a:	69fb      	ldr	r3, [r7, #28]
 800c52c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c52e:	2307      	movs	r3, #7
 800c530:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	b2db      	uxtb	r3, r3
 800c536:	f003 030f 	and.w	r3, r3, #15
 800c53a:	b2db      	uxtb	r3, r3
 800c53c:	3330      	adds	r3, #48	; 0x30
 800c53e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800c542:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c546:	2b39      	cmp	r3, #57	; 0x39
 800c548:	d904      	bls.n	800c554 <gen_numname+0x98>
 800c54a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c54e:	3307      	adds	r3, #7
 800c550:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800c554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c556:	1e5a      	subs	r2, r3, #1
 800c558:	62ba      	str	r2, [r7, #40]	; 0x28
 800c55a:	3330      	adds	r3, #48	; 0x30
 800c55c:	443b      	add	r3, r7
 800c55e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c562:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	091b      	lsrs	r3, r3, #4
 800c56a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d1df      	bne.n	800c532 <gen_numname+0x76>
	ns[i] = '~';
 800c572:	f107 0214 	add.w	r2, r7, #20
 800c576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c578:	4413      	add	r3, r2
 800c57a:	227e      	movs	r2, #126	; 0x7e
 800c57c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c57e:	2300      	movs	r3, #0
 800c580:	627b      	str	r3, [r7, #36]	; 0x24
 800c582:	e002      	b.n	800c58a <gen_numname+0xce>
 800c584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c586:	3301      	adds	r3, #1
 800c588:	627b      	str	r3, [r7, #36]	; 0x24
 800c58a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c58e:	429a      	cmp	r2, r3
 800c590:	d205      	bcs.n	800c59e <gen_numname+0xe2>
 800c592:	68fa      	ldr	r2, [r7, #12]
 800c594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c596:	4413      	add	r3, r2
 800c598:	781b      	ldrb	r3, [r3, #0]
 800c59a:	2b20      	cmp	r3, #32
 800c59c:	d1f2      	bne.n	800c584 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a0:	2b07      	cmp	r3, #7
 800c5a2:	d807      	bhi.n	800c5b4 <gen_numname+0xf8>
 800c5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a6:	1c5a      	adds	r2, r3, #1
 800c5a8:	62ba      	str	r2, [r7, #40]	; 0x28
 800c5aa:	3330      	adds	r3, #48	; 0x30
 800c5ac:	443b      	add	r3, r7
 800c5ae:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c5b2:	e000      	b.n	800c5b6 <gen_numname+0xfa>
 800c5b4:	2120      	movs	r1, #32
 800c5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b8:	1c5a      	adds	r2, r3, #1
 800c5ba:	627a      	str	r2, [r7, #36]	; 0x24
 800c5bc:	68fa      	ldr	r2, [r7, #12]
 800c5be:	4413      	add	r3, r2
 800c5c0:	460a      	mov	r2, r1
 800c5c2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c6:	2b07      	cmp	r3, #7
 800c5c8:	d9e9      	bls.n	800c59e <gen_numname+0xe2>
}
 800c5ca:	bf00      	nop
 800c5cc:	bf00      	nop
 800c5ce:	3730      	adds	r7, #48	; 0x30
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}
 800c5d4:	00011021 	.word	0x00011021

0800c5d8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b085      	sub	sp, #20
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c5e4:	230b      	movs	r3, #11
 800c5e6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c5e8:	7bfb      	ldrb	r3, [r7, #15]
 800c5ea:	b2da      	uxtb	r2, r3
 800c5ec:	0852      	lsrs	r2, r2, #1
 800c5ee:	01db      	lsls	r3, r3, #7
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	b2da      	uxtb	r2, r3
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	1c59      	adds	r1, r3, #1
 800c5f8:	6079      	str	r1, [r7, #4]
 800c5fa:	781b      	ldrb	r3, [r3, #0]
 800c5fc:	4413      	add	r3, r2
 800c5fe:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	3b01      	subs	r3, #1
 800c604:	60bb      	str	r3, [r7, #8]
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d1ed      	bne.n	800c5e8 <sum_sfn+0x10>
	return sum;
 800c60c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3714      	adds	r7, #20
 800c612:	46bd      	mov	sp, r7
 800c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c618:	4770      	bx	lr

0800c61a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c61a:	b580      	push	{r7, lr}
 800c61c:	b086      	sub	sp, #24
 800c61e:	af00      	add	r7, sp, #0
 800c620:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c628:	2100      	movs	r1, #0
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f7ff fc88 	bl	800bf40 <dir_sdi>
 800c630:	4603      	mov	r3, r0
 800c632:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c634:	7dfb      	ldrb	r3, [r7, #23]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d001      	beq.n	800c63e <dir_find+0x24>
 800c63a:	7dfb      	ldrb	r3, [r7, #23]
 800c63c:	e0a9      	b.n	800c792 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c63e:	23ff      	movs	r3, #255	; 0xff
 800c640:	753b      	strb	r3, [r7, #20]
 800c642:	7d3b      	ldrb	r3, [r7, #20]
 800c644:	757b      	strb	r3, [r7, #21]
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f04f 32ff 	mov.w	r2, #4294967295
 800c64c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	69db      	ldr	r3, [r3, #28]
 800c652:	4619      	mov	r1, r3
 800c654:	6938      	ldr	r0, [r7, #16]
 800c656:	f7ff f893 	bl	800b780 <move_window>
 800c65a:	4603      	mov	r3, r0
 800c65c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c65e:	7dfb      	ldrb	r3, [r7, #23]
 800c660:	2b00      	cmp	r3, #0
 800c662:	f040 8090 	bne.w	800c786 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6a1b      	ldr	r3, [r3, #32]
 800c66a:	781b      	ldrb	r3, [r3, #0]
 800c66c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c66e:	7dbb      	ldrb	r3, [r7, #22]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d102      	bne.n	800c67a <dir_find+0x60>
 800c674:	2304      	movs	r3, #4
 800c676:	75fb      	strb	r3, [r7, #23]
 800c678:	e08a      	b.n	800c790 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6a1b      	ldr	r3, [r3, #32]
 800c67e:	330b      	adds	r3, #11
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c686:	73fb      	strb	r3, [r7, #15]
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	7bfa      	ldrb	r2, [r7, #15]
 800c68c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c68e:	7dbb      	ldrb	r3, [r7, #22]
 800c690:	2be5      	cmp	r3, #229	; 0xe5
 800c692:	d007      	beq.n	800c6a4 <dir_find+0x8a>
 800c694:	7bfb      	ldrb	r3, [r7, #15]
 800c696:	f003 0308 	and.w	r3, r3, #8
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d009      	beq.n	800c6b2 <dir_find+0x98>
 800c69e:	7bfb      	ldrb	r3, [r7, #15]
 800c6a0:	2b0f      	cmp	r3, #15
 800c6a2:	d006      	beq.n	800c6b2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c6a4:	23ff      	movs	r3, #255	; 0xff
 800c6a6:	757b      	strb	r3, [r7, #21]
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f04f 32ff 	mov.w	r2, #4294967295
 800c6ae:	631a      	str	r2, [r3, #48]	; 0x30
 800c6b0:	e05e      	b.n	800c770 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c6b2:	7bfb      	ldrb	r3, [r7, #15]
 800c6b4:	2b0f      	cmp	r3, #15
 800c6b6:	d136      	bne.n	800c726 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c6be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d154      	bne.n	800c770 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c6c6:	7dbb      	ldrb	r3, [r7, #22]
 800c6c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d00d      	beq.n	800c6ec <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6a1b      	ldr	r3, [r3, #32]
 800c6d4:	7b5b      	ldrb	r3, [r3, #13]
 800c6d6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c6d8:	7dbb      	ldrb	r3, [r7, #22]
 800c6da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6de:	75bb      	strb	r3, [r7, #22]
 800c6e0:	7dbb      	ldrb	r3, [r7, #22]
 800c6e2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	695a      	ldr	r2, [r3, #20]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c6ec:	7dba      	ldrb	r2, [r7, #22]
 800c6ee:	7d7b      	ldrb	r3, [r7, #21]
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d115      	bne.n	800c720 <dir_find+0x106>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6a1b      	ldr	r3, [r3, #32]
 800c6f8:	330d      	adds	r3, #13
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	7d3a      	ldrb	r2, [r7, #20]
 800c6fe:	429a      	cmp	r2, r3
 800c700:	d10e      	bne.n	800c720 <dir_find+0x106>
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	691a      	ldr	r2, [r3, #16]
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6a1b      	ldr	r3, [r3, #32]
 800c70a:	4619      	mov	r1, r3
 800c70c:	4610      	mov	r0, r2
 800c70e:	f7ff fdfd 	bl	800c30c <cmp_lfn>
 800c712:	4603      	mov	r3, r0
 800c714:	2b00      	cmp	r3, #0
 800c716:	d003      	beq.n	800c720 <dir_find+0x106>
 800c718:	7d7b      	ldrb	r3, [r7, #21]
 800c71a:	3b01      	subs	r3, #1
 800c71c:	b2db      	uxtb	r3, r3
 800c71e:	e000      	b.n	800c722 <dir_find+0x108>
 800c720:	23ff      	movs	r3, #255	; 0xff
 800c722:	757b      	strb	r3, [r7, #21]
 800c724:	e024      	b.n	800c770 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c726:	7d7b      	ldrb	r3, [r7, #21]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d109      	bne.n	800c740 <dir_find+0x126>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6a1b      	ldr	r3, [r3, #32]
 800c730:	4618      	mov	r0, r3
 800c732:	f7ff ff51 	bl	800c5d8 <sum_sfn>
 800c736:	4603      	mov	r3, r0
 800c738:	461a      	mov	r2, r3
 800c73a:	7d3b      	ldrb	r3, [r7, #20]
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d024      	beq.n	800c78a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c746:	f003 0301 	and.w	r3, r3, #1
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d10a      	bne.n	800c764 <dir_find+0x14a>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6a18      	ldr	r0, [r3, #32]
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	3324      	adds	r3, #36	; 0x24
 800c756:	220b      	movs	r2, #11
 800c758:	4619      	mov	r1, r3
 800c75a:	f7fe fe1f 	bl	800b39c <mem_cmp>
 800c75e:	4603      	mov	r3, r0
 800c760:	2b00      	cmp	r3, #0
 800c762:	d014      	beq.n	800c78e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c764:	23ff      	movs	r3, #255	; 0xff
 800c766:	757b      	strb	r3, [r7, #21]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f04f 32ff 	mov.w	r2, #4294967295
 800c76e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c770:	2100      	movs	r1, #0
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f7ff fc6d 	bl	800c052 <dir_next>
 800c778:	4603      	mov	r3, r0
 800c77a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c77c:	7dfb      	ldrb	r3, [r7, #23]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	f43f af65 	beq.w	800c64e <dir_find+0x34>
 800c784:	e004      	b.n	800c790 <dir_find+0x176>
		if (res != FR_OK) break;
 800c786:	bf00      	nop
 800c788:	e002      	b.n	800c790 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c78a:	bf00      	nop
 800c78c:	e000      	b.n	800c790 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c78e:	bf00      	nop

	return res;
 800c790:	7dfb      	ldrb	r3, [r7, #23]
}
 800c792:	4618      	mov	r0, r3
 800c794:	3718      	adds	r7, #24
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}
	...

0800c79c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b08c      	sub	sp, #48	; 0x30
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c7b0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d001      	beq.n	800c7bc <dir_register+0x20>
 800c7b8:	2306      	movs	r3, #6
 800c7ba:	e0e0      	b.n	800c97e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c7bc:	2300      	movs	r3, #0
 800c7be:	627b      	str	r3, [r7, #36]	; 0x24
 800c7c0:	e002      	b.n	800c7c8 <dir_register+0x2c>
 800c7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c4:	3301      	adds	r3, #1
 800c7c6:	627b      	str	r3, [r7, #36]	; 0x24
 800c7c8:	69fb      	ldr	r3, [r7, #28]
 800c7ca:	691a      	ldr	r2, [r3, #16]
 800c7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ce:	005b      	lsls	r3, r3, #1
 800c7d0:	4413      	add	r3, r2
 800c7d2:	881b      	ldrh	r3, [r3, #0]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d1f4      	bne.n	800c7c2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800c7de:	f107 030c 	add.w	r3, r7, #12
 800c7e2:	220c      	movs	r2, #12
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f7fe fd9d 	bl	800b324 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c7ea:	7dfb      	ldrb	r3, [r7, #23]
 800c7ec:	f003 0301 	and.w	r3, r3, #1
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d032      	beq.n	800c85a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2240      	movs	r2, #64	; 0x40
 800c7f8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	62bb      	str	r3, [r7, #40]	; 0x28
 800c800:	e016      	b.n	800c830 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800c808:	69fb      	ldr	r3, [r7, #28]
 800c80a:	691a      	ldr	r2, [r3, #16]
 800c80c:	f107 010c 	add.w	r1, r7, #12
 800c810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c812:	f7ff fe53 	bl	800c4bc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f7ff feff 	bl	800c61a <dir_find>
 800c81c:	4603      	mov	r3, r0
 800c81e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800c822:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c826:	2b00      	cmp	r3, #0
 800c828:	d106      	bne.n	800c838 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800c82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c82c:	3301      	adds	r3, #1
 800c82e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c832:	2b63      	cmp	r3, #99	; 0x63
 800c834:	d9e5      	bls.n	800c802 <dir_register+0x66>
 800c836:	e000      	b.n	800c83a <dir_register+0x9e>
			if (res != FR_OK) break;
 800c838:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c83c:	2b64      	cmp	r3, #100	; 0x64
 800c83e:	d101      	bne.n	800c844 <dir_register+0xa8>
 800c840:	2307      	movs	r3, #7
 800c842:	e09c      	b.n	800c97e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c844:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c848:	2b04      	cmp	r3, #4
 800c84a:	d002      	beq.n	800c852 <dir_register+0xb6>
 800c84c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c850:	e095      	b.n	800c97e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c852:	7dfa      	ldrb	r2, [r7, #23]
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c85a:	7dfb      	ldrb	r3, [r7, #23]
 800c85c:	f003 0302 	and.w	r3, r3, #2
 800c860:	2b00      	cmp	r3, #0
 800c862:	d007      	beq.n	800c874 <dir_register+0xd8>
 800c864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c866:	330c      	adds	r3, #12
 800c868:	4a47      	ldr	r2, [pc, #284]	; (800c988 <dir_register+0x1ec>)
 800c86a:	fba2 2303 	umull	r2, r3, r2, r3
 800c86e:	089b      	lsrs	r3, r3, #2
 800c870:	3301      	adds	r3, #1
 800c872:	e000      	b.n	800c876 <dir_register+0xda>
 800c874:	2301      	movs	r3, #1
 800c876:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c878:	6a39      	ldr	r1, [r7, #32]
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f7ff fcbf 	bl	800c1fe <dir_alloc>
 800c880:	4603      	mov	r3, r0
 800c882:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c886:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d148      	bne.n	800c920 <dir_register+0x184>
 800c88e:	6a3b      	ldr	r3, [r7, #32]
 800c890:	3b01      	subs	r3, #1
 800c892:	623b      	str	r3, [r7, #32]
 800c894:	6a3b      	ldr	r3, [r7, #32]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d042      	beq.n	800c920 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	695a      	ldr	r2, [r3, #20]
 800c89e:	6a3b      	ldr	r3, [r7, #32]
 800c8a0:	015b      	lsls	r3, r3, #5
 800c8a2:	1ad3      	subs	r3, r2, r3
 800c8a4:	4619      	mov	r1, r3
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f7ff fb4a 	bl	800bf40 <dir_sdi>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c8b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d132      	bne.n	800c920 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	3324      	adds	r3, #36	; 0x24
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f7ff fe8a 	bl	800c5d8 <sum_sfn>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	69db      	ldr	r3, [r3, #28]
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	69f8      	ldr	r0, [r7, #28]
 800c8d0:	f7fe ff56 	bl	800b780 <move_window>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800c8da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d11d      	bne.n	800c91e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c8e2:	69fb      	ldr	r3, [r7, #28]
 800c8e4:	6918      	ldr	r0, [r3, #16]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	6a19      	ldr	r1, [r3, #32]
 800c8ea:	6a3b      	ldr	r3, [r7, #32]
 800c8ec:	b2da      	uxtb	r2, r3
 800c8ee:	7efb      	ldrb	r3, [r7, #27]
 800c8f0:	f7ff fd7c 	bl	800c3ec <put_lfn>
				fs->wflag = 1;
 800c8f4:	69fb      	ldr	r3, [r7, #28]
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c8fa:	2100      	movs	r1, #0
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f7ff fba8 	bl	800c052 <dir_next>
 800c902:	4603      	mov	r3, r0
 800c904:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800c908:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d107      	bne.n	800c920 <dir_register+0x184>
 800c910:	6a3b      	ldr	r3, [r7, #32]
 800c912:	3b01      	subs	r3, #1
 800c914:	623b      	str	r3, [r7, #32]
 800c916:	6a3b      	ldr	r3, [r7, #32]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d1d5      	bne.n	800c8c8 <dir_register+0x12c>
 800c91c:	e000      	b.n	800c920 <dir_register+0x184>
				if (res != FR_OK) break;
 800c91e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c920:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c924:	2b00      	cmp	r3, #0
 800c926:	d128      	bne.n	800c97a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	69db      	ldr	r3, [r3, #28]
 800c92c:	4619      	mov	r1, r3
 800c92e:	69f8      	ldr	r0, [r7, #28]
 800c930:	f7fe ff26 	bl	800b780 <move_window>
 800c934:	4603      	mov	r3, r0
 800c936:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c93a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d11b      	bne.n	800c97a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6a1b      	ldr	r3, [r3, #32]
 800c946:	2220      	movs	r2, #32
 800c948:	2100      	movs	r1, #0
 800c94a:	4618      	mov	r0, r3
 800c94c:	f7fe fd0b 	bl	800b366 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6a18      	ldr	r0, [r3, #32]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	3324      	adds	r3, #36	; 0x24
 800c958:	220b      	movs	r2, #11
 800c95a:	4619      	mov	r1, r3
 800c95c:	f7fe fce2 	bl	800b324 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6a1b      	ldr	r3, [r3, #32]
 800c96a:	330c      	adds	r3, #12
 800c96c:	f002 0218 	and.w	r2, r2, #24
 800c970:	b2d2      	uxtb	r2, r2
 800c972:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c974:	69fb      	ldr	r3, [r7, #28]
 800c976:	2201      	movs	r2, #1
 800c978:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c97a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c97e:	4618      	mov	r0, r3
 800c980:	3730      	adds	r7, #48	; 0x30
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}
 800c986:	bf00      	nop
 800c988:	4ec4ec4f 	.word	0x4ec4ec4f

0800c98c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b08a      	sub	sp, #40	; 0x28
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	613b      	str	r3, [r7, #16]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	691b      	ldr	r3, [r3, #16]
 800c9a2:	60fb      	str	r3, [r7, #12]
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	617b      	str	r3, [r7, #20]
 800c9a8:	697b      	ldr	r3, [r7, #20]
 800c9aa:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c9ac:	69bb      	ldr	r3, [r7, #24]
 800c9ae:	1c5a      	adds	r2, r3, #1
 800c9b0:	61ba      	str	r2, [r7, #24]
 800c9b2:	693a      	ldr	r2, [r7, #16]
 800c9b4:	4413      	add	r3, r2
 800c9b6:	781b      	ldrb	r3, [r3, #0]
 800c9b8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c9ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9bc:	2b1f      	cmp	r3, #31
 800c9be:	d940      	bls.n	800ca42 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c9c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9c2:	2b2f      	cmp	r3, #47	; 0x2f
 800c9c4:	d006      	beq.n	800c9d4 <create_name+0x48>
 800c9c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9c8:	2b5c      	cmp	r3, #92	; 0x5c
 800c9ca:	d110      	bne.n	800c9ee <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c9cc:	e002      	b.n	800c9d4 <create_name+0x48>
 800c9ce:	69bb      	ldr	r3, [r7, #24]
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	61bb      	str	r3, [r7, #24]
 800c9d4:	693a      	ldr	r2, [r7, #16]
 800c9d6:	69bb      	ldr	r3, [r7, #24]
 800c9d8:	4413      	add	r3, r2
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	2b2f      	cmp	r3, #47	; 0x2f
 800c9de:	d0f6      	beq.n	800c9ce <create_name+0x42>
 800c9e0:	693a      	ldr	r2, [r7, #16]
 800c9e2:	69bb      	ldr	r3, [r7, #24]
 800c9e4:	4413      	add	r3, r2
 800c9e6:	781b      	ldrb	r3, [r3, #0]
 800c9e8:	2b5c      	cmp	r3, #92	; 0x5c
 800c9ea:	d0f0      	beq.n	800c9ce <create_name+0x42>
			break;
 800c9ec:	e02a      	b.n	800ca44 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	2bfe      	cmp	r3, #254	; 0xfe
 800c9f2:	d901      	bls.n	800c9f8 <create_name+0x6c>
 800c9f4:	2306      	movs	r3, #6
 800c9f6:	e17d      	b.n	800ccf4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c9f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9fa:	b2db      	uxtb	r3, r3
 800c9fc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c9fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca00:	2101      	movs	r1, #1
 800ca02:	4618      	mov	r0, r3
 800ca04:	f001 f9f0 	bl	800dde8 <ff_convert>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ca0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d101      	bne.n	800ca16 <create_name+0x8a>
 800ca12:	2306      	movs	r3, #6
 800ca14:	e16e      	b.n	800ccf4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ca16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca18:	2b7f      	cmp	r3, #127	; 0x7f
 800ca1a:	d809      	bhi.n	800ca30 <create_name+0xa4>
 800ca1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca1e:	4619      	mov	r1, r3
 800ca20:	488d      	ldr	r0, [pc, #564]	; (800cc58 <create_name+0x2cc>)
 800ca22:	f7fe fce2 	bl	800b3ea <chk_chr>
 800ca26:	4603      	mov	r3, r0
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d001      	beq.n	800ca30 <create_name+0xa4>
 800ca2c:	2306      	movs	r3, #6
 800ca2e:	e161      	b.n	800ccf4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	1c5a      	adds	r2, r3, #1
 800ca34:	617a      	str	r2, [r7, #20]
 800ca36:	005b      	lsls	r3, r3, #1
 800ca38:	68fa      	ldr	r2, [r7, #12]
 800ca3a:	4413      	add	r3, r2
 800ca3c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ca3e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ca40:	e7b4      	b.n	800c9ac <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ca42:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ca44:	693a      	ldr	r2, [r7, #16]
 800ca46:	69bb      	ldr	r3, [r7, #24]
 800ca48:	441a      	add	r2, r3
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ca4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca50:	2b1f      	cmp	r3, #31
 800ca52:	d801      	bhi.n	800ca58 <create_name+0xcc>
 800ca54:	2304      	movs	r3, #4
 800ca56:	e000      	b.n	800ca5a <create_name+0xce>
 800ca58:	2300      	movs	r3, #0
 800ca5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ca5e:	e011      	b.n	800ca84 <create_name+0xf8>
		w = lfn[di - 1];
 800ca60:	697a      	ldr	r2, [r7, #20]
 800ca62:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ca66:	4413      	add	r3, r2
 800ca68:	005b      	lsls	r3, r3, #1
 800ca6a:	68fa      	ldr	r2, [r7, #12]
 800ca6c:	4413      	add	r3, r2
 800ca6e:	881b      	ldrh	r3, [r3, #0]
 800ca70:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800ca72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca74:	2b20      	cmp	r3, #32
 800ca76:	d002      	beq.n	800ca7e <create_name+0xf2>
 800ca78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca7a:	2b2e      	cmp	r3, #46	; 0x2e
 800ca7c:	d106      	bne.n	800ca8c <create_name+0x100>
		di--;
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	3b01      	subs	r3, #1
 800ca82:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d1ea      	bne.n	800ca60 <create_name+0xd4>
 800ca8a:	e000      	b.n	800ca8e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ca8c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	005b      	lsls	r3, r3, #1
 800ca92:	68fa      	ldr	r2, [r7, #12]
 800ca94:	4413      	add	r3, r2
 800ca96:	2200      	movs	r2, #0
 800ca98:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d101      	bne.n	800caa4 <create_name+0x118>
 800caa0:	2306      	movs	r3, #6
 800caa2:	e127      	b.n	800ccf4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	3324      	adds	r3, #36	; 0x24
 800caa8:	220b      	movs	r2, #11
 800caaa:	2120      	movs	r1, #32
 800caac:	4618      	mov	r0, r3
 800caae:	f7fe fc5a 	bl	800b366 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800cab2:	2300      	movs	r3, #0
 800cab4:	61bb      	str	r3, [r7, #24]
 800cab6:	e002      	b.n	800cabe <create_name+0x132>
 800cab8:	69bb      	ldr	r3, [r7, #24]
 800caba:	3301      	adds	r3, #1
 800cabc:	61bb      	str	r3, [r7, #24]
 800cabe:	69bb      	ldr	r3, [r7, #24]
 800cac0:	005b      	lsls	r3, r3, #1
 800cac2:	68fa      	ldr	r2, [r7, #12]
 800cac4:	4413      	add	r3, r2
 800cac6:	881b      	ldrh	r3, [r3, #0]
 800cac8:	2b20      	cmp	r3, #32
 800caca:	d0f5      	beq.n	800cab8 <create_name+0x12c>
 800cacc:	69bb      	ldr	r3, [r7, #24]
 800cace:	005b      	lsls	r3, r3, #1
 800cad0:	68fa      	ldr	r2, [r7, #12]
 800cad2:	4413      	add	r3, r2
 800cad4:	881b      	ldrh	r3, [r3, #0]
 800cad6:	2b2e      	cmp	r3, #46	; 0x2e
 800cad8:	d0ee      	beq.n	800cab8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800cada:	69bb      	ldr	r3, [r7, #24]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d009      	beq.n	800caf4 <create_name+0x168>
 800cae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cae4:	f043 0303 	orr.w	r3, r3, #3
 800cae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800caec:	e002      	b.n	800caf4 <create_name+0x168>
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	3b01      	subs	r3, #1
 800caf2:	617b      	str	r3, [r7, #20]
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d009      	beq.n	800cb0e <create_name+0x182>
 800cafa:	697a      	ldr	r2, [r7, #20]
 800cafc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cb00:	4413      	add	r3, r2
 800cb02:	005b      	lsls	r3, r3, #1
 800cb04:	68fa      	ldr	r2, [r7, #12]
 800cb06:	4413      	add	r3, r2
 800cb08:	881b      	ldrh	r3, [r3, #0]
 800cb0a:	2b2e      	cmp	r3, #46	; 0x2e
 800cb0c:	d1ef      	bne.n	800caee <create_name+0x162>

	i = b = 0; ni = 8;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cb14:	2300      	movs	r3, #0
 800cb16:	623b      	str	r3, [r7, #32]
 800cb18:	2308      	movs	r3, #8
 800cb1a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800cb1c:	69bb      	ldr	r3, [r7, #24]
 800cb1e:	1c5a      	adds	r2, r3, #1
 800cb20:	61ba      	str	r2, [r7, #24]
 800cb22:	005b      	lsls	r3, r3, #1
 800cb24:	68fa      	ldr	r2, [r7, #12]
 800cb26:	4413      	add	r3, r2
 800cb28:	881b      	ldrh	r3, [r3, #0]
 800cb2a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800cb2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	f000 8090 	beq.w	800cc54 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800cb34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb36:	2b20      	cmp	r3, #32
 800cb38:	d006      	beq.n	800cb48 <create_name+0x1bc>
 800cb3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb3c:	2b2e      	cmp	r3, #46	; 0x2e
 800cb3e:	d10a      	bne.n	800cb56 <create_name+0x1ca>
 800cb40:	69ba      	ldr	r2, [r7, #24]
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d006      	beq.n	800cb56 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800cb48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb4c:	f043 0303 	orr.w	r3, r3, #3
 800cb50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cb54:	e07d      	b.n	800cc52 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800cb56:	6a3a      	ldr	r2, [r7, #32]
 800cb58:	69fb      	ldr	r3, [r7, #28]
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d203      	bcs.n	800cb66 <create_name+0x1da>
 800cb5e:	69ba      	ldr	r2, [r7, #24]
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d123      	bne.n	800cbae <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800cb66:	69fb      	ldr	r3, [r7, #28]
 800cb68:	2b0b      	cmp	r3, #11
 800cb6a:	d106      	bne.n	800cb7a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800cb6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb70:	f043 0303 	orr.w	r3, r3, #3
 800cb74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cb78:	e075      	b.n	800cc66 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800cb7a:	69ba      	ldr	r2, [r7, #24]
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	d005      	beq.n	800cb8e <create_name+0x202>
 800cb82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb86:	f043 0303 	orr.w	r3, r3, #3
 800cb8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800cb8e:	69ba      	ldr	r2, [r7, #24]
 800cb90:	697b      	ldr	r3, [r7, #20]
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d866      	bhi.n	800cc64 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	61bb      	str	r3, [r7, #24]
 800cb9a:	2308      	movs	r3, #8
 800cb9c:	623b      	str	r3, [r7, #32]
 800cb9e:	230b      	movs	r3, #11
 800cba0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800cba2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cba6:	009b      	lsls	r3, r3, #2
 800cba8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cbac:	e051      	b.n	800cc52 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800cbae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbb0:	2b7f      	cmp	r3, #127	; 0x7f
 800cbb2:	d914      	bls.n	800cbde <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800cbb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbb6:	2100      	movs	r1, #0
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f001 f915 	bl	800dde8 <ff_convert>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800cbc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d004      	beq.n	800cbd2 <create_name+0x246>
 800cbc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbca:	3b80      	subs	r3, #128	; 0x80
 800cbcc:	4a23      	ldr	r2, [pc, #140]	; (800cc5c <create_name+0x2d0>)
 800cbce:	5cd3      	ldrb	r3, [r2, r3]
 800cbd0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800cbd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbd6:	f043 0302 	orr.w	r3, r3, #2
 800cbda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800cbde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d007      	beq.n	800cbf4 <create_name+0x268>
 800cbe4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cbe6:	4619      	mov	r1, r3
 800cbe8:	481d      	ldr	r0, [pc, #116]	; (800cc60 <create_name+0x2d4>)
 800cbea:	f7fe fbfe 	bl	800b3ea <chk_chr>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d008      	beq.n	800cc06 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800cbf4:	235f      	movs	r3, #95	; 0x5f
 800cbf6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800cbf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbfc:	f043 0303 	orr.w	r3, r3, #3
 800cc00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cc04:	e01b      	b.n	800cc3e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800cc06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc08:	2b40      	cmp	r3, #64	; 0x40
 800cc0a:	d909      	bls.n	800cc20 <create_name+0x294>
 800cc0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc0e:	2b5a      	cmp	r3, #90	; 0x5a
 800cc10:	d806      	bhi.n	800cc20 <create_name+0x294>
					b |= 2;
 800cc12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cc16:	f043 0302 	orr.w	r3, r3, #2
 800cc1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cc1e:	e00e      	b.n	800cc3e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800cc20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc22:	2b60      	cmp	r3, #96	; 0x60
 800cc24:	d90b      	bls.n	800cc3e <create_name+0x2b2>
 800cc26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc28:	2b7a      	cmp	r3, #122	; 0x7a
 800cc2a:	d808      	bhi.n	800cc3e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800cc2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cc30:	f043 0301 	orr.w	r3, r3, #1
 800cc34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cc38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc3a:	3b20      	subs	r3, #32
 800cc3c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800cc3e:	6a3b      	ldr	r3, [r7, #32]
 800cc40:	1c5a      	adds	r2, r3, #1
 800cc42:	623a      	str	r2, [r7, #32]
 800cc44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cc46:	b2d1      	uxtb	r1, r2
 800cc48:	687a      	ldr	r2, [r7, #4]
 800cc4a:	4413      	add	r3, r2
 800cc4c:	460a      	mov	r2, r1
 800cc4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800cc52:	e763      	b.n	800cb1c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800cc54:	bf00      	nop
 800cc56:	e006      	b.n	800cc66 <create_name+0x2da>
 800cc58:	0800e98c 	.word	0x0800e98c
 800cc5c:	0800e9f4 	.word	0x0800e9f4
 800cc60:	0800e998 	.word	0x0800e998
			if (si > di) break;			/* No extension */
 800cc64:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cc6c:	2be5      	cmp	r3, #229	; 0xe5
 800cc6e:	d103      	bne.n	800cc78 <create_name+0x2ec>
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2205      	movs	r2, #5
 800cc74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800cc78:	69fb      	ldr	r3, [r7, #28]
 800cc7a:	2b08      	cmp	r3, #8
 800cc7c:	d104      	bne.n	800cc88 <create_name+0x2fc>
 800cc7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cc82:	009b      	lsls	r3, r3, #2
 800cc84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800cc88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cc8c:	f003 030c 	and.w	r3, r3, #12
 800cc90:	2b0c      	cmp	r3, #12
 800cc92:	d005      	beq.n	800cca0 <create_name+0x314>
 800cc94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cc98:	f003 0303 	and.w	r3, r3, #3
 800cc9c:	2b03      	cmp	r3, #3
 800cc9e:	d105      	bne.n	800ccac <create_name+0x320>
 800cca0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cca4:	f043 0302 	orr.w	r3, r3, #2
 800cca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ccac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccb0:	f003 0302 	and.w	r3, r3, #2
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d117      	bne.n	800cce8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ccb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ccbc:	f003 0303 	and.w	r3, r3, #3
 800ccc0:	2b01      	cmp	r3, #1
 800ccc2:	d105      	bne.n	800ccd0 <create_name+0x344>
 800ccc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccc8:	f043 0310 	orr.w	r3, r3, #16
 800cccc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ccd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ccd4:	f003 030c 	and.w	r3, r3, #12
 800ccd8:	2b04      	cmp	r3, #4
 800ccda:	d105      	bne.n	800cce8 <create_name+0x35c>
 800ccdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cce0:	f043 0308 	orr.w	r3, r3, #8
 800cce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ccee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800ccf2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3728      	adds	r7, #40	; 0x28
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}

0800ccfc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b086      	sub	sp, #24
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800cd0a:	693b      	ldr	r3, [r7, #16]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cd10:	e002      	b.n	800cd18 <follow_path+0x1c>
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	3301      	adds	r3, #1
 800cd16:	603b      	str	r3, [r7, #0]
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	781b      	ldrb	r3, [r3, #0]
 800cd1c:	2b2f      	cmp	r3, #47	; 0x2f
 800cd1e:	d0f8      	beq.n	800cd12 <follow_path+0x16>
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	781b      	ldrb	r3, [r3, #0]
 800cd24:	2b5c      	cmp	r3, #92	; 0x5c
 800cd26:	d0f4      	beq.n	800cd12 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	781b      	ldrb	r3, [r3, #0]
 800cd32:	2b1f      	cmp	r3, #31
 800cd34:	d80a      	bhi.n	800cd4c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2280      	movs	r2, #128	; 0x80
 800cd3a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800cd3e:	2100      	movs	r1, #0
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f7ff f8fd 	bl	800bf40 <dir_sdi>
 800cd46:	4603      	mov	r3, r0
 800cd48:	75fb      	strb	r3, [r7, #23]
 800cd4a:	e048      	b.n	800cdde <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cd4c:	463b      	mov	r3, r7
 800cd4e:	4619      	mov	r1, r3
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f7ff fe1b 	bl	800c98c <create_name>
 800cd56:	4603      	mov	r3, r0
 800cd58:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cd5a:	7dfb      	ldrb	r3, [r7, #23]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d139      	bne.n	800cdd4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f7ff fc5a 	bl	800c61a <dir_find>
 800cd66:	4603      	mov	r3, r0
 800cd68:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cd70:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800cd72:	7dfb      	ldrb	r3, [r7, #23]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d00a      	beq.n	800cd8e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cd78:	7dfb      	ldrb	r3, [r7, #23]
 800cd7a:	2b04      	cmp	r3, #4
 800cd7c:	d12c      	bne.n	800cdd8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cd7e:	7afb      	ldrb	r3, [r7, #11]
 800cd80:	f003 0304 	and.w	r3, r3, #4
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d127      	bne.n	800cdd8 <follow_path+0xdc>
 800cd88:	2305      	movs	r3, #5
 800cd8a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800cd8c:	e024      	b.n	800cdd8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cd8e:	7afb      	ldrb	r3, [r7, #11]
 800cd90:	f003 0304 	and.w	r3, r3, #4
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d121      	bne.n	800cddc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800cd98:	693b      	ldr	r3, [r7, #16]
 800cd9a:	799b      	ldrb	r3, [r3, #6]
 800cd9c:	f003 0310 	and.w	r3, r3, #16
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d102      	bne.n	800cdaa <follow_path+0xae>
				res = FR_NO_PATH; break;
 800cda4:	2305      	movs	r3, #5
 800cda6:	75fb      	strb	r3, [r7, #23]
 800cda8:	e019      	b.n	800cdde <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	695b      	ldr	r3, [r3, #20]
 800cdb4:	68fa      	ldr	r2, [r7, #12]
 800cdb6:	8992      	ldrh	r2, [r2, #12]
 800cdb8:	fbb3 f0f2 	udiv	r0, r3, r2
 800cdbc:	fb00 f202 	mul.w	r2, r0, r2
 800cdc0:	1a9b      	subs	r3, r3, r2
 800cdc2:	440b      	add	r3, r1
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	68f8      	ldr	r0, [r7, #12]
 800cdc8:	f7ff fa60 	bl	800c28c <ld_clust>
 800cdcc:	4602      	mov	r2, r0
 800cdce:	693b      	ldr	r3, [r7, #16]
 800cdd0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cdd2:	e7bb      	b.n	800cd4c <follow_path+0x50>
			if (res != FR_OK) break;
 800cdd4:	bf00      	nop
 800cdd6:	e002      	b.n	800cdde <follow_path+0xe2>
				break;
 800cdd8:	bf00      	nop
 800cdda:	e000      	b.n	800cdde <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cddc:	bf00      	nop
			}
		}
	}

	return res;
 800cdde:	7dfb      	ldrb	r3, [r7, #23]
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3718      	adds	r7, #24
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}

0800cde8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cde8:	b480      	push	{r7}
 800cdea:	b087      	sub	sp, #28
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cdf0:	f04f 33ff 	mov.w	r3, #4294967295
 800cdf4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d031      	beq.n	800ce62 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	617b      	str	r3, [r7, #20]
 800ce04:	e002      	b.n	800ce0c <get_ldnumber+0x24>
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	3301      	adds	r3, #1
 800ce0a:	617b      	str	r3, [r7, #20]
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	781b      	ldrb	r3, [r3, #0]
 800ce10:	2b1f      	cmp	r3, #31
 800ce12:	d903      	bls.n	800ce1c <get_ldnumber+0x34>
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	781b      	ldrb	r3, [r3, #0]
 800ce18:	2b3a      	cmp	r3, #58	; 0x3a
 800ce1a:	d1f4      	bne.n	800ce06 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	781b      	ldrb	r3, [r3, #0]
 800ce20:	2b3a      	cmp	r3, #58	; 0x3a
 800ce22:	d11c      	bne.n	800ce5e <get_ldnumber+0x76>
			tp = *path;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	1c5a      	adds	r2, r3, #1
 800ce2e:	60fa      	str	r2, [r7, #12]
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	3b30      	subs	r3, #48	; 0x30
 800ce34:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	2b09      	cmp	r3, #9
 800ce3a:	d80e      	bhi.n	800ce5a <get_ldnumber+0x72>
 800ce3c:	68fa      	ldr	r2, [r7, #12]
 800ce3e:	697b      	ldr	r3, [r7, #20]
 800ce40:	429a      	cmp	r2, r3
 800ce42:	d10a      	bne.n	800ce5a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d107      	bne.n	800ce5a <get_ldnumber+0x72>
					vol = (int)i;
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	3301      	adds	r3, #1
 800ce52:	617b      	str	r3, [r7, #20]
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	697a      	ldr	r2, [r7, #20]
 800ce58:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	e002      	b.n	800ce64 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ce5e:	2300      	movs	r3, #0
 800ce60:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ce62:	693b      	ldr	r3, [r7, #16]
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	371c      	adds	r7, #28
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6e:	4770      	bx	lr

0800ce70 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b082      	sub	sp, #8
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	70da      	strb	r2, [r3, #3]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f04f 32ff 	mov.w	r2, #4294967295
 800ce86:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ce88:	6839      	ldr	r1, [r7, #0]
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f7fe fc78 	bl	800b780 <move_window>
 800ce90:	4603      	mov	r3, r0
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d001      	beq.n	800ce9a <check_fs+0x2a>
 800ce96:	2304      	movs	r3, #4
 800ce98:	e038      	b.n	800cf0c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	3338      	adds	r3, #56	; 0x38
 800ce9e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cea2:	4618      	mov	r0, r3
 800cea4:	f7fe f9bc 	bl	800b220 <ld_word>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	461a      	mov	r2, r3
 800ceac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	d001      	beq.n	800ceb8 <check_fs+0x48>
 800ceb4:	2303      	movs	r3, #3
 800ceb6:	e029      	b.n	800cf0c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cebe:	2be9      	cmp	r3, #233	; 0xe9
 800cec0:	d009      	beq.n	800ced6 <check_fs+0x66>
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cec8:	2beb      	cmp	r3, #235	; 0xeb
 800ceca:	d11e      	bne.n	800cf0a <check_fs+0x9a>
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ced2:	2b90      	cmp	r3, #144	; 0x90
 800ced4:	d119      	bne.n	800cf0a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	3338      	adds	r3, #56	; 0x38
 800ceda:	3336      	adds	r3, #54	; 0x36
 800cedc:	4618      	mov	r0, r3
 800cede:	f7fe f9b7 	bl	800b250 <ld_dword>
 800cee2:	4603      	mov	r3, r0
 800cee4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cee8:	4a0a      	ldr	r2, [pc, #40]	; (800cf14 <check_fs+0xa4>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d101      	bne.n	800cef2 <check_fs+0x82>
 800ceee:	2300      	movs	r3, #0
 800cef0:	e00c      	b.n	800cf0c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	3338      	adds	r3, #56	; 0x38
 800cef6:	3352      	adds	r3, #82	; 0x52
 800cef8:	4618      	mov	r0, r3
 800cefa:	f7fe f9a9 	bl	800b250 <ld_dword>
 800cefe:	4603      	mov	r3, r0
 800cf00:	4a05      	ldr	r2, [pc, #20]	; (800cf18 <check_fs+0xa8>)
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d101      	bne.n	800cf0a <check_fs+0x9a>
 800cf06:	2300      	movs	r3, #0
 800cf08:	e000      	b.n	800cf0c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800cf0a:	2302      	movs	r3, #2
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	3708      	adds	r7, #8
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd80      	pop	{r7, pc}
 800cf14:	00544146 	.word	0x00544146
 800cf18:	33544146 	.word	0x33544146

0800cf1c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b096      	sub	sp, #88	; 0x58
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	60f8      	str	r0, [r7, #12]
 800cf24:	60b9      	str	r1, [r7, #8]
 800cf26:	4613      	mov	r3, r2
 800cf28:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cf30:	68f8      	ldr	r0, [r7, #12]
 800cf32:	f7ff ff59 	bl	800cde8 <get_ldnumber>
 800cf36:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cf38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	da01      	bge.n	800cf42 <find_volume+0x26>
 800cf3e:	230b      	movs	r3, #11
 800cf40:	e265      	b.n	800d40e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cf42:	4a9f      	ldr	r2, [pc, #636]	; (800d1c0 <find_volume+0x2a4>)
 800cf44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf4a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cf4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d101      	bne.n	800cf56 <find_volume+0x3a>
 800cf52:	230c      	movs	r3, #12
 800cf54:	e25b      	b.n	800d40e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf5a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cf5c:	79fb      	ldrb	r3, [r7, #7]
 800cf5e:	f023 0301 	bic.w	r3, r3, #1
 800cf62:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cf64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf66:	781b      	ldrb	r3, [r3, #0]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d01a      	beq.n	800cfa2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800cf6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf6e:	785b      	ldrb	r3, [r3, #1]
 800cf70:	4618      	mov	r0, r3
 800cf72:	f7fe f8b7 	bl	800b0e4 <disk_status>
 800cf76:	4603      	mov	r3, r0
 800cf78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cf7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cf80:	f003 0301 	and.w	r3, r3, #1
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d10c      	bne.n	800cfa2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cf88:	79fb      	ldrb	r3, [r7, #7]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d007      	beq.n	800cf9e <find_volume+0x82>
 800cf8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cf92:	f003 0304 	and.w	r3, r3, #4
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d001      	beq.n	800cf9e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800cf9a:	230a      	movs	r3, #10
 800cf9c:	e237      	b.n	800d40e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	e235      	b.n	800d40e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cfa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cfa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfaa:	b2da      	uxtb	r2, r3
 800cfac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cfb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb2:	785b      	ldrb	r3, [r3, #1]
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f7fe f8af 	bl	800b118 <disk_initialize>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cfc0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cfc4:	f003 0301 	and.w	r3, r3, #1
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d001      	beq.n	800cfd0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cfcc:	2303      	movs	r3, #3
 800cfce:	e21e      	b.n	800d40e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cfd0:	79fb      	ldrb	r3, [r7, #7]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d007      	beq.n	800cfe6 <find_volume+0xca>
 800cfd6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cfda:	f003 0304 	and.w	r3, r3, #4
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d001      	beq.n	800cfe6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800cfe2:	230a      	movs	r3, #10
 800cfe4:	e213      	b.n	800d40e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800cfe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfe8:	7858      	ldrb	r0, [r3, #1]
 800cfea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfec:	330c      	adds	r3, #12
 800cfee:	461a      	mov	r2, r3
 800cff0:	2102      	movs	r1, #2
 800cff2:	f7fe f8f7 	bl	800b1e4 <disk_ioctl>
 800cff6:	4603      	mov	r3, r0
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d001      	beq.n	800d000 <find_volume+0xe4>
 800cffc:	2301      	movs	r3, #1
 800cffe:	e206      	b.n	800d40e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800d000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d002:	899b      	ldrh	r3, [r3, #12]
 800d004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d008:	d80d      	bhi.n	800d026 <find_volume+0x10a>
 800d00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d00c:	899b      	ldrh	r3, [r3, #12]
 800d00e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d012:	d308      	bcc.n	800d026 <find_volume+0x10a>
 800d014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d016:	899b      	ldrh	r3, [r3, #12]
 800d018:	461a      	mov	r2, r3
 800d01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d01c:	899b      	ldrh	r3, [r3, #12]
 800d01e:	3b01      	subs	r3, #1
 800d020:	4013      	ands	r3, r2
 800d022:	2b00      	cmp	r3, #0
 800d024:	d001      	beq.n	800d02a <find_volume+0x10e>
 800d026:	2301      	movs	r3, #1
 800d028:	e1f1      	b.n	800d40e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d02a:	2300      	movs	r3, #0
 800d02c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d02e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d030:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d032:	f7ff ff1d 	bl	800ce70 <check_fs>
 800d036:	4603      	mov	r3, r0
 800d038:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d03c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d040:	2b02      	cmp	r3, #2
 800d042:	d149      	bne.n	800d0d8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d044:	2300      	movs	r3, #0
 800d046:	643b      	str	r3, [r7, #64]	; 0x40
 800d048:	e01e      	b.n	800d088 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d04c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d052:	011b      	lsls	r3, r3, #4
 800d054:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d058:	4413      	add	r3, r2
 800d05a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d05e:	3304      	adds	r3, #4
 800d060:	781b      	ldrb	r3, [r3, #0]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d006      	beq.n	800d074 <find_volume+0x158>
 800d066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d068:	3308      	adds	r3, #8
 800d06a:	4618      	mov	r0, r3
 800d06c:	f7fe f8f0 	bl	800b250 <ld_dword>
 800d070:	4602      	mov	r2, r0
 800d072:	e000      	b.n	800d076 <find_volume+0x15a>
 800d074:	2200      	movs	r2, #0
 800d076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d078:	009b      	lsls	r3, r3, #2
 800d07a:	3358      	adds	r3, #88	; 0x58
 800d07c:	443b      	add	r3, r7
 800d07e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d084:	3301      	adds	r3, #1
 800d086:	643b      	str	r3, [r7, #64]	; 0x40
 800d088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d08a:	2b03      	cmp	r3, #3
 800d08c:	d9dd      	bls.n	800d04a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d08e:	2300      	movs	r3, #0
 800d090:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d094:	2b00      	cmp	r3, #0
 800d096:	d002      	beq.n	800d09e <find_volume+0x182>
 800d098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d09a:	3b01      	subs	r3, #1
 800d09c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d09e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0a0:	009b      	lsls	r3, r3, #2
 800d0a2:	3358      	adds	r3, #88	; 0x58
 800d0a4:	443b      	add	r3, r7
 800d0a6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d0aa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d0ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d005      	beq.n	800d0be <find_volume+0x1a2>
 800d0b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d0b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d0b6:	f7ff fedb 	bl	800ce70 <check_fs>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	e000      	b.n	800d0c0 <find_volume+0x1a4>
 800d0be:	2303      	movs	r3, #3
 800d0c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d0c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d0c8:	2b01      	cmp	r3, #1
 800d0ca:	d905      	bls.n	800d0d8 <find_volume+0x1bc>
 800d0cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0ce:	3301      	adds	r3, #1
 800d0d0:	643b      	str	r3, [r7, #64]	; 0x40
 800d0d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0d4:	2b03      	cmp	r3, #3
 800d0d6:	d9e2      	bls.n	800d09e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d0d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d0dc:	2b04      	cmp	r3, #4
 800d0de:	d101      	bne.n	800d0e4 <find_volume+0x1c8>
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	e194      	b.n	800d40e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d0e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d0e8:	2b01      	cmp	r3, #1
 800d0ea:	d901      	bls.n	800d0f0 <find_volume+0x1d4>
 800d0ec:	230d      	movs	r3, #13
 800d0ee:	e18e      	b.n	800d40e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0f2:	3338      	adds	r3, #56	; 0x38
 800d0f4:	330b      	adds	r3, #11
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7fe f892 	bl	800b220 <ld_word>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	461a      	mov	r2, r3
 800d100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d102:	899b      	ldrh	r3, [r3, #12]
 800d104:	429a      	cmp	r2, r3
 800d106:	d001      	beq.n	800d10c <find_volume+0x1f0>
 800d108:	230d      	movs	r3, #13
 800d10a:	e180      	b.n	800d40e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d10e:	3338      	adds	r3, #56	; 0x38
 800d110:	3316      	adds	r3, #22
 800d112:	4618      	mov	r0, r3
 800d114:	f7fe f884 	bl	800b220 <ld_word>
 800d118:	4603      	mov	r3, r0
 800d11a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d11c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d106      	bne.n	800d130 <find_volume+0x214>
 800d122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d124:	3338      	adds	r3, #56	; 0x38
 800d126:	3324      	adds	r3, #36	; 0x24
 800d128:	4618      	mov	r0, r3
 800d12a:	f7fe f891 	bl	800b250 <ld_dword>
 800d12e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d132:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d134:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d138:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800d13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d13e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d142:	789b      	ldrb	r3, [r3, #2]
 800d144:	2b01      	cmp	r3, #1
 800d146:	d005      	beq.n	800d154 <find_volume+0x238>
 800d148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d14a:	789b      	ldrb	r3, [r3, #2]
 800d14c:	2b02      	cmp	r3, #2
 800d14e:	d001      	beq.n	800d154 <find_volume+0x238>
 800d150:	230d      	movs	r3, #13
 800d152:	e15c      	b.n	800d40e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d156:	789b      	ldrb	r3, [r3, #2]
 800d158:	461a      	mov	r2, r3
 800d15a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d15c:	fb02 f303 	mul.w	r3, r2, r3
 800d160:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d164:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d168:	b29a      	uxth	r2, r3
 800d16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d16c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d170:	895b      	ldrh	r3, [r3, #10]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d008      	beq.n	800d188 <find_volume+0x26c>
 800d176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d178:	895b      	ldrh	r3, [r3, #10]
 800d17a:	461a      	mov	r2, r3
 800d17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d17e:	895b      	ldrh	r3, [r3, #10]
 800d180:	3b01      	subs	r3, #1
 800d182:	4013      	ands	r3, r2
 800d184:	2b00      	cmp	r3, #0
 800d186:	d001      	beq.n	800d18c <find_volume+0x270>
 800d188:	230d      	movs	r3, #13
 800d18a:	e140      	b.n	800d40e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d18e:	3338      	adds	r3, #56	; 0x38
 800d190:	3311      	adds	r3, #17
 800d192:	4618      	mov	r0, r3
 800d194:	f7fe f844 	bl	800b220 <ld_word>
 800d198:	4603      	mov	r3, r0
 800d19a:	461a      	mov	r2, r3
 800d19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d19e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a2:	891b      	ldrh	r3, [r3, #8]
 800d1a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d1a6:	8992      	ldrh	r2, [r2, #12]
 800d1a8:	0952      	lsrs	r2, r2, #5
 800d1aa:	b292      	uxth	r2, r2
 800d1ac:	fbb3 f1f2 	udiv	r1, r3, r2
 800d1b0:	fb01 f202 	mul.w	r2, r1, r2
 800d1b4:	1a9b      	subs	r3, r3, r2
 800d1b6:	b29b      	uxth	r3, r3
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d003      	beq.n	800d1c4 <find_volume+0x2a8>
 800d1bc:	230d      	movs	r3, #13
 800d1be:	e126      	b.n	800d40e <find_volume+0x4f2>
 800d1c0:	2000259c 	.word	0x2000259c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c6:	3338      	adds	r3, #56	; 0x38
 800d1c8:	3313      	adds	r3, #19
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7fe f828 	bl	800b220 <ld_word>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d1d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d106      	bne.n	800d1e8 <find_volume+0x2cc>
 800d1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1dc:	3338      	adds	r3, #56	; 0x38
 800d1de:	3320      	adds	r3, #32
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f7fe f835 	bl	800b250 <ld_dword>
 800d1e6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ea:	3338      	adds	r3, #56	; 0x38
 800d1ec:	330e      	adds	r3, #14
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f7fe f816 	bl	800b220 <ld_word>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d1f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d101      	bne.n	800d202 <find_volume+0x2e6>
 800d1fe:	230d      	movs	r3, #13
 800d200:	e105      	b.n	800d40e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d202:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d206:	4413      	add	r3, r2
 800d208:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d20a:	8911      	ldrh	r1, [r2, #8]
 800d20c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d20e:	8992      	ldrh	r2, [r2, #12]
 800d210:	0952      	lsrs	r2, r2, #5
 800d212:	b292      	uxth	r2, r2
 800d214:	fbb1 f2f2 	udiv	r2, r1, r2
 800d218:	b292      	uxth	r2, r2
 800d21a:	4413      	add	r3, r2
 800d21c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d21e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d222:	429a      	cmp	r2, r3
 800d224:	d201      	bcs.n	800d22a <find_volume+0x30e>
 800d226:	230d      	movs	r3, #13
 800d228:	e0f1      	b.n	800d40e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d22a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d22e:	1ad3      	subs	r3, r2, r3
 800d230:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d232:	8952      	ldrh	r2, [r2, #10]
 800d234:	fbb3 f3f2 	udiv	r3, r3, r2
 800d238:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d101      	bne.n	800d244 <find_volume+0x328>
 800d240:	230d      	movs	r3, #13
 800d242:	e0e4      	b.n	800d40e <find_volume+0x4f2>
		fmt = FS_FAT32;
 800d244:	2303      	movs	r3, #3
 800d246:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d24c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d250:	4293      	cmp	r3, r2
 800d252:	d802      	bhi.n	800d25a <find_volume+0x33e>
 800d254:	2302      	movs	r3, #2
 800d256:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d25c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d260:	4293      	cmp	r3, r2
 800d262:	d802      	bhi.n	800d26a <find_volume+0x34e>
 800d264:	2301      	movs	r3, #1
 800d266:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d26c:	1c9a      	adds	r2, r3, #2
 800d26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d270:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800d272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d274:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d276:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d278:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d27a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d27c:	441a      	add	r2, r3
 800d27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d280:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800d282:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d286:	441a      	add	r2, r3
 800d288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d28a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800d28c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d290:	2b03      	cmp	r3, #3
 800d292:	d11e      	bne.n	800d2d2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d296:	3338      	adds	r3, #56	; 0x38
 800d298:	332a      	adds	r3, #42	; 0x2a
 800d29a:	4618      	mov	r0, r3
 800d29c:	f7fd ffc0 	bl	800b220 <ld_word>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d001      	beq.n	800d2aa <find_volume+0x38e>
 800d2a6:	230d      	movs	r3, #13
 800d2a8:	e0b1      	b.n	800d40e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ac:	891b      	ldrh	r3, [r3, #8]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d001      	beq.n	800d2b6 <find_volume+0x39a>
 800d2b2:	230d      	movs	r3, #13
 800d2b4:	e0ab      	b.n	800d40e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2b8:	3338      	adds	r3, #56	; 0x38
 800d2ba:	332c      	adds	r3, #44	; 0x2c
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f7fd ffc7 	bl	800b250 <ld_dword>
 800d2c2:	4602      	mov	r2, r0
 800d2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2c6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ca:	69db      	ldr	r3, [r3, #28]
 800d2cc:	009b      	lsls	r3, r3, #2
 800d2ce:	647b      	str	r3, [r7, #68]	; 0x44
 800d2d0:	e01f      	b.n	800d312 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d4:	891b      	ldrh	r3, [r3, #8]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d101      	bne.n	800d2de <find_volume+0x3c2>
 800d2da:	230d      	movs	r3, #13
 800d2dc:	e097      	b.n	800d40e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d2e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2e4:	441a      	add	r2, r3
 800d2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2e8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d2ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d2ee:	2b02      	cmp	r3, #2
 800d2f0:	d103      	bne.n	800d2fa <find_volume+0x3de>
 800d2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f4:	69db      	ldr	r3, [r3, #28]
 800d2f6:	005b      	lsls	r3, r3, #1
 800d2f8:	e00a      	b.n	800d310 <find_volume+0x3f4>
 800d2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2fc:	69da      	ldr	r2, [r3, #28]
 800d2fe:	4613      	mov	r3, r2
 800d300:	005b      	lsls	r3, r3, #1
 800d302:	4413      	add	r3, r2
 800d304:	085a      	lsrs	r2, r3, #1
 800d306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d308:	69db      	ldr	r3, [r3, #28]
 800d30a:	f003 0301 	and.w	r3, r3, #1
 800d30e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d310:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d314:	6a1a      	ldr	r2, [r3, #32]
 800d316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d318:	899b      	ldrh	r3, [r3, #12]
 800d31a:	4619      	mov	r1, r3
 800d31c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d31e:	440b      	add	r3, r1
 800d320:	3b01      	subs	r3, #1
 800d322:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d324:	8989      	ldrh	r1, [r1, #12]
 800d326:	fbb3 f3f1 	udiv	r3, r3, r1
 800d32a:	429a      	cmp	r2, r3
 800d32c:	d201      	bcs.n	800d332 <find_volume+0x416>
 800d32e:	230d      	movs	r3, #13
 800d330:	e06d      	b.n	800d40e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d334:	f04f 32ff 	mov.w	r2, #4294967295
 800d338:	619a      	str	r2, [r3, #24]
 800d33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d33c:	699a      	ldr	r2, [r3, #24]
 800d33e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d340:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800d342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d344:	2280      	movs	r2, #128	; 0x80
 800d346:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d348:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d34c:	2b03      	cmp	r3, #3
 800d34e:	d149      	bne.n	800d3e4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d352:	3338      	adds	r3, #56	; 0x38
 800d354:	3330      	adds	r3, #48	; 0x30
 800d356:	4618      	mov	r0, r3
 800d358:	f7fd ff62 	bl	800b220 <ld_word>
 800d35c:	4603      	mov	r3, r0
 800d35e:	2b01      	cmp	r3, #1
 800d360:	d140      	bne.n	800d3e4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d364:	3301      	adds	r3, #1
 800d366:	4619      	mov	r1, r3
 800d368:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d36a:	f7fe fa09 	bl	800b780 <move_window>
 800d36e:	4603      	mov	r3, r0
 800d370:	2b00      	cmp	r3, #0
 800d372:	d137      	bne.n	800d3e4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800d374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d376:	2200      	movs	r2, #0
 800d378:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d37c:	3338      	adds	r3, #56	; 0x38
 800d37e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d382:	4618      	mov	r0, r3
 800d384:	f7fd ff4c 	bl	800b220 <ld_word>
 800d388:	4603      	mov	r3, r0
 800d38a:	461a      	mov	r2, r3
 800d38c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d390:	429a      	cmp	r2, r3
 800d392:	d127      	bne.n	800d3e4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d396:	3338      	adds	r3, #56	; 0x38
 800d398:	4618      	mov	r0, r3
 800d39a:	f7fd ff59 	bl	800b250 <ld_dword>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	4a1d      	ldr	r2, [pc, #116]	; (800d418 <find_volume+0x4fc>)
 800d3a2:	4293      	cmp	r3, r2
 800d3a4:	d11e      	bne.n	800d3e4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a8:	3338      	adds	r3, #56	; 0x38
 800d3aa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f7fd ff4e 	bl	800b250 <ld_dword>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	4a19      	ldr	r2, [pc, #100]	; (800d41c <find_volume+0x500>)
 800d3b8:	4293      	cmp	r3, r2
 800d3ba:	d113      	bne.n	800d3e4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3be:	3338      	adds	r3, #56	; 0x38
 800d3c0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f7fd ff43 	bl	800b250 <ld_dword>
 800d3ca:	4602      	mov	r2, r0
 800d3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ce:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d2:	3338      	adds	r3, #56	; 0x38
 800d3d4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f7fd ff39 	bl	800b250 <ld_dword>
 800d3de:	4602      	mov	r2, r0
 800d3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d3ea:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d3ec:	4b0c      	ldr	r3, [pc, #48]	; (800d420 <find_volume+0x504>)
 800d3ee:	881b      	ldrh	r3, [r3, #0]
 800d3f0:	3301      	adds	r3, #1
 800d3f2:	b29a      	uxth	r2, r3
 800d3f4:	4b0a      	ldr	r3, [pc, #40]	; (800d420 <find_volume+0x504>)
 800d3f6:	801a      	strh	r2, [r3, #0]
 800d3f8:	4b09      	ldr	r3, [pc, #36]	; (800d420 <find_volume+0x504>)
 800d3fa:	881a      	ldrh	r2, [r3, #0]
 800d3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3fe:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800d400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d402:	4a08      	ldr	r2, [pc, #32]	; (800d424 <find_volume+0x508>)
 800d404:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d406:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d408:	f7fe f952 	bl	800b6b0 <clear_lock>
#endif
	return FR_OK;
 800d40c:	2300      	movs	r3, #0
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3758      	adds	r7, #88	; 0x58
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}
 800d416:	bf00      	nop
 800d418:	41615252 	.word	0x41615252
 800d41c:	61417272 	.word	0x61417272
 800d420:	200025a0 	.word	0x200025a0
 800d424:	200025c4 	.word	0x200025c4

0800d428 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b084      	sub	sp, #16
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
 800d430:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d432:	2309      	movs	r3, #9
 800d434:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d01c      	beq.n	800d476 <validate+0x4e>
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d018      	beq.n	800d476 <validate+0x4e>
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	781b      	ldrb	r3, [r3, #0]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d013      	beq.n	800d476 <validate+0x4e>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	889a      	ldrh	r2, [r3, #4]
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	88db      	ldrh	r3, [r3, #6]
 800d458:	429a      	cmp	r2, r3
 800d45a:	d10c      	bne.n	800d476 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	785b      	ldrb	r3, [r3, #1]
 800d462:	4618      	mov	r0, r3
 800d464:	f7fd fe3e 	bl	800b0e4 <disk_status>
 800d468:	4603      	mov	r3, r0
 800d46a:	f003 0301 	and.w	r3, r3, #1
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d101      	bne.n	800d476 <validate+0x4e>
			res = FR_OK;
 800d472:	2300      	movs	r3, #0
 800d474:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d476:	7bfb      	ldrb	r3, [r7, #15]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d102      	bne.n	800d482 <validate+0x5a>
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	e000      	b.n	800d484 <validate+0x5c>
 800d482:	2300      	movs	r3, #0
 800d484:	683a      	ldr	r2, [r7, #0]
 800d486:	6013      	str	r3, [r2, #0]
	return res;
 800d488:	7bfb      	ldrb	r3, [r7, #15]
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3710      	adds	r7, #16
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}
	...

0800d494 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b088      	sub	sp, #32
 800d498:	af00      	add	r7, sp, #0
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	4613      	mov	r3, r2
 800d4a0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d4a6:	f107 0310 	add.w	r3, r7, #16
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f7ff fc9c 	bl	800cde8 <get_ldnumber>
 800d4b0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d4b2:	69fb      	ldr	r3, [r7, #28]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	da01      	bge.n	800d4bc <f_mount+0x28>
 800d4b8:	230b      	movs	r3, #11
 800d4ba:	e02b      	b.n	800d514 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d4bc:	4a17      	ldr	r2, [pc, #92]	; (800d51c <f_mount+0x88>)
 800d4be:	69fb      	ldr	r3, [r7, #28]
 800d4c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4c4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d4c6:	69bb      	ldr	r3, [r7, #24]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d005      	beq.n	800d4d8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d4cc:	69b8      	ldr	r0, [r7, #24]
 800d4ce:	f7fe f8ef 	bl	800b6b0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d4d2:	69bb      	ldr	r3, [r7, #24]
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d002      	beq.n	800d4e4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d4e4:	68fa      	ldr	r2, [r7, #12]
 800d4e6:	490d      	ldr	r1, [pc, #52]	; (800d51c <f_mount+0x88>)
 800d4e8:	69fb      	ldr	r3, [r7, #28]
 800d4ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d002      	beq.n	800d4fa <f_mount+0x66>
 800d4f4:	79fb      	ldrb	r3, [r7, #7]
 800d4f6:	2b01      	cmp	r3, #1
 800d4f8:	d001      	beq.n	800d4fe <f_mount+0x6a>
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	e00a      	b.n	800d514 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d4fe:	f107 010c 	add.w	r1, r7, #12
 800d502:	f107 0308 	add.w	r3, r7, #8
 800d506:	2200      	movs	r2, #0
 800d508:	4618      	mov	r0, r3
 800d50a:	f7ff fd07 	bl	800cf1c <find_volume>
 800d50e:	4603      	mov	r3, r0
 800d510:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d512:	7dfb      	ldrb	r3, [r7, #23]
}
 800d514:	4618      	mov	r0, r3
 800d516:	3720      	adds	r7, #32
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}
 800d51c:	2000259c 	.word	0x2000259c

0800d520 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b09a      	sub	sp, #104	; 0x68
 800d524:	af00      	add	r7, sp, #0
 800d526:	60f8      	str	r0, [r7, #12]
 800d528:	60b9      	str	r1, [r7, #8]
 800d52a:	4613      	mov	r3, r2
 800d52c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d101      	bne.n	800d538 <f_open+0x18>
 800d534:	2309      	movs	r3, #9
 800d536:	e1bb      	b.n	800d8b0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d538:	79fb      	ldrb	r3, [r7, #7]
 800d53a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d53e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d540:	79fa      	ldrb	r2, [r7, #7]
 800d542:	f107 0114 	add.w	r1, r7, #20
 800d546:	f107 0308 	add.w	r3, r7, #8
 800d54a:	4618      	mov	r0, r3
 800d54c:	f7ff fce6 	bl	800cf1c <find_volume>
 800d550:	4603      	mov	r3, r0
 800d552:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800d556:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	f040 819f 	bne.w	800d89e <f_open+0x37e>
		dj.obj.fs = fs;
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d564:	68ba      	ldr	r2, [r7, #8]
 800d566:	f107 0318 	add.w	r3, r7, #24
 800d56a:	4611      	mov	r1, r2
 800d56c:	4618      	mov	r0, r3
 800d56e:	f7ff fbc5 	bl	800ccfc <follow_path>
 800d572:	4603      	mov	r3, r0
 800d574:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d578:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d11a      	bne.n	800d5b6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d580:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d584:	b25b      	sxtb	r3, r3
 800d586:	2b00      	cmp	r3, #0
 800d588:	da03      	bge.n	800d592 <f_open+0x72>
				res = FR_INVALID_NAME;
 800d58a:	2306      	movs	r3, #6
 800d58c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d590:	e011      	b.n	800d5b6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d592:	79fb      	ldrb	r3, [r7, #7]
 800d594:	f023 0301 	bic.w	r3, r3, #1
 800d598:	2b00      	cmp	r3, #0
 800d59a:	bf14      	ite	ne
 800d59c:	2301      	movne	r3, #1
 800d59e:	2300      	moveq	r3, #0
 800d5a0:	b2db      	uxtb	r3, r3
 800d5a2:	461a      	mov	r2, r3
 800d5a4:	f107 0318 	add.w	r3, r7, #24
 800d5a8:	4611      	mov	r1, r2
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f7fd ff38 	bl	800b420 <chk_lock>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d5b6:	79fb      	ldrb	r3, [r7, #7]
 800d5b8:	f003 031c 	and.w	r3, r3, #28
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d07f      	beq.n	800d6c0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d5c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d017      	beq.n	800d5f8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d5c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d5cc:	2b04      	cmp	r3, #4
 800d5ce:	d10e      	bne.n	800d5ee <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d5d0:	f7fd ff82 	bl	800b4d8 <enq_lock>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d006      	beq.n	800d5e8 <f_open+0xc8>
 800d5da:	f107 0318 	add.w	r3, r7, #24
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f7ff f8dc 	bl	800c79c <dir_register>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	e000      	b.n	800d5ea <f_open+0xca>
 800d5e8:	2312      	movs	r3, #18
 800d5ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d5ee:	79fb      	ldrb	r3, [r7, #7]
 800d5f0:	f043 0308 	orr.w	r3, r3, #8
 800d5f4:	71fb      	strb	r3, [r7, #7]
 800d5f6:	e010      	b.n	800d61a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d5f8:	7fbb      	ldrb	r3, [r7, #30]
 800d5fa:	f003 0311 	and.w	r3, r3, #17
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d003      	beq.n	800d60a <f_open+0xea>
					res = FR_DENIED;
 800d602:	2307      	movs	r3, #7
 800d604:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d608:	e007      	b.n	800d61a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d60a:	79fb      	ldrb	r3, [r7, #7]
 800d60c:	f003 0304 	and.w	r3, r3, #4
 800d610:	2b00      	cmp	r3, #0
 800d612:	d002      	beq.n	800d61a <f_open+0xfa>
 800d614:	2308      	movs	r3, #8
 800d616:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d61a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d168      	bne.n	800d6f4 <f_open+0x1d4>
 800d622:	79fb      	ldrb	r3, [r7, #7]
 800d624:	f003 0308 	and.w	r3, r3, #8
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d063      	beq.n	800d6f4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800d62c:	f7fd fcfc 	bl	800b028 <get_fattime>
 800d630:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d634:	330e      	adds	r3, #14
 800d636:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d638:	4618      	mov	r0, r3
 800d63a:	f7fd fe47 	bl	800b2cc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d640:	3316      	adds	r3, #22
 800d642:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d644:	4618      	mov	r0, r3
 800d646:	f7fd fe41 	bl	800b2cc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d64c:	330b      	adds	r3, #11
 800d64e:	2220      	movs	r2, #32
 800d650:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d656:	4611      	mov	r1, r2
 800d658:	4618      	mov	r0, r3
 800d65a:	f7fe fe17 	bl	800c28c <ld_clust>
 800d65e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d664:	2200      	movs	r2, #0
 800d666:	4618      	mov	r0, r3
 800d668:	f7fe fe2f 	bl	800c2ca <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d66e:	331c      	adds	r3, #28
 800d670:	2100      	movs	r1, #0
 800d672:	4618      	mov	r0, r3
 800d674:	f7fd fe2a 	bl	800b2cc <st_dword>
					fs->wflag = 1;
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	2201      	movs	r2, #1
 800d67c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d67e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d680:	2b00      	cmp	r3, #0
 800d682:	d037      	beq.n	800d6f4 <f_open+0x1d4>
						dw = fs->winsect;
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d688:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800d68a:	f107 0318 	add.w	r3, r7, #24
 800d68e:	2200      	movs	r2, #0
 800d690:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d692:	4618      	mov	r0, r3
 800d694:	f7fe fb1f 	bl	800bcd6 <remove_chain>
 800d698:	4603      	mov	r3, r0
 800d69a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800d69e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d126      	bne.n	800d6f4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	f7fe f868 	bl	800b780 <move_window>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d6ba:	3a01      	subs	r2, #1
 800d6bc:	615a      	str	r2, [r3, #20]
 800d6be:	e019      	b.n	800d6f4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d6c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d115      	bne.n	800d6f4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d6c8:	7fbb      	ldrb	r3, [r7, #30]
 800d6ca:	f003 0310 	and.w	r3, r3, #16
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d003      	beq.n	800d6da <f_open+0x1ba>
					res = FR_NO_FILE;
 800d6d2:	2304      	movs	r3, #4
 800d6d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d6d8:	e00c      	b.n	800d6f4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d6da:	79fb      	ldrb	r3, [r7, #7]
 800d6dc:	f003 0302 	and.w	r3, r3, #2
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d007      	beq.n	800d6f4 <f_open+0x1d4>
 800d6e4:	7fbb      	ldrb	r3, [r7, #30]
 800d6e6:	f003 0301 	and.w	r3, r3, #1
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d002      	beq.n	800d6f4 <f_open+0x1d4>
						res = FR_DENIED;
 800d6ee:	2307      	movs	r3, #7
 800d6f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800d6f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d128      	bne.n	800d74e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d6fc:	79fb      	ldrb	r3, [r7, #7]
 800d6fe:	f003 0308 	and.w	r3, r3, #8
 800d702:	2b00      	cmp	r3, #0
 800d704:	d003      	beq.n	800d70e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d706:	79fb      	ldrb	r3, [r7, #7]
 800d708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d70c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d716:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d71c:	79fb      	ldrb	r3, [r7, #7]
 800d71e:	f023 0301 	bic.w	r3, r3, #1
 800d722:	2b00      	cmp	r3, #0
 800d724:	bf14      	ite	ne
 800d726:	2301      	movne	r3, #1
 800d728:	2300      	moveq	r3, #0
 800d72a:	b2db      	uxtb	r3, r3
 800d72c:	461a      	mov	r2, r3
 800d72e:	f107 0318 	add.w	r3, r7, #24
 800d732:	4611      	mov	r1, r2
 800d734:	4618      	mov	r0, r3
 800d736:	f7fd fef1 	bl	800b51c <inc_lock>
 800d73a:	4602      	mov	r2, r0
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	691b      	ldr	r3, [r3, #16]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d102      	bne.n	800d74e <f_open+0x22e>
 800d748:	2302      	movs	r3, #2
 800d74a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d74e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d752:	2b00      	cmp	r3, #0
 800d754:	f040 80a3 	bne.w	800d89e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d75c:	4611      	mov	r1, r2
 800d75e:	4618      	mov	r0, r3
 800d760:	f7fe fd94 	bl	800c28c <ld_clust>
 800d764:	4602      	mov	r2, r0
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d76c:	331c      	adds	r3, #28
 800d76e:	4618      	mov	r0, r3
 800d770:	f7fd fd6e 	bl	800b250 <ld_dword>
 800d774:	4602      	mov	r2, r0
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	2200      	movs	r2, #0
 800d77e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d780:	697a      	ldr	r2, [r7, #20]
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	88da      	ldrh	r2, [r3, #6]
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	79fa      	ldrb	r2, [r7, #7]
 800d792:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	2200      	movs	r2, #0
 800d798:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	2200      	movs	r2, #0
 800d79e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	3330      	adds	r3, #48	; 0x30
 800d7aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d7ae:	2100      	movs	r1, #0
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f7fd fdd8 	bl	800b366 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d7b6:	79fb      	ldrb	r3, [r7, #7]
 800d7b8:	f003 0320 	and.w	r3, r3, #32
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d06e      	beq.n	800d89e <f_open+0x37e>
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	68db      	ldr	r3, [r3, #12]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d06a      	beq.n	800d89e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	68da      	ldr	r2, [r3, #12]
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d7d0:	697b      	ldr	r3, [r7, #20]
 800d7d2:	895b      	ldrh	r3, [r3, #10]
 800d7d4:	461a      	mov	r2, r3
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	899b      	ldrh	r3, [r3, #12]
 800d7da:	fb02 f303 	mul.w	r3, r2, r3
 800d7de:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	689b      	ldr	r3, [r3, #8]
 800d7e4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	68db      	ldr	r3, [r3, #12]
 800d7ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d7ec:	e016      	b.n	800d81c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f7fe f881 	bl	800b8fa <get_fat>
 800d7f8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800d7fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d7fc:	2b01      	cmp	r3, #1
 800d7fe:	d802      	bhi.n	800d806 <f_open+0x2e6>
 800d800:	2302      	movs	r3, #2
 800d802:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d806:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d80c:	d102      	bne.n	800d814 <f_open+0x2f4>
 800d80e:	2301      	movs	r3, #1
 800d810:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d814:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d818:	1ad3      	subs	r3, r2, r3
 800d81a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d81c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d820:	2b00      	cmp	r3, #0
 800d822:	d103      	bne.n	800d82c <f_open+0x30c>
 800d824:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d828:	429a      	cmp	r2, r3
 800d82a:	d8e0      	bhi.n	800d7ee <f_open+0x2ce>
				}
				fp->clust = clst;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d830:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d832:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d836:	2b00      	cmp	r3, #0
 800d838:	d131      	bne.n	800d89e <f_open+0x37e>
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	899b      	ldrh	r3, [r3, #12]
 800d83e:	461a      	mov	r2, r3
 800d840:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d842:	fbb3 f1f2 	udiv	r1, r3, r2
 800d846:	fb01 f202 	mul.w	r2, r1, r2
 800d84a:	1a9b      	subs	r3, r3, r2
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d026      	beq.n	800d89e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d854:	4618      	mov	r0, r3
 800d856:	f7fe f831 	bl	800b8bc <clust2sect>
 800d85a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d85c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d103      	bne.n	800d86a <f_open+0x34a>
						res = FR_INT_ERR;
 800d862:	2302      	movs	r3, #2
 800d864:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d868:	e019      	b.n	800d89e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	899b      	ldrh	r3, [r3, #12]
 800d86e:	461a      	mov	r2, r3
 800d870:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d872:	fbb3 f2f2 	udiv	r2, r3, r2
 800d876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d878:	441a      	add	r2, r3
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d87e:	697b      	ldr	r3, [r7, #20]
 800d880:	7858      	ldrb	r0, [r3, #1]
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	6a1a      	ldr	r2, [r3, #32]
 800d88c:	2301      	movs	r3, #1
 800d88e:	f7fd fc69 	bl	800b164 <disk_read>
 800d892:	4603      	mov	r3, r0
 800d894:	2b00      	cmp	r3, #0
 800d896:	d002      	beq.n	800d89e <f_open+0x37e>
 800d898:	2301      	movs	r3, #1
 800d89a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d89e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d002      	beq.n	800d8ac <f_open+0x38c>
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d8ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	3768      	adds	r7, #104	; 0x68
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}

0800d8b8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b08c      	sub	sp, #48	; 0x30
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	60f8      	str	r0, [r7, #12]
 800d8c0:	60b9      	str	r1, [r7, #8]
 800d8c2:	607a      	str	r2, [r7, #4]
 800d8c4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	f107 0210 	add.w	r2, r7, #16
 800d8d6:	4611      	mov	r1, r2
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f7ff fda5 	bl	800d428 <validate>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d8e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d107      	bne.n	800d8fc <f_write+0x44>
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	7d5b      	ldrb	r3, [r3, #21]
 800d8f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d8f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d002      	beq.n	800d902 <f_write+0x4a>
 800d8fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d900:	e16a      	b.n	800dbd8 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	7d1b      	ldrb	r3, [r3, #20]
 800d906:	f003 0302 	and.w	r3, r3, #2
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d101      	bne.n	800d912 <f_write+0x5a>
 800d90e:	2307      	movs	r3, #7
 800d910:	e162      	b.n	800dbd8 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	699a      	ldr	r2, [r3, #24]
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	441a      	add	r2, r3
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	699b      	ldr	r3, [r3, #24]
 800d91e:	429a      	cmp	r2, r3
 800d920:	f080 814c 	bcs.w	800dbbc <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	699b      	ldr	r3, [r3, #24]
 800d928:	43db      	mvns	r3, r3
 800d92a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d92c:	e146      	b.n	800dbbc <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	699b      	ldr	r3, [r3, #24]
 800d932:	693a      	ldr	r2, [r7, #16]
 800d934:	8992      	ldrh	r2, [r2, #12]
 800d936:	fbb3 f1f2 	udiv	r1, r3, r2
 800d93a:	fb01 f202 	mul.w	r2, r1, r2
 800d93e:	1a9b      	subs	r3, r3, r2
 800d940:	2b00      	cmp	r3, #0
 800d942:	f040 80f1 	bne.w	800db28 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	699b      	ldr	r3, [r3, #24]
 800d94a:	693a      	ldr	r2, [r7, #16]
 800d94c:	8992      	ldrh	r2, [r2, #12]
 800d94e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d952:	693a      	ldr	r2, [r7, #16]
 800d954:	8952      	ldrh	r2, [r2, #10]
 800d956:	3a01      	subs	r2, #1
 800d958:	4013      	ands	r3, r2
 800d95a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d95c:	69bb      	ldr	r3, [r7, #24]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d143      	bne.n	800d9ea <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	699b      	ldr	r3, [r3, #24]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d10c      	bne.n	800d984 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	689b      	ldr	r3, [r3, #8]
 800d96e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d972:	2b00      	cmp	r3, #0
 800d974:	d11a      	bne.n	800d9ac <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	2100      	movs	r1, #0
 800d97a:	4618      	mov	r0, r3
 800d97c:	f7fe fa10 	bl	800bda0 <create_chain>
 800d980:	62b8      	str	r0, [r7, #40]	; 0x28
 800d982:	e013      	b.n	800d9ac <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d007      	beq.n	800d99c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	699b      	ldr	r3, [r3, #24]
 800d990:	4619      	mov	r1, r3
 800d992:	68f8      	ldr	r0, [r7, #12]
 800d994:	f7fe fa9c 	bl	800bed0 <clmt_clust>
 800d998:	62b8      	str	r0, [r7, #40]	; 0x28
 800d99a:	e007      	b.n	800d9ac <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d99c:	68fa      	ldr	r2, [r7, #12]
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	69db      	ldr	r3, [r3, #28]
 800d9a2:	4619      	mov	r1, r3
 800d9a4:	4610      	mov	r0, r2
 800d9a6:	f7fe f9fb 	bl	800bda0 <create_chain>
 800d9aa:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	f000 8109 	beq.w	800dbc6 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9b6:	2b01      	cmp	r3, #1
 800d9b8:	d104      	bne.n	800d9c4 <f_write+0x10c>
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	2202      	movs	r2, #2
 800d9be:	755a      	strb	r2, [r3, #21]
 800d9c0:	2302      	movs	r3, #2
 800d9c2:	e109      	b.n	800dbd8 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9ca:	d104      	bne.n	800d9d6 <f_write+0x11e>
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	2201      	movs	r2, #1
 800d9d0:	755a      	strb	r2, [r3, #21]
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	e100      	b.n	800dbd8 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9da:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	689b      	ldr	r3, [r3, #8]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d102      	bne.n	800d9ea <f_write+0x132>
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9e8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	7d1b      	ldrb	r3, [r3, #20]
 800d9ee:	b25b      	sxtb	r3, r3
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	da18      	bge.n	800da26 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d9f4:	693b      	ldr	r3, [r7, #16]
 800d9f6:	7858      	ldrb	r0, [r3, #1]
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	6a1a      	ldr	r2, [r3, #32]
 800da02:	2301      	movs	r3, #1
 800da04:	f7fd fbce 	bl	800b1a4 <disk_write>
 800da08:	4603      	mov	r3, r0
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d004      	beq.n	800da18 <f_write+0x160>
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	2201      	movs	r2, #1
 800da12:	755a      	strb	r2, [r3, #21]
 800da14:	2301      	movs	r3, #1
 800da16:	e0df      	b.n	800dbd8 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	7d1b      	ldrb	r3, [r3, #20]
 800da1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da20:	b2da      	uxtb	r2, r3
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800da26:	693a      	ldr	r2, [r7, #16]
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	69db      	ldr	r3, [r3, #28]
 800da2c:	4619      	mov	r1, r3
 800da2e:	4610      	mov	r0, r2
 800da30:	f7fd ff44 	bl	800b8bc <clust2sect>
 800da34:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d104      	bne.n	800da46 <f_write+0x18e>
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	2202      	movs	r2, #2
 800da40:	755a      	strb	r2, [r3, #21]
 800da42:	2302      	movs	r3, #2
 800da44:	e0c8      	b.n	800dbd8 <f_write+0x320>
			sect += csect;
 800da46:	697a      	ldr	r2, [r7, #20]
 800da48:	69bb      	ldr	r3, [r7, #24]
 800da4a:	4413      	add	r3, r2
 800da4c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800da4e:	693b      	ldr	r3, [r7, #16]
 800da50:	899b      	ldrh	r3, [r3, #12]
 800da52:	461a      	mov	r2, r3
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	fbb3 f3f2 	udiv	r3, r3, r2
 800da5a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800da5c:	6a3b      	ldr	r3, [r7, #32]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d043      	beq.n	800daea <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800da62:	69ba      	ldr	r2, [r7, #24]
 800da64:	6a3b      	ldr	r3, [r7, #32]
 800da66:	4413      	add	r3, r2
 800da68:	693a      	ldr	r2, [r7, #16]
 800da6a:	8952      	ldrh	r2, [r2, #10]
 800da6c:	4293      	cmp	r3, r2
 800da6e:	d905      	bls.n	800da7c <f_write+0x1c4>
					cc = fs->csize - csect;
 800da70:	693b      	ldr	r3, [r7, #16]
 800da72:	895b      	ldrh	r3, [r3, #10]
 800da74:	461a      	mov	r2, r3
 800da76:	69bb      	ldr	r3, [r7, #24]
 800da78:	1ad3      	subs	r3, r2, r3
 800da7a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800da7c:	693b      	ldr	r3, [r7, #16]
 800da7e:	7858      	ldrb	r0, [r3, #1]
 800da80:	6a3b      	ldr	r3, [r7, #32]
 800da82:	697a      	ldr	r2, [r7, #20]
 800da84:	69f9      	ldr	r1, [r7, #28]
 800da86:	f7fd fb8d 	bl	800b1a4 <disk_write>
 800da8a:	4603      	mov	r3, r0
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d004      	beq.n	800da9a <f_write+0x1e2>
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	2201      	movs	r2, #1
 800da94:	755a      	strb	r2, [r3, #21]
 800da96:	2301      	movs	r3, #1
 800da98:	e09e      	b.n	800dbd8 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	6a1a      	ldr	r2, [r3, #32]
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	1ad3      	subs	r3, r2, r3
 800daa2:	6a3a      	ldr	r2, [r7, #32]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d918      	bls.n	800dada <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	6a1a      	ldr	r2, [r3, #32]
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	1ad3      	subs	r3, r2, r3
 800dab6:	693a      	ldr	r2, [r7, #16]
 800dab8:	8992      	ldrh	r2, [r2, #12]
 800daba:	fb02 f303 	mul.w	r3, r2, r3
 800dabe:	69fa      	ldr	r2, [r7, #28]
 800dac0:	18d1      	adds	r1, r2, r3
 800dac2:	693b      	ldr	r3, [r7, #16]
 800dac4:	899b      	ldrh	r3, [r3, #12]
 800dac6:	461a      	mov	r2, r3
 800dac8:	f7fd fc2c 	bl	800b324 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	7d1b      	ldrb	r3, [r3, #20]
 800dad0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dad4:	b2da      	uxtb	r2, r3
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800dada:	693b      	ldr	r3, [r7, #16]
 800dadc:	899b      	ldrh	r3, [r3, #12]
 800dade:	461a      	mov	r2, r3
 800dae0:	6a3b      	ldr	r3, [r7, #32]
 800dae2:	fb02 f303 	mul.w	r3, r2, r3
 800dae6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800dae8:	e04b      	b.n	800db82 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	6a1b      	ldr	r3, [r3, #32]
 800daee:	697a      	ldr	r2, [r7, #20]
 800daf0:	429a      	cmp	r2, r3
 800daf2:	d016      	beq.n	800db22 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	699a      	ldr	r2, [r3, #24]
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800dafc:	429a      	cmp	r2, r3
 800dafe:	d210      	bcs.n	800db22 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800db00:	693b      	ldr	r3, [r7, #16]
 800db02:	7858      	ldrb	r0, [r3, #1]
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800db0a:	2301      	movs	r3, #1
 800db0c:	697a      	ldr	r2, [r7, #20]
 800db0e:	f7fd fb29 	bl	800b164 <disk_read>
 800db12:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800db14:	2b00      	cmp	r3, #0
 800db16:	d004      	beq.n	800db22 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	2201      	movs	r2, #1
 800db1c:	755a      	strb	r2, [r3, #21]
 800db1e:	2301      	movs	r3, #1
 800db20:	e05a      	b.n	800dbd8 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	697a      	ldr	r2, [r7, #20]
 800db26:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800db28:	693b      	ldr	r3, [r7, #16]
 800db2a:	899b      	ldrh	r3, [r3, #12]
 800db2c:	4618      	mov	r0, r3
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	699b      	ldr	r3, [r3, #24]
 800db32:	693a      	ldr	r2, [r7, #16]
 800db34:	8992      	ldrh	r2, [r2, #12]
 800db36:	fbb3 f1f2 	udiv	r1, r3, r2
 800db3a:	fb01 f202 	mul.w	r2, r1, r2
 800db3e:	1a9b      	subs	r3, r3, r2
 800db40:	1ac3      	subs	r3, r0, r3
 800db42:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800db44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	429a      	cmp	r2, r3
 800db4a:	d901      	bls.n	800db50 <f_write+0x298>
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	699b      	ldr	r3, [r3, #24]
 800db5a:	693a      	ldr	r2, [r7, #16]
 800db5c:	8992      	ldrh	r2, [r2, #12]
 800db5e:	fbb3 f0f2 	udiv	r0, r3, r2
 800db62:	fb00 f202 	mul.w	r2, r0, r2
 800db66:	1a9b      	subs	r3, r3, r2
 800db68:	440b      	add	r3, r1
 800db6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db6c:	69f9      	ldr	r1, [r7, #28]
 800db6e:	4618      	mov	r0, r3
 800db70:	f7fd fbd8 	bl	800b324 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	7d1b      	ldrb	r3, [r3, #20]
 800db78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800db7c:	b2da      	uxtb	r2, r3
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800db82:	69fa      	ldr	r2, [r7, #28]
 800db84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db86:	4413      	add	r3, r2
 800db88:	61fb      	str	r3, [r7, #28]
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	699a      	ldr	r2, [r3, #24]
 800db8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db90:	441a      	add	r2, r3
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	619a      	str	r2, [r3, #24]
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	68da      	ldr	r2, [r3, #12]
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	699b      	ldr	r3, [r3, #24]
 800db9e:	429a      	cmp	r2, r3
 800dba0:	bf38      	it	cc
 800dba2:	461a      	movcc	r2, r3
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	60da      	str	r2, [r3, #12]
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	681a      	ldr	r2, [r3, #0]
 800dbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbae:	441a      	add	r2, r3
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	601a      	str	r2, [r3, #0]
 800dbb4:	687a      	ldr	r2, [r7, #4]
 800dbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb8:	1ad3      	subs	r3, r2, r3
 800dbba:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	f47f aeb5 	bne.w	800d92e <f_write+0x76>
 800dbc4:	e000      	b.n	800dbc8 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800dbc6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	7d1b      	ldrb	r3, [r3, #20]
 800dbcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbd0:	b2da      	uxtb	r2, r3
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800dbd6:	2300      	movs	r3, #0
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3730      	adds	r7, #48	; 0x30
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}

0800dbe0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b086      	sub	sp, #24
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f107 0208 	add.w	r2, r7, #8
 800dbee:	4611      	mov	r1, r2
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f7ff fc19 	bl	800d428 <validate>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dbfa:	7dfb      	ldrb	r3, [r7, #23]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d168      	bne.n	800dcd2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	7d1b      	ldrb	r3, [r3, #20]
 800dc04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d062      	beq.n	800dcd2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	7d1b      	ldrb	r3, [r3, #20]
 800dc10:	b25b      	sxtb	r3, r3
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	da15      	bge.n	800dc42 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800dc16:	68bb      	ldr	r3, [r7, #8]
 800dc18:	7858      	ldrb	r0, [r3, #1]
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6a1a      	ldr	r2, [r3, #32]
 800dc24:	2301      	movs	r3, #1
 800dc26:	f7fd fabd 	bl	800b1a4 <disk_write>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d001      	beq.n	800dc34 <f_sync+0x54>
 800dc30:	2301      	movs	r3, #1
 800dc32:	e04f      	b.n	800dcd4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	7d1b      	ldrb	r3, [r3, #20]
 800dc38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc3c:	b2da      	uxtb	r2, r3
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800dc42:	f7fd f9f1 	bl	800b028 <get_fattime>
 800dc46:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800dc48:	68ba      	ldr	r2, [r7, #8]
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc4e:	4619      	mov	r1, r3
 800dc50:	4610      	mov	r0, r2
 800dc52:	f7fd fd95 	bl	800b780 <move_window>
 800dc56:	4603      	mov	r3, r0
 800dc58:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800dc5a:	7dfb      	ldrb	r3, [r7, #23]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d138      	bne.n	800dcd2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc64:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	330b      	adds	r3, #11
 800dc6a:	781a      	ldrb	r2, [r3, #0]
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	330b      	adds	r3, #11
 800dc70:	f042 0220 	orr.w	r2, r2, #32
 800dc74:	b2d2      	uxtb	r2, r2
 800dc76:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	6818      	ldr	r0, [r3, #0]
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	689b      	ldr	r3, [r3, #8]
 800dc80:	461a      	mov	r2, r3
 800dc82:	68f9      	ldr	r1, [r7, #12]
 800dc84:	f7fe fb21 	bl	800c2ca <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	f103 021c 	add.w	r2, r3, #28
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	68db      	ldr	r3, [r3, #12]
 800dc92:	4619      	mov	r1, r3
 800dc94:	4610      	mov	r0, r2
 800dc96:	f7fd fb19 	bl	800b2cc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	3316      	adds	r3, #22
 800dc9e:	6939      	ldr	r1, [r7, #16]
 800dca0:	4618      	mov	r0, r3
 800dca2:	f7fd fb13 	bl	800b2cc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	3312      	adds	r3, #18
 800dcaa:	2100      	movs	r1, #0
 800dcac:	4618      	mov	r0, r3
 800dcae:	f7fd faf2 	bl	800b296 <st_word>
					fs->wflag = 1;
 800dcb2:	68bb      	ldr	r3, [r7, #8]
 800dcb4:	2201      	movs	r2, #1
 800dcb6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800dcb8:	68bb      	ldr	r3, [r7, #8]
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f7fd fd8e 	bl	800b7dc <sync_fs>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	7d1b      	ldrb	r3, [r3, #20]
 800dcc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dccc:	b2da      	uxtb	r2, r3
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800dcd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3718      	adds	r7, #24
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}

0800dcdc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b084      	sub	sp, #16
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f7ff ff7b 	bl	800dbe0 <f_sync>
 800dcea:	4603      	mov	r3, r0
 800dcec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800dcee:	7bfb      	ldrb	r3, [r7, #15]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d118      	bne.n	800dd26 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f107 0208 	add.w	r2, r7, #8
 800dcfa:	4611      	mov	r1, r2
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f7ff fb93 	bl	800d428 <validate>
 800dd02:	4603      	mov	r3, r0
 800dd04:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dd06:	7bfb      	ldrb	r3, [r7, #15]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d10c      	bne.n	800dd26 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	691b      	ldr	r3, [r3, #16]
 800dd10:	4618      	mov	r0, r3
 800dd12:	f7fd fc91 	bl	800b638 <dec_lock>
 800dd16:	4603      	mov	r3, r0
 800dd18:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800dd1a:	7bfb      	ldrb	r3, [r7, #15]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d102      	bne.n	800dd26 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2200      	movs	r2, #0
 800dd24:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800dd26:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3710      	adds	r7, #16
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}

0800dd30 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dd30:	b480      	push	{r7}
 800dd32:	b087      	sub	sp, #28
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	60f8      	str	r0, [r7, #12]
 800dd38:	60b9      	str	r1, [r7, #8]
 800dd3a:	4613      	mov	r3, r2
 800dd3c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dd3e:	2301      	movs	r3, #1
 800dd40:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800dd42:	2300      	movs	r3, #0
 800dd44:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800dd46:	4b1f      	ldr	r3, [pc, #124]	; (800ddc4 <FATFS_LinkDriverEx+0x94>)
 800dd48:	7a5b      	ldrb	r3, [r3, #9]
 800dd4a:	b2db      	uxtb	r3, r3
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d131      	bne.n	800ddb4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dd50:	4b1c      	ldr	r3, [pc, #112]	; (800ddc4 <FATFS_LinkDriverEx+0x94>)
 800dd52:	7a5b      	ldrb	r3, [r3, #9]
 800dd54:	b2db      	uxtb	r3, r3
 800dd56:	461a      	mov	r2, r3
 800dd58:	4b1a      	ldr	r3, [pc, #104]	; (800ddc4 <FATFS_LinkDriverEx+0x94>)
 800dd5a:	2100      	movs	r1, #0
 800dd5c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800dd5e:	4b19      	ldr	r3, [pc, #100]	; (800ddc4 <FATFS_LinkDriverEx+0x94>)
 800dd60:	7a5b      	ldrb	r3, [r3, #9]
 800dd62:	b2db      	uxtb	r3, r3
 800dd64:	4a17      	ldr	r2, [pc, #92]	; (800ddc4 <FATFS_LinkDriverEx+0x94>)
 800dd66:	009b      	lsls	r3, r3, #2
 800dd68:	4413      	add	r3, r2
 800dd6a:	68fa      	ldr	r2, [r7, #12]
 800dd6c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800dd6e:	4b15      	ldr	r3, [pc, #84]	; (800ddc4 <FATFS_LinkDriverEx+0x94>)
 800dd70:	7a5b      	ldrb	r3, [r3, #9]
 800dd72:	b2db      	uxtb	r3, r3
 800dd74:	461a      	mov	r2, r3
 800dd76:	4b13      	ldr	r3, [pc, #76]	; (800ddc4 <FATFS_LinkDriverEx+0x94>)
 800dd78:	4413      	add	r3, r2
 800dd7a:	79fa      	ldrb	r2, [r7, #7]
 800dd7c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800dd7e:	4b11      	ldr	r3, [pc, #68]	; (800ddc4 <FATFS_LinkDriverEx+0x94>)
 800dd80:	7a5b      	ldrb	r3, [r3, #9]
 800dd82:	b2db      	uxtb	r3, r3
 800dd84:	1c5a      	adds	r2, r3, #1
 800dd86:	b2d1      	uxtb	r1, r2
 800dd88:	4a0e      	ldr	r2, [pc, #56]	; (800ddc4 <FATFS_LinkDriverEx+0x94>)
 800dd8a:	7251      	strb	r1, [r2, #9]
 800dd8c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dd8e:	7dbb      	ldrb	r3, [r7, #22]
 800dd90:	3330      	adds	r3, #48	; 0x30
 800dd92:	b2da      	uxtb	r2, r3
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	3301      	adds	r3, #1
 800dd9c:	223a      	movs	r2, #58	; 0x3a
 800dd9e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	3302      	adds	r3, #2
 800dda4:	222f      	movs	r2, #47	; 0x2f
 800dda6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	3303      	adds	r3, #3
 800ddac:	2200      	movs	r2, #0
 800ddae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ddb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	371c      	adds	r7, #28
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc0:	4770      	bx	lr
 800ddc2:	bf00      	nop
 800ddc4:	200027c4 	.word	0x200027c4

0800ddc8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b082      	sub	sp, #8
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
 800ddd0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	6839      	ldr	r1, [r7, #0]
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f7ff ffaa 	bl	800dd30 <FATFS_LinkDriverEx>
 800dddc:	4603      	mov	r3, r0
}
 800ddde:	4618      	mov	r0, r3
 800dde0:	3708      	adds	r7, #8
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bd80      	pop	{r7, pc}
	...

0800dde8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800dde8:	b480      	push	{r7}
 800ddea:	b085      	sub	sp, #20
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	4603      	mov	r3, r0
 800ddf0:	6039      	str	r1, [r7, #0]
 800ddf2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ddf4:	88fb      	ldrh	r3, [r7, #6]
 800ddf6:	2b7f      	cmp	r3, #127	; 0x7f
 800ddf8:	d802      	bhi.n	800de00 <ff_convert+0x18>
		c = chr;
 800ddfa:	88fb      	ldrh	r3, [r7, #6]
 800ddfc:	81fb      	strh	r3, [r7, #14]
 800ddfe:	e025      	b.n	800de4c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d00b      	beq.n	800de1e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800de06:	88fb      	ldrh	r3, [r7, #6]
 800de08:	2bff      	cmp	r3, #255	; 0xff
 800de0a:	d805      	bhi.n	800de18 <ff_convert+0x30>
 800de0c:	88fb      	ldrh	r3, [r7, #6]
 800de0e:	3b80      	subs	r3, #128	; 0x80
 800de10:	4a12      	ldr	r2, [pc, #72]	; (800de5c <ff_convert+0x74>)
 800de12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de16:	e000      	b.n	800de1a <ff_convert+0x32>
 800de18:	2300      	movs	r3, #0
 800de1a:	81fb      	strh	r3, [r7, #14]
 800de1c:	e016      	b.n	800de4c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800de1e:	2300      	movs	r3, #0
 800de20:	81fb      	strh	r3, [r7, #14]
 800de22:	e009      	b.n	800de38 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800de24:	89fb      	ldrh	r3, [r7, #14]
 800de26:	4a0d      	ldr	r2, [pc, #52]	; (800de5c <ff_convert+0x74>)
 800de28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de2c:	88fa      	ldrh	r2, [r7, #6]
 800de2e:	429a      	cmp	r2, r3
 800de30:	d006      	beq.n	800de40 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800de32:	89fb      	ldrh	r3, [r7, #14]
 800de34:	3301      	adds	r3, #1
 800de36:	81fb      	strh	r3, [r7, #14]
 800de38:	89fb      	ldrh	r3, [r7, #14]
 800de3a:	2b7f      	cmp	r3, #127	; 0x7f
 800de3c:	d9f2      	bls.n	800de24 <ff_convert+0x3c>
 800de3e:	e000      	b.n	800de42 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800de40:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800de42:	89fb      	ldrh	r3, [r7, #14]
 800de44:	3380      	adds	r3, #128	; 0x80
 800de46:	b29b      	uxth	r3, r3
 800de48:	b2db      	uxtb	r3, r3
 800de4a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800de4c:	89fb      	ldrh	r3, [r7, #14]
}
 800de4e:	4618      	mov	r0, r3
 800de50:	3714      	adds	r7, #20
 800de52:	46bd      	mov	sp, r7
 800de54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de58:	4770      	bx	lr
 800de5a:	bf00      	nop
 800de5c:	0800ea84 	.word	0x0800ea84

0800de60 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800de60:	b480      	push	{r7}
 800de62:	b087      	sub	sp, #28
 800de64:	af00      	add	r7, sp, #0
 800de66:	4603      	mov	r3, r0
 800de68:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800de6a:	88fb      	ldrh	r3, [r7, #6]
 800de6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de70:	d201      	bcs.n	800de76 <ff_wtoupper+0x16>
 800de72:	4b3e      	ldr	r3, [pc, #248]	; (800df6c <ff_wtoupper+0x10c>)
 800de74:	e000      	b.n	800de78 <ff_wtoupper+0x18>
 800de76:	4b3e      	ldr	r3, [pc, #248]	; (800df70 <ff_wtoupper+0x110>)
 800de78:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	1c9a      	adds	r2, r3, #2
 800de7e:	617a      	str	r2, [r7, #20]
 800de80:	881b      	ldrh	r3, [r3, #0]
 800de82:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800de84:	8a7b      	ldrh	r3, [r7, #18]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d068      	beq.n	800df5c <ff_wtoupper+0xfc>
 800de8a:	88fa      	ldrh	r2, [r7, #6]
 800de8c:	8a7b      	ldrh	r3, [r7, #18]
 800de8e:	429a      	cmp	r2, r3
 800de90:	d364      	bcc.n	800df5c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	1c9a      	adds	r2, r3, #2
 800de96:	617a      	str	r2, [r7, #20]
 800de98:	881b      	ldrh	r3, [r3, #0]
 800de9a:	823b      	strh	r3, [r7, #16]
 800de9c:	8a3b      	ldrh	r3, [r7, #16]
 800de9e:	0a1b      	lsrs	r3, r3, #8
 800dea0:	81fb      	strh	r3, [r7, #14]
 800dea2:	8a3b      	ldrh	r3, [r7, #16]
 800dea4:	b2db      	uxtb	r3, r3
 800dea6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800dea8:	88fa      	ldrh	r2, [r7, #6]
 800deaa:	8a79      	ldrh	r1, [r7, #18]
 800deac:	8a3b      	ldrh	r3, [r7, #16]
 800deae:	440b      	add	r3, r1
 800deb0:	429a      	cmp	r2, r3
 800deb2:	da49      	bge.n	800df48 <ff_wtoupper+0xe8>
			switch (cmd) {
 800deb4:	89fb      	ldrh	r3, [r7, #14]
 800deb6:	2b08      	cmp	r3, #8
 800deb8:	d84f      	bhi.n	800df5a <ff_wtoupper+0xfa>
 800deba:	a201      	add	r2, pc, #4	; (adr r2, 800dec0 <ff_wtoupper+0x60>)
 800debc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dec0:	0800dee5 	.word	0x0800dee5
 800dec4:	0800def7 	.word	0x0800def7
 800dec8:	0800df0d 	.word	0x0800df0d
 800decc:	0800df15 	.word	0x0800df15
 800ded0:	0800df1d 	.word	0x0800df1d
 800ded4:	0800df25 	.word	0x0800df25
 800ded8:	0800df2d 	.word	0x0800df2d
 800dedc:	0800df35 	.word	0x0800df35
 800dee0:	0800df3d 	.word	0x0800df3d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800dee4:	88fa      	ldrh	r2, [r7, #6]
 800dee6:	8a7b      	ldrh	r3, [r7, #18]
 800dee8:	1ad3      	subs	r3, r2, r3
 800deea:	005b      	lsls	r3, r3, #1
 800deec:	697a      	ldr	r2, [r7, #20]
 800deee:	4413      	add	r3, r2
 800def0:	881b      	ldrh	r3, [r3, #0]
 800def2:	80fb      	strh	r3, [r7, #6]
 800def4:	e027      	b.n	800df46 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800def6:	88fa      	ldrh	r2, [r7, #6]
 800def8:	8a7b      	ldrh	r3, [r7, #18]
 800defa:	1ad3      	subs	r3, r2, r3
 800defc:	b29b      	uxth	r3, r3
 800defe:	f003 0301 	and.w	r3, r3, #1
 800df02:	b29b      	uxth	r3, r3
 800df04:	88fa      	ldrh	r2, [r7, #6]
 800df06:	1ad3      	subs	r3, r2, r3
 800df08:	80fb      	strh	r3, [r7, #6]
 800df0a:	e01c      	b.n	800df46 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800df0c:	88fb      	ldrh	r3, [r7, #6]
 800df0e:	3b10      	subs	r3, #16
 800df10:	80fb      	strh	r3, [r7, #6]
 800df12:	e018      	b.n	800df46 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800df14:	88fb      	ldrh	r3, [r7, #6]
 800df16:	3b20      	subs	r3, #32
 800df18:	80fb      	strh	r3, [r7, #6]
 800df1a:	e014      	b.n	800df46 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800df1c:	88fb      	ldrh	r3, [r7, #6]
 800df1e:	3b30      	subs	r3, #48	; 0x30
 800df20:	80fb      	strh	r3, [r7, #6]
 800df22:	e010      	b.n	800df46 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800df24:	88fb      	ldrh	r3, [r7, #6]
 800df26:	3b1a      	subs	r3, #26
 800df28:	80fb      	strh	r3, [r7, #6]
 800df2a:	e00c      	b.n	800df46 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800df2c:	88fb      	ldrh	r3, [r7, #6]
 800df2e:	3308      	adds	r3, #8
 800df30:	80fb      	strh	r3, [r7, #6]
 800df32:	e008      	b.n	800df46 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800df34:	88fb      	ldrh	r3, [r7, #6]
 800df36:	3b50      	subs	r3, #80	; 0x50
 800df38:	80fb      	strh	r3, [r7, #6]
 800df3a:	e004      	b.n	800df46 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800df3c:	88fb      	ldrh	r3, [r7, #6]
 800df3e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800df42:	80fb      	strh	r3, [r7, #6]
 800df44:	bf00      	nop
			}
			break;
 800df46:	e008      	b.n	800df5a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800df48:	89fb      	ldrh	r3, [r7, #14]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d195      	bne.n	800de7a <ff_wtoupper+0x1a>
 800df4e:	8a3b      	ldrh	r3, [r7, #16]
 800df50:	005b      	lsls	r3, r3, #1
 800df52:	697a      	ldr	r2, [r7, #20]
 800df54:	4413      	add	r3, r2
 800df56:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800df58:	e78f      	b.n	800de7a <ff_wtoupper+0x1a>
			break;
 800df5a:	bf00      	nop
	}

	return chr;
 800df5c:	88fb      	ldrh	r3, [r7, #6]
}
 800df5e:	4618      	mov	r0, r3
 800df60:	371c      	adds	r7, #28
 800df62:	46bd      	mov	sp, r7
 800df64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df68:	4770      	bx	lr
 800df6a:	bf00      	nop
 800df6c:	0800eb84 	.word	0x0800eb84
 800df70:	0800ed78 	.word	0x0800ed78

0800df74 <siprintf>:
 800df74:	b40e      	push	{r1, r2, r3}
 800df76:	b500      	push	{lr}
 800df78:	b09c      	sub	sp, #112	; 0x70
 800df7a:	ab1d      	add	r3, sp, #116	; 0x74
 800df7c:	9002      	str	r0, [sp, #8]
 800df7e:	9006      	str	r0, [sp, #24]
 800df80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800df84:	4809      	ldr	r0, [pc, #36]	; (800dfac <siprintf+0x38>)
 800df86:	9107      	str	r1, [sp, #28]
 800df88:	9104      	str	r1, [sp, #16]
 800df8a:	4909      	ldr	r1, [pc, #36]	; (800dfb0 <siprintf+0x3c>)
 800df8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800df90:	9105      	str	r1, [sp, #20]
 800df92:	6800      	ldr	r0, [r0, #0]
 800df94:	9301      	str	r3, [sp, #4]
 800df96:	a902      	add	r1, sp, #8
 800df98:	f000 f992 	bl	800e2c0 <_svfiprintf_r>
 800df9c:	9b02      	ldr	r3, [sp, #8]
 800df9e:	2200      	movs	r2, #0
 800dfa0:	701a      	strb	r2, [r3, #0]
 800dfa2:	b01c      	add	sp, #112	; 0x70
 800dfa4:	f85d eb04 	ldr.w	lr, [sp], #4
 800dfa8:	b003      	add	sp, #12
 800dfaa:	4770      	bx	lr
 800dfac:	20000134 	.word	0x20000134
 800dfb0:	ffff0208 	.word	0xffff0208

0800dfb4 <memset>:
 800dfb4:	4402      	add	r2, r0
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	4293      	cmp	r3, r2
 800dfba:	d100      	bne.n	800dfbe <memset+0xa>
 800dfbc:	4770      	bx	lr
 800dfbe:	f803 1b01 	strb.w	r1, [r3], #1
 800dfc2:	e7f9      	b.n	800dfb8 <memset+0x4>

0800dfc4 <__errno>:
 800dfc4:	4b01      	ldr	r3, [pc, #4]	; (800dfcc <__errno+0x8>)
 800dfc6:	6818      	ldr	r0, [r3, #0]
 800dfc8:	4770      	bx	lr
 800dfca:	bf00      	nop
 800dfcc:	20000134 	.word	0x20000134

0800dfd0 <__libc_init_array>:
 800dfd0:	b570      	push	{r4, r5, r6, lr}
 800dfd2:	4d0d      	ldr	r5, [pc, #52]	; (800e008 <__libc_init_array+0x38>)
 800dfd4:	4c0d      	ldr	r4, [pc, #52]	; (800e00c <__libc_init_array+0x3c>)
 800dfd6:	1b64      	subs	r4, r4, r5
 800dfd8:	10a4      	asrs	r4, r4, #2
 800dfda:	2600      	movs	r6, #0
 800dfdc:	42a6      	cmp	r6, r4
 800dfde:	d109      	bne.n	800dff4 <__libc_init_array+0x24>
 800dfe0:	4d0b      	ldr	r5, [pc, #44]	; (800e010 <__libc_init_array+0x40>)
 800dfe2:	4c0c      	ldr	r4, [pc, #48]	; (800e014 <__libc_init_array+0x44>)
 800dfe4:	f000 fc6a 	bl	800e8bc <_init>
 800dfe8:	1b64      	subs	r4, r4, r5
 800dfea:	10a4      	asrs	r4, r4, #2
 800dfec:	2600      	movs	r6, #0
 800dfee:	42a6      	cmp	r6, r4
 800dff0:	d105      	bne.n	800dffe <__libc_init_array+0x2e>
 800dff2:	bd70      	pop	{r4, r5, r6, pc}
 800dff4:	f855 3b04 	ldr.w	r3, [r5], #4
 800dff8:	4798      	blx	r3
 800dffa:	3601      	adds	r6, #1
 800dffc:	e7ee      	b.n	800dfdc <__libc_init_array+0xc>
 800dffe:	f855 3b04 	ldr.w	r3, [r5], #4
 800e002:	4798      	blx	r3
 800e004:	3601      	adds	r6, #1
 800e006:	e7f2      	b.n	800dfee <__libc_init_array+0x1e>
 800e008:	0800ee70 	.word	0x0800ee70
 800e00c:	0800ee70 	.word	0x0800ee70
 800e010:	0800ee70 	.word	0x0800ee70
 800e014:	0800ee74 	.word	0x0800ee74

0800e018 <__retarget_lock_acquire_recursive>:
 800e018:	4770      	bx	lr

0800e01a <__retarget_lock_release_recursive>:
 800e01a:	4770      	bx	lr

0800e01c <_free_r>:
 800e01c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e01e:	2900      	cmp	r1, #0
 800e020:	d044      	beq.n	800e0ac <_free_r+0x90>
 800e022:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e026:	9001      	str	r0, [sp, #4]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	f1a1 0404 	sub.w	r4, r1, #4
 800e02e:	bfb8      	it	lt
 800e030:	18e4      	addlt	r4, r4, r3
 800e032:	f000 f8df 	bl	800e1f4 <__malloc_lock>
 800e036:	4a1e      	ldr	r2, [pc, #120]	; (800e0b0 <_free_r+0x94>)
 800e038:	9801      	ldr	r0, [sp, #4]
 800e03a:	6813      	ldr	r3, [r2, #0]
 800e03c:	b933      	cbnz	r3, 800e04c <_free_r+0x30>
 800e03e:	6063      	str	r3, [r4, #4]
 800e040:	6014      	str	r4, [r2, #0]
 800e042:	b003      	add	sp, #12
 800e044:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e048:	f000 b8da 	b.w	800e200 <__malloc_unlock>
 800e04c:	42a3      	cmp	r3, r4
 800e04e:	d908      	bls.n	800e062 <_free_r+0x46>
 800e050:	6825      	ldr	r5, [r4, #0]
 800e052:	1961      	adds	r1, r4, r5
 800e054:	428b      	cmp	r3, r1
 800e056:	bf01      	itttt	eq
 800e058:	6819      	ldreq	r1, [r3, #0]
 800e05a:	685b      	ldreq	r3, [r3, #4]
 800e05c:	1949      	addeq	r1, r1, r5
 800e05e:	6021      	streq	r1, [r4, #0]
 800e060:	e7ed      	b.n	800e03e <_free_r+0x22>
 800e062:	461a      	mov	r2, r3
 800e064:	685b      	ldr	r3, [r3, #4]
 800e066:	b10b      	cbz	r3, 800e06c <_free_r+0x50>
 800e068:	42a3      	cmp	r3, r4
 800e06a:	d9fa      	bls.n	800e062 <_free_r+0x46>
 800e06c:	6811      	ldr	r1, [r2, #0]
 800e06e:	1855      	adds	r5, r2, r1
 800e070:	42a5      	cmp	r5, r4
 800e072:	d10b      	bne.n	800e08c <_free_r+0x70>
 800e074:	6824      	ldr	r4, [r4, #0]
 800e076:	4421      	add	r1, r4
 800e078:	1854      	adds	r4, r2, r1
 800e07a:	42a3      	cmp	r3, r4
 800e07c:	6011      	str	r1, [r2, #0]
 800e07e:	d1e0      	bne.n	800e042 <_free_r+0x26>
 800e080:	681c      	ldr	r4, [r3, #0]
 800e082:	685b      	ldr	r3, [r3, #4]
 800e084:	6053      	str	r3, [r2, #4]
 800e086:	440c      	add	r4, r1
 800e088:	6014      	str	r4, [r2, #0]
 800e08a:	e7da      	b.n	800e042 <_free_r+0x26>
 800e08c:	d902      	bls.n	800e094 <_free_r+0x78>
 800e08e:	230c      	movs	r3, #12
 800e090:	6003      	str	r3, [r0, #0]
 800e092:	e7d6      	b.n	800e042 <_free_r+0x26>
 800e094:	6825      	ldr	r5, [r4, #0]
 800e096:	1961      	adds	r1, r4, r5
 800e098:	428b      	cmp	r3, r1
 800e09a:	bf04      	itt	eq
 800e09c:	6819      	ldreq	r1, [r3, #0]
 800e09e:	685b      	ldreq	r3, [r3, #4]
 800e0a0:	6063      	str	r3, [r4, #4]
 800e0a2:	bf04      	itt	eq
 800e0a4:	1949      	addeq	r1, r1, r5
 800e0a6:	6021      	streq	r1, [r4, #0]
 800e0a8:	6054      	str	r4, [r2, #4]
 800e0aa:	e7ca      	b.n	800e042 <_free_r+0x26>
 800e0ac:	b003      	add	sp, #12
 800e0ae:	bd30      	pop	{r4, r5, pc}
 800e0b0:	20002910 	.word	0x20002910

0800e0b4 <sbrk_aligned>:
 800e0b4:	b570      	push	{r4, r5, r6, lr}
 800e0b6:	4e0e      	ldr	r6, [pc, #56]	; (800e0f0 <sbrk_aligned+0x3c>)
 800e0b8:	460c      	mov	r4, r1
 800e0ba:	6831      	ldr	r1, [r6, #0]
 800e0bc:	4605      	mov	r5, r0
 800e0be:	b911      	cbnz	r1, 800e0c6 <sbrk_aligned+0x12>
 800e0c0:	f000 fba6 	bl	800e810 <_sbrk_r>
 800e0c4:	6030      	str	r0, [r6, #0]
 800e0c6:	4621      	mov	r1, r4
 800e0c8:	4628      	mov	r0, r5
 800e0ca:	f000 fba1 	bl	800e810 <_sbrk_r>
 800e0ce:	1c43      	adds	r3, r0, #1
 800e0d0:	d00a      	beq.n	800e0e8 <sbrk_aligned+0x34>
 800e0d2:	1cc4      	adds	r4, r0, #3
 800e0d4:	f024 0403 	bic.w	r4, r4, #3
 800e0d8:	42a0      	cmp	r0, r4
 800e0da:	d007      	beq.n	800e0ec <sbrk_aligned+0x38>
 800e0dc:	1a21      	subs	r1, r4, r0
 800e0de:	4628      	mov	r0, r5
 800e0e0:	f000 fb96 	bl	800e810 <_sbrk_r>
 800e0e4:	3001      	adds	r0, #1
 800e0e6:	d101      	bne.n	800e0ec <sbrk_aligned+0x38>
 800e0e8:	f04f 34ff 	mov.w	r4, #4294967295
 800e0ec:	4620      	mov	r0, r4
 800e0ee:	bd70      	pop	{r4, r5, r6, pc}
 800e0f0:	20002914 	.word	0x20002914

0800e0f4 <_malloc_r>:
 800e0f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0f8:	1ccd      	adds	r5, r1, #3
 800e0fa:	f025 0503 	bic.w	r5, r5, #3
 800e0fe:	3508      	adds	r5, #8
 800e100:	2d0c      	cmp	r5, #12
 800e102:	bf38      	it	cc
 800e104:	250c      	movcc	r5, #12
 800e106:	2d00      	cmp	r5, #0
 800e108:	4607      	mov	r7, r0
 800e10a:	db01      	blt.n	800e110 <_malloc_r+0x1c>
 800e10c:	42a9      	cmp	r1, r5
 800e10e:	d905      	bls.n	800e11c <_malloc_r+0x28>
 800e110:	230c      	movs	r3, #12
 800e112:	603b      	str	r3, [r7, #0]
 800e114:	2600      	movs	r6, #0
 800e116:	4630      	mov	r0, r6
 800e118:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e11c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e1f0 <_malloc_r+0xfc>
 800e120:	f000 f868 	bl	800e1f4 <__malloc_lock>
 800e124:	f8d8 3000 	ldr.w	r3, [r8]
 800e128:	461c      	mov	r4, r3
 800e12a:	bb5c      	cbnz	r4, 800e184 <_malloc_r+0x90>
 800e12c:	4629      	mov	r1, r5
 800e12e:	4638      	mov	r0, r7
 800e130:	f7ff ffc0 	bl	800e0b4 <sbrk_aligned>
 800e134:	1c43      	adds	r3, r0, #1
 800e136:	4604      	mov	r4, r0
 800e138:	d155      	bne.n	800e1e6 <_malloc_r+0xf2>
 800e13a:	f8d8 4000 	ldr.w	r4, [r8]
 800e13e:	4626      	mov	r6, r4
 800e140:	2e00      	cmp	r6, #0
 800e142:	d145      	bne.n	800e1d0 <_malloc_r+0xdc>
 800e144:	2c00      	cmp	r4, #0
 800e146:	d048      	beq.n	800e1da <_malloc_r+0xe6>
 800e148:	6823      	ldr	r3, [r4, #0]
 800e14a:	4631      	mov	r1, r6
 800e14c:	4638      	mov	r0, r7
 800e14e:	eb04 0903 	add.w	r9, r4, r3
 800e152:	f000 fb5d 	bl	800e810 <_sbrk_r>
 800e156:	4581      	cmp	r9, r0
 800e158:	d13f      	bne.n	800e1da <_malloc_r+0xe6>
 800e15a:	6821      	ldr	r1, [r4, #0]
 800e15c:	1a6d      	subs	r5, r5, r1
 800e15e:	4629      	mov	r1, r5
 800e160:	4638      	mov	r0, r7
 800e162:	f7ff ffa7 	bl	800e0b4 <sbrk_aligned>
 800e166:	3001      	adds	r0, #1
 800e168:	d037      	beq.n	800e1da <_malloc_r+0xe6>
 800e16a:	6823      	ldr	r3, [r4, #0]
 800e16c:	442b      	add	r3, r5
 800e16e:	6023      	str	r3, [r4, #0]
 800e170:	f8d8 3000 	ldr.w	r3, [r8]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d038      	beq.n	800e1ea <_malloc_r+0xf6>
 800e178:	685a      	ldr	r2, [r3, #4]
 800e17a:	42a2      	cmp	r2, r4
 800e17c:	d12b      	bne.n	800e1d6 <_malloc_r+0xe2>
 800e17e:	2200      	movs	r2, #0
 800e180:	605a      	str	r2, [r3, #4]
 800e182:	e00f      	b.n	800e1a4 <_malloc_r+0xb0>
 800e184:	6822      	ldr	r2, [r4, #0]
 800e186:	1b52      	subs	r2, r2, r5
 800e188:	d41f      	bmi.n	800e1ca <_malloc_r+0xd6>
 800e18a:	2a0b      	cmp	r2, #11
 800e18c:	d917      	bls.n	800e1be <_malloc_r+0xca>
 800e18e:	1961      	adds	r1, r4, r5
 800e190:	42a3      	cmp	r3, r4
 800e192:	6025      	str	r5, [r4, #0]
 800e194:	bf18      	it	ne
 800e196:	6059      	strne	r1, [r3, #4]
 800e198:	6863      	ldr	r3, [r4, #4]
 800e19a:	bf08      	it	eq
 800e19c:	f8c8 1000 	streq.w	r1, [r8]
 800e1a0:	5162      	str	r2, [r4, r5]
 800e1a2:	604b      	str	r3, [r1, #4]
 800e1a4:	4638      	mov	r0, r7
 800e1a6:	f104 060b 	add.w	r6, r4, #11
 800e1aa:	f000 f829 	bl	800e200 <__malloc_unlock>
 800e1ae:	f026 0607 	bic.w	r6, r6, #7
 800e1b2:	1d23      	adds	r3, r4, #4
 800e1b4:	1af2      	subs	r2, r6, r3
 800e1b6:	d0ae      	beq.n	800e116 <_malloc_r+0x22>
 800e1b8:	1b9b      	subs	r3, r3, r6
 800e1ba:	50a3      	str	r3, [r4, r2]
 800e1bc:	e7ab      	b.n	800e116 <_malloc_r+0x22>
 800e1be:	42a3      	cmp	r3, r4
 800e1c0:	6862      	ldr	r2, [r4, #4]
 800e1c2:	d1dd      	bne.n	800e180 <_malloc_r+0x8c>
 800e1c4:	f8c8 2000 	str.w	r2, [r8]
 800e1c8:	e7ec      	b.n	800e1a4 <_malloc_r+0xb0>
 800e1ca:	4623      	mov	r3, r4
 800e1cc:	6864      	ldr	r4, [r4, #4]
 800e1ce:	e7ac      	b.n	800e12a <_malloc_r+0x36>
 800e1d0:	4634      	mov	r4, r6
 800e1d2:	6876      	ldr	r6, [r6, #4]
 800e1d4:	e7b4      	b.n	800e140 <_malloc_r+0x4c>
 800e1d6:	4613      	mov	r3, r2
 800e1d8:	e7cc      	b.n	800e174 <_malloc_r+0x80>
 800e1da:	230c      	movs	r3, #12
 800e1dc:	603b      	str	r3, [r7, #0]
 800e1de:	4638      	mov	r0, r7
 800e1e0:	f000 f80e 	bl	800e200 <__malloc_unlock>
 800e1e4:	e797      	b.n	800e116 <_malloc_r+0x22>
 800e1e6:	6025      	str	r5, [r4, #0]
 800e1e8:	e7dc      	b.n	800e1a4 <_malloc_r+0xb0>
 800e1ea:	605b      	str	r3, [r3, #4]
 800e1ec:	deff      	udf	#255	; 0xff
 800e1ee:	bf00      	nop
 800e1f0:	20002910 	.word	0x20002910

0800e1f4 <__malloc_lock>:
 800e1f4:	4801      	ldr	r0, [pc, #4]	; (800e1fc <__malloc_lock+0x8>)
 800e1f6:	f7ff bf0f 	b.w	800e018 <__retarget_lock_acquire_recursive>
 800e1fa:	bf00      	nop
 800e1fc:	2000290c 	.word	0x2000290c

0800e200 <__malloc_unlock>:
 800e200:	4801      	ldr	r0, [pc, #4]	; (800e208 <__malloc_unlock+0x8>)
 800e202:	f7ff bf0a 	b.w	800e01a <__retarget_lock_release_recursive>
 800e206:	bf00      	nop
 800e208:	2000290c 	.word	0x2000290c

0800e20c <__ssputs_r>:
 800e20c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e210:	688e      	ldr	r6, [r1, #8]
 800e212:	461f      	mov	r7, r3
 800e214:	42be      	cmp	r6, r7
 800e216:	680b      	ldr	r3, [r1, #0]
 800e218:	4682      	mov	sl, r0
 800e21a:	460c      	mov	r4, r1
 800e21c:	4690      	mov	r8, r2
 800e21e:	d82c      	bhi.n	800e27a <__ssputs_r+0x6e>
 800e220:	898a      	ldrh	r2, [r1, #12]
 800e222:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e226:	d026      	beq.n	800e276 <__ssputs_r+0x6a>
 800e228:	6965      	ldr	r5, [r4, #20]
 800e22a:	6909      	ldr	r1, [r1, #16]
 800e22c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e230:	eba3 0901 	sub.w	r9, r3, r1
 800e234:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e238:	1c7b      	adds	r3, r7, #1
 800e23a:	444b      	add	r3, r9
 800e23c:	106d      	asrs	r5, r5, #1
 800e23e:	429d      	cmp	r5, r3
 800e240:	bf38      	it	cc
 800e242:	461d      	movcc	r5, r3
 800e244:	0553      	lsls	r3, r2, #21
 800e246:	d527      	bpl.n	800e298 <__ssputs_r+0x8c>
 800e248:	4629      	mov	r1, r5
 800e24a:	f7ff ff53 	bl	800e0f4 <_malloc_r>
 800e24e:	4606      	mov	r6, r0
 800e250:	b360      	cbz	r0, 800e2ac <__ssputs_r+0xa0>
 800e252:	6921      	ldr	r1, [r4, #16]
 800e254:	464a      	mov	r2, r9
 800e256:	f000 faeb 	bl	800e830 <memcpy>
 800e25a:	89a3      	ldrh	r3, [r4, #12]
 800e25c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e264:	81a3      	strh	r3, [r4, #12]
 800e266:	6126      	str	r6, [r4, #16]
 800e268:	6165      	str	r5, [r4, #20]
 800e26a:	444e      	add	r6, r9
 800e26c:	eba5 0509 	sub.w	r5, r5, r9
 800e270:	6026      	str	r6, [r4, #0]
 800e272:	60a5      	str	r5, [r4, #8]
 800e274:	463e      	mov	r6, r7
 800e276:	42be      	cmp	r6, r7
 800e278:	d900      	bls.n	800e27c <__ssputs_r+0x70>
 800e27a:	463e      	mov	r6, r7
 800e27c:	6820      	ldr	r0, [r4, #0]
 800e27e:	4632      	mov	r2, r6
 800e280:	4641      	mov	r1, r8
 800e282:	f000 faab 	bl	800e7dc <memmove>
 800e286:	68a3      	ldr	r3, [r4, #8]
 800e288:	1b9b      	subs	r3, r3, r6
 800e28a:	60a3      	str	r3, [r4, #8]
 800e28c:	6823      	ldr	r3, [r4, #0]
 800e28e:	4433      	add	r3, r6
 800e290:	6023      	str	r3, [r4, #0]
 800e292:	2000      	movs	r0, #0
 800e294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e298:	462a      	mov	r2, r5
 800e29a:	f000 fad7 	bl	800e84c <_realloc_r>
 800e29e:	4606      	mov	r6, r0
 800e2a0:	2800      	cmp	r0, #0
 800e2a2:	d1e0      	bne.n	800e266 <__ssputs_r+0x5a>
 800e2a4:	6921      	ldr	r1, [r4, #16]
 800e2a6:	4650      	mov	r0, sl
 800e2a8:	f7ff feb8 	bl	800e01c <_free_r>
 800e2ac:	230c      	movs	r3, #12
 800e2ae:	f8ca 3000 	str.w	r3, [sl]
 800e2b2:	89a3      	ldrh	r3, [r4, #12]
 800e2b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2b8:	81a3      	strh	r3, [r4, #12]
 800e2ba:	f04f 30ff 	mov.w	r0, #4294967295
 800e2be:	e7e9      	b.n	800e294 <__ssputs_r+0x88>

0800e2c0 <_svfiprintf_r>:
 800e2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c4:	4698      	mov	r8, r3
 800e2c6:	898b      	ldrh	r3, [r1, #12]
 800e2c8:	061b      	lsls	r3, r3, #24
 800e2ca:	b09d      	sub	sp, #116	; 0x74
 800e2cc:	4607      	mov	r7, r0
 800e2ce:	460d      	mov	r5, r1
 800e2d0:	4614      	mov	r4, r2
 800e2d2:	d50e      	bpl.n	800e2f2 <_svfiprintf_r+0x32>
 800e2d4:	690b      	ldr	r3, [r1, #16]
 800e2d6:	b963      	cbnz	r3, 800e2f2 <_svfiprintf_r+0x32>
 800e2d8:	2140      	movs	r1, #64	; 0x40
 800e2da:	f7ff ff0b 	bl	800e0f4 <_malloc_r>
 800e2de:	6028      	str	r0, [r5, #0]
 800e2e0:	6128      	str	r0, [r5, #16]
 800e2e2:	b920      	cbnz	r0, 800e2ee <_svfiprintf_r+0x2e>
 800e2e4:	230c      	movs	r3, #12
 800e2e6:	603b      	str	r3, [r7, #0]
 800e2e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e2ec:	e0d0      	b.n	800e490 <_svfiprintf_r+0x1d0>
 800e2ee:	2340      	movs	r3, #64	; 0x40
 800e2f0:	616b      	str	r3, [r5, #20]
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	9309      	str	r3, [sp, #36]	; 0x24
 800e2f6:	2320      	movs	r3, #32
 800e2f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e2fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800e300:	2330      	movs	r3, #48	; 0x30
 800e302:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e4a8 <_svfiprintf_r+0x1e8>
 800e306:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e30a:	f04f 0901 	mov.w	r9, #1
 800e30e:	4623      	mov	r3, r4
 800e310:	469a      	mov	sl, r3
 800e312:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e316:	b10a      	cbz	r2, 800e31c <_svfiprintf_r+0x5c>
 800e318:	2a25      	cmp	r2, #37	; 0x25
 800e31a:	d1f9      	bne.n	800e310 <_svfiprintf_r+0x50>
 800e31c:	ebba 0b04 	subs.w	fp, sl, r4
 800e320:	d00b      	beq.n	800e33a <_svfiprintf_r+0x7a>
 800e322:	465b      	mov	r3, fp
 800e324:	4622      	mov	r2, r4
 800e326:	4629      	mov	r1, r5
 800e328:	4638      	mov	r0, r7
 800e32a:	f7ff ff6f 	bl	800e20c <__ssputs_r>
 800e32e:	3001      	adds	r0, #1
 800e330:	f000 80a9 	beq.w	800e486 <_svfiprintf_r+0x1c6>
 800e334:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e336:	445a      	add	r2, fp
 800e338:	9209      	str	r2, [sp, #36]	; 0x24
 800e33a:	f89a 3000 	ldrb.w	r3, [sl]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	f000 80a1 	beq.w	800e486 <_svfiprintf_r+0x1c6>
 800e344:	2300      	movs	r3, #0
 800e346:	f04f 32ff 	mov.w	r2, #4294967295
 800e34a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e34e:	f10a 0a01 	add.w	sl, sl, #1
 800e352:	9304      	str	r3, [sp, #16]
 800e354:	9307      	str	r3, [sp, #28]
 800e356:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e35a:	931a      	str	r3, [sp, #104]	; 0x68
 800e35c:	4654      	mov	r4, sl
 800e35e:	2205      	movs	r2, #5
 800e360:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e364:	4850      	ldr	r0, [pc, #320]	; (800e4a8 <_svfiprintf_r+0x1e8>)
 800e366:	f7f1 ff53 	bl	8000210 <memchr>
 800e36a:	9a04      	ldr	r2, [sp, #16]
 800e36c:	b9d8      	cbnz	r0, 800e3a6 <_svfiprintf_r+0xe6>
 800e36e:	06d0      	lsls	r0, r2, #27
 800e370:	bf44      	itt	mi
 800e372:	2320      	movmi	r3, #32
 800e374:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e378:	0711      	lsls	r1, r2, #28
 800e37a:	bf44      	itt	mi
 800e37c:	232b      	movmi	r3, #43	; 0x2b
 800e37e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e382:	f89a 3000 	ldrb.w	r3, [sl]
 800e386:	2b2a      	cmp	r3, #42	; 0x2a
 800e388:	d015      	beq.n	800e3b6 <_svfiprintf_r+0xf6>
 800e38a:	9a07      	ldr	r2, [sp, #28]
 800e38c:	4654      	mov	r4, sl
 800e38e:	2000      	movs	r0, #0
 800e390:	f04f 0c0a 	mov.w	ip, #10
 800e394:	4621      	mov	r1, r4
 800e396:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e39a:	3b30      	subs	r3, #48	; 0x30
 800e39c:	2b09      	cmp	r3, #9
 800e39e:	d94d      	bls.n	800e43c <_svfiprintf_r+0x17c>
 800e3a0:	b1b0      	cbz	r0, 800e3d0 <_svfiprintf_r+0x110>
 800e3a2:	9207      	str	r2, [sp, #28]
 800e3a4:	e014      	b.n	800e3d0 <_svfiprintf_r+0x110>
 800e3a6:	eba0 0308 	sub.w	r3, r0, r8
 800e3aa:	fa09 f303 	lsl.w	r3, r9, r3
 800e3ae:	4313      	orrs	r3, r2
 800e3b0:	9304      	str	r3, [sp, #16]
 800e3b2:	46a2      	mov	sl, r4
 800e3b4:	e7d2      	b.n	800e35c <_svfiprintf_r+0x9c>
 800e3b6:	9b03      	ldr	r3, [sp, #12]
 800e3b8:	1d19      	adds	r1, r3, #4
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	9103      	str	r1, [sp, #12]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	bfbb      	ittet	lt
 800e3c2:	425b      	neglt	r3, r3
 800e3c4:	f042 0202 	orrlt.w	r2, r2, #2
 800e3c8:	9307      	strge	r3, [sp, #28]
 800e3ca:	9307      	strlt	r3, [sp, #28]
 800e3cc:	bfb8      	it	lt
 800e3ce:	9204      	strlt	r2, [sp, #16]
 800e3d0:	7823      	ldrb	r3, [r4, #0]
 800e3d2:	2b2e      	cmp	r3, #46	; 0x2e
 800e3d4:	d10c      	bne.n	800e3f0 <_svfiprintf_r+0x130>
 800e3d6:	7863      	ldrb	r3, [r4, #1]
 800e3d8:	2b2a      	cmp	r3, #42	; 0x2a
 800e3da:	d134      	bne.n	800e446 <_svfiprintf_r+0x186>
 800e3dc:	9b03      	ldr	r3, [sp, #12]
 800e3de:	1d1a      	adds	r2, r3, #4
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	9203      	str	r2, [sp, #12]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	bfb8      	it	lt
 800e3e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800e3ec:	3402      	adds	r4, #2
 800e3ee:	9305      	str	r3, [sp, #20]
 800e3f0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e4b8 <_svfiprintf_r+0x1f8>
 800e3f4:	7821      	ldrb	r1, [r4, #0]
 800e3f6:	2203      	movs	r2, #3
 800e3f8:	4650      	mov	r0, sl
 800e3fa:	f7f1 ff09 	bl	8000210 <memchr>
 800e3fe:	b138      	cbz	r0, 800e410 <_svfiprintf_r+0x150>
 800e400:	9b04      	ldr	r3, [sp, #16]
 800e402:	eba0 000a 	sub.w	r0, r0, sl
 800e406:	2240      	movs	r2, #64	; 0x40
 800e408:	4082      	lsls	r2, r0
 800e40a:	4313      	orrs	r3, r2
 800e40c:	3401      	adds	r4, #1
 800e40e:	9304      	str	r3, [sp, #16]
 800e410:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e414:	4825      	ldr	r0, [pc, #148]	; (800e4ac <_svfiprintf_r+0x1ec>)
 800e416:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e41a:	2206      	movs	r2, #6
 800e41c:	f7f1 fef8 	bl	8000210 <memchr>
 800e420:	2800      	cmp	r0, #0
 800e422:	d038      	beq.n	800e496 <_svfiprintf_r+0x1d6>
 800e424:	4b22      	ldr	r3, [pc, #136]	; (800e4b0 <_svfiprintf_r+0x1f0>)
 800e426:	bb1b      	cbnz	r3, 800e470 <_svfiprintf_r+0x1b0>
 800e428:	9b03      	ldr	r3, [sp, #12]
 800e42a:	3307      	adds	r3, #7
 800e42c:	f023 0307 	bic.w	r3, r3, #7
 800e430:	3308      	adds	r3, #8
 800e432:	9303      	str	r3, [sp, #12]
 800e434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e436:	4433      	add	r3, r6
 800e438:	9309      	str	r3, [sp, #36]	; 0x24
 800e43a:	e768      	b.n	800e30e <_svfiprintf_r+0x4e>
 800e43c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e440:	460c      	mov	r4, r1
 800e442:	2001      	movs	r0, #1
 800e444:	e7a6      	b.n	800e394 <_svfiprintf_r+0xd4>
 800e446:	2300      	movs	r3, #0
 800e448:	3401      	adds	r4, #1
 800e44a:	9305      	str	r3, [sp, #20]
 800e44c:	4619      	mov	r1, r3
 800e44e:	f04f 0c0a 	mov.w	ip, #10
 800e452:	4620      	mov	r0, r4
 800e454:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e458:	3a30      	subs	r2, #48	; 0x30
 800e45a:	2a09      	cmp	r2, #9
 800e45c:	d903      	bls.n	800e466 <_svfiprintf_r+0x1a6>
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d0c6      	beq.n	800e3f0 <_svfiprintf_r+0x130>
 800e462:	9105      	str	r1, [sp, #20]
 800e464:	e7c4      	b.n	800e3f0 <_svfiprintf_r+0x130>
 800e466:	fb0c 2101 	mla	r1, ip, r1, r2
 800e46a:	4604      	mov	r4, r0
 800e46c:	2301      	movs	r3, #1
 800e46e:	e7f0      	b.n	800e452 <_svfiprintf_r+0x192>
 800e470:	ab03      	add	r3, sp, #12
 800e472:	9300      	str	r3, [sp, #0]
 800e474:	462a      	mov	r2, r5
 800e476:	4b0f      	ldr	r3, [pc, #60]	; (800e4b4 <_svfiprintf_r+0x1f4>)
 800e478:	a904      	add	r1, sp, #16
 800e47a:	4638      	mov	r0, r7
 800e47c:	f3af 8000 	nop.w
 800e480:	1c42      	adds	r2, r0, #1
 800e482:	4606      	mov	r6, r0
 800e484:	d1d6      	bne.n	800e434 <_svfiprintf_r+0x174>
 800e486:	89ab      	ldrh	r3, [r5, #12]
 800e488:	065b      	lsls	r3, r3, #25
 800e48a:	f53f af2d 	bmi.w	800e2e8 <_svfiprintf_r+0x28>
 800e48e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e490:	b01d      	add	sp, #116	; 0x74
 800e492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e496:	ab03      	add	r3, sp, #12
 800e498:	9300      	str	r3, [sp, #0]
 800e49a:	462a      	mov	r2, r5
 800e49c:	4b05      	ldr	r3, [pc, #20]	; (800e4b4 <_svfiprintf_r+0x1f4>)
 800e49e:	a904      	add	r1, sp, #16
 800e4a0:	4638      	mov	r0, r7
 800e4a2:	f000 f879 	bl	800e598 <_printf_i>
 800e4a6:	e7eb      	b.n	800e480 <_svfiprintf_r+0x1c0>
 800e4a8:	0800ee34 	.word	0x0800ee34
 800e4ac:	0800ee3e 	.word	0x0800ee3e
 800e4b0:	00000000 	.word	0x00000000
 800e4b4:	0800e20d 	.word	0x0800e20d
 800e4b8:	0800ee3a 	.word	0x0800ee3a

0800e4bc <_printf_common>:
 800e4bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4c0:	4616      	mov	r6, r2
 800e4c2:	4699      	mov	r9, r3
 800e4c4:	688a      	ldr	r2, [r1, #8]
 800e4c6:	690b      	ldr	r3, [r1, #16]
 800e4c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e4cc:	4293      	cmp	r3, r2
 800e4ce:	bfb8      	it	lt
 800e4d0:	4613      	movlt	r3, r2
 800e4d2:	6033      	str	r3, [r6, #0]
 800e4d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e4d8:	4607      	mov	r7, r0
 800e4da:	460c      	mov	r4, r1
 800e4dc:	b10a      	cbz	r2, 800e4e2 <_printf_common+0x26>
 800e4de:	3301      	adds	r3, #1
 800e4e0:	6033      	str	r3, [r6, #0]
 800e4e2:	6823      	ldr	r3, [r4, #0]
 800e4e4:	0699      	lsls	r1, r3, #26
 800e4e6:	bf42      	ittt	mi
 800e4e8:	6833      	ldrmi	r3, [r6, #0]
 800e4ea:	3302      	addmi	r3, #2
 800e4ec:	6033      	strmi	r3, [r6, #0]
 800e4ee:	6825      	ldr	r5, [r4, #0]
 800e4f0:	f015 0506 	ands.w	r5, r5, #6
 800e4f4:	d106      	bne.n	800e504 <_printf_common+0x48>
 800e4f6:	f104 0a19 	add.w	sl, r4, #25
 800e4fa:	68e3      	ldr	r3, [r4, #12]
 800e4fc:	6832      	ldr	r2, [r6, #0]
 800e4fe:	1a9b      	subs	r3, r3, r2
 800e500:	42ab      	cmp	r3, r5
 800e502:	dc26      	bgt.n	800e552 <_printf_common+0x96>
 800e504:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e508:	1e13      	subs	r3, r2, #0
 800e50a:	6822      	ldr	r2, [r4, #0]
 800e50c:	bf18      	it	ne
 800e50e:	2301      	movne	r3, #1
 800e510:	0692      	lsls	r2, r2, #26
 800e512:	d42b      	bmi.n	800e56c <_printf_common+0xb0>
 800e514:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e518:	4649      	mov	r1, r9
 800e51a:	4638      	mov	r0, r7
 800e51c:	47c0      	blx	r8
 800e51e:	3001      	adds	r0, #1
 800e520:	d01e      	beq.n	800e560 <_printf_common+0xa4>
 800e522:	6823      	ldr	r3, [r4, #0]
 800e524:	6922      	ldr	r2, [r4, #16]
 800e526:	f003 0306 	and.w	r3, r3, #6
 800e52a:	2b04      	cmp	r3, #4
 800e52c:	bf02      	ittt	eq
 800e52e:	68e5      	ldreq	r5, [r4, #12]
 800e530:	6833      	ldreq	r3, [r6, #0]
 800e532:	1aed      	subeq	r5, r5, r3
 800e534:	68a3      	ldr	r3, [r4, #8]
 800e536:	bf0c      	ite	eq
 800e538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e53c:	2500      	movne	r5, #0
 800e53e:	4293      	cmp	r3, r2
 800e540:	bfc4      	itt	gt
 800e542:	1a9b      	subgt	r3, r3, r2
 800e544:	18ed      	addgt	r5, r5, r3
 800e546:	2600      	movs	r6, #0
 800e548:	341a      	adds	r4, #26
 800e54a:	42b5      	cmp	r5, r6
 800e54c:	d11a      	bne.n	800e584 <_printf_common+0xc8>
 800e54e:	2000      	movs	r0, #0
 800e550:	e008      	b.n	800e564 <_printf_common+0xa8>
 800e552:	2301      	movs	r3, #1
 800e554:	4652      	mov	r2, sl
 800e556:	4649      	mov	r1, r9
 800e558:	4638      	mov	r0, r7
 800e55a:	47c0      	blx	r8
 800e55c:	3001      	adds	r0, #1
 800e55e:	d103      	bne.n	800e568 <_printf_common+0xac>
 800e560:	f04f 30ff 	mov.w	r0, #4294967295
 800e564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e568:	3501      	adds	r5, #1
 800e56a:	e7c6      	b.n	800e4fa <_printf_common+0x3e>
 800e56c:	18e1      	adds	r1, r4, r3
 800e56e:	1c5a      	adds	r2, r3, #1
 800e570:	2030      	movs	r0, #48	; 0x30
 800e572:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e576:	4422      	add	r2, r4
 800e578:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e57c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e580:	3302      	adds	r3, #2
 800e582:	e7c7      	b.n	800e514 <_printf_common+0x58>
 800e584:	2301      	movs	r3, #1
 800e586:	4622      	mov	r2, r4
 800e588:	4649      	mov	r1, r9
 800e58a:	4638      	mov	r0, r7
 800e58c:	47c0      	blx	r8
 800e58e:	3001      	adds	r0, #1
 800e590:	d0e6      	beq.n	800e560 <_printf_common+0xa4>
 800e592:	3601      	adds	r6, #1
 800e594:	e7d9      	b.n	800e54a <_printf_common+0x8e>
	...

0800e598 <_printf_i>:
 800e598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e59c:	7e0f      	ldrb	r7, [r1, #24]
 800e59e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e5a0:	2f78      	cmp	r7, #120	; 0x78
 800e5a2:	4691      	mov	r9, r2
 800e5a4:	4680      	mov	r8, r0
 800e5a6:	460c      	mov	r4, r1
 800e5a8:	469a      	mov	sl, r3
 800e5aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e5ae:	d807      	bhi.n	800e5c0 <_printf_i+0x28>
 800e5b0:	2f62      	cmp	r7, #98	; 0x62
 800e5b2:	d80a      	bhi.n	800e5ca <_printf_i+0x32>
 800e5b4:	2f00      	cmp	r7, #0
 800e5b6:	f000 80d4 	beq.w	800e762 <_printf_i+0x1ca>
 800e5ba:	2f58      	cmp	r7, #88	; 0x58
 800e5bc:	f000 80c0 	beq.w	800e740 <_printf_i+0x1a8>
 800e5c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e5c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e5c8:	e03a      	b.n	800e640 <_printf_i+0xa8>
 800e5ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e5ce:	2b15      	cmp	r3, #21
 800e5d0:	d8f6      	bhi.n	800e5c0 <_printf_i+0x28>
 800e5d2:	a101      	add	r1, pc, #4	; (adr r1, 800e5d8 <_printf_i+0x40>)
 800e5d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e5d8:	0800e631 	.word	0x0800e631
 800e5dc:	0800e645 	.word	0x0800e645
 800e5e0:	0800e5c1 	.word	0x0800e5c1
 800e5e4:	0800e5c1 	.word	0x0800e5c1
 800e5e8:	0800e5c1 	.word	0x0800e5c1
 800e5ec:	0800e5c1 	.word	0x0800e5c1
 800e5f0:	0800e645 	.word	0x0800e645
 800e5f4:	0800e5c1 	.word	0x0800e5c1
 800e5f8:	0800e5c1 	.word	0x0800e5c1
 800e5fc:	0800e5c1 	.word	0x0800e5c1
 800e600:	0800e5c1 	.word	0x0800e5c1
 800e604:	0800e749 	.word	0x0800e749
 800e608:	0800e671 	.word	0x0800e671
 800e60c:	0800e703 	.word	0x0800e703
 800e610:	0800e5c1 	.word	0x0800e5c1
 800e614:	0800e5c1 	.word	0x0800e5c1
 800e618:	0800e76b 	.word	0x0800e76b
 800e61c:	0800e5c1 	.word	0x0800e5c1
 800e620:	0800e671 	.word	0x0800e671
 800e624:	0800e5c1 	.word	0x0800e5c1
 800e628:	0800e5c1 	.word	0x0800e5c1
 800e62c:	0800e70b 	.word	0x0800e70b
 800e630:	682b      	ldr	r3, [r5, #0]
 800e632:	1d1a      	adds	r2, r3, #4
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	602a      	str	r2, [r5, #0]
 800e638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e63c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e640:	2301      	movs	r3, #1
 800e642:	e09f      	b.n	800e784 <_printf_i+0x1ec>
 800e644:	6820      	ldr	r0, [r4, #0]
 800e646:	682b      	ldr	r3, [r5, #0]
 800e648:	0607      	lsls	r7, r0, #24
 800e64a:	f103 0104 	add.w	r1, r3, #4
 800e64e:	6029      	str	r1, [r5, #0]
 800e650:	d501      	bpl.n	800e656 <_printf_i+0xbe>
 800e652:	681e      	ldr	r6, [r3, #0]
 800e654:	e003      	b.n	800e65e <_printf_i+0xc6>
 800e656:	0646      	lsls	r6, r0, #25
 800e658:	d5fb      	bpl.n	800e652 <_printf_i+0xba>
 800e65a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e65e:	2e00      	cmp	r6, #0
 800e660:	da03      	bge.n	800e66a <_printf_i+0xd2>
 800e662:	232d      	movs	r3, #45	; 0x2d
 800e664:	4276      	negs	r6, r6
 800e666:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e66a:	485a      	ldr	r0, [pc, #360]	; (800e7d4 <_printf_i+0x23c>)
 800e66c:	230a      	movs	r3, #10
 800e66e:	e012      	b.n	800e696 <_printf_i+0xfe>
 800e670:	682b      	ldr	r3, [r5, #0]
 800e672:	6820      	ldr	r0, [r4, #0]
 800e674:	1d19      	adds	r1, r3, #4
 800e676:	6029      	str	r1, [r5, #0]
 800e678:	0605      	lsls	r5, r0, #24
 800e67a:	d501      	bpl.n	800e680 <_printf_i+0xe8>
 800e67c:	681e      	ldr	r6, [r3, #0]
 800e67e:	e002      	b.n	800e686 <_printf_i+0xee>
 800e680:	0641      	lsls	r1, r0, #25
 800e682:	d5fb      	bpl.n	800e67c <_printf_i+0xe4>
 800e684:	881e      	ldrh	r6, [r3, #0]
 800e686:	4853      	ldr	r0, [pc, #332]	; (800e7d4 <_printf_i+0x23c>)
 800e688:	2f6f      	cmp	r7, #111	; 0x6f
 800e68a:	bf0c      	ite	eq
 800e68c:	2308      	moveq	r3, #8
 800e68e:	230a      	movne	r3, #10
 800e690:	2100      	movs	r1, #0
 800e692:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e696:	6865      	ldr	r5, [r4, #4]
 800e698:	60a5      	str	r5, [r4, #8]
 800e69a:	2d00      	cmp	r5, #0
 800e69c:	bfa2      	ittt	ge
 800e69e:	6821      	ldrge	r1, [r4, #0]
 800e6a0:	f021 0104 	bicge.w	r1, r1, #4
 800e6a4:	6021      	strge	r1, [r4, #0]
 800e6a6:	b90e      	cbnz	r6, 800e6ac <_printf_i+0x114>
 800e6a8:	2d00      	cmp	r5, #0
 800e6aa:	d04b      	beq.n	800e744 <_printf_i+0x1ac>
 800e6ac:	4615      	mov	r5, r2
 800e6ae:	fbb6 f1f3 	udiv	r1, r6, r3
 800e6b2:	fb03 6711 	mls	r7, r3, r1, r6
 800e6b6:	5dc7      	ldrb	r7, [r0, r7]
 800e6b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e6bc:	4637      	mov	r7, r6
 800e6be:	42bb      	cmp	r3, r7
 800e6c0:	460e      	mov	r6, r1
 800e6c2:	d9f4      	bls.n	800e6ae <_printf_i+0x116>
 800e6c4:	2b08      	cmp	r3, #8
 800e6c6:	d10b      	bne.n	800e6e0 <_printf_i+0x148>
 800e6c8:	6823      	ldr	r3, [r4, #0]
 800e6ca:	07de      	lsls	r6, r3, #31
 800e6cc:	d508      	bpl.n	800e6e0 <_printf_i+0x148>
 800e6ce:	6923      	ldr	r3, [r4, #16]
 800e6d0:	6861      	ldr	r1, [r4, #4]
 800e6d2:	4299      	cmp	r1, r3
 800e6d4:	bfde      	ittt	le
 800e6d6:	2330      	movle	r3, #48	; 0x30
 800e6d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e6dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e6e0:	1b52      	subs	r2, r2, r5
 800e6e2:	6122      	str	r2, [r4, #16]
 800e6e4:	f8cd a000 	str.w	sl, [sp]
 800e6e8:	464b      	mov	r3, r9
 800e6ea:	aa03      	add	r2, sp, #12
 800e6ec:	4621      	mov	r1, r4
 800e6ee:	4640      	mov	r0, r8
 800e6f0:	f7ff fee4 	bl	800e4bc <_printf_common>
 800e6f4:	3001      	adds	r0, #1
 800e6f6:	d14a      	bne.n	800e78e <_printf_i+0x1f6>
 800e6f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e6fc:	b004      	add	sp, #16
 800e6fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e702:	6823      	ldr	r3, [r4, #0]
 800e704:	f043 0320 	orr.w	r3, r3, #32
 800e708:	6023      	str	r3, [r4, #0]
 800e70a:	4833      	ldr	r0, [pc, #204]	; (800e7d8 <_printf_i+0x240>)
 800e70c:	2778      	movs	r7, #120	; 0x78
 800e70e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e712:	6823      	ldr	r3, [r4, #0]
 800e714:	6829      	ldr	r1, [r5, #0]
 800e716:	061f      	lsls	r7, r3, #24
 800e718:	f851 6b04 	ldr.w	r6, [r1], #4
 800e71c:	d402      	bmi.n	800e724 <_printf_i+0x18c>
 800e71e:	065f      	lsls	r7, r3, #25
 800e720:	bf48      	it	mi
 800e722:	b2b6      	uxthmi	r6, r6
 800e724:	07df      	lsls	r7, r3, #31
 800e726:	bf48      	it	mi
 800e728:	f043 0320 	orrmi.w	r3, r3, #32
 800e72c:	6029      	str	r1, [r5, #0]
 800e72e:	bf48      	it	mi
 800e730:	6023      	strmi	r3, [r4, #0]
 800e732:	b91e      	cbnz	r6, 800e73c <_printf_i+0x1a4>
 800e734:	6823      	ldr	r3, [r4, #0]
 800e736:	f023 0320 	bic.w	r3, r3, #32
 800e73a:	6023      	str	r3, [r4, #0]
 800e73c:	2310      	movs	r3, #16
 800e73e:	e7a7      	b.n	800e690 <_printf_i+0xf8>
 800e740:	4824      	ldr	r0, [pc, #144]	; (800e7d4 <_printf_i+0x23c>)
 800e742:	e7e4      	b.n	800e70e <_printf_i+0x176>
 800e744:	4615      	mov	r5, r2
 800e746:	e7bd      	b.n	800e6c4 <_printf_i+0x12c>
 800e748:	682b      	ldr	r3, [r5, #0]
 800e74a:	6826      	ldr	r6, [r4, #0]
 800e74c:	6961      	ldr	r1, [r4, #20]
 800e74e:	1d18      	adds	r0, r3, #4
 800e750:	6028      	str	r0, [r5, #0]
 800e752:	0635      	lsls	r5, r6, #24
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	d501      	bpl.n	800e75c <_printf_i+0x1c4>
 800e758:	6019      	str	r1, [r3, #0]
 800e75a:	e002      	b.n	800e762 <_printf_i+0x1ca>
 800e75c:	0670      	lsls	r0, r6, #25
 800e75e:	d5fb      	bpl.n	800e758 <_printf_i+0x1c0>
 800e760:	8019      	strh	r1, [r3, #0]
 800e762:	2300      	movs	r3, #0
 800e764:	6123      	str	r3, [r4, #16]
 800e766:	4615      	mov	r5, r2
 800e768:	e7bc      	b.n	800e6e4 <_printf_i+0x14c>
 800e76a:	682b      	ldr	r3, [r5, #0]
 800e76c:	1d1a      	adds	r2, r3, #4
 800e76e:	602a      	str	r2, [r5, #0]
 800e770:	681d      	ldr	r5, [r3, #0]
 800e772:	6862      	ldr	r2, [r4, #4]
 800e774:	2100      	movs	r1, #0
 800e776:	4628      	mov	r0, r5
 800e778:	f7f1 fd4a 	bl	8000210 <memchr>
 800e77c:	b108      	cbz	r0, 800e782 <_printf_i+0x1ea>
 800e77e:	1b40      	subs	r0, r0, r5
 800e780:	6060      	str	r0, [r4, #4]
 800e782:	6863      	ldr	r3, [r4, #4]
 800e784:	6123      	str	r3, [r4, #16]
 800e786:	2300      	movs	r3, #0
 800e788:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e78c:	e7aa      	b.n	800e6e4 <_printf_i+0x14c>
 800e78e:	6923      	ldr	r3, [r4, #16]
 800e790:	462a      	mov	r2, r5
 800e792:	4649      	mov	r1, r9
 800e794:	4640      	mov	r0, r8
 800e796:	47d0      	blx	sl
 800e798:	3001      	adds	r0, #1
 800e79a:	d0ad      	beq.n	800e6f8 <_printf_i+0x160>
 800e79c:	6823      	ldr	r3, [r4, #0]
 800e79e:	079b      	lsls	r3, r3, #30
 800e7a0:	d413      	bmi.n	800e7ca <_printf_i+0x232>
 800e7a2:	68e0      	ldr	r0, [r4, #12]
 800e7a4:	9b03      	ldr	r3, [sp, #12]
 800e7a6:	4298      	cmp	r0, r3
 800e7a8:	bfb8      	it	lt
 800e7aa:	4618      	movlt	r0, r3
 800e7ac:	e7a6      	b.n	800e6fc <_printf_i+0x164>
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	4632      	mov	r2, r6
 800e7b2:	4649      	mov	r1, r9
 800e7b4:	4640      	mov	r0, r8
 800e7b6:	47d0      	blx	sl
 800e7b8:	3001      	adds	r0, #1
 800e7ba:	d09d      	beq.n	800e6f8 <_printf_i+0x160>
 800e7bc:	3501      	adds	r5, #1
 800e7be:	68e3      	ldr	r3, [r4, #12]
 800e7c0:	9903      	ldr	r1, [sp, #12]
 800e7c2:	1a5b      	subs	r3, r3, r1
 800e7c4:	42ab      	cmp	r3, r5
 800e7c6:	dcf2      	bgt.n	800e7ae <_printf_i+0x216>
 800e7c8:	e7eb      	b.n	800e7a2 <_printf_i+0x20a>
 800e7ca:	2500      	movs	r5, #0
 800e7cc:	f104 0619 	add.w	r6, r4, #25
 800e7d0:	e7f5      	b.n	800e7be <_printf_i+0x226>
 800e7d2:	bf00      	nop
 800e7d4:	0800ee45 	.word	0x0800ee45
 800e7d8:	0800ee56 	.word	0x0800ee56

0800e7dc <memmove>:
 800e7dc:	4288      	cmp	r0, r1
 800e7de:	b510      	push	{r4, lr}
 800e7e0:	eb01 0402 	add.w	r4, r1, r2
 800e7e4:	d902      	bls.n	800e7ec <memmove+0x10>
 800e7e6:	4284      	cmp	r4, r0
 800e7e8:	4623      	mov	r3, r4
 800e7ea:	d807      	bhi.n	800e7fc <memmove+0x20>
 800e7ec:	1e43      	subs	r3, r0, #1
 800e7ee:	42a1      	cmp	r1, r4
 800e7f0:	d008      	beq.n	800e804 <memmove+0x28>
 800e7f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e7f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e7fa:	e7f8      	b.n	800e7ee <memmove+0x12>
 800e7fc:	4402      	add	r2, r0
 800e7fe:	4601      	mov	r1, r0
 800e800:	428a      	cmp	r2, r1
 800e802:	d100      	bne.n	800e806 <memmove+0x2a>
 800e804:	bd10      	pop	{r4, pc}
 800e806:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e80a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e80e:	e7f7      	b.n	800e800 <memmove+0x24>

0800e810 <_sbrk_r>:
 800e810:	b538      	push	{r3, r4, r5, lr}
 800e812:	4d06      	ldr	r5, [pc, #24]	; (800e82c <_sbrk_r+0x1c>)
 800e814:	2300      	movs	r3, #0
 800e816:	4604      	mov	r4, r0
 800e818:	4608      	mov	r0, r1
 800e81a:	602b      	str	r3, [r5, #0]
 800e81c:	f7f5 fb5a 	bl	8003ed4 <_sbrk>
 800e820:	1c43      	adds	r3, r0, #1
 800e822:	d102      	bne.n	800e82a <_sbrk_r+0x1a>
 800e824:	682b      	ldr	r3, [r5, #0]
 800e826:	b103      	cbz	r3, 800e82a <_sbrk_r+0x1a>
 800e828:	6023      	str	r3, [r4, #0]
 800e82a:	bd38      	pop	{r3, r4, r5, pc}
 800e82c:	20002908 	.word	0x20002908

0800e830 <memcpy>:
 800e830:	440a      	add	r2, r1
 800e832:	4291      	cmp	r1, r2
 800e834:	f100 33ff 	add.w	r3, r0, #4294967295
 800e838:	d100      	bne.n	800e83c <memcpy+0xc>
 800e83a:	4770      	bx	lr
 800e83c:	b510      	push	{r4, lr}
 800e83e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e842:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e846:	4291      	cmp	r1, r2
 800e848:	d1f9      	bne.n	800e83e <memcpy+0xe>
 800e84a:	bd10      	pop	{r4, pc}

0800e84c <_realloc_r>:
 800e84c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e850:	4680      	mov	r8, r0
 800e852:	4614      	mov	r4, r2
 800e854:	460e      	mov	r6, r1
 800e856:	b921      	cbnz	r1, 800e862 <_realloc_r+0x16>
 800e858:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e85c:	4611      	mov	r1, r2
 800e85e:	f7ff bc49 	b.w	800e0f4 <_malloc_r>
 800e862:	b92a      	cbnz	r2, 800e870 <_realloc_r+0x24>
 800e864:	f7ff fbda 	bl	800e01c <_free_r>
 800e868:	4625      	mov	r5, r4
 800e86a:	4628      	mov	r0, r5
 800e86c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e870:	f000 f81b 	bl	800e8aa <_malloc_usable_size_r>
 800e874:	4284      	cmp	r4, r0
 800e876:	4607      	mov	r7, r0
 800e878:	d802      	bhi.n	800e880 <_realloc_r+0x34>
 800e87a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e87e:	d812      	bhi.n	800e8a6 <_realloc_r+0x5a>
 800e880:	4621      	mov	r1, r4
 800e882:	4640      	mov	r0, r8
 800e884:	f7ff fc36 	bl	800e0f4 <_malloc_r>
 800e888:	4605      	mov	r5, r0
 800e88a:	2800      	cmp	r0, #0
 800e88c:	d0ed      	beq.n	800e86a <_realloc_r+0x1e>
 800e88e:	42bc      	cmp	r4, r7
 800e890:	4622      	mov	r2, r4
 800e892:	4631      	mov	r1, r6
 800e894:	bf28      	it	cs
 800e896:	463a      	movcs	r2, r7
 800e898:	f7ff ffca 	bl	800e830 <memcpy>
 800e89c:	4631      	mov	r1, r6
 800e89e:	4640      	mov	r0, r8
 800e8a0:	f7ff fbbc 	bl	800e01c <_free_r>
 800e8a4:	e7e1      	b.n	800e86a <_realloc_r+0x1e>
 800e8a6:	4635      	mov	r5, r6
 800e8a8:	e7df      	b.n	800e86a <_realloc_r+0x1e>

0800e8aa <_malloc_usable_size_r>:
 800e8aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8ae:	1f18      	subs	r0, r3, #4
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	bfbc      	itt	lt
 800e8b4:	580b      	ldrlt	r3, [r1, r0]
 800e8b6:	18c0      	addlt	r0, r0, r3
 800e8b8:	4770      	bx	lr
	...

0800e8bc <_init>:
 800e8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8be:	bf00      	nop
 800e8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8c2:	bc08      	pop	{r3}
 800e8c4:	469e      	mov	lr, r3
 800e8c6:	4770      	bx	lr

0800e8c8 <_fini>:
 800e8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8ca:	bf00      	nop
 800e8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8ce:	bc08      	pop	{r3}
 800e8d0:	469e      	mov	lr, r3
 800e8d2:	4770      	bx	lr
