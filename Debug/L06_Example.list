
L06_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abd4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  0800ada4  0800ada4  0001ada4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aea8  0800aea8  0002011c  2**0
                  CONTENTS
  4 .ARM          00000008  0800aea8  0800aea8  0001aea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aeb0  0800aeb0  0002011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aeb0  0800aeb0  0001aeb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aeb4  0800aeb4  0001aeb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  0800aeb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d8  20000120  0800afd4  00020120  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005f8  0800afd4  000205f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bf03  00000000  00000000  0002018f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004109  00000000  00000000  0003c092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016e0  00000000  00000000  000401a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011ce  00000000  00000000  00041880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029895  00000000  00000000  00042a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fde8  00000000  00000000  0006c2e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fbf36  00000000  00000000  0008c0cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006590  00000000  00000000  00188004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0018e594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000120 	.word	0x20000120
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ad8c 	.word	0x0800ad8c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000124 	.word	0x20000124
 800020c:	0800ad8c 	.word	0x0800ad8c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_d2f>:
 8000bec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf4:	bf24      	itt	cs
 8000bf6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfe:	d90d      	bls.n	8000c1c <__aeabi_d2f+0x30>
 8000c00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c14:	bf08      	it	eq
 8000c16:	f020 0001 	biceq.w	r0, r0, #1
 8000c1a:	4770      	bx	lr
 8000c1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c20:	d121      	bne.n	8000c66 <__aeabi_d2f+0x7a>
 8000c22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c26:	bfbc      	itt	lt
 8000c28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	4770      	bxlt	lr
 8000c2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c36:	f1c2 0218 	rsb	r2, r2, #24
 8000c3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c42:	fa20 f002 	lsr.w	r0, r0, r2
 8000c46:	bf18      	it	ne
 8000c48:	f040 0001 	orrne.w	r0, r0, #1
 8000c4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c58:	ea40 000c 	orr.w	r0, r0, ip
 8000c5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c64:	e7cc      	b.n	8000c00 <__aeabi_d2f+0x14>
 8000c66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6a:	d107      	bne.n	8000c7c <__aeabi_d2f+0x90>
 8000c6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c70:	bf1e      	ittt	ne
 8000c72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7a:	4770      	bxne	lr
 8000c7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <__aeabi_uldivmod>:
 8000c8c:	b953      	cbnz	r3, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c8e:	b94a      	cbnz	r2, 8000ca4 <__aeabi_uldivmod+0x18>
 8000c90:	2900      	cmp	r1, #0
 8000c92:	bf08      	it	eq
 8000c94:	2800      	cmpeq	r0, #0
 8000c96:	bf1c      	itt	ne
 8000c98:	f04f 31ff 	movne.w	r1, #4294967295
 8000c9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca0:	f000 b970 	b.w	8000f84 <__aeabi_idiv0>
 8000ca4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cac:	f000 f806 	bl	8000cbc <__udivmoddi4>
 8000cb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb8:	b004      	add	sp, #16
 8000cba:	4770      	bx	lr

08000cbc <__udivmoddi4>:
 8000cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc0:	9e08      	ldr	r6, [sp, #32]
 8000cc2:	460d      	mov	r5, r1
 8000cc4:	4604      	mov	r4, r0
 8000cc6:	460f      	mov	r7, r1
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d14a      	bne.n	8000d62 <__udivmoddi4+0xa6>
 8000ccc:	428a      	cmp	r2, r1
 8000cce:	4694      	mov	ip, r2
 8000cd0:	d965      	bls.n	8000d9e <__udivmoddi4+0xe2>
 8000cd2:	fab2 f382 	clz	r3, r2
 8000cd6:	b143      	cbz	r3, 8000cea <__udivmoddi4+0x2e>
 8000cd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cdc:	f1c3 0220 	rsb	r2, r3, #32
 8000ce0:	409f      	lsls	r7, r3
 8000ce2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce6:	4317      	orrs	r7, r2
 8000ce8:	409c      	lsls	r4, r3
 8000cea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cee:	fa1f f58c 	uxth.w	r5, ip
 8000cf2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf6:	0c22      	lsrs	r2, r4, #16
 8000cf8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cfc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d00:	fb01 f005 	mul.w	r0, r1, r5
 8000d04:	4290      	cmp	r0, r2
 8000d06:	d90a      	bls.n	8000d1e <__udivmoddi4+0x62>
 8000d08:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d10:	f080 811c 	bcs.w	8000f4c <__udivmoddi4+0x290>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f240 8119 	bls.w	8000f4c <__udivmoddi4+0x290>
 8000d1a:	3902      	subs	r1, #2
 8000d1c:	4462      	add	r2, ip
 8000d1e:	1a12      	subs	r2, r2, r0
 8000d20:	b2a4      	uxth	r4, r4
 8000d22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2e:	fb00 f505 	mul.w	r5, r0, r5
 8000d32:	42a5      	cmp	r5, r4
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x90>
 8000d36:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3e:	f080 8107 	bcs.w	8000f50 <__udivmoddi4+0x294>
 8000d42:	42a5      	cmp	r5, r4
 8000d44:	f240 8104 	bls.w	8000f50 <__udivmoddi4+0x294>
 8000d48:	4464      	add	r4, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d50:	1b64      	subs	r4, r4, r5
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11e      	cbz	r6, 8000d5e <__udivmoddi4+0xa2>
 8000d56:	40dc      	lsrs	r4, r3
 8000d58:	2300      	movs	r3, #0
 8000d5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0xbc>
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	f000 80ed 	beq.w	8000f46 <__udivmoddi4+0x28a>
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000d72:	4608      	mov	r0, r1
 8000d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d78:	fab3 f183 	clz	r1, r3
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	d149      	bne.n	8000e14 <__udivmoddi4+0x158>
 8000d80:	42ab      	cmp	r3, r5
 8000d82:	d302      	bcc.n	8000d8a <__udivmoddi4+0xce>
 8000d84:	4282      	cmp	r2, r0
 8000d86:	f200 80f8 	bhi.w	8000f7a <__udivmoddi4+0x2be>
 8000d8a:	1a84      	subs	r4, r0, r2
 8000d8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000d90:	2001      	movs	r0, #1
 8000d92:	4617      	mov	r7, r2
 8000d94:	2e00      	cmp	r6, #0
 8000d96:	d0e2      	beq.n	8000d5e <__udivmoddi4+0xa2>
 8000d98:	e9c6 4700 	strd	r4, r7, [r6]
 8000d9c:	e7df      	b.n	8000d5e <__udivmoddi4+0xa2>
 8000d9e:	b902      	cbnz	r2, 8000da2 <__udivmoddi4+0xe6>
 8000da0:	deff      	udf	#255	; 0xff
 8000da2:	fab2 f382 	clz	r3, r2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x210>
 8000dac:	1a8a      	subs	r2, r1, r2
 8000dae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db2:	fa1f fe8c 	uxth.w	lr, ip
 8000db6:	2101      	movs	r1, #1
 8000db8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dbc:	fb07 2015 	mls	r0, r7, r5, r2
 8000dc0:	0c22      	lsrs	r2, r4, #16
 8000dc2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc6:	fb0e f005 	mul.w	r0, lr, r5
 8000dca:	4290      	cmp	r0, r2
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x124>
 8000dce:	eb1c 0202 	adds.w	r2, ip, r2
 8000dd2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x122>
 8000dd8:	4290      	cmp	r0, r2
 8000dda:	f200 80cb 	bhi.w	8000f74 <__udivmoddi4+0x2b8>
 8000dde:	4645      	mov	r5, r8
 8000de0:	1a12      	subs	r2, r2, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de8:	fb07 2210 	mls	r2, r7, r0, r2
 8000dec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000df0:	fb0e fe00 	mul.w	lr, lr, r0
 8000df4:	45a6      	cmp	lr, r4
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x14e>
 8000df8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dfc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e00:	d202      	bcs.n	8000e08 <__udivmoddi4+0x14c>
 8000e02:	45a6      	cmp	lr, r4
 8000e04:	f200 80bb 	bhi.w	8000f7e <__udivmoddi4+0x2c2>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e12:	e79f      	b.n	8000d54 <__udivmoddi4+0x98>
 8000e14:	f1c1 0720 	rsb	r7, r1, #32
 8000e18:	408b      	lsls	r3, r1
 8000e1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e22:	fa05 f401 	lsl.w	r4, r5, r1
 8000e26:	fa20 f307 	lsr.w	r3, r0, r7
 8000e2a:	40fd      	lsrs	r5, r7
 8000e2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e30:	4323      	orrs	r3, r4
 8000e32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e36:	fa1f fe8c 	uxth.w	lr, ip
 8000e3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3e:	0c1c      	lsrs	r4, r3, #16
 8000e40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e44:	fb08 f50e 	mul.w	r5, r8, lr
 8000e48:	42a5      	cmp	r5, r4
 8000e4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000e52:	d90b      	bls.n	8000e6c <__udivmoddi4+0x1b0>
 8000e54:	eb1c 0404 	adds.w	r4, ip, r4
 8000e58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e5c:	f080 8088 	bcs.w	8000f70 <__udivmoddi4+0x2b4>
 8000e60:	42a5      	cmp	r5, r4
 8000e62:	f240 8085 	bls.w	8000f70 <__udivmoddi4+0x2b4>
 8000e66:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6a:	4464      	add	r4, ip
 8000e6c:	1b64      	subs	r4, r4, r5
 8000e6e:	b29d      	uxth	r5, r3
 8000e70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e74:	fb09 4413 	mls	r4, r9, r3, r4
 8000e78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e80:	45a6      	cmp	lr, r4
 8000e82:	d908      	bls.n	8000e96 <__udivmoddi4+0x1da>
 8000e84:	eb1c 0404 	adds.w	r4, ip, r4
 8000e88:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e8c:	d26c      	bcs.n	8000f68 <__udivmoddi4+0x2ac>
 8000e8e:	45a6      	cmp	lr, r4
 8000e90:	d96a      	bls.n	8000f68 <__udivmoddi4+0x2ac>
 8000e92:	3b02      	subs	r3, #2
 8000e94:	4464      	add	r4, ip
 8000e96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9e:	eba4 040e 	sub.w	r4, r4, lr
 8000ea2:	42ac      	cmp	r4, r5
 8000ea4:	46c8      	mov	r8, r9
 8000ea6:	46ae      	mov	lr, r5
 8000ea8:	d356      	bcc.n	8000f58 <__udivmoddi4+0x29c>
 8000eaa:	d053      	beq.n	8000f54 <__udivmoddi4+0x298>
 8000eac:	b156      	cbz	r6, 8000ec4 <__udivmoddi4+0x208>
 8000eae:	ebb0 0208 	subs.w	r2, r0, r8
 8000eb2:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb6:	fa04 f707 	lsl.w	r7, r4, r7
 8000eba:	40ca      	lsrs	r2, r1
 8000ebc:	40cc      	lsrs	r4, r1
 8000ebe:	4317      	orrs	r7, r2
 8000ec0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ecc:	f1c3 0120 	rsb	r1, r3, #32
 8000ed0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed8:	fa25 f101 	lsr.w	r1, r5, r1
 8000edc:	409d      	lsls	r5, r3
 8000ede:	432a      	orrs	r2, r5
 8000ee0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee4:	fa1f fe8c 	uxth.w	lr, ip
 8000ee8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eec:	fb07 1510 	mls	r5, r7, r0, r1
 8000ef0:	0c11      	lsrs	r1, r2, #16
 8000ef2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef6:	fb00 f50e 	mul.w	r5, r0, lr
 8000efa:	428d      	cmp	r5, r1
 8000efc:	fa04 f403 	lsl.w	r4, r4, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x258>
 8000f02:	eb1c 0101 	adds.w	r1, ip, r1
 8000f06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0a:	d22f      	bcs.n	8000f6c <__udivmoddi4+0x2b0>
 8000f0c:	428d      	cmp	r5, r1
 8000f0e:	d92d      	bls.n	8000f6c <__udivmoddi4+0x2b0>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4461      	add	r1, ip
 8000f14:	1b49      	subs	r1, r1, r5
 8000f16:	b292      	uxth	r2, r2
 8000f18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000f20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f24:	fb05 f10e 	mul.w	r1, r5, lr
 8000f28:	4291      	cmp	r1, r2
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x282>
 8000f2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000f30:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f34:	d216      	bcs.n	8000f64 <__udivmoddi4+0x2a8>
 8000f36:	4291      	cmp	r1, r2
 8000f38:	d914      	bls.n	8000f64 <__udivmoddi4+0x2a8>
 8000f3a:	3d02      	subs	r5, #2
 8000f3c:	4462      	add	r2, ip
 8000f3e:	1a52      	subs	r2, r2, r1
 8000f40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f44:	e738      	b.n	8000db8 <__udivmoddi4+0xfc>
 8000f46:	4631      	mov	r1, r6
 8000f48:	4630      	mov	r0, r6
 8000f4a:	e708      	b.n	8000d5e <__udivmoddi4+0xa2>
 8000f4c:	4639      	mov	r1, r7
 8000f4e:	e6e6      	b.n	8000d1e <__udivmoddi4+0x62>
 8000f50:	4610      	mov	r0, r2
 8000f52:	e6fb      	b.n	8000d4c <__udivmoddi4+0x90>
 8000f54:	4548      	cmp	r0, r9
 8000f56:	d2a9      	bcs.n	8000eac <__udivmoddi4+0x1f0>
 8000f58:	ebb9 0802 	subs.w	r8, r9, r2
 8000f5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f60:	3b01      	subs	r3, #1
 8000f62:	e7a3      	b.n	8000eac <__udivmoddi4+0x1f0>
 8000f64:	4645      	mov	r5, r8
 8000f66:	e7ea      	b.n	8000f3e <__udivmoddi4+0x282>
 8000f68:	462b      	mov	r3, r5
 8000f6a:	e794      	b.n	8000e96 <__udivmoddi4+0x1da>
 8000f6c:	4640      	mov	r0, r8
 8000f6e:	e7d1      	b.n	8000f14 <__udivmoddi4+0x258>
 8000f70:	46d0      	mov	r8, sl
 8000f72:	e77b      	b.n	8000e6c <__udivmoddi4+0x1b0>
 8000f74:	3d02      	subs	r5, #2
 8000f76:	4462      	add	r2, ip
 8000f78:	e732      	b.n	8000de0 <__udivmoddi4+0x124>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e70a      	b.n	8000d94 <__udivmoddi4+0xd8>
 8000f7e:	4464      	add	r4, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e742      	b.n	8000e0a <__udivmoddi4+0x14e>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f000 fa47 	bl	8001424 <null_ptr_check>
 8000f96:	4603      	mov	r3, r0
 8000f98:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 8000f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d117      	bne.n	8000fd2 <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	20d0      	movs	r0, #208	; 0xd0
 8000faa:	f000 f818 	bl	8000fde <bmp2_get_regs>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 8000fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10b      	bne.n	8000fd2 <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b58      	cmp	r3, #88	; 0x58
 8000fc0:	d105      	bne.n	8000fce <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 fa79 	bl	80014ba <get_calib_param>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	73fb      	strb	r3, [r7, #15]
 8000fcc:	e001      	b.n	8000fd2 <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 8000fce:	23fc      	movs	r3, #252	; 0xfc
 8000fd0:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8000fde:	b590      	push	{r4, r7, lr}
 8000fe0:	b087      	sub	sp, #28
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	603b      	str	r3, [r7, #0]
 8000fea:	4603      	mov	r3, r0
 8000fec:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000fee:	6838      	ldr	r0, [r7, #0]
 8000ff0:	f000 fa18 	bl	8001424 <null_ptr_check>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 8000ff8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d11e      	bne.n	800103e <bmp2_get_regs+0x60>
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d01b      	beq.n	800103e <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	785b      	ldrb	r3, [r3, #1]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d103      	bne.n	8001016 <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001014:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	68dc      	ldr	r4, [r3, #12]
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	7bf8      	ldrb	r0, [r7, #15]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	68b9      	ldr	r1, [r7, #8]
 8001024:	47a0      	blx	r4
 8001026:	4603      	mov	r3, r0
 8001028:	461a      	mov	r2, r3
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d004      	beq.n	8001042 <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 8001038:	23fe      	movs	r3, #254	; 0xfe
 800103a:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 800103c:	e001      	b.n	8001042 <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800103e:	23ff      	movs	r3, #255	; 0xff
 8001040:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001042:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001046:	4618      	mov	r0, r3
 8001048:	371c      	adds	r7, #28
 800104a:	46bd      	mov	sp, r7
 800104c:	bd90      	pop	{r4, r7, pc}

0800104e <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 800104e:	b590      	push	{r4, r7, lr}
 8001050:	b08b      	sub	sp, #44	; 0x2c
 8001052:	af00      	add	r7, sp, #0
 8001054:	60f8      	str	r0, [r7, #12]
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
 800105a:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b04      	cmp	r3, #4
 8001060:	d901      	bls.n	8001066 <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 8001062:	2304      	movs	r3, #4
 8001064:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 8001066:	6838      	ldr	r0, [r7, #0]
 8001068:	f000 f9dc 	bl	8001424 <null_ptr_check>
 800106c:	4603      	mov	r3, r0
 800106e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001072:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001076:	2b00      	cmp	r3, #0
 8001078:	d150      	bne.n	800111c <bmp2_set_regs+0xce>
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d04d      	beq.n	800111c <bmp2_set_regs+0xce>
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d04a      	beq.n	800111c <bmp2_set_regs+0xce>
    {
        if (len > 0)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d043      	beq.n	8001114 <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	785b      	ldrb	r3, [r3, #1]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d114      	bne.n	80010c4 <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800109a:	2300      	movs	r3, #0
 800109c:	77fb      	strb	r3, [r7, #31]
 800109e:	e00d      	b.n	80010bc <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 80010a0:	7ffb      	ldrb	r3, [r7, #31]
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	4413      	add	r3, r2
 80010a6:	781a      	ldrb	r2, [r3, #0]
 80010a8:	7ffb      	ldrb	r3, [r7, #31]
 80010aa:	68f9      	ldr	r1, [r7, #12]
 80010ac:	440b      	add	r3, r1
 80010ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80010b6:	7ffb      	ldrb	r3, [r7, #31]
 80010b8:	3301      	adds	r3, #1
 80010ba:	77fb      	strb	r3, [r7, #31]
 80010bc:	7ffb      	ldrb	r3, [r7, #31]
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d8ed      	bhi.n	80010a0 <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d90b      	bls.n	80010e2 <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 80010ca:	f107 0114 	add.w	r1, r7, #20
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68ba      	ldr	r2, [r7, #8]
 80010d2:	68f8      	ldr	r0, [r7, #12]
 80010d4:	f000 f9c6 	bl	8001464 <interleave_data>
                temp_len = ((len * 2) - 1);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	3b01      	subs	r3, #1
 80010de:	623b      	str	r3, [r7, #32]
 80010e0:	e001      	b.n	80010e6 <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	691c      	ldr	r4, [r3, #16]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	7818      	ldrb	r0, [r3, #0]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f107 0114 	add.w	r1, r7, #20
 80010f6:	6a3a      	ldr	r2, [r7, #32]
 80010f8:	47a0      	blx	r4
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d00b      	beq.n	8001124 <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 800110c:	23fe      	movs	r3, #254	; 0xfe
 800110e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 8001112:	e007      	b.n	8001124 <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 8001114:	23fd      	movs	r3, #253	; 0xfd
 8001116:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len > 0)
 800111a:	e003      	b.n	8001124 <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800111c:	23ff      	movs	r3, #255	; 0xff
 800111e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001122:	e000      	b.n	8001126 <bmp2_set_regs+0xd8>
        if (len > 0)
 8001124:	bf00      	nop
    }

    return rslt;
 8001126:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800112a:	4618      	mov	r0, r3
 800112c:	372c      	adds	r7, #44	; 0x2c
 800112e:	46bd      	mov	sp, r7
 8001130:	bd90      	pop	{r4, r7, pc}

08001132 <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b084      	sub	sp, #16
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 800113a:	23e0      	movs	r3, #224	; 0xe0
 800113c:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 800113e:	23b6      	movs	r3, #182	; 0xb6
 8001140:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001142:	f107 010d 	add.w	r1, r7, #13
 8001146:	f107 000e 	add.w	r0, r7, #14
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2201      	movs	r2, #1
 800114e:	f7ff ff7e 	bl	800104e <bmp2_set_regs>
 8001152:	4603      	mov	r3, r0
 8001154:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8001156:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b084      	sub	sp, #16
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800116c:	2300      	movs	r3, #0
 800116e:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d02d      	beq.n	80011d2 <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8001176:	f107 010c 	add.w	r1, r7, #12
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	2202      	movs	r2, #2
 800117e:	20f4      	movs	r0, #244	; 0xf4
 8001180:	f7ff ff2d 	bl	8000fde <bmp2_get_regs>
 8001184:	4603      	mov	r3, r0
 8001186:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001188:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d122      	bne.n	80011d6 <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 8001190:	7b3b      	ldrb	r3, [r7, #12]
 8001192:	095b      	lsrs	r3, r3, #5
 8001194:	b2da      	uxtb	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 800119a:	7b3b      	ldrb	r3, [r7, #12]
 800119c:	109b      	asrs	r3, r3, #2
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	f003 0307 	and.w	r3, r3, #7
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 80011aa:	7b7b      	ldrb	r3, [r7, #13]
 80011ac:	095b      	lsrs	r3, r3, #5
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 80011b4:	7b7b      	ldrb	r3, [r7, #13]
 80011b6:	109b      	asrs	r3, r3, #2
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 80011c4:	7b7b      	ldrb	r3, [r7, #13]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	715a      	strb	r2, [r3, #5]
 80011d0:	e001      	b.n	80011d6 <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80011d2:	23ff      	movs	r3, #255	; 0xff
 80011d4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80011d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	2000      	movs	r0, #0
 80011f2:	f000 f9fd 	bl	80015f0 <conf_sensor>
 80011f6:	4603      	mov	r3, r0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d01b      	beq.n	8001248 <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 8001210:	f107 010e 	add.w	r1, r7, #14
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	2201      	movs	r2, #1
 8001218:	20f3      	movs	r0, #243	; 0xf3
 800121a:	f7ff fee0 	bl	8000fde <bmp2_get_regs>
 800121e:	4603      	mov	r3, r0
 8001220:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d110      	bne.n	800124c <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 800122a:	7bbb      	ldrb	r3, [r7, #14]
 800122c:	10db      	asrs	r3, r3, #3
 800122e:	b2db      	uxtb	r3, r3
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	b2da      	uxtb	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 800123a:	7bbb      	ldrb	r3, [r7, #14]
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	b2da      	uxtb	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	705a      	strb	r2, [r3, #1]
 8001246:	e001      	b.n	800124c <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001248:	23ff      	movs	r3, #255	; 0xff
 800124a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800124c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
 8001264:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 8001266:	7bfb      	ldrb	r3, [r7, #15]
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	68b9      	ldr	r1, [r7, #8]
 800126c:	4618      	mov	r0, r3
 800126e:	f000 f9bf 	bl	80015f0 <conf_sensor>
 8001272:	4603      	mov	r3, r0
 8001274:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8001276:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	2300      	movs	r3, #0
 8001292:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 8001294:	f107 0308 	add.w	r3, r7, #8
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d024      	beq.n	80012ee <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 80012a4:	f107 0110 	add.w	r1, r7, #16
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	2206      	movs	r2, #6
 80012ac:	20f7      	movs	r0, #247	; 0xf7
 80012ae:	f7ff fe96 	bl	8000fde <bmp2_get_regs>
 80012b2:	4603      	mov	r3, r0
 80012b4:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80012b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d119      	bne.n	80012f2 <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 80012be:	f107 0208 	add.w	r2, r7, #8
 80012c2:	f107 0310 	add.w	r3, r7, #16
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 fab9 	bl	8001840 <parse_sensor_data>
 80012ce:	4603      	mov	r3, r0
 80012d0:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 80012d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d10b      	bne.n	80012f2 <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 80012da:	f107 0308 	add.w	r3, r7, #8
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	6879      	ldr	r1, [r7, #4]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 f80b 	bl	80012fe <bmp2_compensate_data>
 80012e8:	4603      	mov	r3, r0
 80012ea:	75fb      	strb	r3, [r7, #23]
 80012ec:	e001      	b.n	80012f2 <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80012ee:	23ff      	movs	r3, #255	; 0xff
 80012f0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80012f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af00      	add	r7, sp, #0
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 f88a 	bl	8001424 <null_ptr_check>
 8001310:	4603      	mov	r3, r0
 8001312:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 8001314:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d129      	bne.n	8001370 <bmp2_compensate_data+0x72>
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d026      	beq.n	8001370 <bmp2_compensate_data+0x72>
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d023      	beq.n	8001370 <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8001328:	68b9      	ldr	r1, [r7, #8]
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	f04f 0300 	mov.w	r3, #0
 8001332:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 8001336:	68b9      	ldr	r1, [r7, #8]
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	f04f 0300 	mov.w	r3, #0
 8001340:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	3308      	adds	r3, #8
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	68f9      	ldr	r1, [r7, #12]
 800134c:	4618      	mov	r0, r3
 800134e:	f000 fabb 	bl	80018c8 <compensate_temperature>
 8001352:	4603      	mov	r3, r0
 8001354:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001356:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10a      	bne.n	8001374 <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	68f9      	ldr	r1, [r7, #12]
 8001364:	4618      	mov	r0, r3
 8001366:	f000 fba7 	bl	8001ab8 <compensate_pressure>
 800136a:	4603      	mov	r3, r0
 800136c:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 800136e:	e001      	b.n	8001374 <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001370:	23ff      	movs	r3, #255	; 0xff
 8001372:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001374:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 8001380:	b5b0      	push	{r4, r5, r7, lr}
 8001382:	b092      	sub	sp, #72	; 0x48
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 800138c:	4b23      	ldr	r3, [pc, #140]	; (800141c <bmp2_compute_meas_time+0x9c>)
 800138e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001392:	461d      	mov	r5, r3
 8001394:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001398:	682b      	ldr	r3, [r5, #0]
 800139a:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 800139c:	4b20      	ldr	r3, [pc, #128]	; (8001420 <bmp2_compute_meas_time+0xa0>)
 800139e:	f107 0410 	add.w	r4, r7, #16
 80013a2:	461d      	mov	r5, r3
 80013a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80013ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 f837 	bl	8001424 <null_ptr_check>
 80013b6:	4603      	mov	r3, r0
 80013b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 80013bc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d122      	bne.n	800140a <bmp2_compute_meas_time+0x8a>
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d01f      	beq.n	800140a <bmp2_compute_meas_time+0x8a>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	7e1b      	ldrb	r3, [r3, #24]
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d111      	bne.n	80013f6 <bmp2_compute_meas_time+0x76>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	78db      	ldrb	r3, [r3, #3]
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	3348      	adds	r3, #72	; 0x48
 80013da:	443b      	add	r3, r7
 80013dc:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	789b      	ldrb	r3, [r3, #2]
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	3348      	adds	r3, #72	; 0x48
 80013e8:	443b      	add	r3, r7
 80013ea:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80013ee:	441a      	add	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80013f4:	e00c      	b.n	8001410 <bmp2_compute_meas_time+0x90>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	78db      	ldrb	r3, [r3, #3]
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	3348      	adds	r3, #72	; 0x48
 80013fe:	443b      	add	r3, r7
 8001400:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8001408:	e002      	b.n	8001410 <bmp2_compute_meas_time+0x90>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800140a:	23ff      	movs	r3, #255	; 0xff
 800140c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return rslt;
 8001410:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8001414:	4618      	mov	r0, r3
 8001416:	3748      	adds	r7, #72	; 0x48
 8001418:	46bd      	mov	sp, r7
 800141a:	bdb0      	pop	{r4, r5, r7, pc}
 800141c:	0800ada4 	.word	0x0800ada4
 8001420:	0800adb8 	.word	0x0800adb8

08001424 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d00b      	beq.n	800144a <null_ptr_check+0x26>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d007      	beq.n	800144a <null_ptr_check+0x26>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <null_ptr_check+0x26>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d102      	bne.n	8001450 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 800144a:	23ff      	movs	r3, #255	; 0xff
 800144c:	73fb      	strb	r3, [r7, #15]
 800144e:	e001      	b.n	8001454 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 8001450:	2300      	movs	r3, #0
 8001452:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001454:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8001464:	b480      	push	{r7}
 8001466:	b087      	sub	sp, #28
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8001472:	2301      	movs	r3, #1
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	e015      	b.n	80014a4 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	441a      	add	r2, r3
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	3b01      	subs	r3, #1
 8001484:	68b9      	ldr	r1, [r7, #8]
 8001486:	440b      	add	r3, r1
 8001488:	7812      	ldrb	r2, [r2, #0]
 800148a:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	441a      	add	r2, r3
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	68b9      	ldr	r1, [r7, #8]
 8001498:	440b      	add	r3, r1
 800149a:	7812      	ldrb	r2, [r2, #0]
 800149c:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	3301      	adds	r3, #1
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	697a      	ldr	r2, [r7, #20]
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d3e5      	bcc.n	8001478 <interleave_data+0x14>
    }
}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	371c      	adds	r7, #28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b08a      	sub	sp, #40	; 0x28
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	f107 0310 	add.w	r3, r7, #16
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
 80014d4:	611a      	str	r2, [r3, #16]
 80014d6:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 80014d8:	f107 010c 	add.w	r1, r7, #12
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2219      	movs	r2, #25
 80014e0:	2088      	movs	r0, #136	; 0x88
 80014e2:	f7ff fd7c 	bl	8000fde <bmp2_get_regs>
 80014e6:	4603      	mov	r3, r0
 80014e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (rslt == BMP2_OK)
 80014ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d177      	bne.n	80015e4 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 80014f4:	7b7b      	ldrb	r3, [r7, #13]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	b21a      	sxth	r2, r3
 80014fa:	7b3b      	ldrb	r3, [r7, #12]
 80014fc:	b21b      	sxth	r3, r3
 80014fe:	4313      	orrs	r3, r2
 8001500:	b21b      	sxth	r3, r3
 8001502:	b29a      	uxth	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	b21a      	sxth	r2, r3
 800150e:	7bbb      	ldrb	r3, [r7, #14]
 8001510:	b21b      	sxth	r3, r3
 8001512:	4313      	orrs	r3, r2
 8001514:	b21a      	sxth	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 800151a:	7c7b      	ldrb	r3, [r7, #17]
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	b21a      	sxth	r2, r3
 8001520:	7c3b      	ldrb	r3, [r7, #16]
 8001522:	b21b      	sxth	r3, r3
 8001524:	4313      	orrs	r3, r2
 8001526:	b21a      	sxth	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 800152c:	7cfb      	ldrb	r3, [r7, #19]
 800152e:	021b      	lsls	r3, r3, #8
 8001530:	b21a      	sxth	r2, r3
 8001532:	7cbb      	ldrb	r3, [r7, #18]
 8001534:	b21b      	sxth	r3, r3
 8001536:	4313      	orrs	r3, r2
 8001538:	b21b      	sxth	r3, r3
 800153a:	b29a      	uxth	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	845a      	strh	r2, [r3, #34]	; 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 8001540:	7d7b      	ldrb	r3, [r7, #21]
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	b21a      	sxth	r2, r3
 8001546:	7d3b      	ldrb	r3, [r7, #20]
 8001548:	b21b      	sxth	r3, r3
 800154a:	4313      	orrs	r3, r2
 800154c:	b21a      	sxth	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	849a      	strh	r2, [r3, #36]	; 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 8001552:	7dfb      	ldrb	r3, [r7, #23]
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	b21a      	sxth	r2, r3
 8001558:	7dbb      	ldrb	r3, [r7, #22]
 800155a:	b21b      	sxth	r3, r3
 800155c:	4313      	orrs	r3, r2
 800155e:	b21a      	sxth	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	84da      	strh	r2, [r3, #38]	; 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 8001564:	7e7b      	ldrb	r3, [r7, #25]
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b21a      	sxth	r2, r3
 800156a:	7e3b      	ldrb	r3, [r7, #24]
 800156c:	b21b      	sxth	r3, r3
 800156e:	4313      	orrs	r3, r2
 8001570:	b21a      	sxth	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	851a      	strh	r2, [r3, #40]	; 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 8001576:	7efb      	ldrb	r3, [r7, #27]
 8001578:	021b      	lsls	r3, r3, #8
 800157a:	b21a      	sxth	r2, r3
 800157c:	7ebb      	ldrb	r3, [r7, #26]
 800157e:	b21b      	sxth	r3, r3
 8001580:	4313      	orrs	r3, r2
 8001582:	b21a      	sxth	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	855a      	strh	r2, [r3, #42]	; 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 8001588:	7f7b      	ldrb	r3, [r7, #29]
 800158a:	021b      	lsls	r3, r3, #8
 800158c:	b21a      	sxth	r2, r3
 800158e:	7f3b      	ldrb	r3, [r7, #28]
 8001590:	b21b      	sxth	r3, r3
 8001592:	4313      	orrs	r3, r2
 8001594:	b21a      	sxth	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	859a      	strh	r2, [r3, #44]	; 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 800159a:	7ffb      	ldrb	r3, [r7, #31]
 800159c:	021b      	lsls	r3, r3, #8
 800159e:	b21a      	sxth	r2, r3
 80015a0:	7fbb      	ldrb	r3, [r7, #30]
 80015a2:	b21b      	sxth	r3, r3
 80015a4:	4313      	orrs	r3, r2
 80015a6:	b21a      	sxth	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	85da      	strh	r2, [r3, #46]	; 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 80015ac:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	b21a      	sxth	r2, r3
 80015b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	4313      	orrs	r3, r2
 80015bc:	b21a      	sxth	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	861a      	strh	r2, [r3, #48]	; 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 80015c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015c6:	021b      	lsls	r3, r3, #8
 80015c8:	b21a      	sxth	r2, r3
 80015ca:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80015ce:	b21b      	sxth	r3, r3
 80015d0:	4313      	orrs	r3, r2
 80015d2:	b21a      	sxth	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	865a      	strh	r2, [r3, #50]	; 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 80015d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015dc:	b25a      	sxtb	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    return rslt;
 80015e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3728      	adds	r7, #40	; 0x28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
 80015fc:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 80015fe:	2300      	movs	r3, #0
 8001600:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 8001602:	f24f 53f4 	movw	r3, #62964	; 0xf5f4
 8001606:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d074      	beq.n	80016f8 <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 800160e:	f107 0114 	add.w	r1, r7, #20
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2202      	movs	r2, #2
 8001616:	20f4      	movs	r0, #244	; 0xf4
 8001618:	f7ff fce1 	bl	8000fde <bmp2_get_regs>
 800161c:	4603      	mov	r3, r0
 800161e:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001620:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d169      	bne.n	80016fc <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff fd82 	bl	8001132 <bmp2_soft_reset>
 800162e:	4603      	mov	r3, r0
 8001630:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8001632:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d160      	bne.n	80016fc <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	68b9      	ldr	r1, [r7, #8]
 8001640:	4618      	mov	r0, r3
 8001642:	f000 f861 	bl	8001708 <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 8001646:	7d7b      	ldrb	r3, [r7, #21]
 8001648:	b25b      	sxtb	r3, r3
 800164a:	f003 031f 	and.w	r3, r3, #31
 800164e:	b25a      	sxtb	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	789b      	ldrb	r3, [r3, #2]
 8001654:	015b      	lsls	r3, r3, #5
 8001656:	b25b      	sxtb	r3, r3
 8001658:	4313      	orrs	r3, r2
 800165a:	b25b      	sxtb	r3, r3
 800165c:	b2db      	uxtb	r3, r3
 800165e:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 8001660:	7d7b      	ldrb	r3, [r7, #21]
 8001662:	b25b      	sxtb	r3, r3
 8001664:	f023 031c 	bic.w	r3, r3, #28
 8001668:	b25a      	sxtb	r2, r3
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	791b      	ldrb	r3, [r3, #4]
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	b25b      	sxtb	r3, r3
 8001672:	f003 031c 	and.w	r3, r3, #28
 8001676:	b25b      	sxtb	r3, r3
 8001678:	4313      	orrs	r3, r2
 800167a:	b25b      	sxtb	r3, r3
 800167c:	b2db      	uxtb	r3, r3
 800167e:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 8001680:	7d7b      	ldrb	r3, [r7, #21]
 8001682:	b25b      	sxtb	r3, r3
 8001684:	f023 0301 	bic.w	r3, r3, #1
 8001688:	b25a      	sxtb	r2, r3
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	795b      	ldrb	r3, [r3, #5]
 800168e:	b25b      	sxtb	r3, r3
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	b25b      	sxtb	r3, r3
 8001696:	4313      	orrs	r3, r2
 8001698:	b25b      	sxtb	r3, r3
 800169a:	b2db      	uxtb	r3, r3
 800169c:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 800169e:	f107 0114 	add.w	r1, r7, #20
 80016a2:	f107 0010 	add.w	r0, r7, #16
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2202      	movs	r2, #2
 80016aa:	f7ff fcd0 	bl	800104e <bmp2_set_regs>
 80016ae:	4603      	mov	r3, r0
 80016b0:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 80016b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d120      	bne.n	80016fc <conf_sensor+0x10c>
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d01d      	beq.n	80016fc <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	7bfa      	ldrb	r2, [r7, #15]
 80016c4:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 80016c6:	7d3b      	ldrb	r3, [r7, #20]
 80016c8:	b25b      	sxtb	r3, r3
 80016ca:	f023 0303 	bic.w	r3, r3, #3
 80016ce:	b25a      	sxtb	r2, r3
 80016d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	b25b      	sxtb	r3, r3
 80016da:	4313      	orrs	r3, r2
 80016dc:	b25b      	sxtb	r3, r3
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 80016e2:	f107 0114 	add.w	r1, r7, #20
 80016e6:	f107 0010 	add.w	r0, r7, #16
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f7ff fcae 	bl	800104e <bmp2_set_regs>
 80016f2:	4603      	mov	r3, r0
 80016f4:	75fb      	strb	r3, [r7, #23]
 80016f6:	e001      	b.n	80016fc <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80016f8:	23ff      	movs	r3, #255	; 0xff
 80016fa:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80016fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	78db      	ldrb	r3, [r3, #3]
 8001716:	2b04      	cmp	r3, #4
 8001718:	f200 808b 	bhi.w	8001832 <set_os_mode+0x12a>
 800171c:	a201      	add	r2, pc, #4	; (adr r2, 8001724 <set_os_mode+0x1c>)
 800171e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001722:	bf00      	nop
 8001724:	08001739 	.word	0x08001739
 8001728:	0800176b 	.word	0x0800176b
 800172c:	0800179d 	.word	0x0800179d
 8001730:	080017cf 	.word	0x080017cf
 8001734:	08001801 	.word	0x08001801
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	b25b      	sxtb	r3, r3
 800173e:	f003 031f 	and.w	r3, r3, #31
 8001742:	b25b      	sxtb	r3, r3
 8001744:	f043 0320 	orr.w	r3, r3, #32
 8001748:	b25b      	sxtb	r3, r3
 800174a:	b2da      	uxtb	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	b25b      	sxtb	r3, r3
 8001756:	f023 031c 	bic.w	r3, r3, #28
 800175a:	b25b      	sxtb	r3, r3
 800175c:	f043 0304 	orr.w	r3, r3, #4
 8001760:	b25b      	sxtb	r3, r3
 8001762:	b2da      	uxtb	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	701a      	strb	r2, [r3, #0]
            break;
 8001768:	e064      	b.n	8001834 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	b25b      	sxtb	r3, r3
 8001770:	f003 031f 	and.w	r3, r3, #31
 8001774:	b25b      	sxtb	r3, r3
 8001776:	f043 0320 	orr.w	r3, r3, #32
 800177a:	b25b      	sxtb	r3, r3
 800177c:	b2da      	uxtb	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	b25b      	sxtb	r3, r3
 8001788:	f023 031c 	bic.w	r3, r3, #28
 800178c:	b25b      	sxtb	r3, r3
 800178e:	f043 0308 	orr.w	r3, r3, #8
 8001792:	b25b      	sxtb	r3, r3
 8001794:	b2da      	uxtb	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	701a      	strb	r2, [r3, #0]
            break;
 800179a:	e04b      	b.n	8001834 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	b25b      	sxtb	r3, r3
 80017a2:	f003 031f 	and.w	r3, r3, #31
 80017a6:	b25b      	sxtb	r3, r3
 80017a8:	f043 0320 	orr.w	r3, r3, #32
 80017ac:	b25b      	sxtb	r3, r3
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	b25b      	sxtb	r3, r3
 80017ba:	f023 031c 	bic.w	r3, r3, #28
 80017be:	b25b      	sxtb	r3, r3
 80017c0:	f043 030c 	orr.w	r3, r3, #12
 80017c4:	b25b      	sxtb	r3, r3
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	701a      	strb	r2, [r3, #0]
            break;
 80017cc:	e032      	b.n	8001834 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	b25b      	sxtb	r3, r3
 80017d4:	f003 031f 	and.w	r3, r3, #31
 80017d8:	b25b      	sxtb	r3, r3
 80017da:	f043 0320 	orr.w	r3, r3, #32
 80017de:	b25b      	sxtb	r3, r3
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	b25b      	sxtb	r3, r3
 80017ec:	f023 031c 	bic.w	r3, r3, #28
 80017f0:	b25b      	sxtb	r3, r3
 80017f2:	f043 0310 	orr.w	r3, r3, #16
 80017f6:	b25b      	sxtb	r3, r3
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	701a      	strb	r2, [r3, #0]
            break;
 80017fe:	e019      	b.n	8001834 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	b25b      	sxtb	r3, r3
 8001806:	f003 031f 	and.w	r3, r3, #31
 800180a:	b25b      	sxtb	r3, r3
 800180c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001810:	b25b      	sxtb	r3, r3
 8001812:	b2da      	uxtb	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b25b      	sxtb	r3, r3
 800181e:	f023 031c 	bic.w	r3, r3, #28
 8001822:	b25b      	sxtb	r3, r3
 8001824:	f043 0314 	orr.w	r3, r3, #20
 8001828:	b25b      	sxtb	r3, r3
 800182a:	b2da      	uxtb	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	701a      	strb	r2, [r3, #0]
            break;
 8001830:	e000      	b.n	8001834 <set_os_mode+0x12c>
        default:
            break;
 8001832:	bf00      	nop
    }
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	031b      	lsls	r3, r3, #12
 8001850:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3301      	adds	r3, #1
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	011b      	lsls	r3, r3, #4
 800185a:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3302      	adds	r3, #2
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	091b      	lsrs	r3, r3, #4
 8001864:	b2db      	uxtb	r3, r3
 8001866:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	431a      	orrs	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	431a      	orrs	r2, r3
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	3303      	adds	r3, #3
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	031b      	lsls	r3, r3, #12
 800187e:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3304      	adds	r3, #4
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	011b      	lsls	r3, r3, #4
 8001888:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3305      	adds	r3, #5
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	091b      	lsrs	r3, r3, #4
 8001892:	b2db      	uxtb	r3, r3
 8001894:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	431a      	orrs	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4313      	orrs	r3, r2
 80018a0:	461a      	mov	r2, r3
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	4619      	mov	r1, r3
 80018b0:	4610      	mov	r0, r2
 80018b2:	f000 fae5 	bl	8001e80 <st_check_boundaries>
 80018b6:	4603      	mov	r3, r0
 80018b8:	72fb      	strb	r3, [r7, #11]

    return rslt;
 80018ba:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 80018c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018cc:	b08c      	sub	sp, #48	; 0x30
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7fe fe37 	bl	8000554 <__aeabi_i2d>
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	4b6c      	ldr	r3, [pc, #432]	; (8001a9c <compensate_temperature+0x1d4>)
 80018ec:	f7fe ffc6 	bl	800087c <__aeabi_ddiv>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4614      	mov	r4, r2
 80018f6:	461d      	mov	r5, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	8b9b      	ldrh	r3, [r3, #28]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe fe19 	bl	8000534 <__aeabi_ui2d>
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	4b66      	ldr	r3, [pc, #408]	; (8001aa0 <compensate_temperature+0x1d8>)
 8001908:	f7fe ffb8 	bl	800087c <__aeabi_ddiv>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4620      	mov	r0, r4
 8001912:	4629      	mov	r1, r5
 8001914:	f7fe fcd0 	bl	80002b8 <__aeabi_dsub>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4614      	mov	r4, r2
 800191e:	461d      	mov	r5, r3
           ((double) dev->calib_param.dig_t2);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fe14 	bl	8000554 <__aeabi_i2d>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001930:	4620      	mov	r0, r4
 8001932:	4629      	mov	r1, r5
 8001934:	f7fe fe78 	bl	8000628 <__aeabi_dmul>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fe05 	bl	8000554 <__aeabi_i2d>
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001952:	f7fe ff93 	bl	800087c <__aeabi_ddiv>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4614      	mov	r4, r2
 800195c:	461d      	mov	r5, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	8b9b      	ldrh	r3, [r3, #28]
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe fde6 	bl	8000534 <__aeabi_ui2d>
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	4b4d      	ldr	r3, [pc, #308]	; (8001aa4 <compensate_temperature+0x1dc>)
 800196e:	f7fe ff85 	bl	800087c <__aeabi_ddiv>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4620      	mov	r0, r4
 8001978:	4629      	mov	r1, r5
 800197a:	f7fe fc9d 	bl	80002b8 <__aeabi_dsub>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4614      	mov	r4, r2
 8001984:	461d      	mov	r5, r3
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe fde2 	bl	8000554 <__aeabi_i2d>
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001998:	f7fe ff70 	bl	800087c <__aeabi_ddiv>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4690      	mov	r8, r2
 80019a2:	4699      	mov	r9, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	8b9b      	ldrh	r3, [r3, #28]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7fe fdc3 	bl	8000534 <__aeabi_ui2d>
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	4b3c      	ldr	r3, [pc, #240]	; (8001aa4 <compensate_temperature+0x1dc>)
 80019b4:	f7fe ff62 	bl	800087c <__aeabi_ddiv>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4640      	mov	r0, r8
 80019be:	4649      	mov	r1, r9
 80019c0:	f7fe fc7a 	bl	80002b8 <__aeabi_dsub>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80019c8:	4620      	mov	r0, r4
 80019ca:	4629      	mov	r1, r5
 80019cc:	f7fe fe2c 	bl	8000628 <__aeabi_dmul>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4614      	mov	r4, r2
 80019d6:	461d      	mov	r5, r3
        ((double) dev->calib_param.dig_t3);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe fdb8 	bl	8000554 <__aeabi_i2d>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
    var2 =
 80019e8:	4620      	mov	r0, r4
 80019ea:	4629      	mov	r1, r5
 80019ec:	f7fe fe1c 	bl	8000628 <__aeabi_dmul>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 80019f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a00:	f7fe fc5c 	bl	80002bc <__adddf3>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f7ff f8a6 	bl	8000b5c <__aeabi_d2iz>
 8001a10:	4602      	mov	r2, r0
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	639a      	str	r2, [r3, #56]	; 0x38
    temperature = (var1 + var2) / 5120.0;
 8001a16:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a1a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a1e:	f7fe fc4d 	bl	80002bc <__adddf3>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4610      	mov	r0, r2
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	4b1e      	ldr	r3, [pc, #120]	; (8001aa8 <compensate_temperature+0x1e0>)
 8001a30:	f7fe ff24 	bl	800087c <__aeabi_ddiv>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <compensate_temperature+0x1e4>)
 8001a42:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a46:	f7ff f861 	bl	8000b0c <__aeabi_dcmplt>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d007      	beq.n	8001a60 <compensate_temperature+0x198>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	4b15      	ldr	r3, [pc, #84]	; (8001aac <compensate_temperature+0x1e4>)
 8001a56:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <compensate_temperature+0x1e8>)
 8001a66:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a6a:	f7ff f86d 	bl	8000b48 <__aeabi_dcmpgt>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d007      	beq.n	8001a84 <compensate_temperature+0x1bc>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <compensate_temperature+0x1e8>)
 8001a7a:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*comp_temperature) = temperature;
 8001a84:	68f9      	ldr	r1, [r7, #12]
 8001a86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a8a:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8001a8e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3730      	adds	r7, #48	; 0x30
 8001a96:	46bd      	mov	sp, r7
 8001a98:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a9c:	40d00000 	.word	0x40d00000
 8001aa0:	40900000 	.word	0x40900000
 8001aa4:	40c00000 	.word	0x40c00000
 8001aa8:	40b40000 	.word	0x40b40000
 8001aac:	c0440000 	.word	0xc0440000
 8001ab0:	40554000 	.word	0x40554000
 8001ab4:	00000000 	.word	0x00000000

08001ab8 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001ab8:	b5b0      	push	{r4, r5, r7, lr}
 8001aba:	b08c      	sub	sp, #48	; 0x30
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double var1, var2;
    double pressure = 0.0;
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fd3a 	bl	8000554 <__aeabi_i2d>
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ae8:	f7fe fec8 	bl	800087c <__aeabi_ddiv>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	4bcb      	ldr	r3, [pc, #812]	; (8001e28 <compensate_pressure+0x370>)
 8001afa:	f7fe fbdd 	bl	80002b8 <__aeabi_dsub>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001b06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b0e:	f7fe fd8b 	bl	8000628 <__aeabi_dmul>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4614      	mov	r4, r2
 8001b18:	461d      	mov	r5, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fd17 	bl	8000554 <__aeabi_i2d>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	4629      	mov	r1, r5
 8001b2e:	f7fe fd7b 	bl	8000628 <__aeabi_dmul>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4610      	mov	r0, r2
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	4bbb      	ldr	r3, [pc, #748]	; (8001e2c <compensate_pressure+0x374>)
 8001b40:	f7fe fe9c 	bl	800087c <__aeabi_ddiv>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fcfe 	bl	8000554 <__aeabi_i2d>
 8001b58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b5c:	f7fe fd64 	bl	8000628 <__aeabi_dmul>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	f7fe fba6 	bl	80002bc <__adddf3>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b78:	f7fe fba0 	bl	80002bc <__adddf3>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	4ba9      	ldr	r3, [pc, #676]	; (8001e30 <compensate_pressure+0x378>)
 8001b8a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b8e:	f7fe fe75 	bl	800087c <__aeabi_ddiv>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4614      	mov	r4, r2
 8001b98:	461d      	mov	r5, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fcd7 	bl	8000554 <__aeabi_i2d>
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	4ba2      	ldr	r3, [pc, #648]	; (8001e34 <compensate_pressure+0x37c>)
 8001bac:	f7fe fd3c 	bl	8000628 <__aeabi_dmul>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	4629      	mov	r1, r5
 8001bb8:	f7fe fb80 	bl	80002bc <__adddf3>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fcc2 	bl	8000554 <__aeabi_i2d>
 8001bd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bd4:	f7fe fd28 	bl	8000628 <__aeabi_dmul>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001be4:	f7fe fd20 	bl	8000628 <__aeabi_dmul>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	4b90      	ldr	r3, [pc, #576]	; (8001e38 <compensate_pressure+0x380>)
 8001bf6:	f7fe fe41 	bl	800087c <__aeabi_ddiv>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4614      	mov	r4, r2
 8001c00:	461d      	mov	r5, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe fca3 	bl	8000554 <__aeabi_i2d>
 8001c0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c12:	f7fe fd09 	bl	8000628 <__aeabi_dmul>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	4629      	mov	r1, r5
 8001c1e:	f7fe fb4d 	bl	80002bc <__adddf3>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	4610      	mov	r0, r2
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	4b82      	ldr	r3, [pc, #520]	; (8001e38 <compensate_pressure+0x380>)
 8001c30:	f7fe fe24 	bl	800087c <__aeabi_ddiv>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	e9c7 2306 	strd	r2, r3, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001c3c:	f04f 0200 	mov.w	r2, #0
 8001c40:	4b7a      	ldr	r3, [pc, #488]	; (8001e2c <compensate_pressure+0x374>)
 8001c42:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c46:	f7fe fe19 	bl	800087c <__aeabi_ddiv>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	4b79      	ldr	r3, [pc, #484]	; (8001e3c <compensate_pressure+0x384>)
 8001c58:	f7fe fb30 	bl	80002bc <__adddf3>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4614      	mov	r4, r2
 8001c62:	461d      	mov	r5, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fc63 	bl	8000534 <__aeabi_ui2d>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4620      	mov	r0, r4
 8001c74:	4629      	mov	r1, r5
 8001c76:	f7fe fcd7 	bl	8000628 <__aeabi_dmul>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c8e:	f7fe ff3d 	bl	8000b0c <__aeabi_dcmplt>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10b      	bne.n	8001cb0 <compensate_pressure+0x1f8>
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	f04f 0300 	mov.w	r3, #0
 8001ca0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ca4:	f7fe ff50 	bl	8000b48 <__aeabi_dcmpgt>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 80de 	beq.w	8001e6c <compensate_pressure+0x3b4>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe fc3d 	bl	8000534 <__aeabi_ui2d>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	f04f 0000 	mov.w	r0, #0
 8001cc2:	495f      	ldr	r1, [pc, #380]	; (8001e40 <compensate_pressure+0x388>)
 8001cc4:	f7fe faf8 	bl	80002b8 <__aeabi_dsub>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	e9c7 2308 	strd	r2, r3, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	4b5b      	ldr	r3, [pc, #364]	; (8001e44 <compensate_pressure+0x38c>)
 8001cd6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cda:	f7fe fdcf 	bl	800087c <__aeabi_ddiv>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ce6:	f7fe fae7 	bl	80002b8 <__aeabi_dsub>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4610      	mov	r0, r2
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	a347      	add	r3, pc, #284	; (adr r3, 8001e10 <compensate_pressure+0x358>)
 8001cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf8:	f7fe fc96 	bl	8000628 <__aeabi_dmul>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d08:	f7fe fdb8 	bl	800087c <__aeabi_ddiv>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	e9c7 2308 	strd	r2, r3, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe fc1a 	bl	8000554 <__aeabi_i2d>
 8001d20:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d24:	f7fe fc80 	bl	8000628 <__aeabi_dmul>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	4619      	mov	r1, r3
 8001d30:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d34:	f7fe fc78 	bl	8000628 <__aeabi_dmul>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	4b40      	ldr	r3, [pc, #256]	; (8001e48 <compensate_pressure+0x390>)
 8001d46:	f7fe fd99 	bl	800087c <__aeabi_ddiv>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe fbfb 	bl	8000554 <__aeabi_i2d>
 8001d5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d62:	f7fe fc61 	bl	8000628 <__aeabi_dmul>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	4b2e      	ldr	r3, [pc, #184]	; (8001e2c <compensate_pressure+0x374>)
 8001d74:	f7fe fd82 	bl	800087c <__aeabi_ddiv>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	e9c7 2304 	strd	r2, r3, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8001d80:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d84:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d88:	f7fe fa98 	bl	80002bc <__adddf3>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4614      	mov	r4, r2
 8001d92:	461d      	mov	r5, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fbda 	bl	8000554 <__aeabi_i2d>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4620      	mov	r0, r4
 8001da6:	4629      	mov	r1, r5
 8001da8:	f7fe fa88 	bl	80002bc <__adddf3>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <compensate_pressure+0x394>)
 8001dba:	f7fe fd5f 	bl	800087c <__aeabi_ddiv>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001dc6:	f7fe fa79 	bl	80002bc <__adddf3>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 8001dd2:	a311      	add	r3, pc, #68	; (adr r3, 8001e18 <compensate_pressure+0x360>)
 8001dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ddc:	f7fe fe96 	bl	8000b0c <__aeabi_dcmplt>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d007      	beq.n	8001df6 <compensate_pressure+0x33e>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 8001de6:	a30c      	add	r3, pc, #48	; (adr r3, 8001e18 <compensate_pressure+0x360>)
 8001de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dec:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 8001df0:	2303      	movs	r3, #3
 8001df2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 8001df6:	a30a      	add	r3, pc, #40	; (adr r3, 8001e20 <compensate_pressure+0x368>)
 8001df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e00:	f7fe fea2 	bl	8000b48 <__aeabi_dcmpgt>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	e022      	b.n	8001e50 <compensate_pressure+0x398>
 8001e0a:	bf00      	nop
 8001e0c:	f3af 8000 	nop.w
 8001e10:	00000000 	.word	0x00000000
 8001e14:	40b86a00 	.word	0x40b86a00
 8001e18:	00000000 	.word	0x00000000
 8001e1c:	40dd4c00 	.word	0x40dd4c00
 8001e20:	00000000 	.word	0x00000000
 8001e24:	40fadb00 	.word	0x40fadb00
 8001e28:	40ef4000 	.word	0x40ef4000
 8001e2c:	40e00000 	.word	0x40e00000
 8001e30:	40100000 	.word	0x40100000
 8001e34:	40f00000 	.word	0x40f00000
 8001e38:	41200000 	.word	0x41200000
 8001e3c:	3ff00000 	.word	0x3ff00000
 8001e40:	41300000 	.word	0x41300000
 8001e44:	40b00000 	.word	0x40b00000
 8001e48:	41e00000 	.word	0x41e00000
 8001e4c:	40300000 	.word	0x40300000
 8001e50:	d007      	beq.n	8001e62 <compensate_pressure+0x3aa>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 8001e52:	a309      	add	r3, pc, #36	; (adr r3, 8001e78 <compensate_pressure+0x3c0>)
 8001e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e58:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        (*comp_pressure) = pressure;
 8001e62:	68f9      	ldr	r1, [r7, #12]
 8001e64:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e68:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 8001e6c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3730      	adds	r7, #48	; 0x30
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bdb0      	pop	{r4, r5, r7, pc}
 8001e78:	00000000 	.word	0x00000000
 8001e7c:	40fadb00 	.word	0x40fadb00

08001e80 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	db03      	blt.n	8001e9c <st_check_boundaries+0x1c>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	4a1c      	ldr	r2, [pc, #112]	; (8001f08 <st_check_boundaries+0x88>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	dd09      	ble.n	8001eb0 <st_check_boundaries+0x30>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	db06      	blt.n	8001eb0 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a18      	ldr	r2, [pc, #96]	; (8001f08 <st_check_boundaries+0x88>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	dc02      	bgt.n	8001eb0 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 8001eaa:	23fa      	movs	r3, #250	; 0xfa
 8001eac:	73fb      	strb	r3, [r7, #15]
 8001eae:	e023      	b.n	8001ef8 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	db03      	blt.n	8001ebe <st_check_boundaries+0x3e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a13      	ldr	r2, [pc, #76]	; (8001f08 <st_check_boundaries+0x88>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	dd09      	ble.n	8001ed2 <st_check_boundaries+0x52>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	db06      	blt.n	8001ed2 <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	4a10      	ldr	r2, [pc, #64]	; (8001f08 <st_check_boundaries+0x88>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	dc02      	bgt.n	8001ed2 <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 8001ecc:	23fb      	movs	r3, #251	; 0xfb
 8001ece:	73fb      	strb	r3, [r7, #15]
 8001ed0:	e012      	b.n	8001ef8 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	db03      	blt.n	8001ee0 <st_check_boundaries+0x60>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	4a0b      	ldr	r2, [pc, #44]	; (8001f08 <st_check_boundaries+0x88>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	dd09      	ble.n	8001ef4 <st_check_boundaries+0x74>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	db03      	blt.n	8001eee <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a07      	ldr	r2, [pc, #28]	; (8001f08 <st_check_boundaries+0x88>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	dd02      	ble.n	8001ef4 <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001eee:	23f9      	movs	r3, #249	; 0xf9
 8001ef0:	73fb      	strb	r3, [r7, #15]
 8001ef2:	e001      	b.n	8001ef8 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	000ffff0 	.word	0x000ffff0

08001f0c <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff f837 	bl	8000f88 <bmp2_init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 8001f1e:	f107 0308 	add.w	r3, r7, #8
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff f91c 	bl	8001162 <bmp2_get_config>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_COEFF_8;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 8001f32:	2300      	movs	r3, #0
 8001f34:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 8001f36:	2303      	movs	r3, #3
 8001f38:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 8001f3a:	f107 0308 	add.w	r3, r7, #8
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff f94e 	bl	80011e2 <bmp2_set_config>
 8001f46:	4603      	mov	r3, r0
 8001f48:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 8001f4a:	f107 0308 	add.w	r3, r7, #8
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	4619      	mov	r1, r3
 8001f52:	2003      	movs	r0, #3
 8001f54:	f7ff f980 	bl	8001258 <bmp2_set_power_mode>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 8001f5c:	f107 0108 	add.w	r1, r7, #8
 8001f60:	f107 0310 	add.w	r3, r7, #16
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fa0a 	bl	8001380 <bmp2_compute_meas_time>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8001f70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	607a      	str	r2, [r7, #4]
 8001f86:	603b      	str	r3, [r7, #0]
 8001f88:	4603      	mov	r3, r0
 8001f8a:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001f90:	2300      	movs	r3, #0
 8001f92:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	6858      	ldr	r0, [r3, #4]
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	891b      	ldrh	r3, [r3, #8]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f003 f914 	bl	80051d0 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI , &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	6818      	ldr	r0, [r3, #0]
 8001fac:	f107 010f 	add.w	r1, r7, #15
 8001fb0:	2305      	movs	r3, #5
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f004 fef9 	bl	8006daa <HAL_SPI_Transmit>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Receive( hbmp2->SPI,  reg_data, length,            BMP2_TIMEOUT);
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	6818      	ldr	r0, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	2305      	movs	r3, #5
 8001fc6:	68b9      	ldr	r1, [r7, #8]
 8001fc8:	f005 f85d 	bl	8007086 <HAL_SPI_Receive>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	461a      	mov	r2, r3
 8001fd0:	7dbb      	ldrb	r3, [r7, #22]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	6858      	ldr	r0, [r3, #4]
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	891b      	ldrh	r3, [r3, #8]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f003 f8f5 	bl	80051d0 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8001fe6:	7dbb      	ldrb	r3, [r7, #22]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <bmp2_spi_read+0x74>
    iError = -1;
 8001fec:	23ff      	movs	r3, #255	; 0xff
 8001fee:	75fb      	strb	r3, [r7, #23]

  return iError;
 8001ff0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	603b      	str	r3, [r7, #0]
 8002008:	4603      	mov	r3, r0
 800200a:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 800200c:	2300      	movs	r3, #0
 800200e:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8002010:	2300      	movs	r3, #0
 8002012:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	6858      	ldr	r0, [r3, #4]
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	891b      	ldrh	r3, [r3, #8]
 8002020:	2200      	movs	r2, #0
 8002022:	4619      	mov	r1, r3
 8002024:	f003 f8d4 	bl	80051d0 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI, &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	6818      	ldr	r0, [r3, #0]
 800202c:	f107 010f 	add.w	r1, r7, #15
 8002030:	2305      	movs	r3, #5
 8002032:	2201      	movs	r2, #1
 8002034:	f004 feb9 	bl	8006daa <HAL_SPI_Transmit>
 8002038:	4603      	mov	r3, r0
 800203a:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Transmit(hbmp2->SPI, (uint8_t*)reg_data, length,   BMP2_TIMEOUT);
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	6818      	ldr	r0, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	b29a      	uxth	r2, r3
 8002044:	2305      	movs	r3, #5
 8002046:	68b9      	ldr	r1, [r7, #8]
 8002048:	f004 feaf 	bl	8006daa <HAL_SPI_Transmit>
 800204c:	4603      	mov	r3, r0
 800204e:	461a      	mov	r2, r3
 8002050:	7dbb      	ldrb	r3, [r7, #22]
 8002052:	4413      	add	r3, r2
 8002054:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	6858      	ldr	r0, [r3, #4]
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	891b      	ldrh	r3, [r3, #8]
 800205e:	2201      	movs	r2, #1
 8002060:	4619      	mov	r1, r3
 8002062:	f003 f8b5 	bl	80051d0 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8002066:	7dbb      	ldrb	r3, [r7, #22]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <bmp2_spi_write+0x74>
    iError = -1;
 800206c:	23ff      	movs	r3, #255	; 0xff
 800206e:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002070:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a05      	ldr	r2, [pc, #20]	; (80020a0 <bmp2_delay_us+0x24>)
 800208a:	fba2 2303 	umull	r2, r3, r2, r3
 800208e:	099b      	lsrs	r3, r3, #6
 8002090:	4618      	mov	r0, r3
 8002092:	f001 fd0d 	bl	8003ab0 <HAL_Delay>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	10624dd3 	.word	0x10624dd3

080020a4 <BMP2_ReadData>:
 *  @retval 0 -> Success.
 *  @retval <0 -> Failure.
 *
 */
int8_t BMP2_ReadData(struct bmp2_dev *dev, double* press, double* temp)
{
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b08b      	sub	sp, #44	; 0x2c
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
  int8_t rslt = BMP2_E_NULL_PTR;
 80020b0:	23ff      	movs	r3, #255	; 0xff
 80020b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  struct bmp2_status status;
  struct bmp2_data comp_data;
  int8_t try = BMP2_GET_MAX_RETRY(dev);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	899b      	ldrh	r3, [r3, #12]
 80020bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  do {
    /* Read sensor status */
    rslt = bmp2_get_status(&status, dev);
 80020c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c4:	68f9      	ldr	r1, [r7, #12]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff f89a 	bl	8001200 <bmp2_get_status>
 80020cc:	4603      	mov	r3, r0
 80020ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* Read compensated data */
    rslt = bmp2_get_sensor_data(&comp_data, dev);
 80020d2:	f107 0310 	add.w	r3, r7, #16
 80020d6:	68f9      	ldr	r1, [r7, #12]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff f8d2 	bl	8001282 <bmp2_get_sensor_data>
 80020de:	4603      	mov	r3, r0
 80020e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    *temp = comp_data.temperature;
 80020e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	e9c1 2300 	strd	r2, r3, [r1]
    *press = comp_data.pressure / 100.0;
 80020ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	4b1c      	ldr	r3, [pc, #112]	; (8002168 <BMP2_ReadData+0xc4>)
 80020f8:	f7fe fbc0 	bl	800087c <__aeabi_ddiv>
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	68b9      	ldr	r1, [r7, #8]
 8002102:	e9c1 2300 	strd	r2, r3, [r1]
    try--;
 8002106:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800210a:	b2db      	uxtb	r3, r3
 800210c:	3b01      	subs	r3, #1
 800210e:	b2db      	uxtb	r3, r3
 8002110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 8002114:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <BMP2_ReadData+0x80>
 800211c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002120:	2b00      	cmp	r3, #0
 8002122:	dccd      	bgt.n	80020c0 <BMP2_ReadData+0x1c>

  /* Save reading result in sensor handler */
  BMP2_GET_PRESS(dev) = *press;
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212a:	68f9      	ldr	r1, [r7, #12]
 800212c:	684c      	ldr	r4, [r1, #4]
 800212e:	4610      	mov	r0, r2
 8002130:	4619      	mov	r1, r3
 8002132:	f7fe fd5b 	bl	8000bec <__aeabi_d2f>
 8002136:	4603      	mov	r3, r0
 8002138:	6163      	str	r3, [r4, #20]
  BMP2_GET_TEMP(dev) = *temp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002140:	68f9      	ldr	r1, [r7, #12]
 8002142:	684c      	ldr	r4, [r1, #4]
 8002144:	4610      	mov	r0, r2
 8002146:	4619      	mov	r1, r3
 8002148:	f7fe fd50 	bl	8000bec <__aeabi_d2f>
 800214c:	4603      	mov	r3, r0
 800214e:	6123      	str	r3, [r4, #16]
  BMP2_GET_STATUS(dev) = rslt;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002158:	729a      	strb	r2, [r3, #10]

  return rslt;
 800215a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 800215e:	4618      	mov	r0, r3
 8002160:	372c      	adds	r7, #44	; 0x2c
 8002162:	46bd      	mov	sp, r7
 8002164:	bd90      	pop	{r4, r7, pc}
 8002166:	bf00      	nop
 8002168:	40590000 	.word	0x40590000

0800216c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002172:	463b      	mov	r3, r7
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800217e:	4b21      	ldr	r3, [pc, #132]	; (8002204 <MX_ADC1_Init+0x98>)
 8002180:	4a21      	ldr	r2, [pc, #132]	; (8002208 <MX_ADC1_Init+0x9c>)
 8002182:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002184:	4b1f      	ldr	r3, [pc, #124]	; (8002204 <MX_ADC1_Init+0x98>)
 8002186:	2200      	movs	r2, #0
 8002188:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800218a:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <MX_ADC1_Init+0x98>)
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002190:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <MX_ADC1_Init+0x98>)
 8002192:	2200      	movs	r2, #0
 8002194:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002196:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <MX_ADC1_Init+0x98>)
 8002198:	2200      	movs	r2, #0
 800219a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800219c:	4b19      	ldr	r3, [pc, #100]	; (8002204 <MX_ADC1_Init+0x98>)
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021a4:	4b17      	ldr	r3, [pc, #92]	; (8002204 <MX_ADC1_Init+0x98>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021aa:	4b16      	ldr	r3, [pc, #88]	; (8002204 <MX_ADC1_Init+0x98>)
 80021ac:	4a17      	ldr	r2, [pc, #92]	; (800220c <MX_ADC1_Init+0xa0>)
 80021ae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021b0:	4b14      	ldr	r3, [pc, #80]	; (8002204 <MX_ADC1_Init+0x98>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80021b6:	4b13      	ldr	r3, [pc, #76]	; (8002204 <MX_ADC1_Init+0x98>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80021bc:	4b11      	ldr	r3, [pc, #68]	; (8002204 <MX_ADC1_Init+0x98>)
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021c4:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <MX_ADC1_Init+0x98>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80021ca:	480e      	ldr	r0, [pc, #56]	; (8002204 <MX_ADC1_Init+0x98>)
 80021cc:	f001 fc94 	bl	8003af8 <HAL_ADC_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80021d6:	f000 ff0d 	bl	8002ff4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80021da:	2309      	movs	r3, #9
 80021dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80021de:	2301      	movs	r3, #1
 80021e0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80021e2:	2300      	movs	r3, #0
 80021e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021e6:	463b      	mov	r3, r7
 80021e8:	4619      	mov	r1, r3
 80021ea:	4806      	ldr	r0, [pc, #24]	; (8002204 <MX_ADC1_Init+0x98>)
 80021ec:	f001 ff5c 	bl	80040a8 <HAL_ADC_ConfigChannel>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80021f6:	f000 fefd 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021fa:	bf00      	nop
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	2000013c 	.word	0x2000013c
 8002208:	40012000 	.word	0x40012000
 800220c:	0f000001 	.word	0x0f000001

08002210 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08a      	sub	sp, #40	; 0x28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 0314 	add.w	r3, r7, #20
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a31      	ldr	r2, [pc, #196]	; (80022f4 <HAL_ADC_MspInit+0xe4>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d15b      	bne.n	80022ea <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002232:	4b31      	ldr	r3, [pc, #196]	; (80022f8 <HAL_ADC_MspInit+0xe8>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	4a30      	ldr	r2, [pc, #192]	; (80022f8 <HAL_ADC_MspInit+0xe8>)
 8002238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223c:	6453      	str	r3, [r2, #68]	; 0x44
 800223e:	4b2e      	ldr	r3, [pc, #184]	; (80022f8 <HAL_ADC_MspInit+0xe8>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800224a:	4b2b      	ldr	r3, [pc, #172]	; (80022f8 <HAL_ADC_MspInit+0xe8>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	4a2a      	ldr	r2, [pc, #168]	; (80022f8 <HAL_ADC_MspInit+0xe8>)
 8002250:	f043 0302 	orr.w	r3, r3, #2
 8002254:	6313      	str	r3, [r2, #48]	; 0x30
 8002256:	4b28      	ldr	r3, [pc, #160]	; (80022f8 <HAL_ADC_MspInit+0xe8>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002262:	2302      	movs	r3, #2
 8002264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002266:	2303      	movs	r3, #3
 8002268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800226e:	f107 0314 	add.w	r3, r7, #20
 8002272:	4619      	mov	r1, r3
 8002274:	4821      	ldr	r0, [pc, #132]	; (80022fc <HAL_ADC_MspInit+0xec>)
 8002276:	f002 fdff 	bl	8004e78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800227a:	4b21      	ldr	r3, [pc, #132]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 800227c:	4a21      	ldr	r2, [pc, #132]	; (8002304 <HAL_ADC_MspInit+0xf4>)
 800227e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002280:	4b1f      	ldr	r3, [pc, #124]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 8002282:	2200      	movs	r2, #0
 8002284:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002286:	4b1e      	ldr	r3, [pc, #120]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 8002288:	2200      	movs	r2, #0
 800228a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800228c:	4b1c      	ldr	r3, [pc, #112]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 800228e:	2200      	movs	r2, #0
 8002290:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002292:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 8002294:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002298:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800229a:	4b19      	ldr	r3, [pc, #100]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 800229c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022a0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022a2:	4b17      	ldr	r3, [pc, #92]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 80022a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80022aa:	4b15      	ldr	r3, [pc, #84]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 80022ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022b0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80022b2:	4b13      	ldr	r3, [pc, #76]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022b8:	4b11      	ldr	r3, [pc, #68]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80022be:	4810      	ldr	r0, [pc, #64]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 80022c0:	f002 fa5e 	bl	8004780 <HAL_DMA_Init>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80022ca:	f000 fe93 	bl	8002ff4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a0b      	ldr	r2, [pc, #44]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 80022d2:	639a      	str	r2, [r3, #56]	; 0x38
 80022d4:	4a0a      	ldr	r2, [pc, #40]	; (8002300 <HAL_ADC_MspInit+0xf0>)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80022da:	2200      	movs	r2, #0
 80022dc:	2100      	movs	r1, #0
 80022de:	2012      	movs	r0, #18
 80022e0:	f002 fa17 	bl	8004712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80022e4:	2012      	movs	r0, #18
 80022e6:	f002 fa30 	bl	800474a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80022ea:	bf00      	nop
 80022ec:	3728      	adds	r7, #40	; 0x28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40012000 	.word	0x40012000
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40020400 	.word	0x40020400
 8002300:	20000184 	.word	0x20000184
 8002304:	40026410 	.word	0x40026410

08002308 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800230e:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <MX_DMA_Init+0x38>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	4a0b      	ldr	r2, [pc, #44]	; (8002340 <MX_DMA_Init+0x38>)
 8002314:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002318:	6313      	str	r3, [r2, #48]	; 0x30
 800231a:	4b09      	ldr	r3, [pc, #36]	; (8002340 <MX_DMA_Init+0x38>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002322:	607b      	str	r3, [r7, #4]
 8002324:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002326:	2200      	movs	r2, #0
 8002328:	2100      	movs	r1, #0
 800232a:	2038      	movs	r0, #56	; 0x38
 800232c:	f002 f9f1 	bl	8004712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002330:	2038      	movs	r0, #56	; 0x38
 8002332:	f002 fa0a 	bl	800474a <HAL_NVIC_EnableIRQ>

}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800

08002344 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b08e      	sub	sp, #56	; 0x38
 8002348:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	605a      	str	r2, [r3, #4]
 8002354:	609a      	str	r2, [r3, #8]
 8002356:	60da      	str	r2, [r3, #12]
 8002358:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800235a:	4bac      	ldr	r3, [pc, #688]	; (800260c <MX_GPIO_Init+0x2c8>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4aab      	ldr	r2, [pc, #684]	; (800260c <MX_GPIO_Init+0x2c8>)
 8002360:	f043 0310 	orr.w	r3, r3, #16
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4ba9      	ldr	r3, [pc, #676]	; (800260c <MX_GPIO_Init+0x2c8>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f003 0310 	and.w	r3, r3, #16
 800236e:	623b      	str	r3, [r7, #32]
 8002370:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002372:	4ba6      	ldr	r3, [pc, #664]	; (800260c <MX_GPIO_Init+0x2c8>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4aa5      	ldr	r2, [pc, #660]	; (800260c <MX_GPIO_Init+0x2c8>)
 8002378:	f043 0304 	orr.w	r3, r3, #4
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
 800237e:	4ba3      	ldr	r3, [pc, #652]	; (800260c <MX_GPIO_Init+0x2c8>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f003 0304 	and.w	r3, r3, #4
 8002386:	61fb      	str	r3, [r7, #28]
 8002388:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800238a:	4ba0      	ldr	r3, [pc, #640]	; (800260c <MX_GPIO_Init+0x2c8>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	4a9f      	ldr	r2, [pc, #636]	; (800260c <MX_GPIO_Init+0x2c8>)
 8002390:	f043 0320 	orr.w	r3, r3, #32
 8002394:	6313      	str	r3, [r2, #48]	; 0x30
 8002396:	4b9d      	ldr	r3, [pc, #628]	; (800260c <MX_GPIO_Init+0x2c8>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	f003 0320 	and.w	r3, r3, #32
 800239e:	61bb      	str	r3, [r7, #24]
 80023a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023a2:	4b9a      	ldr	r3, [pc, #616]	; (800260c <MX_GPIO_Init+0x2c8>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	4a99      	ldr	r2, [pc, #612]	; (800260c <MX_GPIO_Init+0x2c8>)
 80023a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023ac:	6313      	str	r3, [r2, #48]	; 0x30
 80023ae:	4b97      	ldr	r3, [pc, #604]	; (800260c <MX_GPIO_Init+0x2c8>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ba:	4b94      	ldr	r3, [pc, #592]	; (800260c <MX_GPIO_Init+0x2c8>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a93      	ldr	r2, [pc, #588]	; (800260c <MX_GPIO_Init+0x2c8>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b91      	ldr	r3, [pc, #580]	; (800260c <MX_GPIO_Init+0x2c8>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023d2:	4b8e      	ldr	r3, [pc, #568]	; (800260c <MX_GPIO_Init+0x2c8>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	4a8d      	ldr	r2, [pc, #564]	; (800260c <MX_GPIO_Init+0x2c8>)
 80023d8:	f043 0302 	orr.w	r3, r3, #2
 80023dc:	6313      	str	r3, [r2, #48]	; 0x30
 80023de:	4b8b      	ldr	r3, [pc, #556]	; (800260c <MX_GPIO_Init+0x2c8>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ea:	4b88      	ldr	r3, [pc, #544]	; (800260c <MX_GPIO_Init+0x2c8>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	4a87      	ldr	r2, [pc, #540]	; (800260c <MX_GPIO_Init+0x2c8>)
 80023f0:	f043 0308 	orr.w	r3, r3, #8
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
 80023f6:	4b85      	ldr	r3, [pc, #532]	; (800260c <MX_GPIO_Init+0x2c8>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	60bb      	str	r3, [r7, #8]
 8002400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002402:	4b82      	ldr	r3, [pc, #520]	; (800260c <MX_GPIO_Init+0x2c8>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	4a81      	ldr	r2, [pc, #516]	; (800260c <MX_GPIO_Init+0x2c8>)
 8002408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800240c:	6313      	str	r3, [r2, #48]	; 0x30
 800240e:	4b7f      	ldr	r3, [pc, #508]	; (800260c <MX_GPIO_Init+0x2c8>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002416:	607b      	str	r3, [r7, #4]
 8002418:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMP2_CSB_GPIO_Port, BMP2_CSB_Pin, GPIO_PIN_RESET);
 800241a:	2200      	movs	r2, #0
 800241c:	2110      	movs	r1, #16
 800241e:	487c      	ldr	r0, [pc, #496]	; (8002610 <MX_GPIO_Init+0x2cc>)
 8002420:	f002 fed6 	bl	80051d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002424:	2200      	movs	r2, #0
 8002426:	f244 0181 	movw	r1, #16513	; 0x4081
 800242a:	487a      	ldr	r0, [pc, #488]	; (8002614 <MX_GPIO_Init+0x2d0>)
 800242c:	f002 fed0 	bl	80051d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 8002430:	2200      	movs	r2, #0
 8002432:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002436:	4878      	ldr	r0, [pc, #480]	; (8002618 <MX_GPIO_Init+0x2d4>)
 8002438:	f002 feca 	bl	80051d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|LD4_Pin|LD5_Pin, GPIO_PIN_RESET);
 800243c:	2200      	movs	r2, #0
 800243e:	f244 2140 	movw	r1, #16960	; 0x4240
 8002442:	4876      	ldr	r0, [pc, #472]	; (800261c <MX_GPIO_Init+0x2d8>)
 8002444:	f002 fec4 	bl	80051d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMP2_CSB_Pin;
 8002448:	2310      	movs	r3, #16
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800244c:	2301      	movs	r3, #1
 800244e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002454:	2303      	movs	r3, #3
 8002456:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BMP2_CSB_GPIO_Port, &GPIO_InitStruct);
 8002458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800245c:	4619      	mov	r1, r3
 800245e:	486c      	ldr	r0, [pc, #432]	; (8002610 <MX_GPIO_Init+0x2cc>)
 8002460:	f002 fd0a 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002464:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800246a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800246e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002478:	4619      	mov	r1, r3
 800247a:	4869      	ldr	r0, [pc, #420]	; (8002620 <MX_GPIO_Init+0x2dc>)
 800247c:	f002 fcfc 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = test_Pin;
 8002480:	2304      	movs	r3, #4
 8002482:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002484:	2300      	movs	r3, #0
 8002486:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(test_GPIO_Port, &GPIO_InitStruct);
 800248c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002490:	4619      	mov	r1, r3
 8002492:	4861      	ldr	r0, [pc, #388]	; (8002618 <MX_GPIO_Init+0x2d4>)
 8002494:	f002 fcf0 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002498:	2332      	movs	r3, #50	; 0x32
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249c:	2302      	movs	r3, #2
 800249e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a4:	2303      	movs	r3, #3
 80024a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024a8:	230b      	movs	r3, #11
 80024aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b0:	4619      	mov	r1, r3
 80024b2:	485b      	ldr	r0, [pc, #364]	; (8002620 <MX_GPIO_Init+0x2dc>)
 80024b4:	f002 fce0 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80024b8:	2386      	movs	r3, #134	; 0x86
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024bc:	2302      	movs	r3, #2
 80024be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c4:	2303      	movs	r3, #3
 80024c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024c8:	230b      	movs	r3, #11
 80024ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d0:	4619      	mov	r1, r3
 80024d2:	4854      	ldr	r0, [pc, #336]	; (8002624 <MX_GPIO_Init+0x2e0>)
 80024d4:	f002 fcd0 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80024d8:	f244 0381 	movw	r3, #16513	; 0x4081
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024de:	2301      	movs	r3, #1
 80024e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e6:	2300      	movs	r3, #0
 80024e8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ee:	4619      	mov	r1, r3
 80024f0:	4848      	ldr	r0, [pc, #288]	; (8002614 <MX_GPIO_Init+0x2d0>)
 80024f2:	f002 fcc1 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ON_Btn_Pin;
 80024f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80024fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002500:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002502:	2301      	movs	r3, #1
 8002504:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ON_Btn_GPIO_Port, &GPIO_InitStruct);
 8002506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800250a:	4619      	mov	r1, r3
 800250c:	4842      	ldr	r0, [pc, #264]	; (8002618 <MX_GPIO_Init+0x2d4>)
 800250e:	f002 fcb3 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002518:	2301      	movs	r3, #1
 800251a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002520:	2300      	movs	r3, #0
 8002522:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002528:	4619      	mov	r1, r3
 800252a:	483b      	ldr	r0, [pc, #236]	; (8002618 <MX_GPIO_Init+0x2d4>)
 800252c:	f002 fca4 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OFF_Btn_Pin;
 8002530:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002534:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002536:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800253a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800253c:	2302      	movs	r3, #2
 800253e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OFF_Btn_GPIO_Port, &GPIO_InitStruct);
 8002540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002544:	4619      	mov	r1, r3
 8002546:	4832      	ldr	r0, [pc, #200]	; (8002610 <MX_GPIO_Init+0x2cc>)
 8002548:	f002 fc96 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800254c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002552:	2302      	movs	r3, #2
 8002554:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255a:	2303      	movs	r3, #3
 800255c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800255e:	230b      	movs	r3, #11
 8002560:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002566:	4619      	mov	r1, r3
 8002568:	482a      	ldr	r0, [pc, #168]	; (8002614 <MX_GPIO_Init+0x2d0>)
 800256a:	f002 fc85 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|LD4_Pin|LD5_Pin;
 800256e:	f244 2340 	movw	r3, #16960	; 0x4240
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002574:	2301      	movs	r3, #1
 8002576:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257c:	2300      	movs	r3, #0
 800257e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002584:	4619      	mov	r1, r3
 8002586:	4825      	ldr	r0, [pc, #148]	; (800261c <MX_GPIO_Init+0x2d8>)
 8002588:	f002 fc76 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800258c:	2380      	movs	r3, #128	; 0x80
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002590:	2300      	movs	r3, #0
 8002592:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800259c:	4619      	mov	r1, r3
 800259e:	481f      	ldr	r0, [pc, #124]	; (800261c <MX_GPIO_Init+0x2d8>)
 80025a0:	f002 fc6a 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80025a4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025aa:	2302      	movs	r3, #2
 80025ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b2:	2303      	movs	r3, #3
 80025b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80025b6:	230a      	movs	r3, #10
 80025b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025be:	4619      	mov	r1, r3
 80025c0:	4818      	ldr	r0, [pc, #96]	; (8002624 <MX_GPIO_Init+0x2e0>)
 80025c2:	f002 fc59 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80025c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025cc:	2300      	movs	r3, #0
 80025ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80025d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d8:	4619      	mov	r1, r3
 80025da:	4812      	ldr	r0, [pc, #72]	; (8002624 <MX_GPIO_Init+0x2e0>)
 80025dc:	f002 fc4c 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80025e0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e6:	2302      	movs	r3, #2
 80025e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ee:	2303      	movs	r3, #3
 80025f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025f2:	230b      	movs	r3, #11
 80025f4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025fa:	4619      	mov	r1, r3
 80025fc:	4807      	ldr	r0, [pc, #28]	; (800261c <MX_GPIO_Init+0x2d8>)
 80025fe:	f002 fc3b 	bl	8004e78 <HAL_GPIO_Init>

}
 8002602:	bf00      	nop
 8002604:	3738      	adds	r7, #56	; 0x38
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40023800 	.word	0x40023800
 8002610:	40021000 	.word	0x40021000
 8002614:	40020400 	.word	0x40020400
 8002618:	40021400 	.word	0x40021400
 800261c:	40021800 	.word	0x40021800
 8002620:	40020800 	.word	0x40020800
 8002624:	40020000 	.word	0x40020000

08002628 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800262c:	4b1b      	ldr	r3, [pc, #108]	; (800269c <MX_I2C1_Init+0x74>)
 800262e:	4a1c      	ldr	r2, [pc, #112]	; (80026a0 <MX_I2C1_Init+0x78>)
 8002630:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8002632:	4b1a      	ldr	r3, [pc, #104]	; (800269c <MX_I2C1_Init+0x74>)
 8002634:	4a1b      	ldr	r2, [pc, #108]	; (80026a4 <MX_I2C1_Init+0x7c>)
 8002636:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002638:	4b18      	ldr	r3, [pc, #96]	; (800269c <MX_I2C1_Init+0x74>)
 800263a:	2200      	movs	r2, #0
 800263c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800263e:	4b17      	ldr	r3, [pc, #92]	; (800269c <MX_I2C1_Init+0x74>)
 8002640:	2201      	movs	r2, #1
 8002642:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002644:	4b15      	ldr	r3, [pc, #84]	; (800269c <MX_I2C1_Init+0x74>)
 8002646:	2200      	movs	r2, #0
 8002648:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800264a:	4b14      	ldr	r3, [pc, #80]	; (800269c <MX_I2C1_Init+0x74>)
 800264c:	2200      	movs	r2, #0
 800264e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <MX_I2C1_Init+0x74>)
 8002652:	2200      	movs	r2, #0
 8002654:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002656:	4b11      	ldr	r3, [pc, #68]	; (800269c <MX_I2C1_Init+0x74>)
 8002658:	2200      	movs	r2, #0
 800265a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800265c:	4b0f      	ldr	r3, [pc, #60]	; (800269c <MX_I2C1_Init+0x74>)
 800265e:	2200      	movs	r2, #0
 8002660:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002662:	480e      	ldr	r0, [pc, #56]	; (800269c <MX_I2C1_Init+0x74>)
 8002664:	f002 fdce 	bl	8005204 <HAL_I2C_Init>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800266e:	f000 fcc1 	bl	8002ff4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002672:	2100      	movs	r1, #0
 8002674:	4809      	ldr	r0, [pc, #36]	; (800269c <MX_I2C1_Init+0x74>)
 8002676:	f003 f93b 	bl	80058f0 <HAL_I2CEx_ConfigAnalogFilter>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002680:	f000 fcb8 	bl	8002ff4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002684:	2100      	movs	r1, #0
 8002686:	4805      	ldr	r0, [pc, #20]	; (800269c <MX_I2C1_Init+0x74>)
 8002688:	f003 f97d 	bl	8005986 <HAL_I2CEx_ConfigDigitalFilter>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002692:	f000 fcaf 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	200001e4 	.word	0x200001e4
 80026a0:	40005400 	.word	0x40005400
 80026a4:	20404768 	.word	0x20404768

080026a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b0aa      	sub	sp, #168	; 0xa8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	60da      	str	r2, [r3, #12]
 80026be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026c0:	f107 0310 	add.w	r3, r7, #16
 80026c4:	2284      	movs	r2, #132	; 0x84
 80026c6:	2100      	movs	r1, #0
 80026c8:	4618      	mov	r0, r3
 80026ca:	f007 fedb 	bl	800a484 <memset>
  if(i2cHandle->Instance==I2C1)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a22      	ldr	r2, [pc, #136]	; (800275c <HAL_I2C_MspInit+0xb4>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d13c      	bne.n	8002752 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80026d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026dc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80026de:	2300      	movs	r3, #0
 80026e0:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026e2:	f107 0310 	add.w	r3, r7, #16
 80026e6:	4618      	mov	r0, r3
 80026e8:	f003 fec4 	bl	8006474 <HAL_RCCEx_PeriphCLKConfig>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80026f2:	f000 fc7f 	bl	8002ff4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f6:	4b1a      	ldr	r3, [pc, #104]	; (8002760 <HAL_I2C_MspInit+0xb8>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	4a19      	ldr	r2, [pc, #100]	; (8002760 <HAL_I2C_MspInit+0xb8>)
 80026fc:	f043 0302 	orr.w	r3, r3, #2
 8002700:	6313      	str	r3, [r2, #48]	; 0x30
 8002702:	4b17      	ldr	r3, [pc, #92]	; (8002760 <HAL_I2C_MspInit+0xb8>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800270e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002712:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002716:	2312      	movs	r3, #18
 8002718:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002722:	2303      	movs	r3, #3
 8002724:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002728:	2304      	movs	r3, #4
 800272a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800272e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002732:	4619      	mov	r1, r3
 8002734:	480b      	ldr	r0, [pc, #44]	; (8002764 <HAL_I2C_MspInit+0xbc>)
 8002736:	f002 fb9f 	bl	8004e78 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800273a:	4b09      	ldr	r3, [pc, #36]	; (8002760 <HAL_I2C_MspInit+0xb8>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	4a08      	ldr	r2, [pc, #32]	; (8002760 <HAL_I2C_MspInit+0xb8>)
 8002740:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002744:	6413      	str	r3, [r2, #64]	; 0x40
 8002746:	4b06      	ldr	r3, [pc, #24]	; (8002760 <HAL_I2C_MspInit+0xb8>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002752:	bf00      	nop
 8002754:	37a8      	adds	r7, #168	; 0xa8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40005400 	.word	0x40005400
 8002760:	40023800 	.word	0x40023800
 8002764:	40020400 	.word	0x40020400

08002768 <lcd_init>:
#include "lcd_chars.h"
#include "stm32f7xx_hal.h"
#include "i2c.h"

void lcd_init(struct lcd_disp * lcd)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 800277e:	2308      	movs	r3, #8
 8002780:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 8002782:	2028      	movs	r0, #40	; 0x28
 8002784:	f001 f994 	bl	8003ab0 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	7bfa      	ldrb	r2, [r7, #15]
 800278e:	2130      	movs	r1, #48	; 0x30
 8002790:	4618      	mov	r0, r3
 8002792:	f000 f82f 	bl	80027f4 <lcd_write>
	HAL_Delay(5);
 8002796:	2005      	movs	r0, #5
 8002798:	f001 f98a 	bl	8003ab0 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	7bfa      	ldrb	r2, [r7, #15]
 80027a2:	2130      	movs	r1, #48	; 0x30
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 f825 	bl	80027f4 <lcd_write>
	HAL_Delay(1);
 80027aa:	2001      	movs	r0, #1
 80027ac:	f001 f980 	bl	8003ab0 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	7bfa      	ldrb	r2, [r7, #15]
 80027b6:	2130      	movs	r1, #48	; 0x30
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 f81b 	bl	80027f4 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	7bfa      	ldrb	r2, [r7, #15]
 80027c4:	2102      	movs	r1, #2
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 f814 	bl	80027f4 <lcd_write>
	HAL_Delay(5);
 80027cc:	2005      	movs	r0, #5
 80027ce:	f001 f96f 	bl	8003ab0 <HAL_Delay>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	7bfa      	ldrb	r2, [r7, #15]
 80027d8:	210c      	movs	r1, #12
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 f80a 	bl	80027f4 <lcd_write>
	HAL_Delay(5);
 80027e0:	2005      	movs	r0, #5
 80027e2:	f001 f965 	bl	8003ab0 <HAL_Delay>

	/* clear */
	lcd_clear(lcd);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f8a8 	bl	800293c <lcd_clear>


}
 80027ec:	bf00      	nop
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af02      	add	r7, sp, #8
 80027fa:	4603      	mov	r3, r0
 80027fc:	71fb      	strb	r3, [r7, #7]
 80027fe:	460b      	mov	r3, r1
 8002800:	71bb      	strb	r3, [r7, #6]
 8002802:	4613      	mov	r3, r2
 8002804:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 8002806:	79bb      	ldrb	r3, [r7, #6]
 8002808:	f023 030f 	bic.w	r3, r3, #15
 800280c:	b2da      	uxtb	r2, r3
 800280e:	797b      	ldrb	r3, [r7, #5]
 8002810:	4313      	orrs	r3, r2
 8002812:	b2db      	uxtb	r3, r3
 8002814:	f043 0304 	orr.w	r3, r3, #4
 8002818:	b2db      	uxtb	r3, r3
 800281a:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 800281c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002820:	f023 030f 	bic.w	r3, r3, #15
 8002824:	b25a      	sxtb	r2, r3
 8002826:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800282a:	4313      	orrs	r3, r2
 800282c:	b25b      	sxtb	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 8002832:	79bb      	ldrb	r3, [r7, #6]
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	b2da      	uxtb	r2, r3
 8002838:	797b      	ldrb	r3, [r7, #5]
 800283a:	4313      	orrs	r3, r2
 800283c:	b2db      	uxtb	r3, r3
 800283e:	f043 0304 	orr.w	r3, r3, #4
 8002842:	b2db      	uxtb	r3, r3
 8002844:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 8002846:	79bb      	ldrb	r3, [r7, #6]
 8002848:	011b      	lsls	r3, r3, #4
 800284a:	b25a      	sxtb	r2, r3
 800284c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002850:	4313      	orrs	r3, r2
 8002852:	b25b      	sxtb	r3, r3
 8002854:	b2db      	uxtb	r3, r3
 8002856:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8002858:	79fb      	ldrb	r3, [r7, #7]
 800285a:	b299      	uxth	r1, r3
 800285c:	f107 020c 	add.w	r2, r7, #12
 8002860:	2364      	movs	r3, #100	; 0x64
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	2304      	movs	r3, #4
 8002866:	4803      	ldr	r0, [pc, #12]	; (8002874 <lcd_write+0x80>)
 8002868:	f002 fd5c 	bl	8005324 <HAL_I2C_Master_Transmit>
}
 800286c:	bf00      	nop
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	200001e4 	.word	0x200001e4

08002878 <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	73fb      	strb	r3, [r7, #15]
 8002884:	2300      	movs	r3, #0
 8002886:	73bb      	strb	r3, [r7, #14]
	char ch;

	/* set backlight */
	if(lcd->bl)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 8002892:	2308      	movs	r3, #8
 8002894:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f850 	bl	800293c <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	7bfa      	ldrb	r2, [r7, #15]
 80028a2:	2180      	movs	r1, #128	; 0x80
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff ffa5 	bl	80027f4 <lcd_write>
	while(ch = lcd->f_line[i])
 80028aa:	e015      	b.n	80028d8 <lcd_display+0x60>
	{
		if (ch < 9)
 80028ac:	7b7b      	ldrb	r3, [r7, #13]
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d802      	bhi.n	80028b8 <lcd_display+0x40>
		{
			ch--;
 80028b2:	7b7b      	ldrb	r3, [r7, #13]
 80028b4:	3b01      	subs	r3, #1
 80028b6:	737b      	strb	r3, [r7, #13]
		}
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	7818      	ldrb	r0, [r3, #0]
 80028bc:	7bbb      	ldrb	r3, [r7, #14]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	4413      	add	r3, r2
 80028c2:	7859      	ldrb	r1, [r3, #1]
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	f043 0301 	orr.w	r3, r3, #1
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	461a      	mov	r2, r3
 80028ce:	f7ff ff91 	bl	80027f4 <lcd_write>
		i++;
 80028d2:	7bbb      	ldrb	r3, [r7, #14]
 80028d4:	3301      	adds	r3, #1
 80028d6:	73bb      	strb	r3, [r7, #14]
	while(ch = lcd->f_line[i])
 80028d8:	7bbb      	ldrb	r3, [r7, #14]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	4413      	add	r3, r2
 80028de:	785b      	ldrb	r3, [r3, #1]
 80028e0:	737b      	strb	r3, [r7, #13]
 80028e2:	7b7b      	ldrb	r3, [r7, #13]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1e1      	bne.n	80028ac <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 80028e8:	2300      	movs	r3, #0
 80028ea:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	7bfa      	ldrb	r2, [r7, #15]
 80028f2:	21c0      	movs	r1, #192	; 0xc0
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff ff7d 	bl	80027f4 <lcd_write>
	while(ch = lcd->s_line[i])
 80028fa:	e012      	b.n	8002922 <lcd_display+0xaa>
	{
		if (ch < 9)
 80028fc:	7b7b      	ldrb	r3, [r7, #13]
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d802      	bhi.n	8002908 <lcd_display+0x90>
		{
			ch--;
 8002902:	7b7b      	ldrb	r3, [r7, #13]
 8002904:	3b01      	subs	r3, #1
 8002906:	737b      	strb	r3, [r7, #13]
		}
		lcd_write(lcd->addr, ch, (xpin | RS_PIN));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	7818      	ldrb	r0, [r3, #0]
 800290c:	7bfb      	ldrb	r3, [r7, #15]
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	b2da      	uxtb	r2, r3
 8002914:	7b7b      	ldrb	r3, [r7, #13]
 8002916:	4619      	mov	r1, r3
 8002918:	f7ff ff6c 	bl	80027f4 <lcd_write>
		i++;
 800291c:	7bbb      	ldrb	r3, [r7, #14]
 800291e:	3301      	adds	r3, #1
 8002920:	73bb      	strb	r3, [r7, #14]
	while(ch = lcd->s_line[i])
 8002922:	7bbb      	ldrb	r3, [r7, #14]
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	4413      	add	r3, r2
 8002928:	7c9b      	ldrb	r3, [r3, #18]
 800292a:	737b      	strb	r3, [r7, #13]
 800292c:	7b7b      	ldrb	r3, [r7, #13]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1e4      	bne.n	80028fc <lcd_display+0x84>
	}
}
 8002932:	bf00      	nop
 8002934:	bf00      	nop
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 8002952:	2308      	movs	r3, #8
 8002954:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	7bfa      	ldrb	r2, [r7, #15]
 800295c:	2101      	movs	r1, #1
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff ff48 	bl	80027f4 <lcd_write>
	HAL_Delay(2);
 8002964:	2002      	movs	r0, #2
 8002966:	f001 f8a3 	bl	8003ab0 <HAL_Delay>
}
 800296a:	bf00      	nop
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <lcd_prog>:


void lcd_prog(struct lcd_disp * lcd)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i, j;
 800297c:	2300      	movs	r3, #0
 800297e:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <lcd_prog+0x1a>
	{
		xpin = BL_PIN;
 800298a:	2308      	movs	r3, #8
 800298c:	73fb      	strb	r3, [r7, #15]
	}

	/* send 8 custom chars */
	lcd_write(lcd->addr, (CG_FIRST_CHAR), xpin);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	7bfa      	ldrb	r2, [r7, #15]
 8002994:	2140      	movs	r1, #64	; 0x40
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff ff2c 	bl	80027f4 <lcd_write>
	for(i = 0; i <= 7; i++)
 800299c:	2300      	movs	r3, #0
 800299e:	73bb      	strb	r3, [r7, #14]
 80029a0:	e01b      	b.n	80029da <lcd_prog+0x66>
	{
		for(j = 0; j <= 7; j ++)
 80029a2:	2300      	movs	r3, #0
 80029a4:	737b      	strb	r3, [r7, #13]
 80029a6:	e012      	b.n	80029ce <lcd_prog+0x5a>
		{
			lcd_write(lcd->addr, (user_chars[i][j]), (xpin | RS_PIN));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	7818      	ldrb	r0, [r3, #0]
 80029ac:	7bba      	ldrb	r2, [r7, #14]
 80029ae:	7b7b      	ldrb	r3, [r7, #13]
 80029b0:	490e      	ldr	r1, [pc, #56]	; (80029ec <lcd_prog+0x78>)
 80029b2:	00d2      	lsls	r2, r2, #3
 80029b4:	440a      	add	r2, r1
 80029b6:	4413      	add	r3, r2
 80029b8:	7819      	ldrb	r1, [r3, #0]
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	461a      	mov	r2, r3
 80029c4:	f7ff ff16 	bl	80027f4 <lcd_write>
		for(j = 0; j <= 7; j ++)
 80029c8:	7b7b      	ldrb	r3, [r7, #13]
 80029ca:	3301      	adds	r3, #1
 80029cc:	737b      	strb	r3, [r7, #13]
 80029ce:	7b7b      	ldrb	r3, [r7, #13]
 80029d0:	2b07      	cmp	r3, #7
 80029d2:	d9e9      	bls.n	80029a8 <lcd_prog+0x34>
	for(i = 0; i <= 7; i++)
 80029d4:	7bbb      	ldrb	r3, [r7, #14]
 80029d6:	3301      	adds	r3, #1
 80029d8:	73bb      	strb	r3, [r7, #14]
 80029da:	7bbb      	ldrb	r3, [r7, #14]
 80029dc:	2b07      	cmp	r3, #7
 80029de:	d9e0      	bls.n	80029a2 <lcd_prog+0x2e>
		}
	}
}
 80029e0:	bf00      	nop
 80029e2:	bf00      	nop
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20000054 	.word	0x20000054

080029f0 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim TIM handle
  * @retval None
  */
pid_t2 pid1={.param.Kp=1.2,.param.Ki=0.002, .param.Kd=0,.param.dt=1.0, .previous_error=0, .previous_integral=0};
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029f0:	b5b0      	push	{r4, r5, r7, lr}
 80029f2:	b0a8      	sub	sp, #160	; 0xa0
 80029f4:	af02      	add	r7, sp, #8
 80029f6:	6078      	str	r0, [r7, #4]
  if(htim == &htim2)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a7b      	ldr	r2, [pc, #492]	; (8002be8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d168      	bne.n	8002ad2 <HAL_TIM_PeriodElapsedCallback+0xe2>
  {
    static unsigned int cnt = 0;
    cnt++;
 8002a00:	4b7a      	ldr	r3, [pc, #488]	; (8002bec <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	3301      	adds	r3, #1
 8002a06:	4a79      	ldr	r2, [pc, #484]	; (8002bec <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002a08:	6013      	str	r3, [r2, #0]
    BMP2_ReadData(&bmp2dev, &press, &temp);
 8002a0a:	4a79      	ldr	r2, [pc, #484]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002a0c:	4979      	ldr	r1, [pc, #484]	; (8002bf4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002a0e:	487a      	ldr	r0, [pc, #488]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002a10:	f7ff fb48 	bl	80020a4 <BMP2_ReadData>

    temp_int = 1000*temp;
 8002a14:	4b76      	ldr	r3, [pc, #472]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002a16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a1a:	f04f 0200 	mov.w	r2, #0
 8002a1e:	4b77      	ldr	r3, [pc, #476]	; (8002bfc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002a20:	f7fd fe02 	bl	8000628 <__aeabi_dmul>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4610      	mov	r0, r2
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	f7fe f8be 	bl	8000bac <__aeabi_d2uiz>
 8002a30:	4603      	mov	r3, r0
 8002a32:	4a73      	ldr	r2, [pc, #460]	; (8002c00 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002a34:	6013      	str	r3, [r2, #0]
    press_int = 100*press;
 8002a36:	4b6f      	ldr	r3, [pc, #444]	; (8002bf4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002a38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	4b70      	ldr	r3, [pc, #448]	; (8002c04 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002a42:	f7fd fdf1 	bl	8000628 <__aeabi_dmul>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	f7fe f8ad 	bl	8000bac <__aeabi_d2uiz>
 8002a52:	4603      	mov	r3, r0
 8002a54:	4a6c      	ldr	r2, [pc, #432]	; (8002c08 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002a56:	6013      	str	r3, [r2, #0]

    if(cnt == 4)
 8002a58:	4b64      	ldr	r3, [pc, #400]	; (8002bec <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d138      	bne.n	8002ad2 <HAL_TIM_PeriodElapsedCallback+0xe2>
    {
      uint8_t tx_buffer[128];
      int tx_msg_len = sprintf((char*)tx_buffer,
 8002a60:	4b67      	ldr	r3, [pc, #412]	; (8002c00 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a69      	ldr	r2, [pc, #420]	; (8002c0c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002a66:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6a:	099d      	lsrs	r5, r3, #6
 8002a6c:	4b64      	ldr	r3, [pc, #400]	; (8002c00 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a66      	ldr	r2, [pc, #408]	; (8002c0c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002a72:	fba2 1203 	umull	r1, r2, r2, r3
 8002a76:	0992      	lsrs	r2, r2, #6
 8002a78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a7c:	fb01 f202 	mul.w	r2, r1, r2
 8002a80:	1a9a      	subs	r2, r3, r2
 8002a82:	4b61      	ldr	r3, [pc, #388]	; (8002c08 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4962      	ldr	r1, [pc, #392]	; (8002c10 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002a88:	fba1 1303 	umull	r1, r3, r1, r3
 8002a8c:	0958      	lsrs	r0, r3, #5
 8002a8e:	4b5e      	ldr	r3, [pc, #376]	; (8002c08 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002a90:	6819      	ldr	r1, [r3, #0]
 8002a92:	4b5f      	ldr	r3, [pc, #380]	; (8002c10 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002a94:	fba3 4301 	umull	r4, r3, r3, r1
 8002a98:	095b      	lsrs	r3, r3, #5
 8002a9a:	2464      	movs	r4, #100	; 0x64
 8002a9c:	fb04 f303 	mul.w	r3, r4, r3
 8002aa0:	1acb      	subs	r3, r1, r3
 8002aa2:	f107 040c 	add.w	r4, r7, #12
 8002aa6:	9301      	str	r3, [sp, #4]
 8002aa8:	9000      	str	r0, [sp, #0]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	462a      	mov	r2, r5
 8002aae:	4959      	ldr	r1, [pc, #356]	; (8002c14 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002ab0:	4620      	mov	r0, r4
 8002ab2:	f007 fcc7 	bl	800a444 <siprintf>
 8002ab6:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    		  "Temperature: %2u.%03u degC; Pressure: %5u.%02u hPa\r",
    		  temp_int / 1000, temp_int % 1000,
			  press_int / 100, press_int % 100);
      HAL_UART_Transmit(&huart3, tx_buffer, tx_msg_len, 100);
 8002aba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	f107 010c 	add.w	r1, r7, #12
 8002ac4:	2364      	movs	r3, #100	; 0x64
 8002ac6:	4854      	ldr	r0, [pc, #336]	; (8002c18 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002ac8:	f006 fa2e 	bl	8008f28 <HAL_UART_Transmit>
      cnt = 0;
 8002acc:	4b47      	ldr	r3, [pc, #284]	; (8002bec <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
    }
  }
  //pid
  if(htim == &htim7){
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a51      	ldr	r2, [pc, #324]	; (8002c1c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d109      	bne.n	8002aee <HAL_TIM_PeriodElapsedCallback+0xfe>

  		 current_temp = temp_int;
 8002ada:	4b49      	ldr	r3, [pc, #292]	; (8002c00 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	ee07 3a90 	vmov	s15, r3
 8002ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ae6:	4b4e      	ldr	r3, [pc, #312]	; (8002c20 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002ae8:	edc3 7a00 	vstr	s15, [r3]
  		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,pwm_duty);

  	}


}
 8002aec:	e071      	b.n	8002bd2 <HAL_TIM_PeriodElapsedCallback+0x1e2>
  		float pwm_duty_f= (999.0*calculate_discrete_pid(&pid1,zadane_obiektu,current_temp));
 8002aee:	4b4d      	ldr	r3, [pc, #308]	; (8002c24 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	ee07 3a90 	vmov	s15, r3
 8002af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002afa:	4b49      	ldr	r3, [pc, #292]	; (8002c20 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002afc:	ed93 7a00 	vldr	s14, [r3]
 8002b00:	eef0 0a47 	vmov.f32	s1, s14
 8002b04:	eeb0 0a67 	vmov.f32	s0, s15
 8002b08:	4847      	ldr	r0, [pc, #284]	; (8002c28 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002b0a:	f000 fa78 	bl	8002ffe <calculate_discrete_pid>
 8002b0e:	ee10 3a10 	vmov	r3, s0
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fd fd30 	bl	8000578 <__aeabi_f2d>
 8002b18:	a331      	add	r3, pc, #196	; (adr r3, 8002be0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1e:	f7fd fd83 	bl	8000628 <__aeabi_dmul>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4610      	mov	r0, r2
 8002b28:	4619      	mov	r1, r3
 8002b2a:	f7fe f85f 	bl	8000bec <__aeabi_d2f>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  		fanControlTest=pwm_duty_f;
 8002b34:	4a3d      	ldr	r2, [pc, #244]	; (8002c2c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002b36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b3a:	6013      	str	r3, [r2, #0]
  		uint16_t pwm_duty=0;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
  		if(pwm_duty_f<0)pwm_duty=0;else
 8002b42:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002b46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b4e:	d503      	bpl.n	8002b58 <HAL_TIM_PeriodElapsedCallback+0x168>
 8002b50:	2300      	movs	r3, #0
 8002b52:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8002b56:	e015      	b.n	8002b84 <HAL_TIM_PeriodElapsedCallback+0x194>
  		if(pwm_duty_f>999.0)pwm_duty=999;else
 8002b58:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002b5c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002c30 <HAL_TIM_PeriodElapsedCallback+0x240>
 8002b60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b68:	dd04      	ble.n	8002b74 <HAL_TIM_PeriodElapsedCallback+0x184>
 8002b6a:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002b6e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8002b72:	e007      	b.n	8002b84 <HAL_TIM_PeriodElapsedCallback+0x194>
  			pwm_duty=(uint16_t)pwm_duty_f;
 8002b74:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002b78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b7c:	ee17 3a90 	vmov	r3, s15
 8002b80:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
  		fanControlTestDriven = pwm_duty;
 8002b84:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002b88:	ee07 3a90 	vmov	s15, r3
 8002b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b90:	4b28      	ldr	r3, [pc, #160]	; (8002c34 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002b92:	edc3 7a00 	vstr	s15, [r3]
  		if(temp_int -600 > zadane_obiektu) __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 700);
 8002b96:	4b1a      	ldr	r3, [pc, #104]	; (8002c00 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8002b9e:	4b21      	ldr	r3, [pc, #132]	; (8002c24 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d904      	bls.n	8002bb0 <HAL_TIM_PeriodElapsedCallback+0x1c0>
 8002ba6:	4b24      	ldr	r3, [pc, #144]	; (8002c38 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8002bae:	639a      	str	r2, [r3, #56]	; 0x38
  		if(temp_int -200 < zadane_obiektu)__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0);
 8002bb0:	4b13      	ldr	r3, [pc, #76]	; (8002c00 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f1a3 02c8 	sub.w	r2, r3, #200	; 0xc8
 8002bb8:	4b1a      	ldr	r3, [pc, #104]	; (8002c24 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d203      	bcs.n	8002bc8 <HAL_TIM_PeriodElapsedCallback+0x1d8>
 8002bc0:	4b1d      	ldr	r3, [pc, #116]	; (8002c38 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	639a      	str	r2, [r3, #56]	; 0x38
  		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,pwm_duty);
 8002bc8:	4b1b      	ldr	r3, [pc, #108]	; (8002c38 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8002bd0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002bd2:	bf00      	nop
 8002bd4:	3798      	adds	r7, #152	; 0x98
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	f3af 8000 	nop.w
 8002be0:	00000000 	.word	0x00000000
 8002be4:	408f3800 	.word	0x408f3800
 8002be8:	200002f4 	.word	0x200002f4
 8002bec:	20000288 	.word	0x20000288
 8002bf0:	20000238 	.word	0x20000238
 8002bf4:	20000248 	.word	0x20000248
 8002bf8:	20000018 	.word	0x20000018
 8002bfc:	408f4000 	.word	0x408f4000
 8002c00:	20000240 	.word	0x20000240
 8002c04:	40590000 	.word	0x40590000
 8002c08:	20000250 	.word	0x20000250
 8002c0c:	10624dd3 	.word	0x10624dd3
 8002c10:	51eb851f 	.word	0x51eb851f
 8002c14:	0800add8 	.word	0x0800add8
 8002c18:	20000424 	.word	0x20000424
 8002c1c:	200003d8 	.word	0x200003d8
 8002c20:	2000025c 	.word	0x2000025c
 8002c24:	200000a0 	.word	0x200000a0
 8002c28:	200000a8 	.word	0x200000a8
 8002c2c:	20000098 	.word	0x20000098
 8002c30:	4479c000 	.word	0x4479c000
 8002c34:	2000009c 	.word	0x2000009c
 8002c38:	20000340 	.word	0x20000340

08002c3c <wypelnienie1>:

void wypelnienie1(uint16_t duty)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	80fb      	strh	r3, [r7, #6]
	duty = duty*10;
 8002c46:	88fb      	ldrh	r3, [r7, #6]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	0092      	lsls	r2, r2, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	80fb      	strh	r3, [r7, #6]
	zadane_rezystora=duty;
 8002c52:	88fb      	ldrh	r3, [r7, #6]
 8002c54:	4a03      	ldr	r2, [pc, #12]	; (8002c64 <wypelnienie1+0x28>)
 8002c56:	6013      	str	r3, [r2, #0]
	//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty);
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	20000254 	.word	0x20000254

08002c68 <wypelnienie2>:

void wypelnienie2(uint16_t duty)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	80fb      	strh	r3, [r7, #6]
	duty = duty*10;
 8002c72:	88fb      	ldrh	r3, [r7, #6]
 8002c74:	461a      	mov	r2, r3
 8002c76:	0092      	lsls	r2, r2, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	80fb      	strh	r3, [r7, #6]
	zadane_wiatraka=duty;
 8002c7e:	88fb      	ldrh	r3, [r7, #6]
 8002c80:	4a03      	ldr	r2, [pc, #12]	; (8002c90 <wypelnienie2+0x28>)
 8002c82:	6013      	str	r3, [r2, #0]
	//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty);
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	20000258 	.word	0x20000258

08002c94 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
	uint8_t fill=0;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	73fb      	strb	r3, [r7, #15]

	if(word[0] == 'r')
 8002ca0:	4b1c      	ldr	r3, [pc, #112]	; (8002d14 <HAL_UART_RxCpltCallback+0x80>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b72      	cmp	r3, #114	; 0x72
 8002ca6:	d113      	bne.n	8002cd0 <HAL_UART_RxCpltCallback+0x3c>
	{
		fill = ((word[1] - '0') * 10 + (word[2] - '0'));
 8002ca8:	4b1a      	ldr	r3, [pc, #104]	; (8002d14 <HAL_UART_RxCpltCallback+0x80>)
 8002caa:	785b      	ldrb	r3, [r3, #1]
 8002cac:	3b30      	subs	r3, #48	; 0x30
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	0092      	lsls	r2, r2, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	4b16      	ldr	r3, [pc, #88]	; (8002d14 <HAL_UART_RxCpltCallback+0x80>)
 8002cbc:	789b      	ldrb	r3, [r3, #2]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	3b30      	subs	r3, #48	; 0x30
 8002cc4:	73fb      	strb	r3, [r7, #15]
		wypelnienie1(fill);
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff ffb6 	bl	8002c3c <wypelnienie1>
	}

	if(word[0] == 'w')
 8002cd0:	4b10      	ldr	r3, [pc, #64]	; (8002d14 <HAL_UART_RxCpltCallback+0x80>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b77      	cmp	r3, #119	; 0x77
 8002cd6:	d113      	bne.n	8002d00 <HAL_UART_RxCpltCallback+0x6c>
	{
		fill = ((word[1] - '0') * 10 + (word[2] - '0'));
 8002cd8:	4b0e      	ldr	r3, [pc, #56]	; (8002d14 <HAL_UART_RxCpltCallback+0x80>)
 8002cda:	785b      	ldrb	r3, [r3, #1]
 8002cdc:	3b30      	subs	r3, #48	; 0x30
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	0092      	lsls	r2, r2, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <HAL_UART_RxCpltCallback+0x80>)
 8002cec:	789b      	ldrb	r3, [r3, #2]
 8002cee:	4413      	add	r3, r2
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	3b30      	subs	r3, #48	; 0x30
 8002cf4:	73fb      	strb	r3, [r7, #15]
		wypelnienie2(fill);
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff ffb4 	bl	8002c68 <wypelnienie2>
	}
	HAL_UART_Receive_IT(&huart3, word, 3);
 8002d00:	2203      	movs	r2, #3
 8002d02:	4904      	ldr	r1, [pc, #16]	; (8002d14 <HAL_UART_RxCpltCallback+0x80>)
 8002d04:	4804      	ldr	r0, [pc, #16]	; (8002d18 <HAL_UART_RxCpltCallback+0x84>)
 8002d06:	f006 f992 	bl	800902e <HAL_UART_Receive_IT>
}
 8002d0a:	bf00      	nop
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000094 	.word	0x20000094
 8002d18:	20000424 	.word	0x20000424

08002d1c <display_function>:

void display_function()
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af02      	add	r7, sp, #8
	if(powitanie)
 8002d22:	4b29      	ldr	r3, [pc, #164]	; (8002dc8 <display_function+0xac>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d014      	beq.n	8002d54 <display_function+0x38>
	{
		sprintf((char*)disp.f_line, "Dzie%c dobry %c", '\x4', '\x5');
 8002d2a:	2305      	movs	r3, #5
 8002d2c:	2204      	movs	r2, #4
 8002d2e:	4927      	ldr	r1, [pc, #156]	; (8002dcc <display_function+0xb0>)
 8002d30:	4827      	ldr	r0, [pc, #156]	; (8002dd0 <display_function+0xb4>)
 8002d32:	f007 fb87 	bl	800a444 <siprintf>
		sprintf((char*)disp.s_line, "smacznej kawusi");
 8002d36:	4927      	ldr	r1, [pc, #156]	; (8002dd4 <display_function+0xb8>)
 8002d38:	4827      	ldr	r0, [pc, #156]	; (8002dd8 <display_function+0xbc>)
 8002d3a:	f007 fb83 	bl	800a444 <siprintf>
		lcd_display(&disp);
 8002d3e:	4827      	ldr	r0, [pc, #156]	; (8002ddc <display_function+0xc0>)
 8002d40:	f7ff fd9a 	bl	8002878 <lcd_display>
		HAL_Delay(1000);
 8002d44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d48:	f000 feb2 	bl	8003ab0 <HAL_Delay>
		powitanie = 0;
 8002d4c:	4b1e      	ldr	r3, [pc, #120]	; (8002dc8 <display_function+0xac>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	e032      	b.n	8002dba <display_function+0x9e>
	}
	else
	{
		sprintf((char*)disp.f_line, "T. akt.:%d.%02d%cC", temp_int / 1000, temp_int % 1000, '\x7');
 8002d54:	4b22      	ldr	r3, [pc, #136]	; (8002de0 <display_function+0xc4>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a22      	ldr	r2, [pc, #136]	; (8002de4 <display_function+0xc8>)
 8002d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5e:	0999      	lsrs	r1, r3, #6
 8002d60:	4b1f      	ldr	r3, [pc, #124]	; (8002de0 <display_function+0xc4>)
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	4b1f      	ldr	r3, [pc, #124]	; (8002de4 <display_function+0xc8>)
 8002d66:	fba3 0302 	umull	r0, r3, r3, r2
 8002d6a:	099b      	lsrs	r3, r3, #6
 8002d6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d70:	fb00 f303 	mul.w	r3, r0, r3
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2207      	movs	r2, #7
 8002d78:	9200      	str	r2, [sp, #0]
 8002d7a:	460a      	mov	r2, r1
 8002d7c:	491a      	ldr	r1, [pc, #104]	; (8002de8 <display_function+0xcc>)
 8002d7e:	4814      	ldr	r0, [pc, #80]	; (8002dd0 <display_function+0xb4>)
 8002d80:	f007 fb60 	bl	800a444 <siprintf>
		sprintf((char*)disp.s_line, "T. zad.:%d.%02d%cC", zadane_obiektu / 1000, zadane_obiektu % 1000, '\x8');
 8002d84:	4b19      	ldr	r3, [pc, #100]	; (8002dec <display_function+0xd0>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a16      	ldr	r2, [pc, #88]	; (8002de4 <display_function+0xc8>)
 8002d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8e:	0999      	lsrs	r1, r3, #6
 8002d90:	4b16      	ldr	r3, [pc, #88]	; (8002dec <display_function+0xd0>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	4b13      	ldr	r3, [pc, #76]	; (8002de4 <display_function+0xc8>)
 8002d96:	fba3 0302 	umull	r0, r3, r3, r2
 8002d9a:	099b      	lsrs	r3, r3, #6
 8002d9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002da0:	fb00 f303 	mul.w	r3, r0, r3
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2208      	movs	r2, #8
 8002da8:	9200      	str	r2, [sp, #0]
 8002daa:	460a      	mov	r2, r1
 8002dac:	4910      	ldr	r1, [pc, #64]	; (8002df0 <display_function+0xd4>)
 8002dae:	480a      	ldr	r0, [pc, #40]	; (8002dd8 <display_function+0xbc>)
 8002db0:	f007 fb48 	bl	800a444 <siprintf>
		lcd_display(&disp);
 8002db4:	4809      	ldr	r0, [pc, #36]	; (8002ddc <display_function+0xc0>)
 8002db6:	f7ff fd5f 	bl	8002878 <lcd_display>
	}

	HAL_Delay(2000);
 8002dba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002dbe:	f000 fe77 	bl	8003ab0 <HAL_Delay>

}
 8002dc2:	bf00      	nop
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	200000a4 	.word	0x200000a4
 8002dcc:	0800ae0c 	.word	0x0800ae0c
 8002dd0:	20000265 	.word	0x20000265
 8002dd4:	0800ae1c 	.word	0x0800ae1c
 8002dd8:	20000276 	.word	0x20000276
 8002ddc:	20000264 	.word	0x20000264
 8002de0:	20000240 	.word	0x20000240
 8002de4:	10624dd3 	.word	0x10624dd3
 8002de8:	0800ae2c 	.word	0x0800ae2c
 8002dec:	200000a0 	.word	0x200000a0
 8002df0:	0800ae40 	.word	0x0800ae40
 8002df4:	00000000 	.word	0x00000000

08002df8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002dfc:	f000 fdfb 	bl	80039f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e00:	f000 f88a 	bl	8002f18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e04:	f7ff fa9e 	bl	8002344 <MX_GPIO_Init>
  MX_DMA_Init();
 8002e08:	f7ff fa7e 	bl	8002308 <MX_DMA_Init>
  MX_SPI4_Init();
 8002e0c:	f000 f978 	bl	8003100 <MX_SPI4_Init>
  MX_TIM2_Init();
 8002e10:	f000 fad4 	bl	80033bc <MX_TIM2_Init>
  MX_TIM4_Init();
 8002e14:	f000 fba6 	bl	8003564 <MX_TIM4_Init>
  MX_TIM3_Init();
 8002e18:	f000 fb1e 	bl	8003458 <MX_TIM3_Init>
  MX_TIM7_Init();
 8002e1c:	f000 fc1a 	bl	8003654 <MX_TIM7_Init>
  MX_I2C1_Init();
 8002e20:	f7ff fc02 	bl	8002628 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8002e24:	f000 fd26 	bl	8003874 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8002e28:	f7ff f9a0 	bl	800216c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  BMP2_Init(&bmp2dev);// inicjalizacja czujnika
 8002e2c:	4830      	ldr	r0, [pc, #192]	; (8002ef0 <main+0xf8>)
 8002e2e:	f7ff f86d 	bl	8001f0c <BMP2_Init>
  HAL_TIM_Base_Start_IT(&htim2);// uruchomienie timerow
 8002e32:	4830      	ldr	r0, [pc, #192]	; (8002ef4 <main+0xfc>)
 8002e34:	f004 fec6 	bl	8007bc4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);// uruchomienie timerow
 8002e38:	482f      	ldr	r0, [pc, #188]	; (8002ef8 <main+0x100>)
 8002e3a:	f004 fec3 	bl	8007bc4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002e3e:	2108      	movs	r1, #8
 8002e40:	482e      	ldr	r0, [pc, #184]	; (8002efc <main+0x104>)
 8002e42:	f004 ff99 	bl	8007d78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002e46:	2104      	movs	r1, #4
 8002e48:	482c      	ldr	r0, [pc, #176]	; (8002efc <main+0x104>)
 8002e4a:	f004 ff95 	bl	8007d78 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8002e4e:	4b2b      	ldr	r3, [pc, #172]	; (8002efc <main+0x104>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2200      	movs	r2, #0
 8002e54:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8002e56:	4b29      	ldr	r3, [pc, #164]	; (8002efc <main+0x104>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_UART_Receive_IT(&huart3, word, 3);
 8002e5e:	2203      	movs	r2, #3
 8002e60:	4927      	ldr	r1, [pc, #156]	; (8002f00 <main+0x108>)
 8002e62:	4828      	ldr	r0, [pc, #160]	; (8002f04 <main+0x10c>)
 8002e64:	f006 f8e3 	bl	800902e <HAL_UART_Receive_IT>
//wyswietlacz
  disp.addr = (0x27 << 1);
 8002e68:	4b27      	ldr	r3, [pc, #156]	; (8002f08 <main+0x110>)
 8002e6a:	224e      	movs	r2, #78	; 0x4e
 8002e6c:	701a      	strb	r2, [r3, #0]
  disp.bl = true;
 8002e6e:	4b26      	ldr	r3, [pc, #152]	; (8002f08 <main+0x110>)
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  lcd_init(&disp);
 8002e76:	4824      	ldr	r0, [pc, #144]	; (8002f08 <main+0x110>)
 8002e78:	f7ff fc76 	bl	8002768 <lcd_init>
  lcd_prog(&disp);
 8002e7c:	4822      	ldr	r0, [pc, #136]	; (8002f08 <main+0x110>)
 8002e7e:	f7ff fd79 	bl	8002974 <lcd_prog>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 8002e82:	4822      	ldr	r0, [pc, #136]	; (8002f0c <main+0x114>)
 8002e84:	f000 fe7c 	bl	8003b80 <HAL_ADC_Start>
	  display_function();
 8002e88:	f7ff ff48 	bl	8002d1c <display_function>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8002e8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002e90:	481e      	ldr	r0, [pc, #120]	; (8002f0c <main+0x114>)
 8002e92:	f000 ff43 	bl	8003d1c <HAL_ADC_PollForConversion>
	  readValue_potencjometr = HAL_ADC_GetValue(&hadc1);
 8002e96:	481d      	ldr	r0, [pc, #116]	; (8002f0c <main+0x114>)
 8002e98:	f001 f8db 	bl	8004052 <HAL_ADC_GetValue>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	4b1b      	ldr	r3, [pc, #108]	; (8002f10 <main+0x118>)
 8002ea2:	801a      	strh	r2, [r3, #0]
	  zadane_obiektu = readValue_potencjometr*5.36 +18000.0;
 8002ea4:	4b1a      	ldr	r3, [pc, #104]	; (8002f10 <main+0x118>)
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fd fb53 	bl	8000554 <__aeabi_i2d>
 8002eae:	a30c      	add	r3, pc, #48	; (adr r3, 8002ee0 <main+0xe8>)
 8002eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb4:	f7fd fbb8 	bl	8000628 <__aeabi_dmul>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4610      	mov	r0, r2
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	a309      	add	r3, pc, #36	; (adr r3, 8002ee8 <main+0xf0>)
 8002ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec6:	f7fd f9f9 	bl	80002bc <__adddf3>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4610      	mov	r0, r2
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	f7fd fe6b 	bl	8000bac <__aeabi_d2uiz>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	4a0e      	ldr	r2, [pc, #56]	; (8002f14 <main+0x11c>)
 8002eda:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Start(&hadc1);
 8002edc:	e7d1      	b.n	8002e82 <main+0x8a>
 8002ede:	bf00      	nop
 8002ee0:	d70a3d71 	.word	0xd70a3d71
 8002ee4:	401570a3 	.word	0x401570a3
 8002ee8:	00000000 	.word	0x00000000
 8002eec:	40d19400 	.word	0x40d19400
 8002ef0:	20000018 	.word	0x20000018
 8002ef4:	200002f4 	.word	0x200002f4
 8002ef8:	200003d8 	.word	0x200003d8
 8002efc:	20000340 	.word	0x20000340
 8002f00:	20000094 	.word	0x20000094
 8002f04:	20000424 	.word	0x20000424
 8002f08:	20000264 	.word	0x20000264
 8002f0c:	2000013c 	.word	0x2000013c
 8002f10:	20000260 	.word	0x20000260
 8002f14:	200000a0 	.word	0x200000a0

08002f18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b094      	sub	sp, #80	; 0x50
 8002f1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f1e:	f107 0320 	add.w	r3, r7, #32
 8002f22:	2230      	movs	r2, #48	; 0x30
 8002f24:	2100      	movs	r1, #0
 8002f26:	4618      	mov	r0, r3
 8002f28:	f007 faac 	bl	800a484 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f2c:	f107 030c 	add.w	r3, r7, #12
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	60da      	str	r2, [r3, #12]
 8002f3a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002f3c:	f002 fd70 	bl	8005a20 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f40:	4b2a      	ldr	r3, [pc, #168]	; (8002fec <SystemClock_Config+0xd4>)
 8002f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f44:	4a29      	ldr	r2, [pc, #164]	; (8002fec <SystemClock_Config+0xd4>)
 8002f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f4a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f4c:	4b27      	ldr	r3, [pc, #156]	; (8002fec <SystemClock_Config+0xd4>)
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f58:	4b25      	ldr	r3, [pc, #148]	; (8002ff0 <SystemClock_Config+0xd8>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a24      	ldr	r2, [pc, #144]	; (8002ff0 <SystemClock_Config+0xd8>)
 8002f5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f62:	6013      	str	r3, [r2, #0]
 8002f64:	4b22      	ldr	r3, [pc, #136]	; (8002ff0 <SystemClock_Config+0xd8>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f6c:	607b      	str	r3, [r7, #4]
 8002f6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f70:	2301      	movs	r3, #1
 8002f72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002f74:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002f84:	2304      	movs	r3, #4
 8002f86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002f88:	23d8      	movs	r3, #216	; 0xd8
 8002f8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002f90:	2303      	movs	r3, #3
 8002f92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f94:	f107 0320 	add.w	r3, r7, #32
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f002 fda1 	bl	8005ae0 <HAL_RCC_OscConfig>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002fa4:	f000 f826 	bl	8002ff4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002fa8:	f002 fd4a 	bl	8005a40 <HAL_PWREx_EnableOverDrive>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002fb2:	f000 f81f 	bl	8002ff4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fb6:	230f      	movs	r3, #15
 8002fb8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fba:	2302      	movs	r3, #2
 8002fbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002fc2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002fc6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002fc8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002fcc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002fce:	f107 030c 	add.w	r3, r7, #12
 8002fd2:	2107      	movs	r1, #7
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f003 f827 	bl	8006028 <HAL_RCC_ClockConfig>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002fe0:	f000 f808 	bl	8002ff4 <Error_Handler>
  }
}
 8002fe4:	bf00      	nop
 8002fe6:	3750      	adds	r7, #80	; 0x50
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	40007000 	.word	0x40007000

08002ff4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ff8:	b672      	cpsid	i
}
 8002ffa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ffc:	e7fe      	b.n	8002ffc <Error_Handler+0x8>

08002ffe <calculate_discrete_pid>:

#include "pid_regulator.h"

float32_t calculate_discrete_pid(pid_t2* pid, float32_t setpoint, float32_t measured){
 8002ffe:	b5b0      	push	{r4, r5, r7, lr}
 8003000:	b08c      	sub	sp, #48	; 0x30
 8003002:	af00      	add	r7, sp, #0
 8003004:	60f8      	str	r0, [r7, #12]
 8003006:	ed87 0a02 	vstr	s0, [r7, #8]
 800300a:	edc7 0a01 	vstr	s1, [r7, #4]
	float32_t u=0, P, I, D, error, integral, derivative;
 800300e:	f04f 0300 	mov.w	r3, #0
 8003012:	62fb      	str	r3, [r7, #44]	; 0x2c

	error = setpoint-measured;
 8003014:	ed97 7a02 	vldr	s14, [r7, #8]
 8003018:	edd7 7a01 	vldr	s15, [r7, #4]
 800301c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003020:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	//proportional part
	P = pid->param.Kp * error;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	edd3 7a00 	vldr	s15, [r3]
 800302a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800302e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003032:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	//integral part
	integral = pid->previous_integral + (error+pid->previous_error) ; //numerical integrator without anti-windup
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	ed93 7a05 	vldr	s14, [r3, #20]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	edd3 6a04 	vldr	s13, [r3, #16]
 8003042:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800304a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800304e:	edc7 7a08 	vstr	s15, [r7, #32]
	pid->previous_integral = integral;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a3a      	ldr	r2, [r7, #32]
 8003056:	615a      	str	r2, [r3, #20]
	I = pid->param.Ki*integral*(pid->param.dt/2.0);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	ed93 7a01 	vldr	s14, [r3, #4]
 800305e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003066:	ee17 0a90 	vmov	r0, s15
 800306a:	f7fd fa85 	bl	8000578 <__aeabi_f2d>
 800306e:	4604      	mov	r4, r0
 8003070:	460d      	mov	r5, r1
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	4618      	mov	r0, r3
 8003078:	f7fd fa7e 	bl	8000578 <__aeabi_f2d>
 800307c:	f04f 0200 	mov.w	r2, #0
 8003080:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003084:	f7fd fbfa 	bl	800087c <__aeabi_ddiv>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	4620      	mov	r0, r4
 800308e:	4629      	mov	r1, r5
 8003090:	f7fd faca 	bl	8000628 <__aeabi_dmul>
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	4610      	mov	r0, r2
 800309a:	4619      	mov	r1, r3
 800309c:	f7fd fda6 	bl	8000bec <__aeabi_d2f>
 80030a0:	4603      	mov	r3, r0
 80030a2:	61fb      	str	r3, [r7, #28]

	//derivative part
	derivative = (error - pid->previous_error)/pid->param.dt; //numerical derivative without filter
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	edd3 7a04 	vldr	s15, [r3, #16]
 80030aa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80030ae:	ee77 6a67 	vsub.f32	s13, s14, s15
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	ed93 7a03 	vldr	s14, [r3, #12]
 80030b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030bc:	edc7 7a06 	vstr	s15, [r7, #24]
	pid->previous_error = error;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030c4:	611a      	str	r2, [r3, #16]
	D = pid->param.Kd*derivative;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80030cc:	ed97 7a06 	vldr	s14, [r7, #24]
 80030d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030d4:	edc7 7a05 	vstr	s15, [r7, #20]

	//sum of all parts
	u = P  + I + D; //without saturation
 80030d8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80030dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80030e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030e4:	ed97 7a05 	vldr	s14, [r7, #20]
 80030e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ec:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c


	return u;
 80030f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f2:	ee07 3a90 	vmov	s15, r3
}
 80030f6:	eeb0 0a67 	vmov.f32	s0, s15
 80030fa:	3730      	adds	r7, #48	; 0x30
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bdb0      	pop	{r4, r5, r7, pc}

08003100 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8003104:	4b1b      	ldr	r3, [pc, #108]	; (8003174 <MX_SPI4_Init+0x74>)
 8003106:	4a1c      	ldr	r2, [pc, #112]	; (8003178 <MX_SPI4_Init+0x78>)
 8003108:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800310a:	4b1a      	ldr	r3, [pc, #104]	; (8003174 <MX_SPI4_Init+0x74>)
 800310c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003110:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003112:	4b18      	ldr	r3, [pc, #96]	; (8003174 <MX_SPI4_Init+0x74>)
 8003114:	2200      	movs	r2, #0
 8003116:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003118:	4b16      	ldr	r3, [pc, #88]	; (8003174 <MX_SPI4_Init+0x74>)
 800311a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800311e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003120:	4b14      	ldr	r3, [pc, #80]	; (8003174 <MX_SPI4_Init+0x74>)
 8003122:	2202      	movs	r2, #2
 8003124:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003126:	4b13      	ldr	r3, [pc, #76]	; (8003174 <MX_SPI4_Init+0x74>)
 8003128:	2201      	movs	r2, #1
 800312a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800312c:	4b11      	ldr	r3, [pc, #68]	; (8003174 <MX_SPI4_Init+0x74>)
 800312e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003132:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003134:	4b0f      	ldr	r3, [pc, #60]	; (8003174 <MX_SPI4_Init+0x74>)
 8003136:	2218      	movs	r2, #24
 8003138:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800313a:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <MX_SPI4_Init+0x74>)
 800313c:	2200      	movs	r2, #0
 800313e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003140:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <MX_SPI4_Init+0x74>)
 8003142:	2200      	movs	r2, #0
 8003144:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003146:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <MX_SPI4_Init+0x74>)
 8003148:	2200      	movs	r2, #0
 800314a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 800314c:	4b09      	ldr	r3, [pc, #36]	; (8003174 <MX_SPI4_Init+0x74>)
 800314e:	2207      	movs	r2, #7
 8003150:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003152:	4b08      	ldr	r3, [pc, #32]	; (8003174 <MX_SPI4_Init+0x74>)
 8003154:	2200      	movs	r2, #0
 8003156:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003158:	4b06      	ldr	r3, [pc, #24]	; (8003174 <MX_SPI4_Init+0x74>)
 800315a:	2200      	movs	r2, #0
 800315c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800315e:	4805      	ldr	r0, [pc, #20]	; (8003174 <MX_SPI4_Init+0x74>)
 8003160:	f003 fd78 	bl	8006c54 <HAL_SPI_Init>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800316a:	f7ff ff43 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800316e:	bf00      	nop
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	2000028c 	.word	0x2000028c
 8003178:	40013400 	.word	0x40013400

0800317c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08a      	sub	sp, #40	; 0x28
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003184:	f107 0314 	add.w	r3, r7, #20
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	605a      	str	r2, [r3, #4]
 800318e:	609a      	str	r2, [r3, #8]
 8003190:	60da      	str	r2, [r3, #12]
 8003192:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a17      	ldr	r2, [pc, #92]	; (80031f8 <HAL_SPI_MspInit+0x7c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d127      	bne.n	80031ee <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800319e:	4b17      	ldr	r3, [pc, #92]	; (80031fc <HAL_SPI_MspInit+0x80>)
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	4a16      	ldr	r2, [pc, #88]	; (80031fc <HAL_SPI_MspInit+0x80>)
 80031a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031a8:	6453      	str	r3, [r2, #68]	; 0x44
 80031aa:	4b14      	ldr	r3, [pc, #80]	; (80031fc <HAL_SPI_MspInit+0x80>)
 80031ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031b2:	613b      	str	r3, [r7, #16]
 80031b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80031b6:	4b11      	ldr	r3, [pc, #68]	; (80031fc <HAL_SPI_MspInit+0x80>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	4a10      	ldr	r2, [pc, #64]	; (80031fc <HAL_SPI_MspInit+0x80>)
 80031bc:	f043 0310 	orr.w	r3, r3, #16
 80031c0:	6313      	str	r3, [r2, #48]	; 0x30
 80031c2:	4b0e      	ldr	r3, [pc, #56]	; (80031fc <HAL_SPI_MspInit+0x80>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c6:	f003 0310 	and.w	r3, r3, #16
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = BMP2_SCK_Pin|BMP2_SDO_Pin|BMP2_SDA_Pin;
 80031ce:	2364      	movs	r3, #100	; 0x64
 80031d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d2:	2302      	movs	r3, #2
 80031d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d6:	2300      	movs	r3, #0
 80031d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031da:	2303      	movs	r3, #3
 80031dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80031de:	2305      	movs	r3, #5
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031e2:	f107 0314 	add.w	r3, r7, #20
 80031e6:	4619      	mov	r1, r3
 80031e8:	4805      	ldr	r0, [pc, #20]	; (8003200 <HAL_SPI_MspInit+0x84>)
 80031ea:	f001 fe45 	bl	8004e78 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80031ee:	bf00      	nop
 80031f0:	3728      	adds	r7, #40	; 0x28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40013400 	.word	0x40013400
 80031fc:	40023800 	.word	0x40023800
 8003200:	40021000 	.word	0x40021000

08003204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800320a:	4b0f      	ldr	r3, [pc, #60]	; (8003248 <HAL_MspInit+0x44>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	4a0e      	ldr	r2, [pc, #56]	; (8003248 <HAL_MspInit+0x44>)
 8003210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003214:	6413      	str	r3, [r2, #64]	; 0x40
 8003216:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <HAL_MspInit+0x44>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321e:	607b      	str	r3, [r7, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003222:	4b09      	ldr	r3, [pc, #36]	; (8003248 <HAL_MspInit+0x44>)
 8003224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003226:	4a08      	ldr	r2, [pc, #32]	; (8003248 <HAL_MspInit+0x44>)
 8003228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800322c:	6453      	str	r3, [r2, #68]	; 0x44
 800322e:	4b06      	ldr	r3, [pc, #24]	; (8003248 <HAL_MspInit+0x44>)
 8003230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003236:	603b      	str	r3, [r7, #0]
 8003238:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	40023800 	.word	0x40023800

0800324c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003250:	e7fe      	b.n	8003250 <NMI_Handler+0x4>

08003252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003252:	b480      	push	{r7}
 8003254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003256:	e7fe      	b.n	8003256 <HardFault_Handler+0x4>

08003258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800325c:	e7fe      	b.n	800325c <MemManage_Handler+0x4>

0800325e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800325e:	b480      	push	{r7}
 8003260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003262:	e7fe      	b.n	8003262 <BusFault_Handler+0x4>

08003264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003268:	e7fe      	b.n	8003268 <UsageFault_Handler+0x4>

0800326a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800326a:	b480      	push	{r7}
 800326c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800326e:	bf00      	nop
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800327c:	bf00      	nop
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003286:	b480      	push	{r7}
 8003288:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800328a:	bf00      	nop
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003298:	f000 fbea 	bl	8003a70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800329c:	bf00      	nop
 800329e:	bd80      	pop	{r7, pc}

080032a0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80032a4:	4802      	ldr	r0, [pc, #8]	; (80032b0 <ADC_IRQHandler+0x10>)
 80032a6:	f000 fdc4 	bl	8003e32 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80032aa:	bf00      	nop
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	2000013c 	.word	0x2000013c

080032b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80032b8:	4802      	ldr	r0, [pc, #8]	; (80032c4 <TIM2_IRQHandler+0x10>)
 80032ba:	f004 fe57 	bl	8007f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80032be:	bf00      	nop
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	200002f4 	.word	0x200002f4

080032c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80032cc:	4802      	ldr	r0, [pc, #8]	; (80032d8 <TIM3_IRQHandler+0x10>)
 80032ce:	f004 fe4d 	bl	8007f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80032d2:	bf00      	nop
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	20000340 	.word	0x20000340

080032dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80032e0:	4802      	ldr	r0, [pc, #8]	; (80032ec <TIM4_IRQHandler+0x10>)
 80032e2:	f004 fe43 	bl	8007f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80032e6:	bf00      	nop
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	2000038c 	.word	0x2000038c

080032f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80032f4:	4802      	ldr	r0, [pc, #8]	; (8003300 <USART3_IRQHandler+0x10>)
 80032f6:	f005 fedf 	bl	80090b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80032fa:	bf00      	nop
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	20000424 	.word	0x20000424

08003304 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003308:	4802      	ldr	r0, [pc, #8]	; (8003314 <TIM7_IRQHandler+0x10>)
 800330a:	f004 fe2f 	bl	8007f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800330e:	bf00      	nop
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	200003d8 	.word	0x200003d8

08003318 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800331c:	4802      	ldr	r0, [pc, #8]	; (8003328 <DMA2_Stream0_IRQHandler+0x10>)
 800331e:	f001 fb6f 	bl	8004a00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003322:	bf00      	nop
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	20000184 	.word	0x20000184

0800332c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003334:	4a14      	ldr	r2, [pc, #80]	; (8003388 <_sbrk+0x5c>)
 8003336:	4b15      	ldr	r3, [pc, #84]	; (800338c <_sbrk+0x60>)
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003340:	4b13      	ldr	r3, [pc, #76]	; (8003390 <_sbrk+0x64>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d102      	bne.n	800334e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003348:	4b11      	ldr	r3, [pc, #68]	; (8003390 <_sbrk+0x64>)
 800334a:	4a12      	ldr	r2, [pc, #72]	; (8003394 <_sbrk+0x68>)
 800334c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800334e:	4b10      	ldr	r3, [pc, #64]	; (8003390 <_sbrk+0x64>)
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4413      	add	r3, r2
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	429a      	cmp	r2, r3
 800335a:	d207      	bcs.n	800336c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800335c:	f007 f89a 	bl	800a494 <__errno>
 8003360:	4603      	mov	r3, r0
 8003362:	220c      	movs	r2, #12
 8003364:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003366:	f04f 33ff 	mov.w	r3, #4294967295
 800336a:	e009      	b.n	8003380 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800336c:	4b08      	ldr	r3, [pc, #32]	; (8003390 <_sbrk+0x64>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003372:	4b07      	ldr	r3, [pc, #28]	; (8003390 <_sbrk+0x64>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4413      	add	r3, r2
 800337a:	4a05      	ldr	r2, [pc, #20]	; (8003390 <_sbrk+0x64>)
 800337c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800337e:	68fb      	ldr	r3, [r7, #12]
}
 8003380:	4618      	mov	r0, r3
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	20050000 	.word	0x20050000
 800338c:	00000400 	.word	0x00000400
 8003390:	200002f0 	.word	0x200002f0
 8003394:	200005f8 	.word	0x200005f8

08003398 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800339c:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <SystemInit+0x20>)
 800339e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a2:	4a05      	ldr	r2, [pc, #20]	; (80033b8 <SystemInit+0x20>)
 80033a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033ac:	bf00      	nop
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	e000ed00 	.word	0xe000ed00

080033bc <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033c2:	f107 0310 	add.w	r3, r7, #16
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	605a      	str	r2, [r3, #4]
 80033cc:	609a      	str	r2, [r3, #8]
 80033ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033d0:	1d3b      	adds	r3, r7, #4
 80033d2:	2200      	movs	r2, #0
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	605a      	str	r2, [r3, #4]
 80033d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80033da:	4b1e      	ldr	r3, [pc, #120]	; (8003454 <MX_TIM2_Init+0x98>)
 80033dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1079;
 80033e2:	4b1c      	ldr	r3, [pc, #112]	; (8003454 <MX_TIM2_Init+0x98>)
 80033e4:	f240 4237 	movw	r2, #1079	; 0x437
 80033e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033ea:	4b1a      	ldr	r3, [pc, #104]	; (8003454 <MX_TIM2_Init+0x98>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24999;
 80033f0:	4b18      	ldr	r3, [pc, #96]	; (8003454 <MX_TIM2_Init+0x98>)
 80033f2:	f246 12a7 	movw	r2, #24999	; 0x61a7
 80033f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033f8:	4b16      	ldr	r3, [pc, #88]	; (8003454 <MX_TIM2_Init+0x98>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033fe:	4b15      	ldr	r3, [pc, #84]	; (8003454 <MX_TIM2_Init+0x98>)
 8003400:	2200      	movs	r2, #0
 8003402:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003404:	4813      	ldr	r0, [pc, #76]	; (8003454 <MX_TIM2_Init+0x98>)
 8003406:	f004 fb85 	bl	8007b14 <HAL_TIM_Base_Init>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8003410:	f7ff fdf0 	bl	8002ff4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003418:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800341a:	f107 0310 	add.w	r3, r7, #16
 800341e:	4619      	mov	r1, r3
 8003420:	480c      	ldr	r0, [pc, #48]	; (8003454 <MX_TIM2_Init+0x98>)
 8003422:	f004 ffd7 	bl	80083d4 <HAL_TIM_ConfigClockSource>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800342c:	f7ff fde2 	bl	8002ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003430:	2300      	movs	r3, #0
 8003432:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003434:	2300      	movs	r3, #0
 8003436:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003438:	1d3b      	adds	r3, r7, #4
 800343a:	4619      	mov	r1, r3
 800343c:	4805      	ldr	r0, [pc, #20]	; (8003454 <MX_TIM2_Init+0x98>)
 800343e:	f005 fc79 	bl	8008d34 <HAL_TIMEx_MasterConfigSynchronization>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8003448:	f7ff fdd4 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800344c:	bf00      	nop
 800344e:	3720      	adds	r7, #32
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	200002f4 	.word	0x200002f4

08003458 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08e      	sub	sp, #56	; 0x38
 800345c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800345e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	605a      	str	r2, [r3, #4]
 8003468:	609a      	str	r2, [r3, #8]
 800346a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800346c:	f107 031c 	add.w	r3, r7, #28
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	605a      	str	r2, [r3, #4]
 8003476:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003478:	463b      	mov	r3, r7
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	605a      	str	r2, [r3, #4]
 8003480:	609a      	str	r2, [r3, #8]
 8003482:	60da      	str	r2, [r3, #12]
 8003484:	611a      	str	r2, [r3, #16]
 8003486:	615a      	str	r2, [r3, #20]
 8003488:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800348a:	4b34      	ldr	r3, [pc, #208]	; (800355c <MX_TIM3_Init+0x104>)
 800348c:	4a34      	ldr	r2, [pc, #208]	; (8003560 <MX_TIM3_Init+0x108>)
 800348e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8003490:	4b32      	ldr	r3, [pc, #200]	; (800355c <MX_TIM3_Init+0x104>)
 8003492:	2247      	movs	r2, #71	; 0x47
 8003494:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003496:	4b31      	ldr	r3, [pc, #196]	; (800355c <MX_TIM3_Init+0x104>)
 8003498:	2200      	movs	r2, #0
 800349a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800349c:	4b2f      	ldr	r3, [pc, #188]	; (800355c <MX_TIM3_Init+0x104>)
 800349e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80034a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034a4:	4b2d      	ldr	r3, [pc, #180]	; (800355c <MX_TIM3_Init+0x104>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034aa:	4b2c      	ldr	r3, [pc, #176]	; (800355c <MX_TIM3_Init+0x104>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80034b0:	482a      	ldr	r0, [pc, #168]	; (800355c <MX_TIM3_Init+0x104>)
 80034b2:	f004 fb2f 	bl	8007b14 <HAL_TIM_Base_Init>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80034bc:	f7ff fd9a 	bl	8002ff4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80034c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034ca:	4619      	mov	r1, r3
 80034cc:	4823      	ldr	r0, [pc, #140]	; (800355c <MX_TIM3_Init+0x104>)
 80034ce:	f004 ff81 	bl	80083d4 <HAL_TIM_ConfigClockSource>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80034d8:	f7ff fd8c 	bl	8002ff4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80034dc:	481f      	ldr	r0, [pc, #124]	; (800355c <MX_TIM3_Init+0x104>)
 80034de:	f004 fbe9 	bl	8007cb4 <HAL_TIM_PWM_Init>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80034e8:	f7ff fd84 	bl	8002ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034ec:	2300      	movs	r3, #0
 80034ee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034f0:	2300      	movs	r3, #0
 80034f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80034f4:	f107 031c 	add.w	r3, r7, #28
 80034f8:	4619      	mov	r1, r3
 80034fa:	4818      	ldr	r0, [pc, #96]	; (800355c <MX_TIM3_Init+0x104>)
 80034fc:	f005 fc1a 	bl	8008d34 <HAL_TIMEx_MasterConfigSynchronization>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003506:	f7ff fd75 	bl	8002ff4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800350a:	2360      	movs	r3, #96	; 0x60
 800350c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800350e:	2300      	movs	r3, #0
 8003510:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003512:	2300      	movs	r3, #0
 8003514:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003516:	2300      	movs	r3, #0
 8003518:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800351a:	463b      	mov	r3, r7
 800351c:	2204      	movs	r2, #4
 800351e:	4619      	mov	r1, r3
 8003520:	480e      	ldr	r0, [pc, #56]	; (800355c <MX_TIM3_Init+0x104>)
 8003522:	f004 fe43 	bl	80081ac <HAL_TIM_PWM_ConfigChannel>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800352c:	f7ff fd62 	bl	8002ff4 <Error_Handler>
  }
  sConfigOC.Pulse = 500;
 8003530:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003534:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003536:	463b      	mov	r3, r7
 8003538:	2208      	movs	r2, #8
 800353a:	4619      	mov	r1, r3
 800353c:	4807      	ldr	r0, [pc, #28]	; (800355c <MX_TIM3_Init+0x104>)
 800353e:	f004 fe35 	bl	80081ac <HAL_TIM_PWM_ConfigChannel>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 8003548:	f7ff fd54 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800354c:	4803      	ldr	r0, [pc, #12]	; (800355c <MX_TIM3_Init+0x104>)
 800354e:	f000 f931 	bl	80037b4 <HAL_TIM_MspPostInit>

}
 8003552:	bf00      	nop
 8003554:	3738      	adds	r7, #56	; 0x38
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	20000340 	.word	0x20000340
 8003560:	40000400 	.word	0x40000400

08003564 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08e      	sub	sp, #56	; 0x38
 8003568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800356a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	605a      	str	r2, [r3, #4]
 8003574:	609a      	str	r2, [r3, #8]
 8003576:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003578:	f107 031c 	add.w	r3, r7, #28
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	605a      	str	r2, [r3, #4]
 8003582:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003584:	463b      	mov	r3, r7
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	605a      	str	r2, [r3, #4]
 800358c:	609a      	str	r2, [r3, #8]
 800358e:	60da      	str	r2, [r3, #12]
 8003590:	611a      	str	r2, [r3, #16]
 8003592:	615a      	str	r2, [r3, #20]
 8003594:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003596:	4b2d      	ldr	r3, [pc, #180]	; (800364c <MX_TIM4_Init+0xe8>)
 8003598:	4a2d      	ldr	r2, [pc, #180]	; (8003650 <MX_TIM4_Init+0xec>)
 800359a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 107;
 800359c:	4b2b      	ldr	r3, [pc, #172]	; (800364c <MX_TIM4_Init+0xe8>)
 800359e:	226b      	movs	r2, #107	; 0x6b
 80035a0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035a2:	4b2a      	ldr	r3, [pc, #168]	; (800364c <MX_TIM4_Init+0xe8>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80035a8:	4b28      	ldr	r3, [pc, #160]	; (800364c <MX_TIM4_Init+0xe8>)
 80035aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035ae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035b0:	4b26      	ldr	r3, [pc, #152]	; (800364c <MX_TIM4_Init+0xe8>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035b6:	4b25      	ldr	r3, [pc, #148]	; (800364c <MX_TIM4_Init+0xe8>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80035bc:	4823      	ldr	r0, [pc, #140]	; (800364c <MX_TIM4_Init+0xe8>)
 80035be:	f004 faa9 	bl	8007b14 <HAL_TIM_Base_Init>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80035c8:	f7ff fd14 	bl	8002ff4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035d0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80035d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035d6:	4619      	mov	r1, r3
 80035d8:	481c      	ldr	r0, [pc, #112]	; (800364c <MX_TIM4_Init+0xe8>)
 80035da:	f004 fefb 	bl	80083d4 <HAL_TIM_ConfigClockSource>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80035e4:	f7ff fd06 	bl	8002ff4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80035e8:	4818      	ldr	r0, [pc, #96]	; (800364c <MX_TIM4_Init+0xe8>)
 80035ea:	f004 fb63 	bl	8007cb4 <HAL_TIM_PWM_Init>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80035f4:	f7ff fcfe 	bl	8002ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035f8:	2300      	movs	r3, #0
 80035fa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035fc:	2300      	movs	r3, #0
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003600:	f107 031c 	add.w	r3, r7, #28
 8003604:	4619      	mov	r1, r3
 8003606:	4811      	ldr	r0, [pc, #68]	; (800364c <MX_TIM4_Init+0xe8>)
 8003608:	f005 fb94 	bl	8008d34 <HAL_TIMEx_MasterConfigSynchronization>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8003612:	f7ff fcef 	bl	8002ff4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003616:	2360      	movs	r3, #96	; 0x60
 8003618:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800361a:	2300      	movs	r3, #0
 800361c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800361e:	2300      	movs	r3, #0
 8003620:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003622:	2300      	movs	r3, #0
 8003624:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003626:	463b      	mov	r3, r7
 8003628:	2200      	movs	r2, #0
 800362a:	4619      	mov	r1, r3
 800362c:	4807      	ldr	r0, [pc, #28]	; (800364c <MX_TIM4_Init+0xe8>)
 800362e:	f004 fdbd 	bl	80081ac <HAL_TIM_PWM_ConfigChannel>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8003638:	f7ff fcdc 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800363c:	4803      	ldr	r0, [pc, #12]	; (800364c <MX_TIM4_Init+0xe8>)
 800363e:	f000 f8b9 	bl	80037b4 <HAL_TIM_MspPostInit>

}
 8003642:	bf00      	nop
 8003644:	3738      	adds	r7, #56	; 0x38
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	2000038c 	.word	0x2000038c
 8003650:	40000800 	.word	0x40000800

08003654 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800365a:	1d3b      	adds	r3, r7, #4
 800365c:	2200      	movs	r2, #0
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	605a      	str	r2, [r3, #4]
 8003662:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003664:	4b15      	ldr	r3, [pc, #84]	; (80036bc <MX_TIM7_Init+0x68>)
 8003666:	4a16      	ldr	r2, [pc, #88]	; (80036c0 <MX_TIM7_Init+0x6c>)
 8003668:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10799;
 800366a:	4b14      	ldr	r3, [pc, #80]	; (80036bc <MX_TIM7_Init+0x68>)
 800366c:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8003670:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003672:	4b12      	ldr	r3, [pc, #72]	; (80036bc <MX_TIM7_Init+0x68>)
 8003674:	2200      	movs	r2, #0
 8003676:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8003678:	4b10      	ldr	r3, [pc, #64]	; (80036bc <MX_TIM7_Init+0x68>)
 800367a:	f242 720f 	movw	r2, #9999	; 0x270f
 800367e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003680:	4b0e      	ldr	r3, [pc, #56]	; (80036bc <MX_TIM7_Init+0x68>)
 8003682:	2200      	movs	r2, #0
 8003684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003686:	480d      	ldr	r0, [pc, #52]	; (80036bc <MX_TIM7_Init+0x68>)
 8003688:	f004 fa44 	bl	8007b14 <HAL_TIM_Base_Init>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8003692:	f7ff fcaf 	bl	8002ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003696:	2300      	movs	r3, #0
 8003698:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800369a:	2300      	movs	r3, #0
 800369c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800369e:	1d3b      	adds	r3, r7, #4
 80036a0:	4619      	mov	r1, r3
 80036a2:	4806      	ldr	r0, [pc, #24]	; (80036bc <MX_TIM7_Init+0x68>)
 80036a4:	f005 fb46 	bl	8008d34 <HAL_TIMEx_MasterConfigSynchronization>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80036ae:	f7ff fca1 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80036b2:	bf00      	nop
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	200003d8 	.word	0x200003d8
 80036c0:	40001400 	.word	0x40001400

080036c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d4:	d114      	bne.n	8003700 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036d6:	4b33      	ldr	r3, [pc, #204]	; (80037a4 <HAL_TIM_Base_MspInit+0xe0>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	4a32      	ldr	r2, [pc, #200]	; (80037a4 <HAL_TIM_Base_MspInit+0xe0>)
 80036dc:	f043 0301 	orr.w	r3, r3, #1
 80036e0:	6413      	str	r3, [r2, #64]	; 0x40
 80036e2:	4b30      	ldr	r3, [pc, #192]	; (80037a4 <HAL_TIM_Base_MspInit+0xe0>)
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80036ee:	2200      	movs	r2, #0
 80036f0:	2100      	movs	r1, #0
 80036f2:	201c      	movs	r0, #28
 80036f4:	f001 f80d 	bl	8004712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80036f8:	201c      	movs	r0, #28
 80036fa:	f001 f826 	bl	800474a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80036fe:	e04c      	b.n	800379a <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a28      	ldr	r2, [pc, #160]	; (80037a8 <HAL_TIM_Base_MspInit+0xe4>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d114      	bne.n	8003734 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800370a:	4b26      	ldr	r3, [pc, #152]	; (80037a4 <HAL_TIM_Base_MspInit+0xe0>)
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	4a25      	ldr	r2, [pc, #148]	; (80037a4 <HAL_TIM_Base_MspInit+0xe0>)
 8003710:	f043 0302 	orr.w	r3, r3, #2
 8003714:	6413      	str	r3, [r2, #64]	; 0x40
 8003716:	4b23      	ldr	r3, [pc, #140]	; (80037a4 <HAL_TIM_Base_MspInit+0xe0>)
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	613b      	str	r3, [r7, #16]
 8003720:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003722:	2200      	movs	r2, #0
 8003724:	2100      	movs	r1, #0
 8003726:	201d      	movs	r0, #29
 8003728:	f000 fff3 	bl	8004712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800372c:	201d      	movs	r0, #29
 800372e:	f001 f80c 	bl	800474a <HAL_NVIC_EnableIRQ>
}
 8003732:	e032      	b.n	800379a <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a1c      	ldr	r2, [pc, #112]	; (80037ac <HAL_TIM_Base_MspInit+0xe8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d114      	bne.n	8003768 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800373e:	4b19      	ldr	r3, [pc, #100]	; (80037a4 <HAL_TIM_Base_MspInit+0xe0>)
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	4a18      	ldr	r2, [pc, #96]	; (80037a4 <HAL_TIM_Base_MspInit+0xe0>)
 8003744:	f043 0304 	orr.w	r3, r3, #4
 8003748:	6413      	str	r3, [r2, #64]	; 0x40
 800374a:	4b16      	ldr	r3, [pc, #88]	; (80037a4 <HAL_TIM_Base_MspInit+0xe0>)
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	f003 0304 	and.w	r3, r3, #4
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003756:	2200      	movs	r2, #0
 8003758:	2100      	movs	r1, #0
 800375a:	201e      	movs	r0, #30
 800375c:	f000 ffd9 	bl	8004712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003760:	201e      	movs	r0, #30
 8003762:	f000 fff2 	bl	800474a <HAL_NVIC_EnableIRQ>
}
 8003766:	e018      	b.n	800379a <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM7)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a10      	ldr	r2, [pc, #64]	; (80037b0 <HAL_TIM_Base_MspInit+0xec>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d113      	bne.n	800379a <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003772:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <HAL_TIM_Base_MspInit+0xe0>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	4a0b      	ldr	r2, [pc, #44]	; (80037a4 <HAL_TIM_Base_MspInit+0xe0>)
 8003778:	f043 0320 	orr.w	r3, r3, #32
 800377c:	6413      	str	r3, [r2, #64]	; 0x40
 800377e:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <HAL_TIM_Base_MspInit+0xe0>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	60bb      	str	r3, [r7, #8]
 8003788:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800378a:	2200      	movs	r2, #0
 800378c:	2100      	movs	r1, #0
 800378e:	2037      	movs	r0, #55	; 0x37
 8003790:	f000 ffbf 	bl	8004712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003794:	2037      	movs	r0, #55	; 0x37
 8003796:	f000 ffd8 	bl	800474a <HAL_NVIC_EnableIRQ>
}
 800379a:	bf00      	nop
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40023800 	.word	0x40023800
 80037a8:	40000400 	.word	0x40000400
 80037ac:	40000800 	.word	0x40000800
 80037b0:	40001400 	.word	0x40001400

080037b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b08a      	sub	sp, #40	; 0x28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037bc:	f107 0314 	add.w	r3, r7, #20
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	605a      	str	r2, [r3, #4]
 80037c6:	609a      	str	r2, [r3, #8]
 80037c8:	60da      	str	r2, [r3, #12]
 80037ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a23      	ldr	r2, [pc, #140]	; (8003860 <HAL_TIM_MspPostInit+0xac>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d11d      	bne.n	8003812 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037d6:	4b23      	ldr	r3, [pc, #140]	; (8003864 <HAL_TIM_MspPostInit+0xb0>)
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	4a22      	ldr	r2, [pc, #136]	; (8003864 <HAL_TIM_MspPostInit+0xb0>)
 80037dc:	f043 0304 	orr.w	r3, r3, #4
 80037e0:	6313      	str	r3, [r2, #48]	; 0x30
 80037e2:	4b20      	ldr	r3, [pc, #128]	; (8003864 <HAL_TIM_MspPostInit+0xb0>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	f003 0304 	and.w	r3, r3, #4
 80037ea:	613b      	str	r3, [r7, #16]
 80037ec:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80037ee:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80037f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f4:	2302      	movs	r3, #2
 80037f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f8:	2300      	movs	r3, #0
 80037fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037fc:	2300      	movs	r3, #0
 80037fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003800:	2302      	movs	r3, #2
 8003802:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003804:	f107 0314 	add.w	r3, r7, #20
 8003808:	4619      	mov	r1, r3
 800380a:	4817      	ldr	r0, [pc, #92]	; (8003868 <HAL_TIM_MspPostInit+0xb4>)
 800380c:	f001 fb34 	bl	8004e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003810:	e021      	b.n	8003856 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM4)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a15      	ldr	r2, [pc, #84]	; (800386c <HAL_TIM_MspPostInit+0xb8>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d11c      	bne.n	8003856 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800381c:	4b11      	ldr	r3, [pc, #68]	; (8003864 <HAL_TIM_MspPostInit+0xb0>)
 800381e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003820:	4a10      	ldr	r2, [pc, #64]	; (8003864 <HAL_TIM_MspPostInit+0xb0>)
 8003822:	f043 0308 	orr.w	r3, r3, #8
 8003826:	6313      	str	r3, [r2, #48]	; 0x30
 8003828:	4b0e      	ldr	r3, [pc, #56]	; (8003864 <HAL_TIM_MspPostInit+0xb0>)
 800382a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800383a:	2302      	movs	r3, #2
 800383c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800383e:	2300      	movs	r3, #0
 8003840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003842:	2300      	movs	r3, #0
 8003844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003846:	2302      	movs	r3, #2
 8003848:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800384a:	f107 0314 	add.w	r3, r7, #20
 800384e:	4619      	mov	r1, r3
 8003850:	4807      	ldr	r0, [pc, #28]	; (8003870 <HAL_TIM_MspPostInit+0xbc>)
 8003852:	f001 fb11 	bl	8004e78 <HAL_GPIO_Init>
}
 8003856:	bf00      	nop
 8003858:	3728      	adds	r7, #40	; 0x28
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40000400 	.word	0x40000400
 8003864:	40023800 	.word	0x40023800
 8003868:	40020800 	.word	0x40020800
 800386c:	40000800 	.word	0x40000800
 8003870:	40020c00 	.word	0x40020c00

08003874 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003878:	4b14      	ldr	r3, [pc, #80]	; (80038cc <MX_USART3_UART_Init+0x58>)
 800387a:	4a15      	ldr	r2, [pc, #84]	; (80038d0 <MX_USART3_UART_Init+0x5c>)
 800387c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800387e:	4b13      	ldr	r3, [pc, #76]	; (80038cc <MX_USART3_UART_Init+0x58>)
 8003880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003884:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003886:	4b11      	ldr	r3, [pc, #68]	; (80038cc <MX_USART3_UART_Init+0x58>)
 8003888:	2200      	movs	r2, #0
 800388a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800388c:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <MX_USART3_UART_Init+0x58>)
 800388e:	2200      	movs	r2, #0
 8003890:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003892:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <MX_USART3_UART_Init+0x58>)
 8003894:	2200      	movs	r2, #0
 8003896:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003898:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <MX_USART3_UART_Init+0x58>)
 800389a:	220c      	movs	r2, #12
 800389c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800389e:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <MX_USART3_UART_Init+0x58>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80038a4:	4b09      	ldr	r3, [pc, #36]	; (80038cc <MX_USART3_UART_Init+0x58>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038aa:	4b08      	ldr	r3, [pc, #32]	; (80038cc <MX_USART3_UART_Init+0x58>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038b0:	4b06      	ldr	r3, [pc, #24]	; (80038cc <MX_USART3_UART_Init+0x58>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80038b6:	4805      	ldr	r0, [pc, #20]	; (80038cc <MX_USART3_UART_Init+0x58>)
 80038b8:	f005 fae8 	bl	8008e8c <HAL_UART_Init>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80038c2:	f7ff fb97 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80038c6:	bf00      	nop
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20000424 	.word	0x20000424
 80038d0:	40004800 	.word	0x40004800

080038d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b0aa      	sub	sp, #168	; 0xa8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038dc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	605a      	str	r2, [r3, #4]
 80038e6:	609a      	str	r2, [r3, #8]
 80038e8:	60da      	str	r2, [r3, #12]
 80038ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038ec:	f107 0310 	add.w	r3, r7, #16
 80038f0:	2284      	movs	r2, #132	; 0x84
 80038f2:	2100      	movs	r1, #0
 80038f4:	4618      	mov	r0, r3
 80038f6:	f006 fdc5 	bl	800a484 <memset>
  if(uartHandle->Instance==USART3)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a26      	ldr	r2, [pc, #152]	; (8003998 <HAL_UART_MspInit+0xc4>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d144      	bne.n	800398e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003904:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003908:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800390a:	2300      	movs	r3, #0
 800390c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800390e:	f107 0310 	add.w	r3, r7, #16
 8003912:	4618      	mov	r0, r3
 8003914:	f002 fdae 	bl	8006474 <HAL_RCCEx_PeriphCLKConfig>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800391e:	f7ff fb69 	bl	8002ff4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003922:	4b1e      	ldr	r3, [pc, #120]	; (800399c <HAL_UART_MspInit+0xc8>)
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	4a1d      	ldr	r2, [pc, #116]	; (800399c <HAL_UART_MspInit+0xc8>)
 8003928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800392c:	6413      	str	r3, [r2, #64]	; 0x40
 800392e:	4b1b      	ldr	r3, [pc, #108]	; (800399c <HAL_UART_MspInit+0xc8>)
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800393a:	4b18      	ldr	r3, [pc, #96]	; (800399c <HAL_UART_MspInit+0xc8>)
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	4a17      	ldr	r2, [pc, #92]	; (800399c <HAL_UART_MspInit+0xc8>)
 8003940:	f043 0308 	orr.w	r3, r3, #8
 8003944:	6313      	str	r3, [r2, #48]	; 0x30
 8003946:	4b15      	ldr	r3, [pc, #84]	; (800399c <HAL_UART_MspInit+0xc8>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	60bb      	str	r3, [r7, #8]
 8003950:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003952:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003956:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800395a:	2302      	movs	r3, #2
 800395c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003960:	2301      	movs	r3, #1
 8003962:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003966:	2303      	movs	r3, #3
 8003968:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800396c:	2307      	movs	r3, #7
 800396e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003972:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003976:	4619      	mov	r1, r3
 8003978:	4809      	ldr	r0, [pc, #36]	; (80039a0 <HAL_UART_MspInit+0xcc>)
 800397a:	f001 fa7d 	bl	8004e78 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800397e:	2200      	movs	r2, #0
 8003980:	2100      	movs	r1, #0
 8003982:	2027      	movs	r0, #39	; 0x27
 8003984:	f000 fec5 	bl	8004712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003988:	2027      	movs	r0, #39	; 0x27
 800398a:	f000 fede 	bl	800474a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800398e:	bf00      	nop
 8003990:	37a8      	adds	r7, #168	; 0xa8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40004800 	.word	0x40004800
 800399c:	40023800 	.word	0x40023800
 80039a0:	40020c00 	.word	0x40020c00

080039a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80039a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80039a8:	480d      	ldr	r0, [pc, #52]	; (80039e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80039aa:	490e      	ldr	r1, [pc, #56]	; (80039e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80039ac:	4a0e      	ldr	r2, [pc, #56]	; (80039e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80039ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039b0:	e002      	b.n	80039b8 <LoopCopyDataInit>

080039b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039b6:	3304      	adds	r3, #4

080039b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039bc:	d3f9      	bcc.n	80039b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039be:	4a0b      	ldr	r2, [pc, #44]	; (80039ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80039c0:	4c0b      	ldr	r4, [pc, #44]	; (80039f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80039c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039c4:	e001      	b.n	80039ca <LoopFillZerobss>

080039c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039c8:	3204      	adds	r2, #4

080039ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039cc:	d3fb      	bcc.n	80039c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80039ce:	f7ff fce3 	bl	8003398 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039d2:	f006 fd65 	bl	800a4a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039d6:	f7ff fa0f 	bl	8002df8 <main>
  bx  lr    
 80039da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80039dc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80039e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039e4:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 80039e8:	0800aeb8 	.word	0x0800aeb8
  ldr r2, =_sbss
 80039ec:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 80039f0:	200005f8 	.word	0x200005f8

080039f4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039f4:	e7fe      	b.n	80039f4 <CAN1_RX0_IRQHandler>

080039f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039fa:	2003      	movs	r0, #3
 80039fc:	f000 fe7e 	bl	80046fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a00:	2000      	movs	r0, #0
 8003a02:	f000 f805 	bl	8003a10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a06:	f7ff fbfd 	bl	8003204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a18:	4b12      	ldr	r3, [pc, #72]	; (8003a64 <HAL_InitTick+0x54>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	4b12      	ldr	r3, [pc, #72]	; (8003a68 <HAL_InitTick+0x58>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	4619      	mov	r1, r3
 8003a22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a26:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fe99 	bl	8004766 <HAL_SYSTICK_Config>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e00e      	b.n	8003a5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b0f      	cmp	r3, #15
 8003a42:	d80a      	bhi.n	8003a5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a44:	2200      	movs	r2, #0
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	f04f 30ff 	mov.w	r0, #4294967295
 8003a4c:	f000 fe61 	bl	8004712 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a50:	4a06      	ldr	r2, [pc, #24]	; (8003a6c <HAL_InitTick+0x5c>)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
 8003a58:	e000      	b.n	8003a5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	200000c0 	.word	0x200000c0
 8003a68:	200000c8 	.word	0x200000c8
 8003a6c:	200000c4 	.word	0x200000c4

08003a70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a74:	4b06      	ldr	r3, [pc, #24]	; (8003a90 <HAL_IncTick+0x20>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	461a      	mov	r2, r3
 8003a7a:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <HAL_IncTick+0x24>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4413      	add	r3, r2
 8003a80:	4a04      	ldr	r2, [pc, #16]	; (8003a94 <HAL_IncTick+0x24>)
 8003a82:	6013      	str	r3, [r2, #0]
}
 8003a84:	bf00      	nop
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	200000c8 	.word	0x200000c8
 8003a94:	200004ac 	.word	0x200004ac

08003a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8003a9c:	4b03      	ldr	r3, [pc, #12]	; (8003aac <HAL_GetTick+0x14>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	200004ac 	.word	0x200004ac

08003ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ab8:	f7ff ffee 	bl	8003a98 <HAL_GetTick>
 8003abc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac8:	d005      	beq.n	8003ad6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003aca:	4b0a      	ldr	r3, [pc, #40]	; (8003af4 <HAL_Delay+0x44>)
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ad6:	bf00      	nop
 8003ad8:	f7ff ffde 	bl	8003a98 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d8f7      	bhi.n	8003ad8 <HAL_Delay+0x28>
  {
  }
}
 8003ae8:	bf00      	nop
 8003aea:	bf00      	nop
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	200000c8 	.word	0x200000c8

08003af8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b00:	2300      	movs	r3, #0
 8003b02:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e031      	b.n	8003b72 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d109      	bne.n	8003b2a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7fe fb7a 	bl	8002210 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	f003 0310 	and.w	r3, r3, #16
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d116      	bne.n	8003b64 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b3a:	4b10      	ldr	r3, [pc, #64]	; (8003b7c <HAL_ADC_Init+0x84>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	f043 0202 	orr.w	r2, r3, #2
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 fc04 	bl	8004354 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	f023 0303 	bic.w	r3, r3, #3
 8003b5a:	f043 0201 	orr.w	r2, r3, #1
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	641a      	str	r2, [r3, #64]	; 0x40
 8003b62:	e001      	b.n	8003b68 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	ffffeefd 	.word	0xffffeefd

08003b80 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d101      	bne.n	8003b9a <HAL_ADC_Start+0x1a>
 8003b96:	2302      	movs	r3, #2
 8003b98:	e0ad      	b.n	8003cf6 <HAL_ADC_Start+0x176>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d018      	beq.n	8003be2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689a      	ldr	r2, [r3, #8]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0201 	orr.w	r2, r2, #1
 8003bbe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003bc0:	4b50      	ldr	r3, [pc, #320]	; (8003d04 <HAL_ADC_Start+0x184>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a50      	ldr	r2, [pc, #320]	; (8003d08 <HAL_ADC_Start+0x188>)
 8003bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bca:	0c9a      	lsrs	r2, r3, #18
 8003bcc:	4613      	mov	r3, r2
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	4413      	add	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003bd4:	e002      	b.n	8003bdc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f9      	bne.n	8003bd6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d175      	bne.n	8003cdc <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bf4:	4b45      	ldr	r3, [pc, #276]	; (8003d0c <HAL_ADC_Start+0x18c>)
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d007      	beq.n	8003c1e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c16:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c2a:	d106      	bne.n	8003c3a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c30:	f023 0206 	bic.w	r2, r3, #6
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	645a      	str	r2, [r3, #68]	; 0x44
 8003c38:	e002      	b.n	8003c40 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003c50:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003c52:	4b2f      	ldr	r3, [pc, #188]	; (8003d10 <HAL_ADC_Start+0x190>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f003 031f 	and.w	r3, r3, #31
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10f      	bne.n	8003c7e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d143      	bne.n	8003cf4 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689a      	ldr	r2, [r3, #8]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003c7a:	609a      	str	r2, [r3, #8]
 8003c7c:	e03a      	b.n	8003cf4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a24      	ldr	r2, [pc, #144]	; (8003d14 <HAL_ADC_Start+0x194>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d10e      	bne.n	8003ca6 <HAL_ADC_Start+0x126>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d107      	bne.n	8003ca6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ca4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003ca6:	4b1a      	ldr	r3, [pc, #104]	; (8003d10 <HAL_ADC_Start+0x190>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f003 0310 	and.w	r3, r3, #16
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d120      	bne.n	8003cf4 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a18      	ldr	r2, [pc, #96]	; (8003d18 <HAL_ADC_Start+0x198>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d11b      	bne.n	8003cf4 <HAL_ADC_Start+0x174>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d114      	bne.n	8003cf4 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003cd8:	609a      	str	r2, [r3, #8]
 8003cda:	e00b      	b.n	8003cf4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	f043 0210 	orr.w	r2, r3, #16
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cec:	f043 0201 	orr.w	r2, r3, #1
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	200000c0 	.word	0x200000c0
 8003d08:	431bde83 	.word	0x431bde83
 8003d0c:	fffff8fe 	.word	0xfffff8fe
 8003d10:	40012300 	.word	0x40012300
 8003d14:	40012000 	.word	0x40012000
 8003d18:	40012200 	.word	0x40012200

08003d1c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d38:	d113      	bne.n	8003d62 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d48:	d10b      	bne.n	8003d62 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	f043 0220 	orr.w	r2, r3, #32
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e063      	b.n	8003e2a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003d62:	f7ff fe99 	bl	8003a98 <HAL_GetTick>
 8003d66:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003d68:	e021      	b.n	8003dae <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d70:	d01d      	beq.n	8003dae <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d007      	beq.n	8003d88 <HAL_ADC_PollForConversion+0x6c>
 8003d78:	f7ff fe8e 	bl	8003a98 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d212      	bcs.n	8003dae <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d00b      	beq.n	8003dae <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	f043 0204 	orr.w	r2, r3, #4
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e03d      	b.n	8003e2a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d1d6      	bne.n	8003d6a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f06f 0212 	mvn.w	r2, #18
 8003dc4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d123      	bne.n	8003e28 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d11f      	bne.n	8003e28 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d006      	beq.n	8003e04 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d111      	bne.n	8003e28 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d105      	bne.n	8003e28 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e20:	f043 0201 	orr.w	r2, r3, #1
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b086      	sub	sp, #24
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]
 8003e3e:	2300      	movs	r3, #0
 8003e40:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	f003 0320 	and.w	r3, r3, #32
 8003e60:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d049      	beq.n	8003efc <HAL_ADC_IRQHandler+0xca>
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d046      	beq.n	8003efc <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	f003 0310 	and.w	r3, r3, #16
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d105      	bne.n	8003e86 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d12b      	bne.n	8003eec <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d127      	bne.n	8003eec <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d006      	beq.n	8003eb8 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d119      	bne.n	8003eec <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 0220 	bic.w	r2, r2, #32
 8003ec6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ecc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d105      	bne.n	8003eec <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee4:	f043 0201 	orr.w	r2, r3, #1
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f8bd 	bl	800406c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f06f 0212 	mvn.w	r2, #18
 8003efa:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f003 0304 	and.w	r3, r3, #4
 8003f02:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d057      	beq.n	8003fc2 <HAL_ADC_IRQHandler+0x190>
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d054      	beq.n	8003fc2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	f003 0310 	and.w	r3, r3, #16
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d105      	bne.n	8003f30 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f28:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d139      	bne.n	8003fb2 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f44:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d006      	beq.n	8003f5a <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d12b      	bne.n	8003fb2 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d124      	bne.n	8003fb2 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d11d      	bne.n	8003fb2 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d119      	bne.n	8003fb2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f8c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d105      	bne.n	8003fb2 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	f043 0201 	orr.w	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 fac8 	bl	8004548 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f06f 020c 	mvn.w	r2, #12
 8003fc0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d017      	beq.n	8004008 <HAL_ADC_IRQHandler+0x1d6>
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d014      	beq.n	8004008 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d10d      	bne.n	8004008 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f841 	bl	8004080 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f06f 0201 	mvn.w	r2, #1
 8004006:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f003 0320 	and.w	r3, r3, #32
 800400e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004016:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d015      	beq.n	800404a <HAL_ADC_IRQHandler+0x218>
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d012      	beq.n	800404a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004028:	f043 0202 	orr.w	r2, r3, #2
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f06f 0220 	mvn.w	r2, #32
 8004038:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f82a 	bl	8004094 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f06f 0220 	mvn.w	r2, #32
 8004048:	601a      	str	r2, [r3, #0]
  }
}
 800404a:	bf00      	nop
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004052:	b480      	push	{r7}
 8004054:	b083      	sub	sp, #12
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004060:	4618      	mov	r0, r3
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80040b2:	2300      	movs	r3, #0
 80040b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d101      	bne.n	80040c4 <HAL_ADC_ConfigChannel+0x1c>
 80040c0:	2302      	movs	r3, #2
 80040c2:	e136      	b.n	8004332 <HAL_ADC_ConfigChannel+0x28a>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b09      	cmp	r3, #9
 80040d2:	d93a      	bls.n	800414a <HAL_ADC_ConfigChannel+0xa2>
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040dc:	d035      	beq.n	800414a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68d9      	ldr	r1, [r3, #12]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	461a      	mov	r2, r3
 80040ec:	4613      	mov	r3, r2
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	4413      	add	r3, r2
 80040f2:	3b1e      	subs	r3, #30
 80040f4:	2207      	movs	r2, #7
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	43da      	mvns	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	400a      	ands	r2, r1
 8004102:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a8d      	ldr	r2, [pc, #564]	; (8004340 <HAL_ADC_ConfigChannel+0x298>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d10a      	bne.n	8004124 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68d9      	ldr	r1, [r3, #12]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	061a      	lsls	r2, r3, #24
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004122:	e035      	b.n	8004190 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68d9      	ldr	r1, [r3, #12]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	b29b      	uxth	r3, r3
 8004134:	4618      	mov	r0, r3
 8004136:	4603      	mov	r3, r0
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	4403      	add	r3, r0
 800413c:	3b1e      	subs	r3, #30
 800413e:	409a      	lsls	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004148:	e022      	b.n	8004190 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6919      	ldr	r1, [r3, #16]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	b29b      	uxth	r3, r3
 8004156:	461a      	mov	r2, r3
 8004158:	4613      	mov	r3, r2
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	4413      	add	r3, r2
 800415e:	2207      	movs	r2, #7
 8004160:	fa02 f303 	lsl.w	r3, r2, r3
 8004164:	43da      	mvns	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	400a      	ands	r2, r1
 800416c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6919      	ldr	r1, [r3, #16]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	b29b      	uxth	r3, r3
 800417e:	4618      	mov	r0, r3
 8004180:	4603      	mov	r3, r0
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	4403      	add	r3, r0
 8004186:	409a      	lsls	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	2b06      	cmp	r3, #6
 8004196:	d824      	bhi.n	80041e2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	4613      	mov	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4413      	add	r3, r2
 80041a8:	3b05      	subs	r3, #5
 80041aa:	221f      	movs	r2, #31
 80041ac:	fa02 f303 	lsl.w	r3, r2, r3
 80041b0:	43da      	mvns	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	400a      	ands	r2, r1
 80041b8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	4618      	mov	r0, r3
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	4613      	mov	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	3b05      	subs	r3, #5
 80041d4:	fa00 f203 	lsl.w	r2, r0, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	635a      	str	r2, [r3, #52]	; 0x34
 80041e0:	e04c      	b.n	800427c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b0c      	cmp	r3, #12
 80041e8:	d824      	bhi.n	8004234 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	4613      	mov	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	3b23      	subs	r3, #35	; 0x23
 80041fc:	221f      	movs	r2, #31
 80041fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004202:	43da      	mvns	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	400a      	ands	r2, r1
 800420a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	b29b      	uxth	r3, r3
 8004218:	4618      	mov	r0, r3
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	4613      	mov	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	3b23      	subs	r3, #35	; 0x23
 8004226:	fa00 f203 	lsl.w	r2, r0, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	631a      	str	r2, [r3, #48]	; 0x30
 8004232:	e023      	b.n	800427c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	4613      	mov	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4413      	add	r3, r2
 8004244:	3b41      	subs	r3, #65	; 0x41
 8004246:	221f      	movs	r2, #31
 8004248:	fa02 f303 	lsl.w	r3, r2, r3
 800424c:	43da      	mvns	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	400a      	ands	r2, r1
 8004254:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	b29b      	uxth	r3, r3
 8004262:	4618      	mov	r0, r3
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	4613      	mov	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	3b41      	subs	r3, #65	; 0x41
 8004270:	fa00 f203 	lsl.w	r2, r0, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a30      	ldr	r2, [pc, #192]	; (8004344 <HAL_ADC_ConfigChannel+0x29c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d10a      	bne.n	800429c <HAL_ADC_ConfigChannel+0x1f4>
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800428e:	d105      	bne.n	800429c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004290:	4b2d      	ldr	r3, [pc, #180]	; (8004348 <HAL_ADC_ConfigChannel+0x2a0>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	4a2c      	ldr	r2, [pc, #176]	; (8004348 <HAL_ADC_ConfigChannel+0x2a0>)
 8004296:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800429a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a28      	ldr	r2, [pc, #160]	; (8004344 <HAL_ADC_ConfigChannel+0x29c>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d10f      	bne.n	80042c6 <HAL_ADC_ConfigChannel+0x21e>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b12      	cmp	r3, #18
 80042ac:	d10b      	bne.n	80042c6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80042ae:	4b26      	ldr	r3, [pc, #152]	; (8004348 <HAL_ADC_ConfigChannel+0x2a0>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	4a25      	ldr	r2, [pc, #148]	; (8004348 <HAL_ADC_ConfigChannel+0x2a0>)
 80042b4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80042b8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80042ba:	4b23      	ldr	r3, [pc, #140]	; (8004348 <HAL_ADC_ConfigChannel+0x2a0>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	4a22      	ldr	r2, [pc, #136]	; (8004348 <HAL_ADC_ConfigChannel+0x2a0>)
 80042c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80042c4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a1e      	ldr	r2, [pc, #120]	; (8004344 <HAL_ADC_ConfigChannel+0x29c>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d12b      	bne.n	8004328 <HAL_ADC_ConfigChannel+0x280>
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a1a      	ldr	r2, [pc, #104]	; (8004340 <HAL_ADC_ConfigChannel+0x298>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d003      	beq.n	80042e2 <HAL_ADC_ConfigChannel+0x23a>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2b11      	cmp	r3, #17
 80042e0:	d122      	bne.n	8004328 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80042e2:	4b19      	ldr	r3, [pc, #100]	; (8004348 <HAL_ADC_ConfigChannel+0x2a0>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	4a18      	ldr	r2, [pc, #96]	; (8004348 <HAL_ADC_ConfigChannel+0x2a0>)
 80042e8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80042ec:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80042ee:	4b16      	ldr	r3, [pc, #88]	; (8004348 <HAL_ADC_ConfigChannel+0x2a0>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	4a15      	ldr	r2, [pc, #84]	; (8004348 <HAL_ADC_ConfigChannel+0x2a0>)
 80042f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042f8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a10      	ldr	r2, [pc, #64]	; (8004340 <HAL_ADC_ConfigChannel+0x298>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d111      	bne.n	8004328 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004304:	4b11      	ldr	r3, [pc, #68]	; (800434c <HAL_ADC_ConfigChannel+0x2a4>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a11      	ldr	r2, [pc, #68]	; (8004350 <HAL_ADC_ConfigChannel+0x2a8>)
 800430a:	fba2 2303 	umull	r2, r3, r2, r3
 800430e:	0c9a      	lsrs	r2, r3, #18
 8004310:	4613      	mov	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4413      	add	r3, r2
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800431a:	e002      	b.n	8004322 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	3b01      	subs	r3, #1
 8004320:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1f9      	bne.n	800431c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	10000012 	.word	0x10000012
 8004344:	40012000 	.word	0x40012000
 8004348:	40012300 	.word	0x40012300
 800434c:	200000c0 	.word	0x200000c0
 8004350:	431bde83 	.word	0x431bde83

08004354 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800435c:	4b78      	ldr	r3, [pc, #480]	; (8004540 <ADC_Init+0x1ec>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	4a77      	ldr	r2, [pc, #476]	; (8004540 <ADC_Init+0x1ec>)
 8004362:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004366:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004368:	4b75      	ldr	r3, [pc, #468]	; (8004540 <ADC_Init+0x1ec>)
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	4973      	ldr	r1, [pc, #460]	; (8004540 <ADC_Init+0x1ec>)
 8004372:	4313      	orrs	r3, r2
 8004374:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004384:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6859      	ldr	r1, [r3, #4]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	021a      	lsls	r2, r3, #8
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80043a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6859      	ldr	r1, [r3, #4]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689a      	ldr	r2, [r3, #8]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6899      	ldr	r1, [r3, #8]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e2:	4a58      	ldr	r2, [pc, #352]	; (8004544 <ADC_Init+0x1f0>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d022      	beq.n	800442e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689a      	ldr	r2, [r3, #8]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6899      	ldr	r1, [r3, #8]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004418:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6899      	ldr	r1, [r3, #8]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	609a      	str	r2, [r3, #8]
 800442c:	e00f      	b.n	800444e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800443c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800444c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0202 	bic.w	r2, r2, #2
 800445c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6899      	ldr	r1, [r3, #8]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	005a      	lsls	r2, r3, #1
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d01b      	beq.n	80044b4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800448a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800449a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6859      	ldr	r1, [r3, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	3b01      	subs	r3, #1
 80044a8:	035a      	lsls	r2, r3, #13
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	605a      	str	r2, [r3, #4]
 80044b2:	e007      	b.n	80044c4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80044d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	3b01      	subs	r3, #1
 80044e0:	051a      	lsls	r2, r3, #20
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80044f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6899      	ldr	r1, [r3, #8]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004506:	025a      	lsls	r2, r3, #9
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	430a      	orrs	r2, r1
 800450e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689a      	ldr	r2, [r3, #8]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800451e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6899      	ldr	r1, [r3, #8]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	029a      	lsls	r2, r3, #10
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	430a      	orrs	r2, r1
 8004532:	609a      	str	r2, [r3, #8]
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	40012300 	.word	0x40012300
 8004544:	0f000001 	.word	0x0f000001

08004548 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f003 0307 	and.w	r3, r3, #7
 800456a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800456c:	4b0b      	ldr	r3, [pc, #44]	; (800459c <__NVIC_SetPriorityGrouping+0x40>)
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004578:	4013      	ands	r3, r2
 800457a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004584:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <__NVIC_SetPriorityGrouping+0x44>)
 8004586:	4313      	orrs	r3, r2
 8004588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800458a:	4a04      	ldr	r2, [pc, #16]	; (800459c <__NVIC_SetPriorityGrouping+0x40>)
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	60d3      	str	r3, [r2, #12]
}
 8004590:	bf00      	nop
 8004592:	3714      	adds	r7, #20
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	e000ed00 	.word	0xe000ed00
 80045a0:	05fa0000 	.word	0x05fa0000

080045a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045a8:	4b04      	ldr	r3, [pc, #16]	; (80045bc <__NVIC_GetPriorityGrouping+0x18>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	0a1b      	lsrs	r3, r3, #8
 80045ae:	f003 0307 	and.w	r3, r3, #7
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	e000ed00 	.word	0xe000ed00

080045c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	4603      	mov	r3, r0
 80045c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	db0b      	blt.n	80045ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045d2:	79fb      	ldrb	r3, [r7, #7]
 80045d4:	f003 021f 	and.w	r2, r3, #31
 80045d8:	4907      	ldr	r1, [pc, #28]	; (80045f8 <__NVIC_EnableIRQ+0x38>)
 80045da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045de:	095b      	lsrs	r3, r3, #5
 80045e0:	2001      	movs	r0, #1
 80045e2:	fa00 f202 	lsl.w	r2, r0, r2
 80045e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045ea:	bf00      	nop
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	e000e100 	.word	0xe000e100

080045fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	6039      	str	r1, [r7, #0]
 8004606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800460c:	2b00      	cmp	r3, #0
 800460e:	db0a      	blt.n	8004626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	b2da      	uxtb	r2, r3
 8004614:	490c      	ldr	r1, [pc, #48]	; (8004648 <__NVIC_SetPriority+0x4c>)
 8004616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800461a:	0112      	lsls	r2, r2, #4
 800461c:	b2d2      	uxtb	r2, r2
 800461e:	440b      	add	r3, r1
 8004620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004624:	e00a      	b.n	800463c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	b2da      	uxtb	r2, r3
 800462a:	4908      	ldr	r1, [pc, #32]	; (800464c <__NVIC_SetPriority+0x50>)
 800462c:	79fb      	ldrb	r3, [r7, #7]
 800462e:	f003 030f 	and.w	r3, r3, #15
 8004632:	3b04      	subs	r3, #4
 8004634:	0112      	lsls	r2, r2, #4
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	440b      	add	r3, r1
 800463a:	761a      	strb	r2, [r3, #24]
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	e000e100 	.word	0xe000e100
 800464c:	e000ed00 	.word	0xe000ed00

08004650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004650:	b480      	push	{r7}
 8004652:	b089      	sub	sp, #36	; 0x24
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f003 0307 	and.w	r3, r3, #7
 8004662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	f1c3 0307 	rsb	r3, r3, #7
 800466a:	2b04      	cmp	r3, #4
 800466c:	bf28      	it	cs
 800466e:	2304      	movcs	r3, #4
 8004670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	3304      	adds	r3, #4
 8004676:	2b06      	cmp	r3, #6
 8004678:	d902      	bls.n	8004680 <NVIC_EncodePriority+0x30>
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	3b03      	subs	r3, #3
 800467e:	e000      	b.n	8004682 <NVIC_EncodePriority+0x32>
 8004680:	2300      	movs	r3, #0
 8004682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004684:	f04f 32ff 	mov.w	r2, #4294967295
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	fa02 f303 	lsl.w	r3, r2, r3
 800468e:	43da      	mvns	r2, r3
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	401a      	ands	r2, r3
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004698:	f04f 31ff 	mov.w	r1, #4294967295
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	fa01 f303 	lsl.w	r3, r1, r3
 80046a2:	43d9      	mvns	r1, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046a8:	4313      	orrs	r3, r2
         );
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3724      	adds	r7, #36	; 0x24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
	...

080046b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046c8:	d301      	bcc.n	80046ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046ca:	2301      	movs	r3, #1
 80046cc:	e00f      	b.n	80046ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046ce:	4a0a      	ldr	r2, [pc, #40]	; (80046f8 <SysTick_Config+0x40>)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046d6:	210f      	movs	r1, #15
 80046d8:	f04f 30ff 	mov.w	r0, #4294967295
 80046dc:	f7ff ff8e 	bl	80045fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046e0:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <SysTick_Config+0x40>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046e6:	4b04      	ldr	r3, [pc, #16]	; (80046f8 <SysTick_Config+0x40>)
 80046e8:	2207      	movs	r2, #7
 80046ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	e000e010 	.word	0xe000e010

080046fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f7ff ff29 	bl	800455c <__NVIC_SetPriorityGrouping>
}
 800470a:	bf00      	nop
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004712:	b580      	push	{r7, lr}
 8004714:	b086      	sub	sp, #24
 8004716:	af00      	add	r7, sp, #0
 8004718:	4603      	mov	r3, r0
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	607a      	str	r2, [r7, #4]
 800471e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004720:	2300      	movs	r3, #0
 8004722:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004724:	f7ff ff3e 	bl	80045a4 <__NVIC_GetPriorityGrouping>
 8004728:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	68b9      	ldr	r1, [r7, #8]
 800472e:	6978      	ldr	r0, [r7, #20]
 8004730:	f7ff ff8e 	bl	8004650 <NVIC_EncodePriority>
 8004734:	4602      	mov	r2, r0
 8004736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800473a:	4611      	mov	r1, r2
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff ff5d 	bl	80045fc <__NVIC_SetPriority>
}
 8004742:	bf00      	nop
 8004744:	3718      	adds	r7, #24
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b082      	sub	sp, #8
 800474e:	af00      	add	r7, sp, #0
 8004750:	4603      	mov	r3, r0
 8004752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004758:	4618      	mov	r0, r3
 800475a:	f7ff ff31 	bl	80045c0 <__NVIC_EnableIRQ>
}
 800475e:	bf00      	nop
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b082      	sub	sp, #8
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7ff ffa2 	bl	80046b8 <SysTick_Config>
 8004774:	4603      	mov	r3, r0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
	...

08004780 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004788:	2300      	movs	r3, #0
 800478a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800478c:	f7ff f984 	bl	8003a98 <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e099      	b.n	80048d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 0201 	bic.w	r2, r2, #1
 80047ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047bc:	e00f      	b.n	80047de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047be:	f7ff f96b 	bl	8003a98 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b05      	cmp	r3, #5
 80047ca:	d908      	bls.n	80047de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2220      	movs	r2, #32
 80047d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2203      	movs	r2, #3
 80047d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e078      	b.n	80048d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1e8      	bne.n	80047be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	4b38      	ldr	r3, [pc, #224]	; (80048d8 <HAL_DMA_Init+0x158>)
 80047f8:	4013      	ands	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800480a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004816:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004822:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	4313      	orrs	r3, r2
 800482e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	2b04      	cmp	r3, #4
 8004836:	d107      	bne.n	8004848 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004840:	4313      	orrs	r3, r2
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f023 0307 	bic.w	r3, r3, #7
 800485e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	4313      	orrs	r3, r2
 8004868:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	2b04      	cmp	r3, #4
 8004870:	d117      	bne.n	80048a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	4313      	orrs	r3, r2
 800487a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00e      	beq.n	80048a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 fa7b 	bl	8004d80 <DMA_CheckFifoParam>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d008      	beq.n	80048a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2240      	movs	r2, #64	; 0x40
 8004894:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800489e:	2301      	movs	r3, #1
 80048a0:	e016      	b.n	80048d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fa32 	bl	8004d14 <DMA_CalcBaseAndBitshift>
 80048b0:	4603      	mov	r3, r0
 80048b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b8:	223f      	movs	r2, #63	; 0x3f
 80048ba:	409a      	lsls	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3718      	adds	r7, #24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	f010803f 	.word	0xf010803f

080048dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80048ea:	f7ff f8d5 	bl	8003a98 <HAL_GetTick>
 80048ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d008      	beq.n	800490e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2280      	movs	r2, #128	; 0x80
 8004900:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e052      	b.n	80049b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 0216 	bic.w	r2, r2, #22
 800491c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	695a      	ldr	r2, [r3, #20]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800492c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	2b00      	cmp	r3, #0
 8004934:	d103      	bne.n	800493e <HAL_DMA_Abort+0x62>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800493a:	2b00      	cmp	r3, #0
 800493c:	d007      	beq.n	800494e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 0208 	bic.w	r2, r2, #8
 800494c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 0201 	bic.w	r2, r2, #1
 800495c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800495e:	e013      	b.n	8004988 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004960:	f7ff f89a 	bl	8003a98 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b05      	cmp	r3, #5
 800496c:	d90c      	bls.n	8004988 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2220      	movs	r2, #32
 8004972:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2203      	movs	r2, #3
 8004978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e015      	b.n	80049b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1e4      	bne.n	8004960 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800499a:	223f      	movs	r2, #63	; 0x3f
 800499c:	409a      	lsls	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d004      	beq.n	80049da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2280      	movs	r2, #128	; 0x80
 80049d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e00c      	b.n	80049f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2205      	movs	r2, #5
 80049de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 0201 	bic.w	r2, r2, #1
 80049f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004a0c:	4b8e      	ldr	r3, [pc, #568]	; (8004c48 <HAL_DMA_IRQHandler+0x248>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a8e      	ldr	r2, [pc, #568]	; (8004c4c <HAL_DMA_IRQHandler+0x24c>)
 8004a12:	fba2 2303 	umull	r2, r3, r2, r3
 8004a16:	0a9b      	lsrs	r3, r3, #10
 8004a18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a2a:	2208      	movs	r2, #8
 8004a2c:	409a      	lsls	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	4013      	ands	r3, r2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d01a      	beq.n	8004a6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0304 	and.w	r3, r3, #4
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d013      	beq.n	8004a6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 0204 	bic.w	r2, r2, #4
 8004a52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a58:	2208      	movs	r2, #8
 8004a5a:	409a      	lsls	r2, r3
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a64:	f043 0201 	orr.w	r2, r3, #1
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a70:	2201      	movs	r2, #1
 8004a72:	409a      	lsls	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4013      	ands	r3, r2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d012      	beq.n	8004aa2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00b      	beq.n	8004aa2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8e:	2201      	movs	r2, #1
 8004a90:	409a      	lsls	r2, r3
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9a:	f043 0202 	orr.w	r2, r3, #2
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa6:	2204      	movs	r2, #4
 8004aa8:	409a      	lsls	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	4013      	ands	r3, r2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d012      	beq.n	8004ad8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00b      	beq.n	8004ad8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac4:	2204      	movs	r2, #4
 8004ac6:	409a      	lsls	r2, r3
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad0:	f043 0204 	orr.w	r2, r3, #4
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004adc:	2210      	movs	r2, #16
 8004ade:	409a      	lsls	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d043      	beq.n	8004b70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d03c      	beq.n	8004b70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afa:	2210      	movs	r2, #16
 8004afc:	409a      	lsls	r2, r3
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d018      	beq.n	8004b42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d108      	bne.n	8004b30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d024      	beq.n	8004b70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	4798      	blx	r3
 8004b2e:	e01f      	b.n	8004b70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d01b      	beq.n	8004b70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	4798      	blx	r3
 8004b40:	e016      	b.n	8004b70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d107      	bne.n	8004b60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0208 	bic.w	r2, r2, #8
 8004b5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b74:	2220      	movs	r2, #32
 8004b76:	409a      	lsls	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 808f 	beq.w	8004ca0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0310 	and.w	r3, r3, #16
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 8087 	beq.w	8004ca0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b96:	2220      	movs	r2, #32
 8004b98:	409a      	lsls	r2, r3
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b05      	cmp	r3, #5
 8004ba8:	d136      	bne.n	8004c18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 0216 	bic.w	r2, r2, #22
 8004bb8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	695a      	ldr	r2, [r3, #20]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bc8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d103      	bne.n	8004bda <HAL_DMA_IRQHandler+0x1da>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d007      	beq.n	8004bea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 0208 	bic.w	r2, r2, #8
 8004be8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bee:	223f      	movs	r2, #63	; 0x3f
 8004bf0:	409a      	lsls	r2, r3
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d07e      	beq.n	8004d0c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	4798      	blx	r3
        }
        return;
 8004c16:	e079      	b.n	8004d0c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d01d      	beq.n	8004c62 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10d      	bne.n	8004c50 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d031      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	4798      	blx	r3
 8004c44:	e02c      	b.n	8004ca0 <HAL_DMA_IRQHandler+0x2a0>
 8004c46:	bf00      	nop
 8004c48:	200000c0 	.word	0x200000c0
 8004c4c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d023      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	4798      	blx	r3
 8004c60:	e01e      	b.n	8004ca0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10f      	bne.n	8004c90 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0210 	bic.w	r2, r2, #16
 8004c7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d003      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d032      	beq.n	8004d0e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d022      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2205      	movs	r2, #5
 8004cb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f022 0201 	bic.w	r2, r2, #1
 8004cca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	60bb      	str	r3, [r7, #8]
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d307      	bcc.n	8004ce8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1f2      	bne.n	8004ccc <HAL_DMA_IRQHandler+0x2cc>
 8004ce6:	e000      	b.n	8004cea <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004ce8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d005      	beq.n	8004d0e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	4798      	blx	r3
 8004d0a:	e000      	b.n	8004d0e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004d0c:	bf00      	nop
    }
  }
}
 8004d0e:	3718      	adds	r7, #24
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	3b10      	subs	r3, #16
 8004d24:	4a13      	ldr	r2, [pc, #76]	; (8004d74 <DMA_CalcBaseAndBitshift+0x60>)
 8004d26:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2a:	091b      	lsrs	r3, r3, #4
 8004d2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d2e:	4a12      	ldr	r2, [pc, #72]	; (8004d78 <DMA_CalcBaseAndBitshift+0x64>)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4413      	add	r3, r2
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	461a      	mov	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d908      	bls.n	8004d54 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	461a      	mov	r2, r3
 8004d48:	4b0c      	ldr	r3, [pc, #48]	; (8004d7c <DMA_CalcBaseAndBitshift+0x68>)
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	1d1a      	adds	r2, r3, #4
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	659a      	str	r2, [r3, #88]	; 0x58
 8004d52:	e006      	b.n	8004d62 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	461a      	mov	r2, r3
 8004d5a:	4b08      	ldr	r3, [pc, #32]	; (8004d7c <DMA_CalcBaseAndBitshift+0x68>)
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	aaaaaaab 	.word	0xaaaaaaab
 8004d78:	0800ae6c 	.word	0x0800ae6c
 8004d7c:	fffffc00 	.word	0xfffffc00

08004d80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d11f      	bne.n	8004dda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	2b03      	cmp	r3, #3
 8004d9e:	d856      	bhi.n	8004e4e <DMA_CheckFifoParam+0xce>
 8004da0:	a201      	add	r2, pc, #4	; (adr r2, 8004da8 <DMA_CheckFifoParam+0x28>)
 8004da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da6:	bf00      	nop
 8004da8:	08004db9 	.word	0x08004db9
 8004dac:	08004dcb 	.word	0x08004dcb
 8004db0:	08004db9 	.word	0x08004db9
 8004db4:	08004e4f 	.word	0x08004e4f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d046      	beq.n	8004e52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dc8:	e043      	b.n	8004e52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004dd2:	d140      	bne.n	8004e56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dd8:	e03d      	b.n	8004e56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004de2:	d121      	bne.n	8004e28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2b03      	cmp	r3, #3
 8004de8:	d837      	bhi.n	8004e5a <DMA_CheckFifoParam+0xda>
 8004dea:	a201      	add	r2, pc, #4	; (adr r2, 8004df0 <DMA_CheckFifoParam+0x70>)
 8004dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df0:	08004e01 	.word	0x08004e01
 8004df4:	08004e07 	.word	0x08004e07
 8004df8:	08004e01 	.word	0x08004e01
 8004dfc:	08004e19 	.word	0x08004e19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	73fb      	strb	r3, [r7, #15]
      break;
 8004e04:	e030      	b.n	8004e68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d025      	beq.n	8004e5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e16:	e022      	b.n	8004e5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e20:	d11f      	bne.n	8004e62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004e26:	e01c      	b.n	8004e62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d903      	bls.n	8004e36 <DMA_CheckFifoParam+0xb6>
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2b03      	cmp	r3, #3
 8004e32:	d003      	beq.n	8004e3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004e34:	e018      	b.n	8004e68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	73fb      	strb	r3, [r7, #15]
      break;
 8004e3a:	e015      	b.n	8004e68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00e      	beq.n	8004e66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e4c:	e00b      	b.n	8004e66 <DMA_CheckFifoParam+0xe6>
      break;
 8004e4e:	bf00      	nop
 8004e50:	e00a      	b.n	8004e68 <DMA_CheckFifoParam+0xe8>
      break;
 8004e52:	bf00      	nop
 8004e54:	e008      	b.n	8004e68 <DMA_CheckFifoParam+0xe8>
      break;
 8004e56:	bf00      	nop
 8004e58:	e006      	b.n	8004e68 <DMA_CheckFifoParam+0xe8>
      break;
 8004e5a:	bf00      	nop
 8004e5c:	e004      	b.n	8004e68 <DMA_CheckFifoParam+0xe8>
      break;
 8004e5e:	bf00      	nop
 8004e60:	e002      	b.n	8004e68 <DMA_CheckFifoParam+0xe8>
      break;   
 8004e62:	bf00      	nop
 8004e64:	e000      	b.n	8004e68 <DMA_CheckFifoParam+0xe8>
      break;
 8004e66:	bf00      	nop
    }
  } 
  
  return status; 
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop

08004e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b089      	sub	sp, #36	; 0x24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004e82:	2300      	movs	r3, #0
 8004e84:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004e86:	2300      	movs	r3, #0
 8004e88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004e92:	2300      	movs	r3, #0
 8004e94:	61fb      	str	r3, [r7, #28]
 8004e96:	e175      	b.n	8005184 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004e98:	2201      	movs	r2, #1
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	f040 8164 	bne.w	800517e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d005      	beq.n	8004ece <HAL_GPIO_Init+0x56>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f003 0303 	and.w	r3, r3, #3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d130      	bne.n	8004f30 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	2203      	movs	r2, #3
 8004eda:	fa02 f303 	lsl.w	r3, r2, r3
 8004ede:	43db      	mvns	r3, r3
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef2:	69ba      	ldr	r2, [r7, #24]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f04:	2201      	movs	r2, #1
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0c:	43db      	mvns	r3, r3
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	4013      	ands	r3, r2
 8004f12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	091b      	lsrs	r3, r3, #4
 8004f1a:	f003 0201 	and.w	r2, r3, #1
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	fa02 f303 	lsl.w	r3, r2, r3
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f003 0303 	and.w	r3, r3, #3
 8004f38:	2b03      	cmp	r3, #3
 8004f3a:	d017      	beq.n	8004f6c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	2203      	movs	r2, #3
 8004f48:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4c:	43db      	mvns	r3, r3
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	4013      	ands	r3, r2
 8004f52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f003 0303 	and.w	r3, r3, #3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d123      	bne.n	8004fc0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	08da      	lsrs	r2, r3, #3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3208      	adds	r2, #8
 8004f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	220f      	movs	r2, #15
 8004f90:	fa02 f303 	lsl.w	r3, r2, r3
 8004f94:	43db      	mvns	r3, r3
 8004f96:	69ba      	ldr	r2, [r7, #24]
 8004f98:	4013      	ands	r3, r2
 8004f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	691a      	ldr	r2, [r3, #16]
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	f003 0307 	and.w	r3, r3, #7
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	08da      	lsrs	r2, r3, #3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	3208      	adds	r2, #8
 8004fba:	69b9      	ldr	r1, [r7, #24]
 8004fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	2203      	movs	r2, #3
 8004fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd0:	43db      	mvns	r3, r3
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f003 0203 	and.w	r2, r3, #3
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	005b      	lsls	r3, r3, #1
 8004fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f000 80be 	beq.w	800517e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005002:	4b66      	ldr	r3, [pc, #408]	; (800519c <HAL_GPIO_Init+0x324>)
 8005004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005006:	4a65      	ldr	r2, [pc, #404]	; (800519c <HAL_GPIO_Init+0x324>)
 8005008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800500c:	6453      	str	r3, [r2, #68]	; 0x44
 800500e:	4b63      	ldr	r3, [pc, #396]	; (800519c <HAL_GPIO_Init+0x324>)
 8005010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005016:	60fb      	str	r3, [r7, #12]
 8005018:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800501a:	4a61      	ldr	r2, [pc, #388]	; (80051a0 <HAL_GPIO_Init+0x328>)
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	089b      	lsrs	r3, r3, #2
 8005020:	3302      	adds	r3, #2
 8005022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005026:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	f003 0303 	and.w	r3, r3, #3
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	220f      	movs	r2, #15
 8005032:	fa02 f303 	lsl.w	r3, r2, r3
 8005036:	43db      	mvns	r3, r3
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	4013      	ands	r3, r2
 800503c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a58      	ldr	r2, [pc, #352]	; (80051a4 <HAL_GPIO_Init+0x32c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d037      	beq.n	80050b6 <HAL_GPIO_Init+0x23e>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a57      	ldr	r2, [pc, #348]	; (80051a8 <HAL_GPIO_Init+0x330>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d031      	beq.n	80050b2 <HAL_GPIO_Init+0x23a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a56      	ldr	r2, [pc, #344]	; (80051ac <HAL_GPIO_Init+0x334>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d02b      	beq.n	80050ae <HAL_GPIO_Init+0x236>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a55      	ldr	r2, [pc, #340]	; (80051b0 <HAL_GPIO_Init+0x338>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d025      	beq.n	80050aa <HAL_GPIO_Init+0x232>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a54      	ldr	r2, [pc, #336]	; (80051b4 <HAL_GPIO_Init+0x33c>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d01f      	beq.n	80050a6 <HAL_GPIO_Init+0x22e>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a53      	ldr	r2, [pc, #332]	; (80051b8 <HAL_GPIO_Init+0x340>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d019      	beq.n	80050a2 <HAL_GPIO_Init+0x22a>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a52      	ldr	r2, [pc, #328]	; (80051bc <HAL_GPIO_Init+0x344>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d013      	beq.n	800509e <HAL_GPIO_Init+0x226>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a51      	ldr	r2, [pc, #324]	; (80051c0 <HAL_GPIO_Init+0x348>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00d      	beq.n	800509a <HAL_GPIO_Init+0x222>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a50      	ldr	r2, [pc, #320]	; (80051c4 <HAL_GPIO_Init+0x34c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d007      	beq.n	8005096 <HAL_GPIO_Init+0x21e>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a4f      	ldr	r2, [pc, #316]	; (80051c8 <HAL_GPIO_Init+0x350>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d101      	bne.n	8005092 <HAL_GPIO_Init+0x21a>
 800508e:	2309      	movs	r3, #9
 8005090:	e012      	b.n	80050b8 <HAL_GPIO_Init+0x240>
 8005092:	230a      	movs	r3, #10
 8005094:	e010      	b.n	80050b8 <HAL_GPIO_Init+0x240>
 8005096:	2308      	movs	r3, #8
 8005098:	e00e      	b.n	80050b8 <HAL_GPIO_Init+0x240>
 800509a:	2307      	movs	r3, #7
 800509c:	e00c      	b.n	80050b8 <HAL_GPIO_Init+0x240>
 800509e:	2306      	movs	r3, #6
 80050a0:	e00a      	b.n	80050b8 <HAL_GPIO_Init+0x240>
 80050a2:	2305      	movs	r3, #5
 80050a4:	e008      	b.n	80050b8 <HAL_GPIO_Init+0x240>
 80050a6:	2304      	movs	r3, #4
 80050a8:	e006      	b.n	80050b8 <HAL_GPIO_Init+0x240>
 80050aa:	2303      	movs	r3, #3
 80050ac:	e004      	b.n	80050b8 <HAL_GPIO_Init+0x240>
 80050ae:	2302      	movs	r3, #2
 80050b0:	e002      	b.n	80050b8 <HAL_GPIO_Init+0x240>
 80050b2:	2301      	movs	r3, #1
 80050b4:	e000      	b.n	80050b8 <HAL_GPIO_Init+0x240>
 80050b6:	2300      	movs	r3, #0
 80050b8:	69fa      	ldr	r2, [r7, #28]
 80050ba:	f002 0203 	and.w	r2, r2, #3
 80050be:	0092      	lsls	r2, r2, #2
 80050c0:	4093      	lsls	r3, r2
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80050c8:	4935      	ldr	r1, [pc, #212]	; (80051a0 <HAL_GPIO_Init+0x328>)
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	089b      	lsrs	r3, r3, #2
 80050ce:	3302      	adds	r3, #2
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80050d6:	4b3d      	ldr	r3, [pc, #244]	; (80051cc <HAL_GPIO_Init+0x354>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	43db      	mvns	r3, r3
 80050e0:	69ba      	ldr	r2, [r7, #24]
 80050e2:	4013      	ands	r3, r2
 80050e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80050fa:	4a34      	ldr	r2, [pc, #208]	; (80051cc <HAL_GPIO_Init+0x354>)
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005100:	4b32      	ldr	r3, [pc, #200]	; (80051cc <HAL_GPIO_Init+0x354>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	43db      	mvns	r3, r3
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	4013      	ands	r3, r2
 800510e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d003      	beq.n	8005124 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800511c:	69ba      	ldr	r2, [r7, #24]
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	4313      	orrs	r3, r2
 8005122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005124:	4a29      	ldr	r2, [pc, #164]	; (80051cc <HAL_GPIO_Init+0x354>)
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800512a:	4b28      	ldr	r3, [pc, #160]	; (80051cc <HAL_GPIO_Init+0x354>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	43db      	mvns	r3, r3
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	4013      	ands	r3, r2
 8005138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	4313      	orrs	r3, r2
 800514c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800514e:	4a1f      	ldr	r2, [pc, #124]	; (80051cc <HAL_GPIO_Init+0x354>)
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005154:	4b1d      	ldr	r3, [pc, #116]	; (80051cc <HAL_GPIO_Init+0x354>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	43db      	mvns	r3, r3
 800515e:	69ba      	ldr	r2, [r7, #24]
 8005160:	4013      	ands	r3, r2
 8005162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d003      	beq.n	8005178 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	4313      	orrs	r3, r2
 8005176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005178:	4a14      	ldr	r2, [pc, #80]	; (80051cc <HAL_GPIO_Init+0x354>)
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	3301      	adds	r3, #1
 8005182:	61fb      	str	r3, [r7, #28]
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	2b0f      	cmp	r3, #15
 8005188:	f67f ae86 	bls.w	8004e98 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800518c:	bf00      	nop
 800518e:	bf00      	nop
 8005190:	3724      	adds	r7, #36	; 0x24
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	40023800 	.word	0x40023800
 80051a0:	40013800 	.word	0x40013800
 80051a4:	40020000 	.word	0x40020000
 80051a8:	40020400 	.word	0x40020400
 80051ac:	40020800 	.word	0x40020800
 80051b0:	40020c00 	.word	0x40020c00
 80051b4:	40021000 	.word	0x40021000
 80051b8:	40021400 	.word	0x40021400
 80051bc:	40021800 	.word	0x40021800
 80051c0:	40021c00 	.word	0x40021c00
 80051c4:	40022000 	.word	0x40022000
 80051c8:	40022400 	.word	0x40022400
 80051cc:	40013c00 	.word	0x40013c00

080051d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	460b      	mov	r3, r1
 80051da:	807b      	strh	r3, [r7, #2]
 80051dc:	4613      	mov	r3, r2
 80051de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051e0:	787b      	ldrb	r3, [r7, #1]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051e6:	887a      	ldrh	r2, [r7, #2]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80051ec:	e003      	b.n	80051f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80051ee:	887b      	ldrh	r3, [r7, #2]
 80051f0:	041a      	lsls	r2, r3, #16
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	619a      	str	r2, [r3, #24]
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
	...

08005204 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e07f      	b.n	8005316 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d106      	bne.n	8005230 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f7fd fa3c 	bl	80026a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2224      	movs	r2, #36	; 0x24
 8005234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 0201 	bic.w	r2, r2, #1
 8005246:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005254:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689a      	ldr	r2, [r3, #8]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005264:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d107      	bne.n	800527e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	689a      	ldr	r2, [r3, #8]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800527a:	609a      	str	r2, [r3, #8]
 800527c:	e006      	b.n	800528c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	689a      	ldr	r2, [r3, #8]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800528a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	2b02      	cmp	r3, #2
 8005292:	d104      	bne.n	800529e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800529c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6859      	ldr	r1, [r3, #4]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	4b1d      	ldr	r3, [pc, #116]	; (8005320 <HAL_I2C_Init+0x11c>)
 80052aa:	430b      	orrs	r3, r1
 80052ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68da      	ldr	r2, [r3, #12]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691a      	ldr	r2, [r3, #16]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	430a      	orrs	r2, r1
 80052d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	69d9      	ldr	r1, [r3, #28]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a1a      	ldr	r2, [r3, #32]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	430a      	orrs	r2, r1
 80052e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 0201 	orr.w	r2, r2, #1
 80052f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2220      	movs	r2, #32
 8005302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	02008000 	.word	0x02008000

08005324 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b088      	sub	sp, #32
 8005328:	af02      	add	r7, sp, #8
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	607a      	str	r2, [r7, #4]
 800532e:	461a      	mov	r2, r3
 8005330:	460b      	mov	r3, r1
 8005332:	817b      	strh	r3, [r7, #10]
 8005334:	4613      	mov	r3, r2
 8005336:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b20      	cmp	r3, #32
 8005342:	f040 80da 	bne.w	80054fa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800534c:	2b01      	cmp	r3, #1
 800534e:	d101      	bne.n	8005354 <HAL_I2C_Master_Transmit+0x30>
 8005350:	2302      	movs	r3, #2
 8005352:	e0d3      	b.n	80054fc <HAL_I2C_Master_Transmit+0x1d8>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800535c:	f7fe fb9c 	bl	8003a98 <HAL_GetTick>
 8005360:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	2319      	movs	r3, #25
 8005368:	2201      	movs	r2, #1
 800536a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f000 f8f0 	bl	8005554 <I2C_WaitOnFlagUntilTimeout>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e0be      	b.n	80054fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2221      	movs	r2, #33	; 0x21
 8005382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2210      	movs	r2, #16
 800538a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	893a      	ldrh	r2, [r7, #8]
 800539e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	2bff      	cmp	r3, #255	; 0xff
 80053ae:	d90e      	bls.n	80053ce <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	22ff      	movs	r2, #255	; 0xff
 80053b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ba:	b2da      	uxtb	r2, r3
 80053bc:	8979      	ldrh	r1, [r7, #10]
 80053be:	4b51      	ldr	r3, [pc, #324]	; (8005504 <HAL_I2C_Master_Transmit+0x1e0>)
 80053c0:	9300      	str	r3, [sp, #0]
 80053c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f000 fa60 	bl	800588c <I2C_TransferConfig>
 80053cc:	e06c      	b.n	80054a8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	8979      	ldrh	r1, [r7, #10]
 80053e0:	4b48      	ldr	r3, [pc, #288]	; (8005504 <HAL_I2C_Master_Transmit+0x1e0>)
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f000 fa4f 	bl	800588c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80053ee:	e05b      	b.n	80054a8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	6a39      	ldr	r1, [r7, #32]
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 f8ed 	bl	80055d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e07b      	b.n	80054fc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	781a      	ldrb	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	1c5a      	adds	r2, r3, #1
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800541e:	b29b      	uxth	r3, r3
 8005420:	3b01      	subs	r3, #1
 8005422:	b29a      	uxth	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800542c:	3b01      	subs	r3, #1
 800542e:	b29a      	uxth	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005438:	b29b      	uxth	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d034      	beq.n	80054a8 <HAL_I2C_Master_Transmit+0x184>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005442:	2b00      	cmp	r3, #0
 8005444:	d130      	bne.n	80054a8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	2200      	movs	r2, #0
 800544e:	2180      	movs	r1, #128	; 0x80
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f000 f87f 	bl	8005554 <I2C_WaitOnFlagUntilTimeout>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d001      	beq.n	8005460 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e04d      	b.n	80054fc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005464:	b29b      	uxth	r3, r3
 8005466:	2bff      	cmp	r3, #255	; 0xff
 8005468:	d90e      	bls.n	8005488 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	22ff      	movs	r2, #255	; 0xff
 800546e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005474:	b2da      	uxtb	r2, r3
 8005476:	8979      	ldrh	r1, [r7, #10]
 8005478:	2300      	movs	r3, #0
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f000 fa03 	bl	800588c <I2C_TransferConfig>
 8005486:	e00f      	b.n	80054a8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800548c:	b29a      	uxth	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005496:	b2da      	uxtb	r2, r3
 8005498:	8979      	ldrh	r1, [r7, #10]
 800549a:	2300      	movs	r3, #0
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f000 f9f2 	bl	800588c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d19e      	bne.n	80053f0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	6a39      	ldr	r1, [r7, #32]
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 f8cc 	bl	8005654 <I2C_WaitOnSTOPFlagUntilTimeout>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e01a      	b.n	80054fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2220      	movs	r2, #32
 80054cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6859      	ldr	r1, [r3, #4]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	4b0b      	ldr	r3, [pc, #44]	; (8005508 <HAL_I2C_Master_Transmit+0x1e4>)
 80054da:	400b      	ands	r3, r1
 80054dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2220      	movs	r2, #32
 80054e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80054f6:	2300      	movs	r3, #0
 80054f8:	e000      	b.n	80054fc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80054fa:	2302      	movs	r3, #2
  }
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3718      	adds	r7, #24
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	80002000 	.word	0x80002000
 8005508:	fe00e800 	.word	0xfe00e800

0800550c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b02      	cmp	r3, #2
 8005520:	d103      	bne.n	800552a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2200      	movs	r2, #0
 8005528:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b01      	cmp	r3, #1
 8005536:	d007      	beq.n	8005548 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699a      	ldr	r2, [r3, #24]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0201 	orr.w	r2, r2, #1
 8005546:	619a      	str	r2, [r3, #24]
  }
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	603b      	str	r3, [r7, #0]
 8005560:	4613      	mov	r3, r2
 8005562:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005564:	e022      	b.n	80055ac <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556c:	d01e      	beq.n	80055ac <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800556e:	f7fe fa93 	bl	8003a98 <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	683a      	ldr	r2, [r7, #0]
 800557a:	429a      	cmp	r2, r3
 800557c:	d302      	bcc.n	8005584 <I2C_WaitOnFlagUntilTimeout+0x30>
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d113      	bne.n	80055ac <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005588:	f043 0220 	orr.w	r2, r3, #32
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2220      	movs	r2, #32
 8005594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e00f      	b.n	80055cc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	699a      	ldr	r2, [r3, #24]
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	4013      	ands	r3, r2
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	bf0c      	ite	eq
 80055bc:	2301      	moveq	r3, #1
 80055be:	2300      	movne	r3, #0
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	461a      	mov	r2, r3
 80055c4:	79fb      	ldrb	r3, [r7, #7]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d0cd      	beq.n	8005566 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80055e0:	e02c      	b.n	800563c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	68b9      	ldr	r1, [r7, #8]
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f000 f870 	bl	80056cc <I2C_IsErrorOccurred>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d001      	beq.n	80055f6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e02a      	b.n	800564c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fc:	d01e      	beq.n	800563c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055fe:	f7fe fa4b 	bl	8003a98 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	429a      	cmp	r2, r3
 800560c:	d302      	bcc.n	8005614 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d113      	bne.n	800563c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005618:	f043 0220 	orr.w	r2, r3, #32
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2220      	movs	r2, #32
 8005624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e007      	b.n	800564c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b02      	cmp	r3, #2
 8005648:	d1cb      	bne.n	80055e2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005660:	e028      	b.n	80056b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	68b9      	ldr	r1, [r7, #8]
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f000 f830 	bl	80056cc <I2C_IsErrorOccurred>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e026      	b.n	80056c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005676:	f7fe fa0f 	bl	8003a98 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	429a      	cmp	r2, r3
 8005684:	d302      	bcc.n	800568c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d113      	bne.n	80056b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005690:	f043 0220 	orr.w	r2, r3, #32
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2220      	movs	r2, #32
 800569c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e007      	b.n	80056c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	f003 0320 	and.w	r3, r3, #32
 80056be:	2b20      	cmp	r3, #32
 80056c0:	d1cf      	bne.n	8005662 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b08a      	sub	sp, #40	; 0x28
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056d8:	2300      	movs	r3, #0
 80056da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80056e6:	2300      	movs	r3, #0
 80056e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	f003 0310 	and.w	r3, r3, #16
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d068      	beq.n	80057ca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2210      	movs	r2, #16
 80056fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005700:	e049      	b.n	8005796 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005708:	d045      	beq.n	8005796 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800570a:	f7fe f9c5 	bl	8003a98 <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	429a      	cmp	r2, r3
 8005718:	d302      	bcc.n	8005720 <I2C_IsErrorOccurred+0x54>
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d13a      	bne.n	8005796 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800572a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005732:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800573e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005742:	d121      	bne.n	8005788 <I2C_IsErrorOccurred+0xbc>
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800574a:	d01d      	beq.n	8005788 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800574c:	7cfb      	ldrb	r3, [r7, #19]
 800574e:	2b20      	cmp	r3, #32
 8005750:	d01a      	beq.n	8005788 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005760:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005762:	f7fe f999 	bl	8003a98 <HAL_GetTick>
 8005766:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005768:	e00e      	b.n	8005788 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800576a:	f7fe f995 	bl	8003a98 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	2b19      	cmp	r3, #25
 8005776:	d907      	bls.n	8005788 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8005778:	6a3b      	ldr	r3, [r7, #32]
 800577a:	f043 0320 	orr.w	r3, r3, #32
 800577e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005786:	e006      	b.n	8005796 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	f003 0320 	and.w	r3, r3, #32
 8005792:	2b20      	cmp	r3, #32
 8005794:	d1e9      	bne.n	800576a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	f003 0320 	and.w	r3, r3, #32
 80057a0:	2b20      	cmp	r3, #32
 80057a2:	d003      	beq.n	80057ac <I2C_IsErrorOccurred+0xe0>
 80057a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d0aa      	beq.n	8005702 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80057ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d103      	bne.n	80057bc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2220      	movs	r2, #32
 80057ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	f043 0304 	orr.w	r3, r3, #4
 80057c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00b      	beq.n	80057f4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80057dc:	6a3b      	ldr	r3, [r7, #32]
 80057de:	f043 0301 	orr.w	r3, r3, #1
 80057e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00b      	beq.n	8005816 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	f043 0308 	orr.w	r3, r3, #8
 8005804:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800580e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00b      	beq.n	8005838 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005820:	6a3b      	ldr	r3, [r7, #32]
 8005822:	f043 0302 	orr.w	r3, r3, #2
 8005826:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005830:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800583c:	2b00      	cmp	r3, #0
 800583e:	d01c      	beq.n	800587a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f7ff fe63 	bl	800550c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	6859      	ldr	r1, [r3, #4]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	4b0d      	ldr	r3, [pc, #52]	; (8005888 <I2C_IsErrorOccurred+0x1bc>)
 8005852:	400b      	ands	r3, r1
 8005854:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800585a:	6a3b      	ldr	r3, [r7, #32]
 800585c:	431a      	orrs	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2220      	movs	r2, #32
 8005866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800587a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800587e:	4618      	mov	r0, r3
 8005880:	3728      	adds	r7, #40	; 0x28
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	fe00e800 	.word	0xfe00e800

0800588c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800588c:	b480      	push	{r7}
 800588e:	b087      	sub	sp, #28
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	607b      	str	r3, [r7, #4]
 8005896:	460b      	mov	r3, r1
 8005898:	817b      	strh	r3, [r7, #10]
 800589a:	4613      	mov	r3, r2
 800589c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800589e:	897b      	ldrh	r3, [r7, #10]
 80058a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80058a4:	7a7b      	ldrb	r3, [r7, #9]
 80058a6:	041b      	lsls	r3, r3, #16
 80058a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80058ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	6a3b      	ldr	r3, [r7, #32]
 80058c4:	0d5b      	lsrs	r3, r3, #21
 80058c6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80058ca:	4b08      	ldr	r3, [pc, #32]	; (80058ec <I2C_TransferConfig+0x60>)
 80058cc:	430b      	orrs	r3, r1
 80058ce:	43db      	mvns	r3, r3
 80058d0:	ea02 0103 	and.w	r1, r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	430a      	orrs	r2, r1
 80058dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80058de:	bf00      	nop
 80058e0:	371c      	adds	r7, #28
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	03ff63ff 	.word	0x03ff63ff

080058f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b20      	cmp	r3, #32
 8005904:	d138      	bne.n	8005978 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800590c:	2b01      	cmp	r3, #1
 800590e:	d101      	bne.n	8005914 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005910:	2302      	movs	r3, #2
 8005912:	e032      	b.n	800597a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2224      	movs	r2, #36	; 0x24
 8005920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 0201 	bic.w	r2, r2, #1
 8005932:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005942:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6819      	ldr	r1, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	430a      	orrs	r2, r1
 8005952:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f042 0201 	orr.w	r2, r2, #1
 8005962:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2220      	movs	r2, #32
 8005968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005974:	2300      	movs	r3, #0
 8005976:	e000      	b.n	800597a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005978:	2302      	movs	r3, #2
  }
}
 800597a:	4618      	mov	r0, r3
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005986:	b480      	push	{r7}
 8005988:	b085      	sub	sp, #20
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b20      	cmp	r3, #32
 800599a:	d139      	bne.n	8005a10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d101      	bne.n	80059aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80059a6:	2302      	movs	r3, #2
 80059a8:	e033      	b.n	8005a12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2224      	movs	r2, #36	; 0x24
 80059b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 0201 	bic.w	r2, r2, #1
 80059c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80059d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	021b      	lsls	r3, r3, #8
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f042 0201 	orr.w	r2, r2, #1
 80059fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2220      	movs	r2, #32
 8005a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	e000      	b.n	8005a12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005a10:	2302      	movs	r3, #2
  }
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3714      	adds	r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
	...

08005a20 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005a20:	b480      	push	{r7}
 8005a22:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a24:	4b05      	ldr	r3, [pc, #20]	; (8005a3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a04      	ldr	r2, [pc, #16]	; (8005a3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a2e:	6013      	str	r3, [r2, #0]
}
 8005a30:	bf00      	nop
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	40007000 	.word	0x40007000

08005a40 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005a46:	2300      	movs	r3, #0
 8005a48:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005a4a:	4b23      	ldr	r3, [pc, #140]	; (8005ad8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4e:	4a22      	ldr	r2, [pc, #136]	; (8005ad8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a54:	6413      	str	r3, [r2, #64]	; 0x40
 8005a56:	4b20      	ldr	r3, [pc, #128]	; (8005ad8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a5e:	603b      	str	r3, [r7, #0]
 8005a60:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005a62:	4b1e      	ldr	r3, [pc, #120]	; (8005adc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a1d      	ldr	r2, [pc, #116]	; (8005adc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a6c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a6e:	f7fe f813 	bl	8003a98 <HAL_GetTick>
 8005a72:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005a74:	e009      	b.n	8005a8a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005a76:	f7fe f80f 	bl	8003a98 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a84:	d901      	bls.n	8005a8a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e022      	b.n	8005ad0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005a8a:	4b14      	ldr	r3, [pc, #80]	; (8005adc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a96:	d1ee      	bne.n	8005a76 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005a98:	4b10      	ldr	r3, [pc, #64]	; (8005adc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a0f      	ldr	r2, [pc, #60]	; (8005adc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005aa2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005aa4:	f7fd fff8 	bl	8003a98 <HAL_GetTick>
 8005aa8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005aaa:	e009      	b.n	8005ac0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005aac:	f7fd fff4 	bl	8003a98 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005aba:	d901      	bls.n	8005ac0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e007      	b.n	8005ad0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005ac0:	4b06      	ldr	r3, [pc, #24]	; (8005adc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005acc:	d1ee      	bne.n	8005aac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	40023800 	.word	0x40023800
 8005adc:	40007000 	.word	0x40007000

08005ae0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e291      	b.n	800601a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f000 8087 	beq.w	8005c12 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b04:	4b96      	ldr	r3, [pc, #600]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f003 030c 	and.w	r3, r3, #12
 8005b0c:	2b04      	cmp	r3, #4
 8005b0e:	d00c      	beq.n	8005b2a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b10:	4b93      	ldr	r3, [pc, #588]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f003 030c 	and.w	r3, r3, #12
 8005b18:	2b08      	cmp	r3, #8
 8005b1a:	d112      	bne.n	8005b42 <HAL_RCC_OscConfig+0x62>
 8005b1c:	4b90      	ldr	r3, [pc, #576]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b28:	d10b      	bne.n	8005b42 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b2a:	4b8d      	ldr	r3, [pc, #564]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d06c      	beq.n	8005c10 <HAL_RCC_OscConfig+0x130>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d168      	bne.n	8005c10 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e26b      	b.n	800601a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b4a:	d106      	bne.n	8005b5a <HAL_RCC_OscConfig+0x7a>
 8005b4c:	4b84      	ldr	r3, [pc, #528]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a83      	ldr	r2, [pc, #524]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b56:	6013      	str	r3, [r2, #0]
 8005b58:	e02e      	b.n	8005bb8 <HAL_RCC_OscConfig+0xd8>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10c      	bne.n	8005b7c <HAL_RCC_OscConfig+0x9c>
 8005b62:	4b7f      	ldr	r3, [pc, #508]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a7e      	ldr	r2, [pc, #504]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b6c:	6013      	str	r3, [r2, #0]
 8005b6e:	4b7c      	ldr	r3, [pc, #496]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a7b      	ldr	r2, [pc, #492]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b78:	6013      	str	r3, [r2, #0]
 8005b7a:	e01d      	b.n	8005bb8 <HAL_RCC_OscConfig+0xd8>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b84:	d10c      	bne.n	8005ba0 <HAL_RCC_OscConfig+0xc0>
 8005b86:	4b76      	ldr	r3, [pc, #472]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a75      	ldr	r2, [pc, #468]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b90:	6013      	str	r3, [r2, #0]
 8005b92:	4b73      	ldr	r3, [pc, #460]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a72      	ldr	r2, [pc, #456]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b9c:	6013      	str	r3, [r2, #0]
 8005b9e:	e00b      	b.n	8005bb8 <HAL_RCC_OscConfig+0xd8>
 8005ba0:	4b6f      	ldr	r3, [pc, #444]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a6e      	ldr	r2, [pc, #440]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005baa:	6013      	str	r3, [r2, #0]
 8005bac:	4b6c      	ldr	r3, [pc, #432]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a6b      	ldr	r2, [pc, #428]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005bb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d013      	beq.n	8005be8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc0:	f7fd ff6a 	bl	8003a98 <HAL_GetTick>
 8005bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bc6:	e008      	b.n	8005bda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bc8:	f7fd ff66 	bl	8003a98 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	2b64      	cmp	r3, #100	; 0x64
 8005bd4:	d901      	bls.n	8005bda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e21f      	b.n	800601a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bda:	4b61      	ldr	r3, [pc, #388]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d0f0      	beq.n	8005bc8 <HAL_RCC_OscConfig+0xe8>
 8005be6:	e014      	b.n	8005c12 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be8:	f7fd ff56 	bl	8003a98 <HAL_GetTick>
 8005bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bee:	e008      	b.n	8005c02 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bf0:	f7fd ff52 	bl	8003a98 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	2b64      	cmp	r3, #100	; 0x64
 8005bfc:	d901      	bls.n	8005c02 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e20b      	b.n	800601a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c02:	4b57      	ldr	r3, [pc, #348]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1f0      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x110>
 8005c0e:	e000      	b.n	8005c12 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d069      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c1e:	4b50      	ldr	r3, [pc, #320]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f003 030c 	and.w	r3, r3, #12
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00b      	beq.n	8005c42 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c2a:	4b4d      	ldr	r3, [pc, #308]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f003 030c 	and.w	r3, r3, #12
 8005c32:	2b08      	cmp	r3, #8
 8005c34:	d11c      	bne.n	8005c70 <HAL_RCC_OscConfig+0x190>
 8005c36:	4b4a      	ldr	r3, [pc, #296]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d116      	bne.n	8005c70 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c42:	4b47      	ldr	r3, [pc, #284]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d005      	beq.n	8005c5a <HAL_RCC_OscConfig+0x17a>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d001      	beq.n	8005c5a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e1df      	b.n	800601a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c5a:	4b41      	ldr	r3, [pc, #260]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	00db      	lsls	r3, r3, #3
 8005c68:	493d      	ldr	r1, [pc, #244]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c6e:	e040      	b.n	8005cf2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d023      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c78:	4b39      	ldr	r3, [pc, #228]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a38      	ldr	r2, [pc, #224]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005c7e:	f043 0301 	orr.w	r3, r3, #1
 8005c82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c84:	f7fd ff08 	bl	8003a98 <HAL_GetTick>
 8005c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c8a:	e008      	b.n	8005c9e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c8c:	f7fd ff04 	bl	8003a98 <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d901      	bls.n	8005c9e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e1bd      	b.n	800601a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c9e:	4b30      	ldr	r3, [pc, #192]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d0f0      	beq.n	8005c8c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005caa:	4b2d      	ldr	r3, [pc, #180]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	4929      	ldr	r1, [pc, #164]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	600b      	str	r3, [r1, #0]
 8005cbe:	e018      	b.n	8005cf2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cc0:	4b27      	ldr	r3, [pc, #156]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a26      	ldr	r2, [pc, #152]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005cc6:	f023 0301 	bic.w	r3, r3, #1
 8005cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ccc:	f7fd fee4 	bl	8003a98 <HAL_GetTick>
 8005cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cd2:	e008      	b.n	8005ce6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cd4:	f7fd fee0 	bl	8003a98 <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d901      	bls.n	8005ce6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e199      	b.n	800601a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ce6:	4b1e      	ldr	r3, [pc, #120]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1f0      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0308 	and.w	r3, r3, #8
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d038      	beq.n	8005d70 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d019      	beq.n	8005d3a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d06:	4b16      	ldr	r3, [pc, #88]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d0a:	4a15      	ldr	r2, [pc, #84]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005d0c:	f043 0301 	orr.w	r3, r3, #1
 8005d10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d12:	f7fd fec1 	bl	8003a98 <HAL_GetTick>
 8005d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d18:	e008      	b.n	8005d2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d1a:	f7fd febd 	bl	8003a98 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d901      	bls.n	8005d2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e176      	b.n	800601a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d2c:	4b0c      	ldr	r3, [pc, #48]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d30:	f003 0302 	and.w	r3, r3, #2
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d0f0      	beq.n	8005d1a <HAL_RCC_OscConfig+0x23a>
 8005d38:	e01a      	b.n	8005d70 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d3a:	4b09      	ldr	r3, [pc, #36]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d3e:	4a08      	ldr	r2, [pc, #32]	; (8005d60 <HAL_RCC_OscConfig+0x280>)
 8005d40:	f023 0301 	bic.w	r3, r3, #1
 8005d44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d46:	f7fd fea7 	bl	8003a98 <HAL_GetTick>
 8005d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d4c:	e00a      	b.n	8005d64 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d4e:	f7fd fea3 	bl	8003a98 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d903      	bls.n	8005d64 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e15c      	b.n	800601a <HAL_RCC_OscConfig+0x53a>
 8005d60:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d64:	4b91      	ldr	r3, [pc, #580]	; (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1ee      	bne.n	8005d4e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0304 	and.w	r3, r3, #4
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f000 80a4 	beq.w	8005ec6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d7e:	4b8b      	ldr	r3, [pc, #556]	; (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10d      	bne.n	8005da6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d8a:	4b88      	ldr	r3, [pc, #544]	; (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8e:	4a87      	ldr	r2, [pc, #540]	; (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d94:	6413      	str	r3, [r2, #64]	; 0x40
 8005d96:	4b85      	ldr	r3, [pc, #532]	; (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d9e:	60bb      	str	r3, [r7, #8]
 8005da0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005da2:	2301      	movs	r3, #1
 8005da4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005da6:	4b82      	ldr	r3, [pc, #520]	; (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d118      	bne.n	8005de4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005db2:	4b7f      	ldr	r3, [pc, #508]	; (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a7e      	ldr	r2, [pc, #504]	; (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dbe:	f7fd fe6b 	bl	8003a98 <HAL_GetTick>
 8005dc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005dc4:	e008      	b.n	8005dd8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dc6:	f7fd fe67 	bl	8003a98 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	2b64      	cmp	r3, #100	; 0x64
 8005dd2:	d901      	bls.n	8005dd8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e120      	b.n	800601a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005dd8:	4b75      	ldr	r3, [pc, #468]	; (8005fb0 <HAL_RCC_OscConfig+0x4d0>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d0f0      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d106      	bne.n	8005dfa <HAL_RCC_OscConfig+0x31a>
 8005dec:	4b6f      	ldr	r3, [pc, #444]	; (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df0:	4a6e      	ldr	r2, [pc, #440]	; (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005df2:	f043 0301 	orr.w	r3, r3, #1
 8005df6:	6713      	str	r3, [r2, #112]	; 0x70
 8005df8:	e02d      	b.n	8005e56 <HAL_RCC_OscConfig+0x376>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10c      	bne.n	8005e1c <HAL_RCC_OscConfig+0x33c>
 8005e02:	4b6a      	ldr	r3, [pc, #424]	; (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e06:	4a69      	ldr	r2, [pc, #420]	; (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005e08:	f023 0301 	bic.w	r3, r3, #1
 8005e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8005e0e:	4b67      	ldr	r3, [pc, #412]	; (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e12:	4a66      	ldr	r2, [pc, #408]	; (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005e14:	f023 0304 	bic.w	r3, r3, #4
 8005e18:	6713      	str	r3, [r2, #112]	; 0x70
 8005e1a:	e01c      	b.n	8005e56 <HAL_RCC_OscConfig+0x376>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	2b05      	cmp	r3, #5
 8005e22:	d10c      	bne.n	8005e3e <HAL_RCC_OscConfig+0x35e>
 8005e24:	4b61      	ldr	r3, [pc, #388]	; (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e28:	4a60      	ldr	r2, [pc, #384]	; (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005e2a:	f043 0304 	orr.w	r3, r3, #4
 8005e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8005e30:	4b5e      	ldr	r3, [pc, #376]	; (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e34:	4a5d      	ldr	r2, [pc, #372]	; (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005e36:	f043 0301 	orr.w	r3, r3, #1
 8005e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8005e3c:	e00b      	b.n	8005e56 <HAL_RCC_OscConfig+0x376>
 8005e3e:	4b5b      	ldr	r3, [pc, #364]	; (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e42:	4a5a      	ldr	r2, [pc, #360]	; (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005e44:	f023 0301 	bic.w	r3, r3, #1
 8005e48:	6713      	str	r3, [r2, #112]	; 0x70
 8005e4a:	4b58      	ldr	r3, [pc, #352]	; (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4e:	4a57      	ldr	r2, [pc, #348]	; (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005e50:	f023 0304 	bic.w	r3, r3, #4
 8005e54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d015      	beq.n	8005e8a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e5e:	f7fd fe1b 	bl	8003a98 <HAL_GetTick>
 8005e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e64:	e00a      	b.n	8005e7c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e66:	f7fd fe17 	bl	8003a98 <HAL_GetTick>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d901      	bls.n	8005e7c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e0ce      	b.n	800601a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e7c:	4b4b      	ldr	r3, [pc, #300]	; (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e80:	f003 0302 	and.w	r3, r3, #2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d0ee      	beq.n	8005e66 <HAL_RCC_OscConfig+0x386>
 8005e88:	e014      	b.n	8005eb4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e8a:	f7fd fe05 	bl	8003a98 <HAL_GetTick>
 8005e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e90:	e00a      	b.n	8005ea8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e92:	f7fd fe01 	bl	8003a98 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d901      	bls.n	8005ea8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e0b8      	b.n	800601a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ea8:	4b40      	ldr	r3, [pc, #256]	; (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eac:	f003 0302 	and.w	r3, r3, #2
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1ee      	bne.n	8005e92 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005eb4:	7dfb      	ldrb	r3, [r7, #23]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d105      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eba:	4b3c      	ldr	r3, [pc, #240]	; (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebe:	4a3b      	ldr	r2, [pc, #236]	; (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005ec0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ec4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f000 80a4 	beq.w	8006018 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ed0:	4b36      	ldr	r3, [pc, #216]	; (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f003 030c 	and.w	r3, r3, #12
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d06b      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d149      	bne.n	8005f78 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ee4:	4b31      	ldr	r3, [pc, #196]	; (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a30      	ldr	r2, [pc, #192]	; (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005eea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ef0:	f7fd fdd2 	bl	8003a98 <HAL_GetTick>
 8005ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ef6:	e008      	b.n	8005f0a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ef8:	f7fd fdce 	bl	8003a98 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d901      	bls.n	8005f0a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e087      	b.n	800601a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f0a:	4b28      	ldr	r3, [pc, #160]	; (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1f0      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	69da      	ldr	r2, [r3, #28]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
 8005f1e:	431a      	orrs	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	019b      	lsls	r3, r3, #6
 8005f26:	431a      	orrs	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2c:	085b      	lsrs	r3, r3, #1
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	041b      	lsls	r3, r3, #16
 8005f32:	431a      	orrs	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f38:	061b      	lsls	r3, r3, #24
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	4a1b      	ldr	r2, [pc, #108]	; (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005f3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f42:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f44:	4b19      	ldr	r3, [pc, #100]	; (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a18      	ldr	r2, [pc, #96]	; (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f50:	f7fd fda2 	bl	8003a98 <HAL_GetTick>
 8005f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f56:	e008      	b.n	8005f6a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f58:	f7fd fd9e 	bl	8003a98 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d901      	bls.n	8005f6a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e057      	b.n	800601a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f6a:	4b10      	ldr	r3, [pc, #64]	; (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d0f0      	beq.n	8005f58 <HAL_RCC_OscConfig+0x478>
 8005f76:	e04f      	b.n	8006018 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f78:	4b0c      	ldr	r3, [pc, #48]	; (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a0b      	ldr	r2, [pc, #44]	; (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005f7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f84:	f7fd fd88 	bl	8003a98 <HAL_GetTick>
 8005f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f8a:	e008      	b.n	8005f9e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f8c:	f7fd fd84 	bl	8003a98 <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d901      	bls.n	8005f9e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e03d      	b.n	800601a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f9e:	4b03      	ldr	r3, [pc, #12]	; (8005fac <HAL_RCC_OscConfig+0x4cc>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1f0      	bne.n	8005f8c <HAL_RCC_OscConfig+0x4ac>
 8005faa:	e035      	b.n	8006018 <HAL_RCC_OscConfig+0x538>
 8005fac:	40023800 	.word	0x40023800
 8005fb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005fb4:	4b1b      	ldr	r3, [pc, #108]	; (8006024 <HAL_RCC_OscConfig+0x544>)
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d028      	beq.n	8006014 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d121      	bne.n	8006014 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d11a      	bne.n	8006014 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005fea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d111      	bne.n	8006014 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffa:	085b      	lsrs	r3, r3, #1
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006000:	429a      	cmp	r2, r3
 8006002:	d107      	bne.n	8006014 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006010:	429a      	cmp	r2, r3
 8006012:	d001      	beq.n	8006018 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e000      	b.n	800601a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3718      	adds	r7, #24
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	40023800 	.word	0x40023800

08006028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006032:	2300      	movs	r3, #0
 8006034:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d101      	bne.n	8006040 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e0d0      	b.n	80061e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006040:	4b6a      	ldr	r3, [pc, #424]	; (80061ec <HAL_RCC_ClockConfig+0x1c4>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 030f 	and.w	r3, r3, #15
 8006048:	683a      	ldr	r2, [r7, #0]
 800604a:	429a      	cmp	r2, r3
 800604c:	d910      	bls.n	8006070 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800604e:	4b67      	ldr	r3, [pc, #412]	; (80061ec <HAL_RCC_ClockConfig+0x1c4>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f023 020f 	bic.w	r2, r3, #15
 8006056:	4965      	ldr	r1, [pc, #404]	; (80061ec <HAL_RCC_ClockConfig+0x1c4>)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	4313      	orrs	r3, r2
 800605c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800605e:	4b63      	ldr	r3, [pc, #396]	; (80061ec <HAL_RCC_ClockConfig+0x1c4>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 030f 	and.w	r3, r3, #15
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	429a      	cmp	r2, r3
 800606a:	d001      	beq.n	8006070 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e0b8      	b.n	80061e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d020      	beq.n	80060be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0304 	and.w	r3, r3, #4
 8006084:	2b00      	cmp	r3, #0
 8006086:	d005      	beq.n	8006094 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006088:	4b59      	ldr	r3, [pc, #356]	; (80061f0 <HAL_RCC_ClockConfig+0x1c8>)
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	4a58      	ldr	r2, [pc, #352]	; (80061f0 <HAL_RCC_ClockConfig+0x1c8>)
 800608e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006092:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0308 	and.w	r3, r3, #8
 800609c:	2b00      	cmp	r3, #0
 800609e:	d005      	beq.n	80060ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060a0:	4b53      	ldr	r3, [pc, #332]	; (80061f0 <HAL_RCC_ClockConfig+0x1c8>)
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	4a52      	ldr	r2, [pc, #328]	; (80061f0 <HAL_RCC_ClockConfig+0x1c8>)
 80060a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80060aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060ac:	4b50      	ldr	r3, [pc, #320]	; (80061f0 <HAL_RCC_ClockConfig+0x1c8>)
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	494d      	ldr	r1, [pc, #308]	; (80061f0 <HAL_RCC_ClockConfig+0x1c8>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d040      	beq.n	800614c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d107      	bne.n	80060e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060d2:	4b47      	ldr	r3, [pc, #284]	; (80061f0 <HAL_RCC_ClockConfig+0x1c8>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d115      	bne.n	800610a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e07f      	b.n	80061e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d107      	bne.n	80060fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060ea:	4b41      	ldr	r3, [pc, #260]	; (80061f0 <HAL_RCC_ClockConfig+0x1c8>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d109      	bne.n	800610a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e073      	b.n	80061e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060fa:	4b3d      	ldr	r3, [pc, #244]	; (80061f0 <HAL_RCC_ClockConfig+0x1c8>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0302 	and.w	r3, r3, #2
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e06b      	b.n	80061e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800610a:	4b39      	ldr	r3, [pc, #228]	; (80061f0 <HAL_RCC_ClockConfig+0x1c8>)
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f023 0203 	bic.w	r2, r3, #3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	4936      	ldr	r1, [pc, #216]	; (80061f0 <HAL_RCC_ClockConfig+0x1c8>)
 8006118:	4313      	orrs	r3, r2
 800611a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800611c:	f7fd fcbc 	bl	8003a98 <HAL_GetTick>
 8006120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006122:	e00a      	b.n	800613a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006124:	f7fd fcb8 	bl	8003a98 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006132:	4293      	cmp	r3, r2
 8006134:	d901      	bls.n	800613a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e053      	b.n	80061e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800613a:	4b2d      	ldr	r3, [pc, #180]	; (80061f0 <HAL_RCC_ClockConfig+0x1c8>)
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f003 020c 	and.w	r2, r3, #12
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	429a      	cmp	r2, r3
 800614a:	d1eb      	bne.n	8006124 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800614c:	4b27      	ldr	r3, [pc, #156]	; (80061ec <HAL_RCC_ClockConfig+0x1c4>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 030f 	and.w	r3, r3, #15
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	429a      	cmp	r2, r3
 8006158:	d210      	bcs.n	800617c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800615a:	4b24      	ldr	r3, [pc, #144]	; (80061ec <HAL_RCC_ClockConfig+0x1c4>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f023 020f 	bic.w	r2, r3, #15
 8006162:	4922      	ldr	r1, [pc, #136]	; (80061ec <HAL_RCC_ClockConfig+0x1c4>)
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	4313      	orrs	r3, r2
 8006168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800616a:	4b20      	ldr	r3, [pc, #128]	; (80061ec <HAL_RCC_ClockConfig+0x1c4>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 030f 	and.w	r3, r3, #15
 8006172:	683a      	ldr	r2, [r7, #0]
 8006174:	429a      	cmp	r2, r3
 8006176:	d001      	beq.n	800617c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e032      	b.n	80061e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0304 	and.w	r3, r3, #4
 8006184:	2b00      	cmp	r3, #0
 8006186:	d008      	beq.n	800619a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006188:	4b19      	ldr	r3, [pc, #100]	; (80061f0 <HAL_RCC_ClockConfig+0x1c8>)
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	4916      	ldr	r1, [pc, #88]	; (80061f0 <HAL_RCC_ClockConfig+0x1c8>)
 8006196:	4313      	orrs	r3, r2
 8006198:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0308 	and.w	r3, r3, #8
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d009      	beq.n	80061ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80061a6:	4b12      	ldr	r3, [pc, #72]	; (80061f0 <HAL_RCC_ClockConfig+0x1c8>)
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	00db      	lsls	r3, r3, #3
 80061b4:	490e      	ldr	r1, [pc, #56]	; (80061f0 <HAL_RCC_ClockConfig+0x1c8>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80061ba:	f000 f821 	bl	8006200 <HAL_RCC_GetSysClockFreq>
 80061be:	4602      	mov	r2, r0
 80061c0:	4b0b      	ldr	r3, [pc, #44]	; (80061f0 <HAL_RCC_ClockConfig+0x1c8>)
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	091b      	lsrs	r3, r3, #4
 80061c6:	f003 030f 	and.w	r3, r3, #15
 80061ca:	490a      	ldr	r1, [pc, #40]	; (80061f4 <HAL_RCC_ClockConfig+0x1cc>)
 80061cc:	5ccb      	ldrb	r3, [r1, r3]
 80061ce:	fa22 f303 	lsr.w	r3, r2, r3
 80061d2:	4a09      	ldr	r2, [pc, #36]	; (80061f8 <HAL_RCC_ClockConfig+0x1d0>)
 80061d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80061d6:	4b09      	ldr	r3, [pc, #36]	; (80061fc <HAL_RCC_ClockConfig+0x1d4>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4618      	mov	r0, r3
 80061dc:	f7fd fc18 	bl	8003a10 <HAL_InitTick>

  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	40023c00 	.word	0x40023c00
 80061f0:	40023800 	.word	0x40023800
 80061f4:	0800ae54 	.word	0x0800ae54
 80061f8:	200000c0 	.word	0x200000c0
 80061fc:	200000c4 	.word	0x200000c4

08006200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006204:	b094      	sub	sp, #80	; 0x50
 8006206:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006208:	2300      	movs	r3, #0
 800620a:	647b      	str	r3, [r7, #68]	; 0x44
 800620c:	2300      	movs	r3, #0
 800620e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006210:	2300      	movs	r3, #0
 8006212:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8006214:	2300      	movs	r3, #0
 8006216:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006218:	4b79      	ldr	r3, [pc, #484]	; (8006400 <HAL_RCC_GetSysClockFreq+0x200>)
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f003 030c 	and.w	r3, r3, #12
 8006220:	2b08      	cmp	r3, #8
 8006222:	d00d      	beq.n	8006240 <HAL_RCC_GetSysClockFreq+0x40>
 8006224:	2b08      	cmp	r3, #8
 8006226:	f200 80e1 	bhi.w	80063ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800622a:	2b00      	cmp	r3, #0
 800622c:	d002      	beq.n	8006234 <HAL_RCC_GetSysClockFreq+0x34>
 800622e:	2b04      	cmp	r3, #4
 8006230:	d003      	beq.n	800623a <HAL_RCC_GetSysClockFreq+0x3a>
 8006232:	e0db      	b.n	80063ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006234:	4b73      	ldr	r3, [pc, #460]	; (8006404 <HAL_RCC_GetSysClockFreq+0x204>)
 8006236:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006238:	e0db      	b.n	80063f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800623a:	4b73      	ldr	r3, [pc, #460]	; (8006408 <HAL_RCC_GetSysClockFreq+0x208>)
 800623c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800623e:	e0d8      	b.n	80063f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006240:	4b6f      	ldr	r3, [pc, #444]	; (8006400 <HAL_RCC_GetSysClockFreq+0x200>)
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006248:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800624a:	4b6d      	ldr	r3, [pc, #436]	; (8006400 <HAL_RCC_GetSysClockFreq+0x200>)
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d063      	beq.n	800631e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006256:	4b6a      	ldr	r3, [pc, #424]	; (8006400 <HAL_RCC_GetSysClockFreq+0x200>)
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	099b      	lsrs	r3, r3, #6
 800625c:	2200      	movs	r2, #0
 800625e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006260:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006268:	633b      	str	r3, [r7, #48]	; 0x30
 800626a:	2300      	movs	r3, #0
 800626c:	637b      	str	r3, [r7, #52]	; 0x34
 800626e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006272:	4622      	mov	r2, r4
 8006274:	462b      	mov	r3, r5
 8006276:	f04f 0000 	mov.w	r0, #0
 800627a:	f04f 0100 	mov.w	r1, #0
 800627e:	0159      	lsls	r1, r3, #5
 8006280:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006284:	0150      	lsls	r0, r2, #5
 8006286:	4602      	mov	r2, r0
 8006288:	460b      	mov	r3, r1
 800628a:	4621      	mov	r1, r4
 800628c:	1a51      	subs	r1, r2, r1
 800628e:	6139      	str	r1, [r7, #16]
 8006290:	4629      	mov	r1, r5
 8006292:	eb63 0301 	sbc.w	r3, r3, r1
 8006296:	617b      	str	r3, [r7, #20]
 8006298:	f04f 0200 	mov.w	r2, #0
 800629c:	f04f 0300 	mov.w	r3, #0
 80062a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062a4:	4659      	mov	r1, fp
 80062a6:	018b      	lsls	r3, r1, #6
 80062a8:	4651      	mov	r1, sl
 80062aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80062ae:	4651      	mov	r1, sl
 80062b0:	018a      	lsls	r2, r1, #6
 80062b2:	4651      	mov	r1, sl
 80062b4:	ebb2 0801 	subs.w	r8, r2, r1
 80062b8:	4659      	mov	r1, fp
 80062ba:	eb63 0901 	sbc.w	r9, r3, r1
 80062be:	f04f 0200 	mov.w	r2, #0
 80062c2:	f04f 0300 	mov.w	r3, #0
 80062c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062d2:	4690      	mov	r8, r2
 80062d4:	4699      	mov	r9, r3
 80062d6:	4623      	mov	r3, r4
 80062d8:	eb18 0303 	adds.w	r3, r8, r3
 80062dc:	60bb      	str	r3, [r7, #8]
 80062de:	462b      	mov	r3, r5
 80062e0:	eb49 0303 	adc.w	r3, r9, r3
 80062e4:	60fb      	str	r3, [r7, #12]
 80062e6:	f04f 0200 	mov.w	r2, #0
 80062ea:	f04f 0300 	mov.w	r3, #0
 80062ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80062f2:	4629      	mov	r1, r5
 80062f4:	024b      	lsls	r3, r1, #9
 80062f6:	4621      	mov	r1, r4
 80062f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80062fc:	4621      	mov	r1, r4
 80062fe:	024a      	lsls	r2, r1, #9
 8006300:	4610      	mov	r0, r2
 8006302:	4619      	mov	r1, r3
 8006304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006306:	2200      	movs	r2, #0
 8006308:	62bb      	str	r3, [r7, #40]	; 0x28
 800630a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800630c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006310:	f7fa fcbc 	bl	8000c8c <__aeabi_uldivmod>
 8006314:	4602      	mov	r2, r0
 8006316:	460b      	mov	r3, r1
 8006318:	4613      	mov	r3, r2
 800631a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800631c:	e058      	b.n	80063d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800631e:	4b38      	ldr	r3, [pc, #224]	; (8006400 <HAL_RCC_GetSysClockFreq+0x200>)
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	099b      	lsrs	r3, r3, #6
 8006324:	2200      	movs	r2, #0
 8006326:	4618      	mov	r0, r3
 8006328:	4611      	mov	r1, r2
 800632a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800632e:	623b      	str	r3, [r7, #32]
 8006330:	2300      	movs	r3, #0
 8006332:	627b      	str	r3, [r7, #36]	; 0x24
 8006334:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006338:	4642      	mov	r2, r8
 800633a:	464b      	mov	r3, r9
 800633c:	f04f 0000 	mov.w	r0, #0
 8006340:	f04f 0100 	mov.w	r1, #0
 8006344:	0159      	lsls	r1, r3, #5
 8006346:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800634a:	0150      	lsls	r0, r2, #5
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	4641      	mov	r1, r8
 8006352:	ebb2 0a01 	subs.w	sl, r2, r1
 8006356:	4649      	mov	r1, r9
 8006358:	eb63 0b01 	sbc.w	fp, r3, r1
 800635c:	f04f 0200 	mov.w	r2, #0
 8006360:	f04f 0300 	mov.w	r3, #0
 8006364:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006368:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800636c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006370:	ebb2 040a 	subs.w	r4, r2, sl
 8006374:	eb63 050b 	sbc.w	r5, r3, fp
 8006378:	f04f 0200 	mov.w	r2, #0
 800637c:	f04f 0300 	mov.w	r3, #0
 8006380:	00eb      	lsls	r3, r5, #3
 8006382:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006386:	00e2      	lsls	r2, r4, #3
 8006388:	4614      	mov	r4, r2
 800638a:	461d      	mov	r5, r3
 800638c:	4643      	mov	r3, r8
 800638e:	18e3      	adds	r3, r4, r3
 8006390:	603b      	str	r3, [r7, #0]
 8006392:	464b      	mov	r3, r9
 8006394:	eb45 0303 	adc.w	r3, r5, r3
 8006398:	607b      	str	r3, [r7, #4]
 800639a:	f04f 0200 	mov.w	r2, #0
 800639e:	f04f 0300 	mov.w	r3, #0
 80063a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80063a6:	4629      	mov	r1, r5
 80063a8:	028b      	lsls	r3, r1, #10
 80063aa:	4621      	mov	r1, r4
 80063ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80063b0:	4621      	mov	r1, r4
 80063b2:	028a      	lsls	r2, r1, #10
 80063b4:	4610      	mov	r0, r2
 80063b6:	4619      	mov	r1, r3
 80063b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063ba:	2200      	movs	r2, #0
 80063bc:	61bb      	str	r3, [r7, #24]
 80063be:	61fa      	str	r2, [r7, #28]
 80063c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063c4:	f7fa fc62 	bl	8000c8c <__aeabi_uldivmod>
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	4613      	mov	r3, r2
 80063ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80063d0:	4b0b      	ldr	r3, [pc, #44]	; (8006400 <HAL_RCC_GetSysClockFreq+0x200>)
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	0c1b      	lsrs	r3, r3, #16
 80063d6:	f003 0303 	and.w	r3, r3, #3
 80063da:	3301      	adds	r3, #1
 80063dc:	005b      	lsls	r3, r3, #1
 80063de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80063e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80063ea:	e002      	b.n	80063f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063ec:	4b05      	ldr	r3, [pc, #20]	; (8006404 <HAL_RCC_GetSysClockFreq+0x204>)
 80063ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80063f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3750      	adds	r7, #80	; 0x50
 80063f8:	46bd      	mov	sp, r7
 80063fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063fe:	bf00      	nop
 8006400:	40023800 	.word	0x40023800
 8006404:	00f42400 	.word	0x00f42400
 8006408:	007a1200 	.word	0x007a1200

0800640c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800640c:	b480      	push	{r7}
 800640e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006410:	4b03      	ldr	r3, [pc, #12]	; (8006420 <HAL_RCC_GetHCLKFreq+0x14>)
 8006412:	681b      	ldr	r3, [r3, #0]
}
 8006414:	4618      	mov	r0, r3
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	200000c0 	.word	0x200000c0

08006424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006428:	f7ff fff0 	bl	800640c <HAL_RCC_GetHCLKFreq>
 800642c:	4602      	mov	r2, r0
 800642e:	4b05      	ldr	r3, [pc, #20]	; (8006444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	0a9b      	lsrs	r3, r3, #10
 8006434:	f003 0307 	and.w	r3, r3, #7
 8006438:	4903      	ldr	r1, [pc, #12]	; (8006448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800643a:	5ccb      	ldrb	r3, [r1, r3]
 800643c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006440:	4618      	mov	r0, r3
 8006442:	bd80      	pop	{r7, pc}
 8006444:	40023800 	.word	0x40023800
 8006448:	0800ae64 	.word	0x0800ae64

0800644c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006450:	f7ff ffdc 	bl	800640c <HAL_RCC_GetHCLKFreq>
 8006454:	4602      	mov	r2, r0
 8006456:	4b05      	ldr	r3, [pc, #20]	; (800646c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	0b5b      	lsrs	r3, r3, #13
 800645c:	f003 0307 	and.w	r3, r3, #7
 8006460:	4903      	ldr	r1, [pc, #12]	; (8006470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006462:	5ccb      	ldrb	r3, [r1, r3]
 8006464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006468:	4618      	mov	r0, r3
 800646a:	bd80      	pop	{r7, pc}
 800646c:	40023800 	.word	0x40023800
 8006470:	0800ae64 	.word	0x0800ae64

08006474 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b088      	sub	sp, #32
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800647c:	2300      	movs	r3, #0
 800647e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006480:	2300      	movs	r3, #0
 8006482:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006484:	2300      	movs	r3, #0
 8006486:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006488:	2300      	movs	r3, #0
 800648a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800648c:	2300      	movs	r3, #0
 800648e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0301 	and.w	r3, r3, #1
 8006498:	2b00      	cmp	r3, #0
 800649a:	d012      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800649c:	4b69      	ldr	r3, [pc, #420]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	4a68      	ldr	r2, [pc, #416]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80064a6:	6093      	str	r3, [r2, #8]
 80064a8:	4b66      	ldr	r3, [pc, #408]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064aa:	689a      	ldr	r2, [r3, #8]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b0:	4964      	ldr	r1, [pc, #400]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80064be:	2301      	movs	r3, #1
 80064c0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d017      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064ce:	4b5d      	ldr	r3, [pc, #372]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064dc:	4959      	ldr	r1, [pc, #356]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064ec:	d101      	bne.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80064ee:	2301      	movs	r3, #1
 80064f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80064fa:	2301      	movs	r3, #1
 80064fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d017      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800650a:	4b4e      	ldr	r3, [pc, #312]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800650c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006510:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006518:	494a      	ldr	r1, [pc, #296]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800651a:	4313      	orrs	r3, r2
 800651c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006524:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006528:	d101      	bne.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800652a:	2301      	movs	r3, #1
 800652c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006536:	2301      	movs	r3, #1
 8006538:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d001      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006546:	2301      	movs	r3, #1
 8006548:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0320 	and.w	r3, r3, #32
 8006552:	2b00      	cmp	r3, #0
 8006554:	f000 808b 	beq.w	800666e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006558:	4b3a      	ldr	r3, [pc, #232]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800655a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655c:	4a39      	ldr	r2, [pc, #228]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800655e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006562:	6413      	str	r3, [r2, #64]	; 0x40
 8006564:	4b37      	ldr	r3, [pc, #220]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800656c:	60bb      	str	r3, [r7, #8]
 800656e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006570:	4b35      	ldr	r3, [pc, #212]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a34      	ldr	r2, [pc, #208]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800657a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800657c:	f7fd fa8c 	bl	8003a98 <HAL_GetTick>
 8006580:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006582:	e008      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006584:	f7fd fa88 	bl	8003a98 <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	2b64      	cmp	r3, #100	; 0x64
 8006590:	d901      	bls.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e357      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006596:	4b2c      	ldr	r3, [pc, #176]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d0f0      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80065a2:	4b28      	ldr	r3, [pc, #160]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065aa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d035      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d02e      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80065c0:	4b20      	ldr	r3, [pc, #128]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065c8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80065ca:	4b1e      	ldr	r3, [pc, #120]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ce:	4a1d      	ldr	r2, [pc, #116]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065d4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80065d6:	4b1b      	ldr	r3, [pc, #108]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065da:	4a1a      	ldr	r2, [pc, #104]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80065e2:	4a18      	ldr	r2, [pc, #96]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80065e8:	4b16      	ldr	r3, [pc, #88]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d114      	bne.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f4:	f7fd fa50 	bl	8003a98 <HAL_GetTick>
 80065f8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065fa:	e00a      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065fc:	f7fd fa4c 	bl	8003a98 <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	f241 3288 	movw	r2, #5000	; 0x1388
 800660a:	4293      	cmp	r3, r2
 800660c:	d901      	bls.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e319      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006612:	4b0c      	ldr	r3, [pc, #48]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006616:	f003 0302 	and.w	r3, r3, #2
 800661a:	2b00      	cmp	r3, #0
 800661c:	d0ee      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006626:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800662a:	d111      	bne.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800662c:	4b05      	ldr	r3, [pc, #20]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006638:	4b04      	ldr	r3, [pc, #16]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800663a:	400b      	ands	r3, r1
 800663c:	4901      	ldr	r1, [pc, #4]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800663e:	4313      	orrs	r3, r2
 8006640:	608b      	str	r3, [r1, #8]
 8006642:	e00b      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006644:	40023800 	.word	0x40023800
 8006648:	40007000 	.word	0x40007000
 800664c:	0ffffcff 	.word	0x0ffffcff
 8006650:	4baa      	ldr	r3, [pc, #680]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	4aa9      	ldr	r2, [pc, #676]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006656:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800665a:	6093      	str	r3, [r2, #8]
 800665c:	4ba7      	ldr	r3, [pc, #668]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800665e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006668:	49a4      	ldr	r1, [pc, #656]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800666a:	4313      	orrs	r3, r2
 800666c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0310 	and.w	r3, r3, #16
 8006676:	2b00      	cmp	r3, #0
 8006678:	d010      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800667a:	4ba0      	ldr	r3, [pc, #640]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800667c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006680:	4a9e      	ldr	r2, [pc, #632]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006682:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006686:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800668a:	4b9c      	ldr	r3, [pc, #624]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800668c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006694:	4999      	ldr	r1, [pc, #612]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006696:	4313      	orrs	r3, r2
 8006698:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00a      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80066a8:	4b94      	ldr	r3, [pc, #592]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066b6:	4991      	ldr	r1, [pc, #580]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066b8:	4313      	orrs	r3, r2
 80066ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00a      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80066ca:	4b8c      	ldr	r3, [pc, #560]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066d8:	4988      	ldr	r1, [pc, #544]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066da:	4313      	orrs	r3, r2
 80066dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00a      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80066ec:	4b83      	ldr	r3, [pc, #524]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066fa:	4980      	ldr	r1, [pc, #512]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80066fc:	4313      	orrs	r3, r2
 80066fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00a      	beq.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800670e:	4b7b      	ldr	r3, [pc, #492]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006714:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800671c:	4977      	ldr	r1, [pc, #476]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800671e:	4313      	orrs	r3, r2
 8006720:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00a      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006730:	4b72      	ldr	r3, [pc, #456]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006736:	f023 0203 	bic.w	r2, r3, #3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800673e:	496f      	ldr	r1, [pc, #444]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006740:	4313      	orrs	r3, r2
 8006742:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00a      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006752:	4b6a      	ldr	r3, [pc, #424]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006758:	f023 020c 	bic.w	r2, r3, #12
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006760:	4966      	ldr	r1, [pc, #408]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006762:	4313      	orrs	r3, r2
 8006764:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00a      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006774:	4b61      	ldr	r3, [pc, #388]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800677a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006782:	495e      	ldr	r1, [pc, #376]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006784:	4313      	orrs	r3, r2
 8006786:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00a      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006796:	4b59      	ldr	r3, [pc, #356]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800679c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067a4:	4955      	ldr	r1, [pc, #340]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00a      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80067b8:	4b50      	ldr	r3, [pc, #320]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067c6:	494d      	ldr	r1, [pc, #308]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067c8:	4313      	orrs	r3, r2
 80067ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00a      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80067da:	4b48      	ldr	r3, [pc, #288]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067e0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e8:	4944      	ldr	r1, [pc, #272]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067ea:	4313      	orrs	r3, r2
 80067ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00a      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80067fc:	4b3f      	ldr	r3, [pc, #252]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006802:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800680a:	493c      	ldr	r1, [pc, #240]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800680c:	4313      	orrs	r3, r2
 800680e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00a      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800681e:	4b37      	ldr	r3, [pc, #220]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006824:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800682c:	4933      	ldr	r1, [pc, #204]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800682e:	4313      	orrs	r3, r2
 8006830:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00a      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006840:	4b2e      	ldr	r3, [pc, #184]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006846:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800684e:	492b      	ldr	r1, [pc, #172]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006850:	4313      	orrs	r3, r2
 8006852:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d011      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006862:	4b26      	ldr	r3, [pc, #152]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006868:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006870:	4922      	ldr	r1, [pc, #136]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006872:	4313      	orrs	r3, r2
 8006874:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800687c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006880:	d101      	bne.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006882:	2301      	movs	r3, #1
 8006884:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 0308 	and.w	r3, r3, #8
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006892:	2301      	movs	r3, #1
 8006894:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00a      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80068a2:	4b16      	ldr	r3, [pc, #88]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068b0:	4912      	ldr	r1, [pc, #72]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068b2:	4313      	orrs	r3, r2
 80068b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00b      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80068c4:	4b0d      	ldr	r3, [pc, #52]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068d4:	4909      	ldr	r1, [pc, #36]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d006      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f000 80d9 	beq.w	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80068f0:	4b02      	ldr	r3, [pc, #8]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a01      	ldr	r2, [pc, #4]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80068fa:	e001      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80068fc:	40023800 	.word	0x40023800
 8006900:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006902:	f7fd f8c9 	bl	8003a98 <HAL_GetTick>
 8006906:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006908:	e008      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800690a:	f7fd f8c5 	bl	8003a98 <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	2b64      	cmp	r3, #100	; 0x64
 8006916:	d901      	bls.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e194      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800691c:	4b6c      	ldr	r3, [pc, #432]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1f0      	bne.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0301 	and.w	r3, r3, #1
 8006930:	2b00      	cmp	r3, #0
 8006932:	d021      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006938:	2b00      	cmp	r3, #0
 800693a:	d11d      	bne.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800693c:	4b64      	ldr	r3, [pc, #400]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800693e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006942:	0c1b      	lsrs	r3, r3, #16
 8006944:	f003 0303 	and.w	r3, r3, #3
 8006948:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800694a:	4b61      	ldr	r3, [pc, #388]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800694c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006950:	0e1b      	lsrs	r3, r3, #24
 8006952:	f003 030f 	and.w	r3, r3, #15
 8006956:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	019a      	lsls	r2, r3, #6
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	041b      	lsls	r3, r3, #16
 8006962:	431a      	orrs	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	061b      	lsls	r3, r3, #24
 8006968:	431a      	orrs	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	071b      	lsls	r3, r3, #28
 8006970:	4957      	ldr	r1, [pc, #348]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006972:	4313      	orrs	r3, r2
 8006974:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d004      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006988:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800698c:	d00a      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006996:	2b00      	cmp	r3, #0
 8006998:	d02e      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069a2:	d129      	bne.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80069a4:	4b4a      	ldr	r3, [pc, #296]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069aa:	0c1b      	lsrs	r3, r3, #16
 80069ac:	f003 0303 	and.w	r3, r3, #3
 80069b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80069b2:	4b47      	ldr	r3, [pc, #284]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069b8:	0f1b      	lsrs	r3, r3, #28
 80069ba:	f003 0307 	and.w	r3, r3, #7
 80069be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	019a      	lsls	r2, r3, #6
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	041b      	lsls	r3, r3, #16
 80069ca:	431a      	orrs	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	061b      	lsls	r3, r3, #24
 80069d2:	431a      	orrs	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	071b      	lsls	r3, r3, #28
 80069d8:	493d      	ldr	r1, [pc, #244]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80069e0:	4b3b      	ldr	r3, [pc, #236]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069e6:	f023 021f 	bic.w	r2, r3, #31
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ee:	3b01      	subs	r3, #1
 80069f0:	4937      	ldr	r1, [pc, #220]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d01d      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006a04:	4b32      	ldr	r3, [pc, #200]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a0a:	0e1b      	lsrs	r3, r3, #24
 8006a0c:	f003 030f 	and.w	r3, r3, #15
 8006a10:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a12:	4b2f      	ldr	r3, [pc, #188]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a18:	0f1b      	lsrs	r3, r3, #28
 8006a1a:	f003 0307 	and.w	r3, r3, #7
 8006a1e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	019a      	lsls	r2, r3, #6
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	041b      	lsls	r3, r3, #16
 8006a2c:	431a      	orrs	r2, r3
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	061b      	lsls	r3, r3, #24
 8006a32:	431a      	orrs	r2, r3
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	071b      	lsls	r3, r3, #28
 8006a38:	4925      	ldr	r1, [pc, #148]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d011      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	019a      	lsls	r2, r3, #6
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	041b      	lsls	r3, r3, #16
 8006a58:	431a      	orrs	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	061b      	lsls	r3, r3, #24
 8006a60:	431a      	orrs	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	071b      	lsls	r3, r3, #28
 8006a68:	4919      	ldr	r1, [pc, #100]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006a70:	4b17      	ldr	r3, [pc, #92]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a16      	ldr	r2, [pc, #88]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a7c:	f7fd f80c 	bl	8003a98 <HAL_GetTick>
 8006a80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a82:	e008      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a84:	f7fd f808 	bl	8003a98 <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	2b64      	cmp	r3, #100	; 0x64
 8006a90:	d901      	bls.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e0d7      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a96:	4b0e      	ldr	r3, [pc, #56]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d0f0      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	f040 80cd 	bne.w	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006aaa:	4b09      	ldr	r3, [pc, #36]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a08      	ldr	r2, [pc, #32]	; (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ab4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ab6:	f7fc ffef 	bl	8003a98 <HAL_GetTick>
 8006aba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006abc:	e00a      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006abe:	f7fc ffeb 	bl	8003a98 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	2b64      	cmp	r3, #100	; 0x64
 8006aca:	d903      	bls.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e0ba      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006ad0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ad4:	4b5e      	ldr	r3, [pc, #376]	; (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006adc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ae0:	d0ed      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d003      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d009      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d02e      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d12a      	bne.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006b0a:	4b51      	ldr	r3, [pc, #324]	; (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b10:	0c1b      	lsrs	r3, r3, #16
 8006b12:	f003 0303 	and.w	r3, r3, #3
 8006b16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006b18:	4b4d      	ldr	r3, [pc, #308]	; (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b1e:	0f1b      	lsrs	r3, r3, #28
 8006b20:	f003 0307 	and.w	r3, r3, #7
 8006b24:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	019a      	lsls	r2, r3, #6
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	041b      	lsls	r3, r3, #16
 8006b30:	431a      	orrs	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	061b      	lsls	r3, r3, #24
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	071b      	lsls	r3, r3, #28
 8006b3e:	4944      	ldr	r1, [pc, #272]	; (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006b46:	4b42      	ldr	r3, [pc, #264]	; (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b4c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b54:	3b01      	subs	r3, #1
 8006b56:	021b      	lsls	r3, r3, #8
 8006b58:	493d      	ldr	r1, [pc, #244]	; (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d022      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b74:	d11d      	bne.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b76:	4b36      	ldr	r3, [pc, #216]	; (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b7c:	0e1b      	lsrs	r3, r3, #24
 8006b7e:	f003 030f 	and.w	r3, r3, #15
 8006b82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006b84:	4b32      	ldr	r3, [pc, #200]	; (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b8a:	0f1b      	lsrs	r3, r3, #28
 8006b8c:	f003 0307 	and.w	r3, r3, #7
 8006b90:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	695b      	ldr	r3, [r3, #20]
 8006b96:	019a      	lsls	r2, r3, #6
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a1b      	ldr	r3, [r3, #32]
 8006b9c:	041b      	lsls	r3, r3, #16
 8006b9e:	431a      	orrs	r2, r3
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	061b      	lsls	r3, r3, #24
 8006ba4:	431a      	orrs	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	071b      	lsls	r3, r3, #28
 8006baa:	4929      	ldr	r1, [pc, #164]	; (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006bac:	4313      	orrs	r3, r2
 8006bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 0308 	and.w	r3, r3, #8
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d028      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006bbe:	4b24      	ldr	r3, [pc, #144]	; (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bc4:	0e1b      	lsrs	r3, r3, #24
 8006bc6:	f003 030f 	and.w	r3, r3, #15
 8006bca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006bcc:	4b20      	ldr	r3, [pc, #128]	; (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bd2:	0c1b      	lsrs	r3, r3, #16
 8006bd4:	f003 0303 	and.w	r3, r3, #3
 8006bd8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	019a      	lsls	r2, r3, #6
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	041b      	lsls	r3, r3, #16
 8006be4:	431a      	orrs	r2, r3
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	061b      	lsls	r3, r3, #24
 8006bea:	431a      	orrs	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	69db      	ldr	r3, [r3, #28]
 8006bf0:	071b      	lsls	r3, r3, #28
 8006bf2:	4917      	ldr	r1, [pc, #92]	; (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006bfa:	4b15      	ldr	r3, [pc, #84]	; (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c08:	4911      	ldr	r1, [pc, #68]	; (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006c10:	4b0f      	ldr	r3, [pc, #60]	; (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a0e      	ldr	r2, [pc, #56]	; (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c1c:	f7fc ff3c 	bl	8003a98 <HAL_GetTick>
 8006c20:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c22:	e008      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006c24:	f7fc ff38 	bl	8003a98 <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	2b64      	cmp	r3, #100	; 0x64
 8006c30:	d901      	bls.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e007      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c36:	4b06      	ldr	r3, [pc, #24]	; (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c42:	d1ef      	bne.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3720      	adds	r7, #32
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	40023800 	.word	0x40023800

08006c54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d101      	bne.n	8006c66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e09d      	b.n	8006da2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d108      	bne.n	8006c80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c76:	d009      	beq.n	8006c8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	61da      	str	r2, [r3, #28]
 8006c7e:	e005      	b.n	8006c8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d106      	bne.n	8006cac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f7fc fa68 	bl	800317c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2202      	movs	r2, #2
 8006cb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cc2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ccc:	d902      	bls.n	8006cd4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	60fb      	str	r3, [r7, #12]
 8006cd2:	e002      	b.n	8006cda <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006cd8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006ce2:	d007      	beq.n	8006cf4 <HAL_SPI_Init+0xa0>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006cec:	d002      	beq.n	8006cf4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006d04:	431a      	orrs	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	f003 0302 	and.w	r3, r3, #2
 8006d0e:	431a      	orrs	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	f003 0301 	and.w	r3, r3, #1
 8006d18:	431a      	orrs	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d22:	431a      	orrs	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	69db      	ldr	r3, [r3, #28]
 8006d28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d2c:	431a      	orrs	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d36:	ea42 0103 	orr.w	r1, r2, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d3e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	430a      	orrs	r2, r1
 8006d48:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	0c1b      	lsrs	r3, r3, #16
 8006d50:	f003 0204 	and.w	r2, r3, #4
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d58:	f003 0310 	and.w	r3, r3, #16
 8006d5c:	431a      	orrs	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d62:	f003 0308 	and.w	r3, r3, #8
 8006d66:	431a      	orrs	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006d70:	ea42 0103 	orr.w	r1, r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	69da      	ldr	r2, [r3, #28]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b088      	sub	sp, #32
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	60f8      	str	r0, [r7, #12]
 8006db2:	60b9      	str	r1, [r7, #8]
 8006db4:	603b      	str	r3, [r7, #0]
 8006db6:	4613      	mov	r3, r2
 8006db8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d101      	bne.n	8006dcc <HAL_SPI_Transmit+0x22>
 8006dc8:	2302      	movs	r3, #2
 8006dca:	e158      	b.n	800707e <HAL_SPI_Transmit+0x2d4>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006dd4:	f7fc fe60 	bl	8003a98 <HAL_GetTick>
 8006dd8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006dda:	88fb      	ldrh	r3, [r7, #6]
 8006ddc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d002      	beq.n	8006df0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006dea:	2302      	movs	r3, #2
 8006dec:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006dee:	e13d      	b.n	800706c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d002      	beq.n	8006dfc <HAL_SPI_Transmit+0x52>
 8006df6:	88fb      	ldrh	r3, [r7, #6]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d102      	bne.n	8006e02 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e00:	e134      	b.n	800706c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2203      	movs	r2, #3
 8006e06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	88fa      	ldrh	r2, [r7, #6]
 8006e1a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	88fa      	ldrh	r2, [r7, #6]
 8006e20:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e4c:	d10f      	bne.n	8006e6e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e78:	2b40      	cmp	r3, #64	; 0x40
 8006e7a:	d007      	beq.n	8006e8c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e94:	d94b      	bls.n	8006f2e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d002      	beq.n	8006ea4 <HAL_SPI_Transmit+0xfa>
 8006e9e:	8afb      	ldrh	r3, [r7, #22]
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d13e      	bne.n	8006f22 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea8:	881a      	ldrh	r2, [r3, #0]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb4:	1c9a      	adds	r2, r3, #2
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	b29a      	uxth	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006ec8:	e02b      	b.n	8006f22 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f003 0302 	and.w	r3, r3, #2
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d112      	bne.n	8006efe <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006edc:	881a      	ldrh	r2, [r3, #0]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee8:	1c9a      	adds	r2, r3, #2
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006efc:	e011      	b.n	8006f22 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006efe:	f7fc fdcb 	bl	8003a98 <HAL_GetTick>
 8006f02:	4602      	mov	r2, r0
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	1ad3      	subs	r3, r2, r3
 8006f08:	683a      	ldr	r2, [r7, #0]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d803      	bhi.n	8006f16 <HAL_SPI_Transmit+0x16c>
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f14:	d102      	bne.n	8006f1c <HAL_SPI_Transmit+0x172>
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d102      	bne.n	8006f22 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006f20:	e0a4      	b.n	800706c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1ce      	bne.n	8006eca <HAL_SPI_Transmit+0x120>
 8006f2c:	e07c      	b.n	8007028 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d002      	beq.n	8006f3c <HAL_SPI_Transmit+0x192>
 8006f36:	8afb      	ldrh	r3, [r7, #22]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d170      	bne.n	800701e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d912      	bls.n	8006f6c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4a:	881a      	ldrh	r2, [r3, #0]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f56:	1c9a      	adds	r2, r3, #2
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	3b02      	subs	r3, #2
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f6a:	e058      	b.n	800701e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	330c      	adds	r3, #12
 8006f76:	7812      	ldrb	r2, [r2, #0]
 8006f78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7e:	1c5a      	adds	r2, r3, #1
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006f92:	e044      	b.n	800701e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f003 0302 	and.w	r3, r3, #2
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d12b      	bne.n	8006ffa <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d912      	bls.n	8006fd2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb0:	881a      	ldrh	r2, [r3, #0]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbc:	1c9a      	adds	r2, r3, #2
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	3b02      	subs	r3, #2
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006fd0:	e025      	b.n	800701e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	330c      	adds	r3, #12
 8006fdc:	7812      	ldrb	r2, [r2, #0]
 8006fde:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe4:	1c5a      	adds	r2, r3, #1
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ff8:	e011      	b.n	800701e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ffa:	f7fc fd4d 	bl	8003a98 <HAL_GetTick>
 8006ffe:	4602      	mov	r2, r0
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	683a      	ldr	r2, [r7, #0]
 8007006:	429a      	cmp	r2, r3
 8007008:	d803      	bhi.n	8007012 <HAL_SPI_Transmit+0x268>
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007010:	d102      	bne.n	8007018 <HAL_SPI_Transmit+0x26e>
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d102      	bne.n	800701e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007018:	2303      	movs	r3, #3
 800701a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800701c:	e026      	b.n	800706c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007022:	b29b      	uxth	r3, r3
 8007024:	2b00      	cmp	r3, #0
 8007026:	d1b5      	bne.n	8006f94 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007028:	69ba      	ldr	r2, [r7, #24]
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f000 fd07 	bl	8007a40 <SPI_EndRxTxTransaction>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d002      	beq.n	800703e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2220      	movs	r2, #32
 800703c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d10a      	bne.n	800705c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007046:	2300      	movs	r3, #0
 8007048:	613b      	str	r3, [r7, #16]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	613b      	str	r3, [r7, #16]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	613b      	str	r3, [r7, #16]
 800705a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007060:	2b00      	cmp	r3, #0
 8007062:	d002      	beq.n	800706a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	77fb      	strb	r3, [r7, #31]
 8007068:	e000      	b.n	800706c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800706a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800707c:	7ffb      	ldrb	r3, [r7, #31]
}
 800707e:	4618      	mov	r0, r3
 8007080:	3720      	adds	r7, #32
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b088      	sub	sp, #32
 800708a:	af02      	add	r7, sp, #8
 800708c:	60f8      	str	r0, [r7, #12]
 800708e:	60b9      	str	r1, [r7, #8]
 8007090:	603b      	str	r3, [r7, #0]
 8007092:	4613      	mov	r3, r2
 8007094:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007096:	2300      	movs	r3, #0
 8007098:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070a2:	d112      	bne.n	80070ca <HAL_SPI_Receive+0x44>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10e      	bne.n	80070ca <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2204      	movs	r2, #4
 80070b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80070b4:	88fa      	ldrh	r2, [r7, #6]
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	9300      	str	r3, [sp, #0]
 80070ba:	4613      	mov	r3, r2
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	68b9      	ldr	r1, [r7, #8]
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f000 f910 	bl	80072e6 <HAL_SPI_TransmitReceive>
 80070c6:	4603      	mov	r3, r0
 80070c8:	e109      	b.n	80072de <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d101      	bne.n	80070d8 <HAL_SPI_Receive+0x52>
 80070d4:	2302      	movs	r3, #2
 80070d6:	e102      	b.n	80072de <HAL_SPI_Receive+0x258>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070e0:	f7fc fcda 	bl	8003a98 <HAL_GetTick>
 80070e4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d002      	beq.n	80070f8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80070f2:	2302      	movs	r3, #2
 80070f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80070f6:	e0e9      	b.n	80072cc <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d002      	beq.n	8007104 <HAL_SPI_Receive+0x7e>
 80070fe:	88fb      	ldrh	r3, [r7, #6]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d102      	bne.n	800710a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007108:	e0e0      	b.n	80072cc <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2204      	movs	r2, #4
 800710e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	88fa      	ldrh	r2, [r7, #6]
 8007122:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	88fa      	ldrh	r2, [r7, #6]
 800712a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007154:	d908      	bls.n	8007168 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	685a      	ldr	r2, [r3, #4]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007164:	605a      	str	r2, [r3, #4]
 8007166:	e007      	b.n	8007178 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	685a      	ldr	r2, [r3, #4]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007176:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007180:	d10f      	bne.n	80071a2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007190:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80071a0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ac:	2b40      	cmp	r3, #64	; 0x40
 80071ae:	d007      	beq.n	80071c0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071be:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80071c8:	d867      	bhi.n	800729a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80071ca:	e030      	b.n	800722e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d117      	bne.n	800720a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f103 020c 	add.w	r2, r3, #12
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e6:	7812      	ldrb	r2, [r2, #0]
 80071e8:	b2d2      	uxtb	r2, r2
 80071ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f0:	1c5a      	adds	r2, r3, #1
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	3b01      	subs	r3, #1
 8007200:	b29a      	uxth	r2, r3
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007208:	e011      	b.n	800722e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800720a:	f7fc fc45 	bl	8003a98 <HAL_GetTick>
 800720e:	4602      	mov	r2, r0
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	1ad3      	subs	r3, r2, r3
 8007214:	683a      	ldr	r2, [r7, #0]
 8007216:	429a      	cmp	r2, r3
 8007218:	d803      	bhi.n	8007222 <HAL_SPI_Receive+0x19c>
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007220:	d102      	bne.n	8007228 <HAL_SPI_Receive+0x1a2>
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d102      	bne.n	800722e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800722c:	e04e      	b.n	80072cc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007234:	b29b      	uxth	r3, r3
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1c8      	bne.n	80071cc <HAL_SPI_Receive+0x146>
 800723a:	e034      	b.n	80072a6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	2b01      	cmp	r3, #1
 8007248:	d115      	bne.n	8007276 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68da      	ldr	r2, [r3, #12]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007254:	b292      	uxth	r2, r2
 8007256:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725c:	1c9a      	adds	r2, r3, #2
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007268:	b29b      	uxth	r3, r3
 800726a:	3b01      	subs	r3, #1
 800726c:	b29a      	uxth	r2, r3
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007274:	e011      	b.n	800729a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007276:	f7fc fc0f 	bl	8003a98 <HAL_GetTick>
 800727a:	4602      	mov	r2, r0
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	1ad3      	subs	r3, r2, r3
 8007280:	683a      	ldr	r2, [r7, #0]
 8007282:	429a      	cmp	r2, r3
 8007284:	d803      	bhi.n	800728e <HAL_SPI_Receive+0x208>
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800728c:	d102      	bne.n	8007294 <HAL_SPI_Receive+0x20e>
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d102      	bne.n	800729a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8007294:	2303      	movs	r3, #3
 8007296:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007298:	e018      	b.n	80072cc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1ca      	bne.n	800723c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072a6:	693a      	ldr	r2, [r7, #16]
 80072a8:	6839      	ldr	r1, [r7, #0]
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f000 fb4c 	bl	8007948 <SPI_EndRxTransaction>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d002      	beq.n	80072bc <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2220      	movs	r2, #32
 80072ba:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d002      	beq.n	80072ca <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	75fb      	strb	r3, [r7, #23]
 80072c8:	e000      	b.n	80072cc <HAL_SPI_Receive+0x246>
  }

error :
 80072ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80072dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3718      	adds	r7, #24
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b08a      	sub	sp, #40	; 0x28
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	60f8      	str	r0, [r7, #12]
 80072ee:	60b9      	str	r1, [r7, #8]
 80072f0:	607a      	str	r2, [r7, #4]
 80072f2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80072f4:	2301      	movs	r3, #1
 80072f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80072f8:	2300      	movs	r3, #0
 80072fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007304:	2b01      	cmp	r3, #1
 8007306:	d101      	bne.n	800730c <HAL_SPI_TransmitReceive+0x26>
 8007308:	2302      	movs	r3, #2
 800730a:	e1fb      	b.n	8007704 <HAL_SPI_TransmitReceive+0x41e>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007314:	f7fc fbc0 	bl	8003a98 <HAL_GetTick>
 8007318:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007320:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007328:	887b      	ldrh	r3, [r7, #2]
 800732a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800732c:	887b      	ldrh	r3, [r7, #2]
 800732e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007330:	7efb      	ldrb	r3, [r7, #27]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d00e      	beq.n	8007354 <HAL_SPI_TransmitReceive+0x6e>
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800733c:	d106      	bne.n	800734c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d102      	bne.n	800734c <HAL_SPI_TransmitReceive+0x66>
 8007346:	7efb      	ldrb	r3, [r7, #27]
 8007348:	2b04      	cmp	r3, #4
 800734a:	d003      	beq.n	8007354 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800734c:	2302      	movs	r3, #2
 800734e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007352:	e1cd      	b.n	80076f0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d005      	beq.n	8007366 <HAL_SPI_TransmitReceive+0x80>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d002      	beq.n	8007366 <HAL_SPI_TransmitReceive+0x80>
 8007360:	887b      	ldrh	r3, [r7, #2]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d103      	bne.n	800736e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800736c:	e1c0      	b.n	80076f0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b04      	cmp	r3, #4
 8007378:	d003      	beq.n	8007382 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2205      	movs	r2, #5
 800737e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	887a      	ldrh	r2, [r7, #2]
 8007392:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	887a      	ldrh	r2, [r7, #2]
 800739a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	887a      	ldrh	r2, [r7, #2]
 80073a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	887a      	ldrh	r2, [r7, #2]
 80073ae:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2200      	movs	r2, #0
 80073b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80073c4:	d802      	bhi.n	80073cc <HAL_SPI_TransmitReceive+0xe6>
 80073c6:	8a3b      	ldrh	r3, [r7, #16]
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d908      	bls.n	80073de <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	685a      	ldr	r2, [r3, #4]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80073da:	605a      	str	r2, [r3, #4]
 80073dc:	e007      	b.n	80073ee <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	685a      	ldr	r2, [r3, #4]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80073ec:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f8:	2b40      	cmp	r3, #64	; 0x40
 80073fa:	d007      	beq.n	800740c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800740a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007414:	d97c      	bls.n	8007510 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d002      	beq.n	8007424 <HAL_SPI_TransmitReceive+0x13e>
 800741e:	8a7b      	ldrh	r3, [r7, #18]
 8007420:	2b01      	cmp	r3, #1
 8007422:	d169      	bne.n	80074f8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007428:	881a      	ldrh	r2, [r3, #0]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007434:	1c9a      	adds	r2, r3, #2
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800743e:	b29b      	uxth	r3, r3
 8007440:	3b01      	subs	r3, #1
 8007442:	b29a      	uxth	r2, r3
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007448:	e056      	b.n	80074f8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f003 0302 	and.w	r3, r3, #2
 8007454:	2b02      	cmp	r3, #2
 8007456:	d11b      	bne.n	8007490 <HAL_SPI_TransmitReceive+0x1aa>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800745c:	b29b      	uxth	r3, r3
 800745e:	2b00      	cmp	r3, #0
 8007460:	d016      	beq.n	8007490 <HAL_SPI_TransmitReceive+0x1aa>
 8007462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007464:	2b01      	cmp	r3, #1
 8007466:	d113      	bne.n	8007490 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746c:	881a      	ldrh	r2, [r3, #0]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007478:	1c9a      	adds	r2, r3, #2
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007482:	b29b      	uxth	r3, r3
 8007484:	3b01      	subs	r3, #1
 8007486:	b29a      	uxth	r2, r3
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800748c:	2300      	movs	r3, #0
 800748e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f003 0301 	and.w	r3, r3, #1
 800749a:	2b01      	cmp	r3, #1
 800749c:	d11c      	bne.n	80074d8 <HAL_SPI_TransmitReceive+0x1f2>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d016      	beq.n	80074d8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68da      	ldr	r2, [r3, #12]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b4:	b292      	uxth	r2, r2
 80074b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074bc:	1c9a      	adds	r2, r3, #2
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	3b01      	subs	r3, #1
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80074d4:	2301      	movs	r3, #1
 80074d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80074d8:	f7fc fade 	bl	8003a98 <HAL_GetTick>
 80074dc:	4602      	mov	r2, r0
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d807      	bhi.n	80074f8 <HAL_SPI_TransmitReceive+0x212>
 80074e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ee:	d003      	beq.n	80074f8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80074f0:	2303      	movs	r3, #3
 80074f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80074f6:	e0fb      	b.n	80076f0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1a3      	bne.n	800744a <HAL_SPI_TransmitReceive+0x164>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007508:	b29b      	uxth	r3, r3
 800750a:	2b00      	cmp	r3, #0
 800750c:	d19d      	bne.n	800744a <HAL_SPI_TransmitReceive+0x164>
 800750e:	e0df      	b.n	80076d0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d003      	beq.n	8007520 <HAL_SPI_TransmitReceive+0x23a>
 8007518:	8a7b      	ldrh	r3, [r7, #18]
 800751a:	2b01      	cmp	r3, #1
 800751c:	f040 80cb 	bne.w	80076b6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007524:	b29b      	uxth	r3, r3
 8007526:	2b01      	cmp	r3, #1
 8007528:	d912      	bls.n	8007550 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752e:	881a      	ldrh	r2, [r3, #0]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753a:	1c9a      	adds	r2, r3, #2
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007544:	b29b      	uxth	r3, r3
 8007546:	3b02      	subs	r3, #2
 8007548:	b29a      	uxth	r2, r3
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800754e:	e0b2      	b.n	80076b6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	330c      	adds	r3, #12
 800755a:	7812      	ldrb	r2, [r2, #0]
 800755c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800756c:	b29b      	uxth	r3, r3
 800756e:	3b01      	subs	r3, #1
 8007570:	b29a      	uxth	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007576:	e09e      	b.n	80076b6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	f003 0302 	and.w	r3, r3, #2
 8007582:	2b02      	cmp	r3, #2
 8007584:	d134      	bne.n	80075f0 <HAL_SPI_TransmitReceive+0x30a>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800758a:	b29b      	uxth	r3, r3
 800758c:	2b00      	cmp	r3, #0
 800758e:	d02f      	beq.n	80075f0 <HAL_SPI_TransmitReceive+0x30a>
 8007590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007592:	2b01      	cmp	r3, #1
 8007594:	d12c      	bne.n	80075f0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800759a:	b29b      	uxth	r3, r3
 800759c:	2b01      	cmp	r3, #1
 800759e:	d912      	bls.n	80075c6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a4:	881a      	ldrh	r2, [r3, #0]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b0:	1c9a      	adds	r2, r3, #2
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	3b02      	subs	r3, #2
 80075be:	b29a      	uxth	r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80075c4:	e012      	b.n	80075ec <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	330c      	adds	r3, #12
 80075d0:	7812      	ldrb	r2, [r2, #0]
 80075d2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d8:	1c5a      	adds	r2, r3, #1
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	3b01      	subs	r3, #1
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075ec:	2300      	movs	r3, #0
 80075ee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f003 0301 	and.w	r3, r3, #1
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d148      	bne.n	8007690 <HAL_SPI_TransmitReceive+0x3aa>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007604:	b29b      	uxth	r3, r3
 8007606:	2b00      	cmp	r3, #0
 8007608:	d042      	beq.n	8007690 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007610:	b29b      	uxth	r3, r3
 8007612:	2b01      	cmp	r3, #1
 8007614:	d923      	bls.n	800765e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68da      	ldr	r2, [r3, #12]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007620:	b292      	uxth	r2, r2
 8007622:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007628:	1c9a      	adds	r2, r3, #2
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007634:	b29b      	uxth	r3, r3
 8007636:	3b02      	subs	r3, #2
 8007638:	b29a      	uxth	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007646:	b29b      	uxth	r3, r3
 8007648:	2b01      	cmp	r3, #1
 800764a:	d81f      	bhi.n	800768c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	685a      	ldr	r2, [r3, #4]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800765a:	605a      	str	r2, [r3, #4]
 800765c:	e016      	b.n	800768c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f103 020c 	add.w	r2, r3, #12
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766a:	7812      	ldrb	r2, [r2, #0]
 800766c:	b2d2      	uxtb	r2, r2
 800766e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007674:	1c5a      	adds	r2, r3, #1
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007680:	b29b      	uxth	r3, r3
 8007682:	3b01      	subs	r3, #1
 8007684:	b29a      	uxth	r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800768c:	2301      	movs	r3, #1
 800768e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007690:	f7fc fa02 	bl	8003a98 <HAL_GetTick>
 8007694:	4602      	mov	r2, r0
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800769c:	429a      	cmp	r2, r3
 800769e:	d803      	bhi.n	80076a8 <HAL_SPI_TransmitReceive+0x3c2>
 80076a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a6:	d102      	bne.n	80076ae <HAL_SPI_TransmitReceive+0x3c8>
 80076a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d103      	bne.n	80076b6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80076b4:	e01c      	b.n	80076f0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f47f af5b 	bne.w	8007578 <HAL_SPI_TransmitReceive+0x292>
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f47f af54 	bne.w	8007578 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076d0:	69fa      	ldr	r2, [r7, #28]
 80076d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f000 f9b3 	bl	8007a40 <SPI_EndRxTxTransaction>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d006      	beq.n	80076ee <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2220      	movs	r2, #32
 80076ea:	661a      	str	r2, [r3, #96]	; 0x60
 80076ec:	e000      	b.n	80076f0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80076ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007700:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007704:	4618      	mov	r0, r3
 8007706:	3728      	adds	r7, #40	; 0x28
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b088      	sub	sp, #32
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	603b      	str	r3, [r7, #0]
 8007718:	4613      	mov	r3, r2
 800771a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800771c:	f7fc f9bc 	bl	8003a98 <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007724:	1a9b      	subs	r3, r3, r2
 8007726:	683a      	ldr	r2, [r7, #0]
 8007728:	4413      	add	r3, r2
 800772a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800772c:	f7fc f9b4 	bl	8003a98 <HAL_GetTick>
 8007730:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007732:	4b39      	ldr	r3, [pc, #228]	; (8007818 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	015b      	lsls	r3, r3, #5
 8007738:	0d1b      	lsrs	r3, r3, #20
 800773a:	69fa      	ldr	r2, [r7, #28]
 800773c:	fb02 f303 	mul.w	r3, r2, r3
 8007740:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007742:	e054      	b.n	80077ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800774a:	d050      	beq.n	80077ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800774c:	f7fc f9a4 	bl	8003a98 <HAL_GetTick>
 8007750:	4602      	mov	r2, r0
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	69fa      	ldr	r2, [r7, #28]
 8007758:	429a      	cmp	r2, r3
 800775a:	d902      	bls.n	8007762 <SPI_WaitFlagStateUntilTimeout+0x56>
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d13d      	bne.n	80077de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	685a      	ldr	r2, [r3, #4]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007770:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800777a:	d111      	bne.n	80077a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007784:	d004      	beq.n	8007790 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800778e:	d107      	bne.n	80077a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800779e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077a8:	d10f      	bne.n	80077ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077b8:	601a      	str	r2, [r3, #0]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e017      	b.n	800780e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d101      	bne.n	80077e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80077e4:	2300      	movs	r3, #0
 80077e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	3b01      	subs	r3, #1
 80077ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	689a      	ldr	r2, [r3, #8]
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	4013      	ands	r3, r2
 80077f8:	68ba      	ldr	r2, [r7, #8]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	bf0c      	ite	eq
 80077fe:	2301      	moveq	r3, #1
 8007800:	2300      	movne	r3, #0
 8007802:	b2db      	uxtb	r3, r3
 8007804:	461a      	mov	r2, r3
 8007806:	79fb      	ldrb	r3, [r7, #7]
 8007808:	429a      	cmp	r2, r3
 800780a:	d19b      	bne.n	8007744 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3720      	adds	r7, #32
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	200000c0 	.word	0x200000c0

0800781c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b08a      	sub	sp, #40	; 0x28
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
 8007828:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800782a:	2300      	movs	r3, #0
 800782c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800782e:	f7fc f933 	bl	8003a98 <HAL_GetTick>
 8007832:	4602      	mov	r2, r0
 8007834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007836:	1a9b      	subs	r3, r3, r2
 8007838:	683a      	ldr	r2, [r7, #0]
 800783a:	4413      	add	r3, r2
 800783c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800783e:	f7fc f92b 	bl	8003a98 <HAL_GetTick>
 8007842:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	330c      	adds	r3, #12
 800784a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800784c:	4b3d      	ldr	r3, [pc, #244]	; (8007944 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	4613      	mov	r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	4413      	add	r3, r2
 8007856:	00da      	lsls	r2, r3, #3
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	0d1b      	lsrs	r3, r3, #20
 800785c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800785e:	fb02 f303 	mul.w	r3, r2, r3
 8007862:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007864:	e060      	b.n	8007928 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800786c:	d107      	bne.n	800787e <SPI_WaitFifoStateUntilTimeout+0x62>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d104      	bne.n	800787e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	b2db      	uxtb	r3, r3
 800787a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800787c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007884:	d050      	beq.n	8007928 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007886:	f7fc f907 	bl	8003a98 <HAL_GetTick>
 800788a:	4602      	mov	r2, r0
 800788c:	6a3b      	ldr	r3, [r7, #32]
 800788e:	1ad3      	subs	r3, r2, r3
 8007890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007892:	429a      	cmp	r2, r3
 8007894:	d902      	bls.n	800789c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007898:	2b00      	cmp	r3, #0
 800789a:	d13d      	bne.n	8007918 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	685a      	ldr	r2, [r3, #4]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80078aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078b4:	d111      	bne.n	80078da <SPI_WaitFifoStateUntilTimeout+0xbe>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078be:	d004      	beq.n	80078ca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078c8:	d107      	bne.n	80078da <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078e2:	d10f      	bne.n	8007904 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078f2:	601a      	str	r2, [r3, #0]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007902:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007914:	2303      	movs	r3, #3
 8007916:	e010      	b.n	800793a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d101      	bne.n	8007922 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800791e:	2300      	movs	r3, #0
 8007920:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	3b01      	subs	r3, #1
 8007926:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689a      	ldr	r2, [r3, #8]
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	4013      	ands	r3, r2
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	429a      	cmp	r2, r3
 8007936:	d196      	bne.n	8007866 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3728      	adds	r7, #40	; 0x28
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	200000c0 	.word	0x200000c0

08007948 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b088      	sub	sp, #32
 800794c:	af02      	add	r7, sp, #8
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800795c:	d111      	bne.n	8007982 <SPI_EndRxTransaction+0x3a>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007966:	d004      	beq.n	8007972 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007970:	d107      	bne.n	8007982 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007980:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800798a:	d112      	bne.n	80079b2 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	9300      	str	r3, [sp, #0]
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	2200      	movs	r2, #0
 8007994:	2180      	movs	r1, #128	; 0x80
 8007996:	68f8      	ldr	r0, [r7, #12]
 8007998:	f7ff feb8 	bl	800770c <SPI_WaitFlagStateUntilTimeout>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d021      	beq.n	80079e6 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079a6:	f043 0220 	orr.w	r2, r3, #32
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80079ae:	2303      	movs	r3, #3
 80079b0:	e03d      	b.n	8007a2e <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80079b2:	4b21      	ldr	r3, [pc, #132]	; (8007a38 <SPI_EndRxTransaction+0xf0>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a21      	ldr	r2, [pc, #132]	; (8007a3c <SPI_EndRxTransaction+0xf4>)
 80079b8:	fba2 2303 	umull	r2, r3, r2, r3
 80079bc:	0d5b      	lsrs	r3, r3, #21
 80079be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80079c2:	fb02 f303 	mul.w	r3, r2, r3
 80079c6:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00a      	beq.n	80079e4 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	3b01      	subs	r3, #1
 80079d2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079de:	2b80      	cmp	r3, #128	; 0x80
 80079e0:	d0f2      	beq.n	80079c8 <SPI_EndRxTransaction+0x80>
 80079e2:	e000      	b.n	80079e6 <SPI_EndRxTransaction+0x9e>
        break;
 80079e4:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079ee:	d11d      	bne.n	8007a2c <SPI_EndRxTransaction+0xe4>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079f8:	d004      	beq.n	8007a04 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a02:	d113      	bne.n	8007a2c <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	9300      	str	r3, [sp, #0]
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f7ff ff03 	bl	800781c <SPI_WaitFifoStateUntilTimeout>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d007      	beq.n	8007a2c <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a20:	f043 0220 	orr.w	r2, r3, #32
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	e000      	b.n	8007a2e <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3718      	adds	r7, #24
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	200000c0 	.word	0x200000c0
 8007a3c:	165e9f81 	.word	0x165e9f81

08007a40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b088      	sub	sp, #32
 8007a44:	af02      	add	r7, sp, #8
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f7ff fedf 	bl	800781c <SPI_WaitFifoStateUntilTimeout>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d007      	beq.n	8007a74 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a68:	f043 0220 	orr.w	r2, r3, #32
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007a70:	2303      	movs	r3, #3
 8007a72:	e046      	b.n	8007b02 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007a74:	4b25      	ldr	r3, [pc, #148]	; (8007b0c <SPI_EndRxTxTransaction+0xcc>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a25      	ldr	r2, [pc, #148]	; (8007b10 <SPI_EndRxTxTransaction+0xd0>)
 8007a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a7e:	0d5b      	lsrs	r3, r3, #21
 8007a80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007a84:	fb02 f303 	mul.w	r3, r2, r3
 8007a88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a92:	d112      	bne.n	8007aba <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	9300      	str	r3, [sp, #0]
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	2180      	movs	r1, #128	; 0x80
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f7ff fe34 	bl	800770c <SPI_WaitFlagStateUntilTimeout>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d016      	beq.n	8007ad8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007aae:	f043 0220 	orr.w	r2, r3, #32
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e023      	b.n	8007b02 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00a      	beq.n	8007ad6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ad0:	2b80      	cmp	r3, #128	; 0x80
 8007ad2:	d0f2      	beq.n	8007aba <SPI_EndRxTxTransaction+0x7a>
 8007ad4:	e000      	b.n	8007ad8 <SPI_EndRxTxTransaction+0x98>
        break;
 8007ad6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f7ff fe99 	bl	800781c <SPI_WaitFifoStateUntilTimeout>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d007      	beq.n	8007b00 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007af4:	f043 0220 	orr.w	r2, r3, #32
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007afc:	2303      	movs	r3, #3
 8007afe:	e000      	b.n	8007b02 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3718      	adds	r7, #24
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	200000c0 	.word	0x200000c0
 8007b10:	165e9f81 	.word	0x165e9f81

08007b14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d101      	bne.n	8007b26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e049      	b.n	8007bba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d106      	bne.n	8007b40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f7fb fdc2 	bl	80036c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2202      	movs	r2, #2
 8007b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	3304      	adds	r3, #4
 8007b50:	4619      	mov	r1, r3
 8007b52:	4610      	mov	r0, r2
 8007b54:	f000 fd30 	bl	80085b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
	...

08007bc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d001      	beq.n	8007bdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e054      	b.n	8007c86 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2202      	movs	r2, #2
 8007be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68da      	ldr	r2, [r3, #12]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f042 0201 	orr.w	r2, r2, #1
 8007bf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a26      	ldr	r2, [pc, #152]	; (8007c94 <HAL_TIM_Base_Start_IT+0xd0>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d022      	beq.n	8007c44 <HAL_TIM_Base_Start_IT+0x80>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c06:	d01d      	beq.n	8007c44 <HAL_TIM_Base_Start_IT+0x80>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a22      	ldr	r2, [pc, #136]	; (8007c98 <HAL_TIM_Base_Start_IT+0xd4>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d018      	beq.n	8007c44 <HAL_TIM_Base_Start_IT+0x80>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a21      	ldr	r2, [pc, #132]	; (8007c9c <HAL_TIM_Base_Start_IT+0xd8>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d013      	beq.n	8007c44 <HAL_TIM_Base_Start_IT+0x80>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a1f      	ldr	r2, [pc, #124]	; (8007ca0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d00e      	beq.n	8007c44 <HAL_TIM_Base_Start_IT+0x80>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a1e      	ldr	r2, [pc, #120]	; (8007ca4 <HAL_TIM_Base_Start_IT+0xe0>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d009      	beq.n	8007c44 <HAL_TIM_Base_Start_IT+0x80>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a1c      	ldr	r2, [pc, #112]	; (8007ca8 <HAL_TIM_Base_Start_IT+0xe4>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d004      	beq.n	8007c44 <HAL_TIM_Base_Start_IT+0x80>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a1b      	ldr	r2, [pc, #108]	; (8007cac <HAL_TIM_Base_Start_IT+0xe8>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d115      	bne.n	8007c70 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	689a      	ldr	r2, [r3, #8]
 8007c4a:	4b19      	ldr	r3, [pc, #100]	; (8007cb0 <HAL_TIM_Base_Start_IT+0xec>)
 8007c4c:	4013      	ands	r3, r2
 8007c4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2b06      	cmp	r3, #6
 8007c54:	d015      	beq.n	8007c82 <HAL_TIM_Base_Start_IT+0xbe>
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c5c:	d011      	beq.n	8007c82 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f042 0201 	orr.w	r2, r2, #1
 8007c6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c6e:	e008      	b.n	8007c82 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f042 0201 	orr.w	r2, r2, #1
 8007c7e:	601a      	str	r2, [r3, #0]
 8007c80:	e000      	b.n	8007c84 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	40010000 	.word	0x40010000
 8007c98:	40000400 	.word	0x40000400
 8007c9c:	40000800 	.word	0x40000800
 8007ca0:	40000c00 	.word	0x40000c00
 8007ca4:	40010400 	.word	0x40010400
 8007ca8:	40014000 	.word	0x40014000
 8007cac:	40001800 	.word	0x40001800
 8007cb0:	00010007 	.word	0x00010007

08007cb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d101      	bne.n	8007cc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e049      	b.n	8007d5a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d106      	bne.n	8007ce0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 f841 	bl	8007d62 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2202      	movs	r2, #2
 8007ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	3304      	adds	r3, #4
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	4610      	mov	r0, r2
 8007cf4:	f000 fc60 	bl	80085b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007d62:	b480      	push	{r7}
 8007d64:	b083      	sub	sp, #12
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007d6a:	bf00      	nop
 8007d6c:	370c      	adds	r7, #12
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr
	...

08007d78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d109      	bne.n	8007d9c <HAL_TIM_PWM_Start+0x24>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	bf14      	ite	ne
 8007d94:	2301      	movne	r3, #1
 8007d96:	2300      	moveq	r3, #0
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	e03c      	b.n	8007e16 <HAL_TIM_PWM_Start+0x9e>
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	2b04      	cmp	r3, #4
 8007da0:	d109      	bne.n	8007db6 <HAL_TIM_PWM_Start+0x3e>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	bf14      	ite	ne
 8007dae:	2301      	movne	r3, #1
 8007db0:	2300      	moveq	r3, #0
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	e02f      	b.n	8007e16 <HAL_TIM_PWM_Start+0x9e>
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	2b08      	cmp	r3, #8
 8007dba:	d109      	bne.n	8007dd0 <HAL_TIM_PWM_Start+0x58>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	bf14      	ite	ne
 8007dc8:	2301      	movne	r3, #1
 8007dca:	2300      	moveq	r3, #0
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	e022      	b.n	8007e16 <HAL_TIM_PWM_Start+0x9e>
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	2b0c      	cmp	r3, #12
 8007dd4:	d109      	bne.n	8007dea <HAL_TIM_PWM_Start+0x72>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	bf14      	ite	ne
 8007de2:	2301      	movne	r3, #1
 8007de4:	2300      	moveq	r3, #0
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	e015      	b.n	8007e16 <HAL_TIM_PWM_Start+0x9e>
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	2b10      	cmp	r3, #16
 8007dee:	d109      	bne.n	8007e04 <HAL_TIM_PWM_Start+0x8c>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	bf14      	ite	ne
 8007dfc:	2301      	movne	r3, #1
 8007dfe:	2300      	moveq	r3, #0
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	e008      	b.n	8007e16 <HAL_TIM_PWM_Start+0x9e>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	bf14      	ite	ne
 8007e10:	2301      	movne	r3, #1
 8007e12:	2300      	moveq	r3, #0
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d001      	beq.n	8007e1e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e092      	b.n	8007f44 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d104      	bne.n	8007e2e <HAL_TIM_PWM_Start+0xb6>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2202      	movs	r2, #2
 8007e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e2c:	e023      	b.n	8007e76 <HAL_TIM_PWM_Start+0xfe>
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	2b04      	cmp	r3, #4
 8007e32:	d104      	bne.n	8007e3e <HAL_TIM_PWM_Start+0xc6>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2202      	movs	r2, #2
 8007e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e3c:	e01b      	b.n	8007e76 <HAL_TIM_PWM_Start+0xfe>
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	2b08      	cmp	r3, #8
 8007e42:	d104      	bne.n	8007e4e <HAL_TIM_PWM_Start+0xd6>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2202      	movs	r2, #2
 8007e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e4c:	e013      	b.n	8007e76 <HAL_TIM_PWM_Start+0xfe>
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	2b0c      	cmp	r3, #12
 8007e52:	d104      	bne.n	8007e5e <HAL_TIM_PWM_Start+0xe6>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2202      	movs	r2, #2
 8007e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e5c:	e00b      	b.n	8007e76 <HAL_TIM_PWM_Start+0xfe>
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	2b10      	cmp	r3, #16
 8007e62:	d104      	bne.n	8007e6e <HAL_TIM_PWM_Start+0xf6>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2202      	movs	r2, #2
 8007e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e6c:	e003      	b.n	8007e76 <HAL_TIM_PWM_Start+0xfe>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2202      	movs	r2, #2
 8007e72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	6839      	ldr	r1, [r7, #0]
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f000 ff32 	bl	8008ce8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a30      	ldr	r2, [pc, #192]	; (8007f4c <HAL_TIM_PWM_Start+0x1d4>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d004      	beq.n	8007e98 <HAL_TIM_PWM_Start+0x120>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a2f      	ldr	r2, [pc, #188]	; (8007f50 <HAL_TIM_PWM_Start+0x1d8>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d101      	bne.n	8007e9c <HAL_TIM_PWM_Start+0x124>
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e000      	b.n	8007e9e <HAL_TIM_PWM_Start+0x126>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d007      	beq.n	8007eb2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007eb0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a25      	ldr	r2, [pc, #148]	; (8007f4c <HAL_TIM_PWM_Start+0x1d4>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d022      	beq.n	8007f02 <HAL_TIM_PWM_Start+0x18a>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ec4:	d01d      	beq.n	8007f02 <HAL_TIM_PWM_Start+0x18a>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a22      	ldr	r2, [pc, #136]	; (8007f54 <HAL_TIM_PWM_Start+0x1dc>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d018      	beq.n	8007f02 <HAL_TIM_PWM_Start+0x18a>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a20      	ldr	r2, [pc, #128]	; (8007f58 <HAL_TIM_PWM_Start+0x1e0>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d013      	beq.n	8007f02 <HAL_TIM_PWM_Start+0x18a>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a1f      	ldr	r2, [pc, #124]	; (8007f5c <HAL_TIM_PWM_Start+0x1e4>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d00e      	beq.n	8007f02 <HAL_TIM_PWM_Start+0x18a>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a19      	ldr	r2, [pc, #100]	; (8007f50 <HAL_TIM_PWM_Start+0x1d8>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d009      	beq.n	8007f02 <HAL_TIM_PWM_Start+0x18a>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a1b      	ldr	r2, [pc, #108]	; (8007f60 <HAL_TIM_PWM_Start+0x1e8>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d004      	beq.n	8007f02 <HAL_TIM_PWM_Start+0x18a>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a19      	ldr	r2, [pc, #100]	; (8007f64 <HAL_TIM_PWM_Start+0x1ec>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d115      	bne.n	8007f2e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	689a      	ldr	r2, [r3, #8]
 8007f08:	4b17      	ldr	r3, [pc, #92]	; (8007f68 <HAL_TIM_PWM_Start+0x1f0>)
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2b06      	cmp	r3, #6
 8007f12:	d015      	beq.n	8007f40 <HAL_TIM_PWM_Start+0x1c8>
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f1a:	d011      	beq.n	8007f40 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f042 0201 	orr.w	r2, r2, #1
 8007f2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f2c:	e008      	b.n	8007f40 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f042 0201 	orr.w	r2, r2, #1
 8007f3c:	601a      	str	r2, [r3, #0]
 8007f3e:	e000      	b.n	8007f42 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	40010000 	.word	0x40010000
 8007f50:	40010400 	.word	0x40010400
 8007f54:	40000400 	.word	0x40000400
 8007f58:	40000800 	.word	0x40000800
 8007f5c:	40000c00 	.word	0x40000c00
 8007f60:	40014000 	.word	0x40014000
 8007f64:	40001800 	.word	0x40001800
 8007f68:	00010007 	.word	0x00010007

08007f6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	f003 0302 	and.w	r3, r3, #2
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d122      	bne.n	8007fc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	f003 0302 	and.w	r3, r3, #2
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d11b      	bne.n	8007fc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f06f 0202 	mvn.w	r2, #2
 8007f98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	699b      	ldr	r3, [r3, #24]
 8007fa6:	f003 0303 	and.w	r3, r3, #3
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d003      	beq.n	8007fb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 fae4 	bl	800857c <HAL_TIM_IC_CaptureCallback>
 8007fb4:	e005      	b.n	8007fc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 fad6 	bl	8008568 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 fae7 	bl	8008590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	f003 0304 	and.w	r3, r3, #4
 8007fd2:	2b04      	cmp	r3, #4
 8007fd4:	d122      	bne.n	800801c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	f003 0304 	and.w	r3, r3, #4
 8007fe0:	2b04      	cmp	r3, #4
 8007fe2:	d11b      	bne.n	800801c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f06f 0204 	mvn.w	r2, #4
 8007fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2202      	movs	r2, #2
 8007ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d003      	beq.n	800800a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 faba 	bl	800857c <HAL_TIM_IC_CaptureCallback>
 8008008:	e005      	b.n	8008016 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 faac 	bl	8008568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fabd 	bl	8008590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	f003 0308 	and.w	r3, r3, #8
 8008026:	2b08      	cmp	r3, #8
 8008028:	d122      	bne.n	8008070 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	f003 0308 	and.w	r3, r3, #8
 8008034:	2b08      	cmp	r3, #8
 8008036:	d11b      	bne.n	8008070 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f06f 0208 	mvn.w	r2, #8
 8008040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2204      	movs	r2, #4
 8008046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	69db      	ldr	r3, [r3, #28]
 800804e:	f003 0303 	and.w	r3, r3, #3
 8008052:	2b00      	cmp	r3, #0
 8008054:	d003      	beq.n	800805e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fa90 	bl	800857c <HAL_TIM_IC_CaptureCallback>
 800805c:	e005      	b.n	800806a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fa82 	bl	8008568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 fa93 	bl	8008590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	f003 0310 	and.w	r3, r3, #16
 800807a:	2b10      	cmp	r3, #16
 800807c:	d122      	bne.n	80080c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	f003 0310 	and.w	r3, r3, #16
 8008088:	2b10      	cmp	r3, #16
 800808a:	d11b      	bne.n	80080c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f06f 0210 	mvn.w	r2, #16
 8008094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2208      	movs	r2, #8
 800809a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	69db      	ldr	r3, [r3, #28]
 80080a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d003      	beq.n	80080b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fa66 	bl	800857c <HAL_TIM_IC_CaptureCallback>
 80080b0:	e005      	b.n	80080be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fa58 	bl	8008568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 fa69 	bl	8008590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	f003 0301 	and.w	r3, r3, #1
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d10e      	bne.n	80080f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	f003 0301 	and.w	r3, r3, #1
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d107      	bne.n	80080f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f06f 0201 	mvn.w	r2, #1
 80080e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f7fa fc80 	bl	80029f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080fa:	2b80      	cmp	r3, #128	; 0x80
 80080fc:	d10e      	bne.n	800811c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008108:	2b80      	cmp	r3, #128	; 0x80
 800810a:	d107      	bne.n	800811c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 fea4 	bl	8008e64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800812a:	d10e      	bne.n	800814a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008136:	2b80      	cmp	r3, #128	; 0x80
 8008138:	d107      	bne.n	800814a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 fe97 	bl	8008e78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	691b      	ldr	r3, [r3, #16]
 8008150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008154:	2b40      	cmp	r3, #64	; 0x40
 8008156:	d10e      	bne.n	8008176 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008162:	2b40      	cmp	r3, #64	; 0x40
 8008164:	d107      	bne.n	8008176 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800816e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fa17 	bl	80085a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	f003 0320 	and.w	r3, r3, #32
 8008180:	2b20      	cmp	r3, #32
 8008182:	d10e      	bne.n	80081a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	f003 0320 	and.w	r3, r3, #32
 800818e:	2b20      	cmp	r3, #32
 8008190:	d107      	bne.n	80081a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f06f 0220 	mvn.w	r2, #32
 800819a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 fe57 	bl	8008e50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081a2:	bf00      	nop
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
	...

080081ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b086      	sub	sp, #24
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081b8:	2300      	movs	r3, #0
 80081ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d101      	bne.n	80081ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80081c6:	2302      	movs	r3, #2
 80081c8:	e0ff      	b.n	80083ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2b14      	cmp	r3, #20
 80081d6:	f200 80f0 	bhi.w	80083ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80081da:	a201      	add	r2, pc, #4	; (adr r2, 80081e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80081dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e0:	08008235 	.word	0x08008235
 80081e4:	080083bb 	.word	0x080083bb
 80081e8:	080083bb 	.word	0x080083bb
 80081ec:	080083bb 	.word	0x080083bb
 80081f0:	08008275 	.word	0x08008275
 80081f4:	080083bb 	.word	0x080083bb
 80081f8:	080083bb 	.word	0x080083bb
 80081fc:	080083bb 	.word	0x080083bb
 8008200:	080082b7 	.word	0x080082b7
 8008204:	080083bb 	.word	0x080083bb
 8008208:	080083bb 	.word	0x080083bb
 800820c:	080083bb 	.word	0x080083bb
 8008210:	080082f7 	.word	0x080082f7
 8008214:	080083bb 	.word	0x080083bb
 8008218:	080083bb 	.word	0x080083bb
 800821c:	080083bb 	.word	0x080083bb
 8008220:	08008339 	.word	0x08008339
 8008224:	080083bb 	.word	0x080083bb
 8008228:	080083bb 	.word	0x080083bb
 800822c:	080083bb 	.word	0x080083bb
 8008230:	08008379 	.word	0x08008379
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	68b9      	ldr	r1, [r7, #8]
 800823a:	4618      	mov	r0, r3
 800823c:	f000 fa5c 	bl	80086f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	699a      	ldr	r2, [r3, #24]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f042 0208 	orr.w	r2, r2, #8
 800824e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	699a      	ldr	r2, [r3, #24]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f022 0204 	bic.w	r2, r2, #4
 800825e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6999      	ldr	r1, [r3, #24]
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	691a      	ldr	r2, [r3, #16]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	430a      	orrs	r2, r1
 8008270:	619a      	str	r2, [r3, #24]
      break;
 8008272:	e0a5      	b.n	80083c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68b9      	ldr	r1, [r7, #8]
 800827a:	4618      	mov	r0, r3
 800827c:	f000 faae 	bl	80087dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	699a      	ldr	r2, [r3, #24]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800828e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	699a      	ldr	r2, [r3, #24]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800829e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	6999      	ldr	r1, [r3, #24]
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	021a      	lsls	r2, r3, #8
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	430a      	orrs	r2, r1
 80082b2:	619a      	str	r2, [r3, #24]
      break;
 80082b4:	e084      	b.n	80083c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68b9      	ldr	r1, [r7, #8]
 80082bc:	4618      	mov	r0, r3
 80082be:	f000 fb05 	bl	80088cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	69da      	ldr	r2, [r3, #28]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f042 0208 	orr.w	r2, r2, #8
 80082d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	69da      	ldr	r2, [r3, #28]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f022 0204 	bic.w	r2, r2, #4
 80082e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	69d9      	ldr	r1, [r3, #28]
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	691a      	ldr	r2, [r3, #16]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	430a      	orrs	r2, r1
 80082f2:	61da      	str	r2, [r3, #28]
      break;
 80082f4:	e064      	b.n	80083c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	68b9      	ldr	r1, [r7, #8]
 80082fc:	4618      	mov	r0, r3
 80082fe:	f000 fb5b 	bl	80089b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	69da      	ldr	r2, [r3, #28]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008310:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	69da      	ldr	r2, [r3, #28]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008320:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	69d9      	ldr	r1, [r3, #28]
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	021a      	lsls	r2, r3, #8
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	430a      	orrs	r2, r1
 8008334:	61da      	str	r2, [r3, #28]
      break;
 8008336:	e043      	b.n	80083c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68b9      	ldr	r1, [r7, #8]
 800833e:	4618      	mov	r0, r3
 8008340:	f000 fb92 	bl	8008a68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f042 0208 	orr.w	r2, r2, #8
 8008352:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f022 0204 	bic.w	r2, r2, #4
 8008362:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	691a      	ldr	r2, [r3, #16]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	430a      	orrs	r2, r1
 8008374:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008376:	e023      	b.n	80083c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68b9      	ldr	r1, [r7, #8]
 800837e:	4618      	mov	r0, r3
 8008380:	f000 fbc4 	bl	8008b0c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008392:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	021a      	lsls	r2, r3, #8
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	430a      	orrs	r2, r1
 80083b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80083b8:	e002      	b.n	80083c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	75fb      	strb	r3, [r7, #23]
      break;
 80083be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80083c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3718      	adds	r7, #24
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop

080083d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083de:	2300      	movs	r3, #0
 80083e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d101      	bne.n	80083f0 <HAL_TIM_ConfigClockSource+0x1c>
 80083ec:	2302      	movs	r3, #2
 80083ee:	e0b4      	b.n	800855a <HAL_TIM_ConfigClockSource+0x186>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2202      	movs	r2, #2
 80083fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008408:	68ba      	ldr	r2, [r7, #8]
 800840a:	4b56      	ldr	r3, [pc, #344]	; (8008564 <HAL_TIM_ConfigClockSource+0x190>)
 800840c:	4013      	ands	r3, r2
 800840e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008416:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008428:	d03e      	beq.n	80084a8 <HAL_TIM_ConfigClockSource+0xd4>
 800842a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800842e:	f200 8087 	bhi.w	8008540 <HAL_TIM_ConfigClockSource+0x16c>
 8008432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008436:	f000 8086 	beq.w	8008546 <HAL_TIM_ConfigClockSource+0x172>
 800843a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800843e:	d87f      	bhi.n	8008540 <HAL_TIM_ConfigClockSource+0x16c>
 8008440:	2b70      	cmp	r3, #112	; 0x70
 8008442:	d01a      	beq.n	800847a <HAL_TIM_ConfigClockSource+0xa6>
 8008444:	2b70      	cmp	r3, #112	; 0x70
 8008446:	d87b      	bhi.n	8008540 <HAL_TIM_ConfigClockSource+0x16c>
 8008448:	2b60      	cmp	r3, #96	; 0x60
 800844a:	d050      	beq.n	80084ee <HAL_TIM_ConfigClockSource+0x11a>
 800844c:	2b60      	cmp	r3, #96	; 0x60
 800844e:	d877      	bhi.n	8008540 <HAL_TIM_ConfigClockSource+0x16c>
 8008450:	2b50      	cmp	r3, #80	; 0x50
 8008452:	d03c      	beq.n	80084ce <HAL_TIM_ConfigClockSource+0xfa>
 8008454:	2b50      	cmp	r3, #80	; 0x50
 8008456:	d873      	bhi.n	8008540 <HAL_TIM_ConfigClockSource+0x16c>
 8008458:	2b40      	cmp	r3, #64	; 0x40
 800845a:	d058      	beq.n	800850e <HAL_TIM_ConfigClockSource+0x13a>
 800845c:	2b40      	cmp	r3, #64	; 0x40
 800845e:	d86f      	bhi.n	8008540 <HAL_TIM_ConfigClockSource+0x16c>
 8008460:	2b30      	cmp	r3, #48	; 0x30
 8008462:	d064      	beq.n	800852e <HAL_TIM_ConfigClockSource+0x15a>
 8008464:	2b30      	cmp	r3, #48	; 0x30
 8008466:	d86b      	bhi.n	8008540 <HAL_TIM_ConfigClockSource+0x16c>
 8008468:	2b20      	cmp	r3, #32
 800846a:	d060      	beq.n	800852e <HAL_TIM_ConfigClockSource+0x15a>
 800846c:	2b20      	cmp	r3, #32
 800846e:	d867      	bhi.n	8008540 <HAL_TIM_ConfigClockSource+0x16c>
 8008470:	2b00      	cmp	r3, #0
 8008472:	d05c      	beq.n	800852e <HAL_TIM_ConfigClockSource+0x15a>
 8008474:	2b10      	cmp	r3, #16
 8008476:	d05a      	beq.n	800852e <HAL_TIM_ConfigClockSource+0x15a>
 8008478:	e062      	b.n	8008540 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800848a:	f000 fc0d 	bl	8008ca8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800849c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68ba      	ldr	r2, [r7, #8]
 80084a4:	609a      	str	r2, [r3, #8]
      break;
 80084a6:	e04f      	b.n	8008548 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80084b8:	f000 fbf6 	bl	8008ca8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	689a      	ldr	r2, [r3, #8]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80084ca:	609a      	str	r2, [r3, #8]
      break;
 80084cc:	e03c      	b.n	8008548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084da:	461a      	mov	r2, r3
 80084dc:	f000 fb6a 	bl	8008bb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2150      	movs	r1, #80	; 0x50
 80084e6:	4618      	mov	r0, r3
 80084e8:	f000 fbc3 	bl	8008c72 <TIM_ITRx_SetConfig>
      break;
 80084ec:	e02c      	b.n	8008548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80084fa:	461a      	mov	r2, r3
 80084fc:	f000 fb89 	bl	8008c12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2160      	movs	r1, #96	; 0x60
 8008506:	4618      	mov	r0, r3
 8008508:	f000 fbb3 	bl	8008c72 <TIM_ITRx_SetConfig>
      break;
 800850c:	e01c      	b.n	8008548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800851a:	461a      	mov	r2, r3
 800851c:	f000 fb4a 	bl	8008bb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2140      	movs	r1, #64	; 0x40
 8008526:	4618      	mov	r0, r3
 8008528:	f000 fba3 	bl	8008c72 <TIM_ITRx_SetConfig>
      break;
 800852c:	e00c      	b.n	8008548 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4619      	mov	r1, r3
 8008538:	4610      	mov	r0, r2
 800853a:	f000 fb9a 	bl	8008c72 <TIM_ITRx_SetConfig>
      break;
 800853e:	e003      	b.n	8008548 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	73fb      	strb	r3, [r7, #15]
      break;
 8008544:	e000      	b.n	8008548 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008546:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008558:	7bfb      	ldrb	r3, [r7, #15]
}
 800855a:	4618      	mov	r0, r3
 800855c:	3710      	adds	r7, #16
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	fffeff88 	.word	0xfffeff88

08008568 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008570:	bf00      	nop
 8008572:	370c      	adds	r7, #12
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008584:	bf00      	nop
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008598:	bf00      	nop
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085ac:	bf00      	nop
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a40      	ldr	r2, [pc, #256]	; (80086cc <TIM_Base_SetConfig+0x114>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d013      	beq.n	80085f8 <TIM_Base_SetConfig+0x40>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085d6:	d00f      	beq.n	80085f8 <TIM_Base_SetConfig+0x40>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a3d      	ldr	r2, [pc, #244]	; (80086d0 <TIM_Base_SetConfig+0x118>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d00b      	beq.n	80085f8 <TIM_Base_SetConfig+0x40>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a3c      	ldr	r2, [pc, #240]	; (80086d4 <TIM_Base_SetConfig+0x11c>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d007      	beq.n	80085f8 <TIM_Base_SetConfig+0x40>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a3b      	ldr	r2, [pc, #236]	; (80086d8 <TIM_Base_SetConfig+0x120>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d003      	beq.n	80085f8 <TIM_Base_SetConfig+0x40>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a3a      	ldr	r2, [pc, #232]	; (80086dc <TIM_Base_SetConfig+0x124>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d108      	bne.n	800860a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	4313      	orrs	r3, r2
 8008608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4a2f      	ldr	r2, [pc, #188]	; (80086cc <TIM_Base_SetConfig+0x114>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d02b      	beq.n	800866a <TIM_Base_SetConfig+0xb2>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008618:	d027      	beq.n	800866a <TIM_Base_SetConfig+0xb2>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4a2c      	ldr	r2, [pc, #176]	; (80086d0 <TIM_Base_SetConfig+0x118>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d023      	beq.n	800866a <TIM_Base_SetConfig+0xb2>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4a2b      	ldr	r2, [pc, #172]	; (80086d4 <TIM_Base_SetConfig+0x11c>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d01f      	beq.n	800866a <TIM_Base_SetConfig+0xb2>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4a2a      	ldr	r2, [pc, #168]	; (80086d8 <TIM_Base_SetConfig+0x120>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d01b      	beq.n	800866a <TIM_Base_SetConfig+0xb2>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4a29      	ldr	r2, [pc, #164]	; (80086dc <TIM_Base_SetConfig+0x124>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d017      	beq.n	800866a <TIM_Base_SetConfig+0xb2>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4a28      	ldr	r2, [pc, #160]	; (80086e0 <TIM_Base_SetConfig+0x128>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d013      	beq.n	800866a <TIM_Base_SetConfig+0xb2>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4a27      	ldr	r2, [pc, #156]	; (80086e4 <TIM_Base_SetConfig+0x12c>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d00f      	beq.n	800866a <TIM_Base_SetConfig+0xb2>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4a26      	ldr	r2, [pc, #152]	; (80086e8 <TIM_Base_SetConfig+0x130>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d00b      	beq.n	800866a <TIM_Base_SetConfig+0xb2>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a25      	ldr	r2, [pc, #148]	; (80086ec <TIM_Base_SetConfig+0x134>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d007      	beq.n	800866a <TIM_Base_SetConfig+0xb2>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a24      	ldr	r2, [pc, #144]	; (80086f0 <TIM_Base_SetConfig+0x138>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d003      	beq.n	800866a <TIM_Base_SetConfig+0xb2>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a23      	ldr	r2, [pc, #140]	; (80086f4 <TIM_Base_SetConfig+0x13c>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d108      	bne.n	800867c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	68db      	ldr	r3, [r3, #12]
 8008676:	68fa      	ldr	r2, [r7, #12]
 8008678:	4313      	orrs	r3, r2
 800867a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	695b      	ldr	r3, [r3, #20]
 8008686:	4313      	orrs	r3, r2
 8008688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	689a      	ldr	r2, [r3, #8]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4a0a      	ldr	r2, [pc, #40]	; (80086cc <TIM_Base_SetConfig+0x114>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d003      	beq.n	80086b0 <TIM_Base_SetConfig+0xf8>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a0c      	ldr	r2, [pc, #48]	; (80086dc <TIM_Base_SetConfig+0x124>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d103      	bne.n	80086b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	691a      	ldr	r2, [r3, #16]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	615a      	str	r2, [r3, #20]
}
 80086be:	bf00      	nop
 80086c0:	3714      	adds	r7, #20
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	40010000 	.word	0x40010000
 80086d0:	40000400 	.word	0x40000400
 80086d4:	40000800 	.word	0x40000800
 80086d8:	40000c00 	.word	0x40000c00
 80086dc:	40010400 	.word	0x40010400
 80086e0:	40014000 	.word	0x40014000
 80086e4:	40014400 	.word	0x40014400
 80086e8:	40014800 	.word	0x40014800
 80086ec:	40001800 	.word	0x40001800
 80086f0:	40001c00 	.word	0x40001c00
 80086f4:	40002000 	.word	0x40002000

080086f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b087      	sub	sp, #28
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a1b      	ldr	r3, [r3, #32]
 8008706:	f023 0201 	bic.w	r2, r3, #1
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a1b      	ldr	r3, [r3, #32]
 8008712:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	699b      	ldr	r3, [r3, #24]
 800871e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	4b2b      	ldr	r3, [pc, #172]	; (80087d0 <TIM_OC1_SetConfig+0xd8>)
 8008724:	4013      	ands	r3, r2
 8008726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f023 0303 	bic.w	r3, r3, #3
 800872e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	68fa      	ldr	r2, [r7, #12]
 8008736:	4313      	orrs	r3, r2
 8008738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	f023 0302 	bic.w	r3, r3, #2
 8008740:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	697a      	ldr	r2, [r7, #20]
 8008748:	4313      	orrs	r3, r2
 800874a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	4a21      	ldr	r2, [pc, #132]	; (80087d4 <TIM_OC1_SetConfig+0xdc>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d003      	beq.n	800875c <TIM_OC1_SetConfig+0x64>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a20      	ldr	r2, [pc, #128]	; (80087d8 <TIM_OC1_SetConfig+0xe0>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d10c      	bne.n	8008776 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	f023 0308 	bic.w	r3, r3, #8
 8008762:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	697a      	ldr	r2, [r7, #20]
 800876a:	4313      	orrs	r3, r2
 800876c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	f023 0304 	bic.w	r3, r3, #4
 8008774:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a16      	ldr	r2, [pc, #88]	; (80087d4 <TIM_OC1_SetConfig+0xdc>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d003      	beq.n	8008786 <TIM_OC1_SetConfig+0x8e>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a15      	ldr	r2, [pc, #84]	; (80087d8 <TIM_OC1_SetConfig+0xe0>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d111      	bne.n	80087aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800878c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008794:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	693a      	ldr	r2, [r7, #16]
 800879c:	4313      	orrs	r3, r2
 800879e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	699b      	ldr	r3, [r3, #24]
 80087a4:	693a      	ldr	r2, [r7, #16]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	693a      	ldr	r2, [r7, #16]
 80087ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	685a      	ldr	r2, [r3, #4]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	697a      	ldr	r2, [r7, #20]
 80087c2:	621a      	str	r2, [r3, #32]
}
 80087c4:	bf00      	nop
 80087c6:	371c      	adds	r7, #28
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr
 80087d0:	fffeff8f 	.word	0xfffeff8f
 80087d4:	40010000 	.word	0x40010000
 80087d8:	40010400 	.word	0x40010400

080087dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087dc:	b480      	push	{r7}
 80087de:	b087      	sub	sp, #28
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6a1b      	ldr	r3, [r3, #32]
 80087ea:	f023 0210 	bic.w	r2, r3, #16
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a1b      	ldr	r3, [r3, #32]
 80087f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	699b      	ldr	r3, [r3, #24]
 8008802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008804:	68fa      	ldr	r2, [r7, #12]
 8008806:	4b2e      	ldr	r3, [pc, #184]	; (80088c0 <TIM_OC2_SetConfig+0xe4>)
 8008808:	4013      	ands	r3, r2
 800880a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008812:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	021b      	lsls	r3, r3, #8
 800881a:	68fa      	ldr	r2, [r7, #12]
 800881c:	4313      	orrs	r3, r2
 800881e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	f023 0320 	bic.w	r3, r3, #32
 8008826:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	011b      	lsls	r3, r3, #4
 800882e:	697a      	ldr	r2, [r7, #20]
 8008830:	4313      	orrs	r3, r2
 8008832:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4a23      	ldr	r2, [pc, #140]	; (80088c4 <TIM_OC2_SetConfig+0xe8>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d003      	beq.n	8008844 <TIM_OC2_SetConfig+0x68>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4a22      	ldr	r2, [pc, #136]	; (80088c8 <TIM_OC2_SetConfig+0xec>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d10d      	bne.n	8008860 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800884a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	011b      	lsls	r3, r3, #4
 8008852:	697a      	ldr	r2, [r7, #20]
 8008854:	4313      	orrs	r3, r2
 8008856:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800885e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a18      	ldr	r2, [pc, #96]	; (80088c4 <TIM_OC2_SetConfig+0xe8>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d003      	beq.n	8008870 <TIM_OC2_SetConfig+0x94>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a17      	ldr	r2, [pc, #92]	; (80088c8 <TIM_OC2_SetConfig+0xec>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d113      	bne.n	8008898 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008876:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800887e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	695b      	ldr	r3, [r3, #20]
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	693a      	ldr	r2, [r7, #16]
 8008888:	4313      	orrs	r3, r2
 800888a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	699b      	ldr	r3, [r3, #24]
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	693a      	ldr	r2, [r7, #16]
 8008894:	4313      	orrs	r3, r2
 8008896:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	693a      	ldr	r2, [r7, #16]
 800889c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	68fa      	ldr	r2, [r7, #12]
 80088a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	685a      	ldr	r2, [r3, #4]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	697a      	ldr	r2, [r7, #20]
 80088b0:	621a      	str	r2, [r3, #32]
}
 80088b2:	bf00      	nop
 80088b4:	371c      	adds	r7, #28
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop
 80088c0:	feff8fff 	.word	0xfeff8fff
 80088c4:	40010000 	.word	0x40010000
 80088c8:	40010400 	.word	0x40010400

080088cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b087      	sub	sp, #28
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a1b      	ldr	r3, [r3, #32]
 80088da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6a1b      	ldr	r3, [r3, #32]
 80088e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	69db      	ldr	r3, [r3, #28]
 80088f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80088f4:	68fa      	ldr	r2, [r7, #12]
 80088f6:	4b2d      	ldr	r3, [pc, #180]	; (80089ac <TIM_OC3_SetConfig+0xe0>)
 80088f8:	4013      	ands	r3, r2
 80088fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f023 0303 	bic.w	r3, r3, #3
 8008902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	4313      	orrs	r3, r2
 800890c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008914:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	021b      	lsls	r3, r3, #8
 800891c:	697a      	ldr	r2, [r7, #20]
 800891e:	4313      	orrs	r3, r2
 8008920:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	4a22      	ldr	r2, [pc, #136]	; (80089b0 <TIM_OC3_SetConfig+0xe4>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d003      	beq.n	8008932 <TIM_OC3_SetConfig+0x66>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a21      	ldr	r2, [pc, #132]	; (80089b4 <TIM_OC3_SetConfig+0xe8>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d10d      	bne.n	800894e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008938:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	021b      	lsls	r3, r3, #8
 8008940:	697a      	ldr	r2, [r7, #20]
 8008942:	4313      	orrs	r3, r2
 8008944:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800894c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4a17      	ldr	r2, [pc, #92]	; (80089b0 <TIM_OC3_SetConfig+0xe4>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d003      	beq.n	800895e <TIM_OC3_SetConfig+0x92>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a16      	ldr	r2, [pc, #88]	; (80089b4 <TIM_OC3_SetConfig+0xe8>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d113      	bne.n	8008986 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008964:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800896c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	695b      	ldr	r3, [r3, #20]
 8008972:	011b      	lsls	r3, r3, #4
 8008974:	693a      	ldr	r2, [r7, #16]
 8008976:	4313      	orrs	r3, r2
 8008978:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	699b      	ldr	r3, [r3, #24]
 800897e:	011b      	lsls	r3, r3, #4
 8008980:	693a      	ldr	r2, [r7, #16]
 8008982:	4313      	orrs	r3, r2
 8008984:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	693a      	ldr	r2, [r7, #16]
 800898a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	685a      	ldr	r2, [r3, #4]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	697a      	ldr	r2, [r7, #20]
 800899e:	621a      	str	r2, [r3, #32]
}
 80089a0:	bf00      	nop
 80089a2:	371c      	adds	r7, #28
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr
 80089ac:	fffeff8f 	.word	0xfffeff8f
 80089b0:	40010000 	.word	0x40010000
 80089b4:	40010400 	.word	0x40010400

080089b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b087      	sub	sp, #28
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a1b      	ldr	r3, [r3, #32]
 80089c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a1b      	ldr	r3, [r3, #32]
 80089d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	69db      	ldr	r3, [r3, #28]
 80089de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	4b1e      	ldr	r3, [pc, #120]	; (8008a5c <TIM_OC4_SetConfig+0xa4>)
 80089e4:	4013      	ands	r3, r2
 80089e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	021b      	lsls	r3, r3, #8
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	031b      	lsls	r3, r3, #12
 8008a0a:	693a      	ldr	r2, [r7, #16]
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4a13      	ldr	r2, [pc, #76]	; (8008a60 <TIM_OC4_SetConfig+0xa8>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d003      	beq.n	8008a20 <TIM_OC4_SetConfig+0x68>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	4a12      	ldr	r2, [pc, #72]	; (8008a64 <TIM_OC4_SetConfig+0xac>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d109      	bne.n	8008a34 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	695b      	ldr	r3, [r3, #20]
 8008a2c:	019b      	lsls	r3, r3, #6
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	697a      	ldr	r2, [r7, #20]
 8008a38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	68fa      	ldr	r2, [r7, #12]
 8008a3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	685a      	ldr	r2, [r3, #4]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	693a      	ldr	r2, [r7, #16]
 8008a4c:	621a      	str	r2, [r3, #32]
}
 8008a4e:	bf00      	nop
 8008a50:	371c      	adds	r7, #28
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	feff8fff 	.word	0xfeff8fff
 8008a60:	40010000 	.word	0x40010000
 8008a64:	40010400 	.word	0x40010400

08008a68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b087      	sub	sp, #28
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a1b      	ldr	r3, [r3, #32]
 8008a76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6a1b      	ldr	r3, [r3, #32]
 8008a82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	4b1b      	ldr	r3, [pc, #108]	; (8008b00 <TIM_OC5_SetConfig+0x98>)
 8008a94:	4013      	ands	r3, r2
 8008a96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008aa8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	041b      	lsls	r3, r3, #16
 8008ab0:	693a      	ldr	r2, [r7, #16]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4a12      	ldr	r2, [pc, #72]	; (8008b04 <TIM_OC5_SetConfig+0x9c>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d003      	beq.n	8008ac6 <TIM_OC5_SetConfig+0x5e>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a11      	ldr	r2, [pc, #68]	; (8008b08 <TIM_OC5_SetConfig+0xa0>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d109      	bne.n	8008ada <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008acc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	695b      	ldr	r3, [r3, #20]
 8008ad2:	021b      	lsls	r3, r3, #8
 8008ad4:	697a      	ldr	r2, [r7, #20]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	697a      	ldr	r2, [r7, #20]
 8008ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	68fa      	ldr	r2, [r7, #12]
 8008ae4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	685a      	ldr	r2, [r3, #4]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	693a      	ldr	r2, [r7, #16]
 8008af2:	621a      	str	r2, [r3, #32]
}
 8008af4:	bf00      	nop
 8008af6:	371c      	adds	r7, #28
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr
 8008b00:	fffeff8f 	.word	0xfffeff8f
 8008b04:	40010000 	.word	0x40010000
 8008b08:	40010400 	.word	0x40010400

08008b0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b087      	sub	sp, #28
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6a1b      	ldr	r3, [r3, #32]
 8008b1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a1b      	ldr	r3, [r3, #32]
 8008b26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	4b1c      	ldr	r3, [pc, #112]	; (8008ba8 <TIM_OC6_SetConfig+0x9c>)
 8008b38:	4013      	ands	r3, r2
 8008b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	021b      	lsls	r3, r3, #8
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	051b      	lsls	r3, r3, #20
 8008b56:	693a      	ldr	r2, [r7, #16]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4a13      	ldr	r2, [pc, #76]	; (8008bac <TIM_OC6_SetConfig+0xa0>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d003      	beq.n	8008b6c <TIM_OC6_SetConfig+0x60>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4a12      	ldr	r2, [pc, #72]	; (8008bb0 <TIM_OC6_SetConfig+0xa4>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d109      	bne.n	8008b80 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	695b      	ldr	r3, [r3, #20]
 8008b78:	029b      	lsls	r3, r3, #10
 8008b7a:	697a      	ldr	r2, [r7, #20]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	697a      	ldr	r2, [r7, #20]
 8008b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	68fa      	ldr	r2, [r7, #12]
 8008b8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	685a      	ldr	r2, [r3, #4]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	693a      	ldr	r2, [r7, #16]
 8008b98:	621a      	str	r2, [r3, #32]
}
 8008b9a:	bf00      	nop
 8008b9c:	371c      	adds	r7, #28
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop
 8008ba8:	feff8fff 	.word	0xfeff8fff
 8008bac:	40010000 	.word	0x40010000
 8008bb0:	40010400 	.word	0x40010400

08008bb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b087      	sub	sp, #28
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6a1b      	ldr	r3, [r3, #32]
 8008bc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	6a1b      	ldr	r3, [r3, #32]
 8008bca:	f023 0201 	bic.w	r2, r3, #1
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	699b      	ldr	r3, [r3, #24]
 8008bd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008bde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	011b      	lsls	r3, r3, #4
 8008be4:	693a      	ldr	r2, [r7, #16]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f023 030a 	bic.w	r3, r3, #10
 8008bf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	693a      	ldr	r2, [r7, #16]
 8008bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	697a      	ldr	r2, [r7, #20]
 8008c04:	621a      	str	r2, [r3, #32]
}
 8008c06:	bf00      	nop
 8008c08:	371c      	adds	r7, #28
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr

08008c12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c12:	b480      	push	{r7}
 8008c14:	b087      	sub	sp, #28
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	60f8      	str	r0, [r7, #12]
 8008c1a:	60b9      	str	r1, [r7, #8]
 8008c1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6a1b      	ldr	r3, [r3, #32]
 8008c22:	f023 0210 	bic.w	r2, r3, #16
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6a1b      	ldr	r3, [r3, #32]
 8008c34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	031b      	lsls	r3, r3, #12
 8008c42:	697a      	ldr	r2, [r7, #20]
 8008c44:	4313      	orrs	r3, r2
 8008c46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	011b      	lsls	r3, r3, #4
 8008c54:	693a      	ldr	r2, [r7, #16]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	697a      	ldr	r2, [r7, #20]
 8008c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	621a      	str	r2, [r3, #32]
}
 8008c66:	bf00      	nop
 8008c68:	371c      	adds	r7, #28
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr

08008c72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c72:	b480      	push	{r7}
 8008c74:	b085      	sub	sp, #20
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
 8008c7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c8a:	683a      	ldr	r2, [r7, #0]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	f043 0307 	orr.w	r3, r3, #7
 8008c94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	609a      	str	r2, [r3, #8]
}
 8008c9c:	bf00      	nop
 8008c9e:	3714      	adds	r7, #20
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b087      	sub	sp, #28
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	607a      	str	r2, [r7, #4]
 8008cb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008cc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	021a      	lsls	r2, r3, #8
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	431a      	orrs	r2, r3
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	697a      	ldr	r2, [r7, #20]
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	697a      	ldr	r2, [r7, #20]
 8008cda:	609a      	str	r2, [r3, #8]
}
 8008cdc:	bf00      	nop
 8008cde:	371c      	adds	r7, #28
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b087      	sub	sp, #28
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	f003 031f 	and.w	r3, r3, #31
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8008d00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6a1a      	ldr	r2, [r3, #32]
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	43db      	mvns	r3, r3
 8008d0a:	401a      	ands	r2, r3
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6a1a      	ldr	r2, [r3, #32]
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	f003 031f 	and.w	r3, r3, #31
 8008d1a:	6879      	ldr	r1, [r7, #4]
 8008d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8008d20:	431a      	orrs	r2, r3
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	621a      	str	r2, [r3, #32]
}
 8008d26:	bf00      	nop
 8008d28:	371c      	adds	r7, #28
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
	...

08008d34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b085      	sub	sp, #20
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d101      	bne.n	8008d4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d48:	2302      	movs	r3, #2
 8008d4a:	e06d      	b.n	8008e28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2202      	movs	r2, #2
 8008d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a30      	ldr	r2, [pc, #192]	; (8008e34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d004      	beq.n	8008d80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a2f      	ldr	r2, [pc, #188]	; (8008e38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d108      	bne.n	8008d92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008d86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	68fa      	ldr	r2, [r7, #12]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	68fa      	ldr	r2, [r7, #12]
 8008da0:	4313      	orrs	r3, r2
 8008da2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a20      	ldr	r2, [pc, #128]	; (8008e34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d022      	beq.n	8008dfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dbe:	d01d      	beq.n	8008dfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a1d      	ldr	r2, [pc, #116]	; (8008e3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d018      	beq.n	8008dfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a1c      	ldr	r2, [pc, #112]	; (8008e40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d013      	beq.n	8008dfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a1a      	ldr	r2, [pc, #104]	; (8008e44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d00e      	beq.n	8008dfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a15      	ldr	r2, [pc, #84]	; (8008e38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d009      	beq.n	8008dfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a16      	ldr	r2, [pc, #88]	; (8008e48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d004      	beq.n	8008dfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a15      	ldr	r2, [pc, #84]	; (8008e4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d10c      	bne.n	8008e16 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	68ba      	ldr	r2, [r7, #8]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	68ba      	ldr	r2, [r7, #8]
 8008e14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e26:	2300      	movs	r3, #0
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3714      	adds	r7, #20
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr
 8008e34:	40010000 	.word	0x40010000
 8008e38:	40010400 	.word	0x40010400
 8008e3c:	40000400 	.word	0x40000400
 8008e40:	40000800 	.word	0x40000800
 8008e44:	40000c00 	.word	0x40000c00
 8008e48:	40014000 	.word	0x40014000
 8008e4c:	40001800 	.word	0x40001800

08008e50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e58:	bf00      	nop
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e6c:	bf00      	nop
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008e80:	bf00      	nop
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d101      	bne.n	8008e9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e040      	b.n	8008f20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d106      	bne.n	8008eb4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f7fa fd10 	bl	80038d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2224      	movs	r2, #36	; 0x24
 8008eb8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f022 0201 	bic.w	r2, r2, #1
 8008ec8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 fbe6 	bl	800969c <UART_SetConfig>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d101      	bne.n	8008eda <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e022      	b.n	8008f20 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d002      	beq.n	8008ee8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 fe3e 	bl	8009b64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	685a      	ldr	r2, [r3, #4]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ef6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	689a      	ldr	r2, [r3, #8]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f042 0201 	orr.w	r2, r2, #1
 8008f16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 fec5 	bl	8009ca8 <UART_CheckIdleState>
 8008f1e:	4603      	mov	r3, r0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3708      	adds	r7, #8
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b08a      	sub	sp, #40	; 0x28
 8008f2c:	af02      	add	r7, sp, #8
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	603b      	str	r3, [r7, #0]
 8008f34:	4613      	mov	r3, r2
 8008f36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f3c:	2b20      	cmp	r3, #32
 8008f3e:	d171      	bne.n	8009024 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d002      	beq.n	8008f4c <HAL_UART_Transmit+0x24>
 8008f46:	88fb      	ldrh	r3, [r7, #6]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d101      	bne.n	8008f50 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e06a      	b.n	8009026 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2221      	movs	r2, #33	; 0x21
 8008f5c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f5e:	f7fa fd9b 	bl	8003a98 <HAL_GetTick>
 8008f62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	88fa      	ldrh	r2, [r7, #6]
 8008f68:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	88fa      	ldrh	r2, [r7, #6]
 8008f70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f7c:	d108      	bne.n	8008f90 <HAL_UART_Transmit+0x68>
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	691b      	ldr	r3, [r3, #16]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d104      	bne.n	8008f90 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008f86:	2300      	movs	r3, #0
 8008f88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	61bb      	str	r3, [r7, #24]
 8008f8e:	e003      	b.n	8008f98 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f94:	2300      	movs	r3, #0
 8008f96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008f98:	e02c      	b.n	8008ff4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	9300      	str	r3, [sp, #0]
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	2180      	movs	r1, #128	; 0x80
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f000 feb6 	bl	8009d16 <UART_WaitOnFlagUntilTimeout>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d001      	beq.n	8008fb4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	e038      	b.n	8009026 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008fb4:	69fb      	ldr	r3, [r7, #28]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d10b      	bne.n	8008fd2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	881b      	ldrh	r3, [r3, #0]
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008fc8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	3302      	adds	r3, #2
 8008fce:	61bb      	str	r3, [r7, #24]
 8008fd0:	e007      	b.n	8008fe2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	781a      	ldrb	r2, [r3, #0]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	3301      	adds	r3, #1
 8008fe0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	3b01      	subs	r3, #1
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d1cc      	bne.n	8008f9a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	9300      	str	r3, [sp, #0]
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	2200      	movs	r2, #0
 8009008:	2140      	movs	r1, #64	; 0x40
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f000 fe83 	bl	8009d16 <UART_WaitOnFlagUntilTimeout>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d001      	beq.n	800901a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8009016:	2303      	movs	r3, #3
 8009018:	e005      	b.n	8009026 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2220      	movs	r2, #32
 800901e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009020:	2300      	movs	r3, #0
 8009022:	e000      	b.n	8009026 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8009024:	2302      	movs	r3, #2
  }
}
 8009026:	4618      	mov	r0, r3
 8009028:	3720      	adds	r7, #32
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800902e:	b580      	push	{r7, lr}
 8009030:	b08a      	sub	sp, #40	; 0x28
 8009032:	af00      	add	r7, sp, #0
 8009034:	60f8      	str	r0, [r7, #12]
 8009036:	60b9      	str	r1, [r7, #8]
 8009038:	4613      	mov	r3, r2
 800903a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009042:	2b20      	cmp	r3, #32
 8009044:	d132      	bne.n	80090ac <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d002      	beq.n	8009052 <HAL_UART_Receive_IT+0x24>
 800904c:	88fb      	ldrh	r3, [r7, #6]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d101      	bne.n	8009056 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009052:	2301      	movs	r3, #1
 8009054:	e02b      	b.n	80090ae <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2200      	movs	r2, #0
 800905a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009066:	2b00      	cmp	r3, #0
 8009068:	d018      	beq.n	800909c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	e853 3f00 	ldrex	r3, [r3]
 8009076:	613b      	str	r3, [r7, #16]
   return(result);
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800907e:	627b      	str	r3, [r7, #36]	; 0x24
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	461a      	mov	r2, r3
 8009086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009088:	623b      	str	r3, [r7, #32]
 800908a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908c:	69f9      	ldr	r1, [r7, #28]
 800908e:	6a3a      	ldr	r2, [r7, #32]
 8009090:	e841 2300 	strex	r3, r2, [r1]
 8009094:	61bb      	str	r3, [r7, #24]
   return(result);
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d1e6      	bne.n	800906a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800909c:	88fb      	ldrh	r3, [r7, #6]
 800909e:	461a      	mov	r2, r3
 80090a0:	68b9      	ldr	r1, [r7, #8]
 80090a2:	68f8      	ldr	r0, [r7, #12]
 80090a4:	f000 fefe 	bl	8009ea4 <UART_Start_Receive_IT>
 80090a8:	4603      	mov	r3, r0
 80090aa:	e000      	b.n	80090ae <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80090ac:	2302      	movs	r3, #2
  }
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3728      	adds	r7, #40	; 0x28
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
	...

080090b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b0ba      	sub	sp, #232	; 0xe8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	69db      	ldr	r3, [r3, #28]
 80090c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80090de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80090e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80090e6:	4013      	ands	r3, r2
 80090e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80090ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d115      	bne.n	8009120 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80090f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090f8:	f003 0320 	and.w	r3, r3, #32
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d00f      	beq.n	8009120 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009104:	f003 0320 	and.w	r3, r3, #32
 8009108:	2b00      	cmp	r3, #0
 800910a:	d009      	beq.n	8009120 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009110:	2b00      	cmp	r3, #0
 8009112:	f000 8297 	beq.w	8009644 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	4798      	blx	r3
      }
      return;
 800911e:	e291      	b.n	8009644 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009120:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009124:	2b00      	cmp	r3, #0
 8009126:	f000 8117 	beq.w	8009358 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800912a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800912e:	f003 0301 	and.w	r3, r3, #1
 8009132:	2b00      	cmp	r3, #0
 8009134:	d106      	bne.n	8009144 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009136:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800913a:	4b85      	ldr	r3, [pc, #532]	; (8009350 <HAL_UART_IRQHandler+0x298>)
 800913c:	4013      	ands	r3, r2
 800913e:	2b00      	cmp	r3, #0
 8009140:	f000 810a 	beq.w	8009358 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009148:	f003 0301 	and.w	r3, r3, #1
 800914c:	2b00      	cmp	r3, #0
 800914e:	d011      	beq.n	8009174 <HAL_UART_IRQHandler+0xbc>
 8009150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009158:	2b00      	cmp	r3, #0
 800915a:	d00b      	beq.n	8009174 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2201      	movs	r2, #1
 8009162:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800916a:	f043 0201 	orr.w	r2, r3, #1
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009178:	f003 0302 	and.w	r3, r3, #2
 800917c:	2b00      	cmp	r3, #0
 800917e:	d011      	beq.n	80091a4 <HAL_UART_IRQHandler+0xec>
 8009180:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009184:	f003 0301 	and.w	r3, r3, #1
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00b      	beq.n	80091a4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2202      	movs	r2, #2
 8009192:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800919a:	f043 0204 	orr.w	r2, r3, #4
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091a8:	f003 0304 	and.w	r3, r3, #4
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d011      	beq.n	80091d4 <HAL_UART_IRQHandler+0x11c>
 80091b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091b4:	f003 0301 	and.w	r3, r3, #1
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d00b      	beq.n	80091d4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2204      	movs	r2, #4
 80091c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091ca:	f043 0202 	orr.w	r2, r3, #2
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80091d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091d8:	f003 0308 	and.w	r3, r3, #8
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d017      	beq.n	8009210 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80091e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091e4:	f003 0320 	and.w	r3, r3, #32
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d105      	bne.n	80091f8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80091ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091f0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d00b      	beq.n	8009210 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2208      	movs	r2, #8
 80091fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009206:	f043 0208 	orr.w	r2, r3, #8
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009214:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009218:	2b00      	cmp	r3, #0
 800921a:	d012      	beq.n	8009242 <HAL_UART_IRQHandler+0x18a>
 800921c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009220:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009224:	2b00      	cmp	r3, #0
 8009226:	d00c      	beq.n	8009242 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009230:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009238:	f043 0220 	orr.w	r2, r3, #32
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009248:	2b00      	cmp	r3, #0
 800924a:	f000 81fd 	beq.w	8009648 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800924e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009252:	f003 0320 	and.w	r3, r3, #32
 8009256:	2b00      	cmp	r3, #0
 8009258:	d00d      	beq.n	8009276 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800925a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800925e:	f003 0320 	and.w	r3, r3, #32
 8009262:	2b00      	cmp	r3, #0
 8009264:	d007      	beq.n	8009276 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800926a:	2b00      	cmp	r3, #0
 800926c:	d003      	beq.n	8009276 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800927c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800928a:	2b40      	cmp	r3, #64	; 0x40
 800928c:	d005      	beq.n	800929a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800928e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009292:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009296:	2b00      	cmp	r3, #0
 8009298:	d04f      	beq.n	800933a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 fec8 	bl	800a030 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092aa:	2b40      	cmp	r3, #64	; 0x40
 80092ac:	d141      	bne.n	8009332 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	3308      	adds	r3, #8
 80092b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80092bc:	e853 3f00 	ldrex	r3, [r3]
 80092c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80092c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	3308      	adds	r3, #8
 80092d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80092da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80092de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80092e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80092ea:	e841 2300 	strex	r3, r2, [r1]
 80092ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80092f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d1d9      	bne.n	80092ae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d013      	beq.n	800932a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009306:	4a13      	ldr	r2, [pc, #76]	; (8009354 <HAL_UART_IRQHandler+0x29c>)
 8009308:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800930e:	4618      	mov	r0, r3
 8009310:	f7fb fb54 	bl	80049bc <HAL_DMA_Abort_IT>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	d017      	beq.n	800934a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800931e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009324:	4610      	mov	r0, r2
 8009326:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009328:	e00f      	b.n	800934a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 f9a0 	bl	8009670 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009330:	e00b      	b.n	800934a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 f99c 	bl	8009670 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009338:	e007      	b.n	800934a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 f998 	bl	8009670 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2200      	movs	r2, #0
 8009344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8009348:	e17e      	b.n	8009648 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800934a:	bf00      	nop
    return;
 800934c:	e17c      	b.n	8009648 <HAL_UART_IRQHandler+0x590>
 800934e:	bf00      	nop
 8009350:	04000120 	.word	0x04000120
 8009354:	0800a0f9 	.word	0x0800a0f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800935c:	2b01      	cmp	r3, #1
 800935e:	f040 814c 	bne.w	80095fa <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009366:	f003 0310 	and.w	r3, r3, #16
 800936a:	2b00      	cmp	r3, #0
 800936c:	f000 8145 	beq.w	80095fa <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009374:	f003 0310 	and.w	r3, r3, #16
 8009378:	2b00      	cmp	r3, #0
 800937a:	f000 813e 	beq.w	80095fa <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2210      	movs	r2, #16
 8009384:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009390:	2b40      	cmp	r3, #64	; 0x40
 8009392:	f040 80b6 	bne.w	8009502 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80093a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	f000 8150 	beq.w	800964c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80093b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80093b6:	429a      	cmp	r2, r3
 80093b8:	f080 8148 	bcs.w	800964c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80093c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093ca:	69db      	ldr	r3, [r3, #28]
 80093cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093d0:	f000 8086 	beq.w	80094e0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80093e0:	e853 3f00 	ldrex	r3, [r3]
 80093e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80093e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80093ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	461a      	mov	r2, r3
 80093fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80093fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009402:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009406:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800940a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800940e:	e841 2300 	strex	r3, r2, [r1]
 8009412:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009416:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1da      	bne.n	80093d4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	3308      	adds	r3, #8
 8009424:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009426:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009428:	e853 3f00 	ldrex	r3, [r3]
 800942c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800942e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009430:	f023 0301 	bic.w	r3, r3, #1
 8009434:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	3308      	adds	r3, #8
 800943e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009442:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009446:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009448:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800944a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800944e:	e841 2300 	strex	r3, r2, [r1]
 8009452:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009454:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009456:	2b00      	cmp	r3, #0
 8009458:	d1e1      	bne.n	800941e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	3308      	adds	r3, #8
 8009460:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009462:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009464:	e853 3f00 	ldrex	r3, [r3]
 8009468:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800946a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800946c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009470:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	3308      	adds	r3, #8
 800947a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800947e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009480:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009482:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009484:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009486:	e841 2300 	strex	r3, r2, [r1]
 800948a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800948c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800948e:	2b00      	cmp	r3, #0
 8009490:	d1e3      	bne.n	800945a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2220      	movs	r2, #32
 8009496:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094a8:	e853 3f00 	ldrex	r3, [r3]
 80094ac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80094ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094b0:	f023 0310 	bic.w	r3, r3, #16
 80094b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	461a      	mov	r2, r3
 80094be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80094c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80094c4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80094c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80094ca:	e841 2300 	strex	r3, r2, [r1]
 80094ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80094d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d1e4      	bne.n	80094a0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094da:	4618      	mov	r0, r3
 80094dc:	f7fb f9fe 	bl	80048dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2202      	movs	r2, #2
 80094e4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	1ad3      	subs	r3, r2, r3
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	4619      	mov	r1, r3
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 f8c2 	bl	8009684 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009500:	e0a4      	b.n	800964c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800950e:	b29b      	uxth	r3, r3
 8009510:	1ad3      	subs	r3, r2, r3
 8009512:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800951c:	b29b      	uxth	r3, r3
 800951e:	2b00      	cmp	r3, #0
 8009520:	f000 8096 	beq.w	8009650 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8009524:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009528:	2b00      	cmp	r3, #0
 800952a:	f000 8091 	beq.w	8009650 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009536:	e853 3f00 	ldrex	r3, [r3]
 800953a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800953c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800953e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009542:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	461a      	mov	r2, r3
 800954c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009550:	647b      	str	r3, [r7, #68]	; 0x44
 8009552:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009554:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009556:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009558:	e841 2300 	strex	r3, r2, [r1]
 800955c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800955e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009560:	2b00      	cmp	r3, #0
 8009562:	d1e4      	bne.n	800952e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	3308      	adds	r3, #8
 800956a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800956c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956e:	e853 3f00 	ldrex	r3, [r3]
 8009572:	623b      	str	r3, [r7, #32]
   return(result);
 8009574:	6a3b      	ldr	r3, [r7, #32]
 8009576:	f023 0301 	bic.w	r3, r3, #1
 800957a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	3308      	adds	r3, #8
 8009584:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009588:	633a      	str	r2, [r7, #48]	; 0x30
 800958a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800958e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009590:	e841 2300 	strex	r3, r2, [r1]
 8009594:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009598:	2b00      	cmp	r3, #0
 800959a:	d1e3      	bne.n	8009564 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2220      	movs	r2, #32
 80095a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	e853 3f00 	ldrex	r3, [r3]
 80095bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f023 0310 	bic.w	r3, r3, #16
 80095c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	461a      	mov	r2, r3
 80095ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80095d2:	61fb      	str	r3, [r7, #28]
 80095d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d6:	69b9      	ldr	r1, [r7, #24]
 80095d8:	69fa      	ldr	r2, [r7, #28]
 80095da:	e841 2300 	strex	r3, r2, [r1]
 80095de:	617b      	str	r3, [r7, #20]
   return(result);
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d1e4      	bne.n	80095b0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2202      	movs	r2, #2
 80095ea:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80095ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80095f0:	4619      	mov	r1, r3
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 f846 	bl	8009684 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80095f8:	e02a      	b.n	8009650 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80095fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009602:	2b00      	cmp	r3, #0
 8009604:	d00e      	beq.n	8009624 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800960a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800960e:	2b00      	cmp	r3, #0
 8009610:	d008      	beq.n	8009624 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009616:	2b00      	cmp	r3, #0
 8009618:	d01c      	beq.n	8009654 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	4798      	blx	r3
    }
    return;
 8009622:	e017      	b.n	8009654 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800962c:	2b00      	cmp	r3, #0
 800962e:	d012      	beq.n	8009656 <HAL_UART_IRQHandler+0x59e>
 8009630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009638:	2b00      	cmp	r3, #0
 800963a:	d00c      	beq.n	8009656 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f000 fd71 	bl	800a124 <UART_EndTransmit_IT>
    return;
 8009642:	e008      	b.n	8009656 <HAL_UART_IRQHandler+0x59e>
      return;
 8009644:	bf00      	nop
 8009646:	e006      	b.n	8009656 <HAL_UART_IRQHandler+0x59e>
    return;
 8009648:	bf00      	nop
 800964a:	e004      	b.n	8009656 <HAL_UART_IRQHandler+0x59e>
      return;
 800964c:	bf00      	nop
 800964e:	e002      	b.n	8009656 <HAL_UART_IRQHandler+0x59e>
      return;
 8009650:	bf00      	nop
 8009652:	e000      	b.n	8009656 <HAL_UART_IRQHandler+0x59e>
    return;
 8009654:	bf00      	nop
  }

}
 8009656:	37e8      	adds	r7, #232	; 0xe8
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009664:	bf00      	nop
 8009666:	370c      	adds	r7, #12
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009678:	bf00      	nop
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	460b      	mov	r3, r1
 800968e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009690:	bf00      	nop
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b088      	sub	sp, #32
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80096a4:	2300      	movs	r3, #0
 80096a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	689a      	ldr	r2, [r3, #8]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	691b      	ldr	r3, [r3, #16]
 80096b0:	431a      	orrs	r2, r3
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	695b      	ldr	r3, [r3, #20]
 80096b6:	431a      	orrs	r2, r3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	69db      	ldr	r3, [r3, #28]
 80096bc:	4313      	orrs	r3, r2
 80096be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	4ba6      	ldr	r3, [pc, #664]	; (8009960 <UART_SetConfig+0x2c4>)
 80096c8:	4013      	ands	r3, r2
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	6812      	ldr	r2, [r2, #0]
 80096ce:	6979      	ldr	r1, [r7, #20]
 80096d0:	430b      	orrs	r3, r1
 80096d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	68da      	ldr	r2, [r3, #12]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	430a      	orrs	r2, r1
 80096e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	699b      	ldr	r3, [r3, #24]
 80096ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6a1b      	ldr	r3, [r3, #32]
 80096f4:	697a      	ldr	r2, [r7, #20]
 80096f6:	4313      	orrs	r3, r2
 80096f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	689b      	ldr	r3, [r3, #8]
 8009700:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	697a      	ldr	r2, [r7, #20]
 800970a:	430a      	orrs	r2, r1
 800970c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4a94      	ldr	r2, [pc, #592]	; (8009964 <UART_SetConfig+0x2c8>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d120      	bne.n	800975a <UART_SetConfig+0xbe>
 8009718:	4b93      	ldr	r3, [pc, #588]	; (8009968 <UART_SetConfig+0x2cc>)
 800971a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800971e:	f003 0303 	and.w	r3, r3, #3
 8009722:	2b03      	cmp	r3, #3
 8009724:	d816      	bhi.n	8009754 <UART_SetConfig+0xb8>
 8009726:	a201      	add	r2, pc, #4	; (adr r2, 800972c <UART_SetConfig+0x90>)
 8009728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800972c:	0800973d 	.word	0x0800973d
 8009730:	08009749 	.word	0x08009749
 8009734:	08009743 	.word	0x08009743
 8009738:	0800974f 	.word	0x0800974f
 800973c:	2301      	movs	r3, #1
 800973e:	77fb      	strb	r3, [r7, #31]
 8009740:	e150      	b.n	80099e4 <UART_SetConfig+0x348>
 8009742:	2302      	movs	r3, #2
 8009744:	77fb      	strb	r3, [r7, #31]
 8009746:	e14d      	b.n	80099e4 <UART_SetConfig+0x348>
 8009748:	2304      	movs	r3, #4
 800974a:	77fb      	strb	r3, [r7, #31]
 800974c:	e14a      	b.n	80099e4 <UART_SetConfig+0x348>
 800974e:	2308      	movs	r3, #8
 8009750:	77fb      	strb	r3, [r7, #31]
 8009752:	e147      	b.n	80099e4 <UART_SetConfig+0x348>
 8009754:	2310      	movs	r3, #16
 8009756:	77fb      	strb	r3, [r7, #31]
 8009758:	e144      	b.n	80099e4 <UART_SetConfig+0x348>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a83      	ldr	r2, [pc, #524]	; (800996c <UART_SetConfig+0x2d0>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d132      	bne.n	80097ca <UART_SetConfig+0x12e>
 8009764:	4b80      	ldr	r3, [pc, #512]	; (8009968 <UART_SetConfig+0x2cc>)
 8009766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800976a:	f003 030c 	and.w	r3, r3, #12
 800976e:	2b0c      	cmp	r3, #12
 8009770:	d828      	bhi.n	80097c4 <UART_SetConfig+0x128>
 8009772:	a201      	add	r2, pc, #4	; (adr r2, 8009778 <UART_SetConfig+0xdc>)
 8009774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009778:	080097ad 	.word	0x080097ad
 800977c:	080097c5 	.word	0x080097c5
 8009780:	080097c5 	.word	0x080097c5
 8009784:	080097c5 	.word	0x080097c5
 8009788:	080097b9 	.word	0x080097b9
 800978c:	080097c5 	.word	0x080097c5
 8009790:	080097c5 	.word	0x080097c5
 8009794:	080097c5 	.word	0x080097c5
 8009798:	080097b3 	.word	0x080097b3
 800979c:	080097c5 	.word	0x080097c5
 80097a0:	080097c5 	.word	0x080097c5
 80097a4:	080097c5 	.word	0x080097c5
 80097a8:	080097bf 	.word	0x080097bf
 80097ac:	2300      	movs	r3, #0
 80097ae:	77fb      	strb	r3, [r7, #31]
 80097b0:	e118      	b.n	80099e4 <UART_SetConfig+0x348>
 80097b2:	2302      	movs	r3, #2
 80097b4:	77fb      	strb	r3, [r7, #31]
 80097b6:	e115      	b.n	80099e4 <UART_SetConfig+0x348>
 80097b8:	2304      	movs	r3, #4
 80097ba:	77fb      	strb	r3, [r7, #31]
 80097bc:	e112      	b.n	80099e4 <UART_SetConfig+0x348>
 80097be:	2308      	movs	r3, #8
 80097c0:	77fb      	strb	r3, [r7, #31]
 80097c2:	e10f      	b.n	80099e4 <UART_SetConfig+0x348>
 80097c4:	2310      	movs	r3, #16
 80097c6:	77fb      	strb	r3, [r7, #31]
 80097c8:	e10c      	b.n	80099e4 <UART_SetConfig+0x348>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a68      	ldr	r2, [pc, #416]	; (8009970 <UART_SetConfig+0x2d4>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d120      	bne.n	8009816 <UART_SetConfig+0x17a>
 80097d4:	4b64      	ldr	r3, [pc, #400]	; (8009968 <UART_SetConfig+0x2cc>)
 80097d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80097de:	2b30      	cmp	r3, #48	; 0x30
 80097e0:	d013      	beq.n	800980a <UART_SetConfig+0x16e>
 80097e2:	2b30      	cmp	r3, #48	; 0x30
 80097e4:	d814      	bhi.n	8009810 <UART_SetConfig+0x174>
 80097e6:	2b20      	cmp	r3, #32
 80097e8:	d009      	beq.n	80097fe <UART_SetConfig+0x162>
 80097ea:	2b20      	cmp	r3, #32
 80097ec:	d810      	bhi.n	8009810 <UART_SetConfig+0x174>
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d002      	beq.n	80097f8 <UART_SetConfig+0x15c>
 80097f2:	2b10      	cmp	r3, #16
 80097f4:	d006      	beq.n	8009804 <UART_SetConfig+0x168>
 80097f6:	e00b      	b.n	8009810 <UART_SetConfig+0x174>
 80097f8:	2300      	movs	r3, #0
 80097fa:	77fb      	strb	r3, [r7, #31]
 80097fc:	e0f2      	b.n	80099e4 <UART_SetConfig+0x348>
 80097fe:	2302      	movs	r3, #2
 8009800:	77fb      	strb	r3, [r7, #31]
 8009802:	e0ef      	b.n	80099e4 <UART_SetConfig+0x348>
 8009804:	2304      	movs	r3, #4
 8009806:	77fb      	strb	r3, [r7, #31]
 8009808:	e0ec      	b.n	80099e4 <UART_SetConfig+0x348>
 800980a:	2308      	movs	r3, #8
 800980c:	77fb      	strb	r3, [r7, #31]
 800980e:	e0e9      	b.n	80099e4 <UART_SetConfig+0x348>
 8009810:	2310      	movs	r3, #16
 8009812:	77fb      	strb	r3, [r7, #31]
 8009814:	e0e6      	b.n	80099e4 <UART_SetConfig+0x348>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a56      	ldr	r2, [pc, #344]	; (8009974 <UART_SetConfig+0x2d8>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d120      	bne.n	8009862 <UART_SetConfig+0x1c6>
 8009820:	4b51      	ldr	r3, [pc, #324]	; (8009968 <UART_SetConfig+0x2cc>)
 8009822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009826:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800982a:	2bc0      	cmp	r3, #192	; 0xc0
 800982c:	d013      	beq.n	8009856 <UART_SetConfig+0x1ba>
 800982e:	2bc0      	cmp	r3, #192	; 0xc0
 8009830:	d814      	bhi.n	800985c <UART_SetConfig+0x1c0>
 8009832:	2b80      	cmp	r3, #128	; 0x80
 8009834:	d009      	beq.n	800984a <UART_SetConfig+0x1ae>
 8009836:	2b80      	cmp	r3, #128	; 0x80
 8009838:	d810      	bhi.n	800985c <UART_SetConfig+0x1c0>
 800983a:	2b00      	cmp	r3, #0
 800983c:	d002      	beq.n	8009844 <UART_SetConfig+0x1a8>
 800983e:	2b40      	cmp	r3, #64	; 0x40
 8009840:	d006      	beq.n	8009850 <UART_SetConfig+0x1b4>
 8009842:	e00b      	b.n	800985c <UART_SetConfig+0x1c0>
 8009844:	2300      	movs	r3, #0
 8009846:	77fb      	strb	r3, [r7, #31]
 8009848:	e0cc      	b.n	80099e4 <UART_SetConfig+0x348>
 800984a:	2302      	movs	r3, #2
 800984c:	77fb      	strb	r3, [r7, #31]
 800984e:	e0c9      	b.n	80099e4 <UART_SetConfig+0x348>
 8009850:	2304      	movs	r3, #4
 8009852:	77fb      	strb	r3, [r7, #31]
 8009854:	e0c6      	b.n	80099e4 <UART_SetConfig+0x348>
 8009856:	2308      	movs	r3, #8
 8009858:	77fb      	strb	r3, [r7, #31]
 800985a:	e0c3      	b.n	80099e4 <UART_SetConfig+0x348>
 800985c:	2310      	movs	r3, #16
 800985e:	77fb      	strb	r3, [r7, #31]
 8009860:	e0c0      	b.n	80099e4 <UART_SetConfig+0x348>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a44      	ldr	r2, [pc, #272]	; (8009978 <UART_SetConfig+0x2dc>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d125      	bne.n	80098b8 <UART_SetConfig+0x21c>
 800986c:	4b3e      	ldr	r3, [pc, #248]	; (8009968 <UART_SetConfig+0x2cc>)
 800986e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009876:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800987a:	d017      	beq.n	80098ac <UART_SetConfig+0x210>
 800987c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009880:	d817      	bhi.n	80098b2 <UART_SetConfig+0x216>
 8009882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009886:	d00b      	beq.n	80098a0 <UART_SetConfig+0x204>
 8009888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800988c:	d811      	bhi.n	80098b2 <UART_SetConfig+0x216>
 800988e:	2b00      	cmp	r3, #0
 8009890:	d003      	beq.n	800989a <UART_SetConfig+0x1fe>
 8009892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009896:	d006      	beq.n	80098a6 <UART_SetConfig+0x20a>
 8009898:	e00b      	b.n	80098b2 <UART_SetConfig+0x216>
 800989a:	2300      	movs	r3, #0
 800989c:	77fb      	strb	r3, [r7, #31]
 800989e:	e0a1      	b.n	80099e4 <UART_SetConfig+0x348>
 80098a0:	2302      	movs	r3, #2
 80098a2:	77fb      	strb	r3, [r7, #31]
 80098a4:	e09e      	b.n	80099e4 <UART_SetConfig+0x348>
 80098a6:	2304      	movs	r3, #4
 80098a8:	77fb      	strb	r3, [r7, #31]
 80098aa:	e09b      	b.n	80099e4 <UART_SetConfig+0x348>
 80098ac:	2308      	movs	r3, #8
 80098ae:	77fb      	strb	r3, [r7, #31]
 80098b0:	e098      	b.n	80099e4 <UART_SetConfig+0x348>
 80098b2:	2310      	movs	r3, #16
 80098b4:	77fb      	strb	r3, [r7, #31]
 80098b6:	e095      	b.n	80099e4 <UART_SetConfig+0x348>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a2f      	ldr	r2, [pc, #188]	; (800997c <UART_SetConfig+0x2e0>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d125      	bne.n	800990e <UART_SetConfig+0x272>
 80098c2:	4b29      	ldr	r3, [pc, #164]	; (8009968 <UART_SetConfig+0x2cc>)
 80098c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80098cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80098d0:	d017      	beq.n	8009902 <UART_SetConfig+0x266>
 80098d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80098d6:	d817      	bhi.n	8009908 <UART_SetConfig+0x26c>
 80098d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098dc:	d00b      	beq.n	80098f6 <UART_SetConfig+0x25a>
 80098de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098e2:	d811      	bhi.n	8009908 <UART_SetConfig+0x26c>
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d003      	beq.n	80098f0 <UART_SetConfig+0x254>
 80098e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098ec:	d006      	beq.n	80098fc <UART_SetConfig+0x260>
 80098ee:	e00b      	b.n	8009908 <UART_SetConfig+0x26c>
 80098f0:	2301      	movs	r3, #1
 80098f2:	77fb      	strb	r3, [r7, #31]
 80098f4:	e076      	b.n	80099e4 <UART_SetConfig+0x348>
 80098f6:	2302      	movs	r3, #2
 80098f8:	77fb      	strb	r3, [r7, #31]
 80098fa:	e073      	b.n	80099e4 <UART_SetConfig+0x348>
 80098fc:	2304      	movs	r3, #4
 80098fe:	77fb      	strb	r3, [r7, #31]
 8009900:	e070      	b.n	80099e4 <UART_SetConfig+0x348>
 8009902:	2308      	movs	r3, #8
 8009904:	77fb      	strb	r3, [r7, #31]
 8009906:	e06d      	b.n	80099e4 <UART_SetConfig+0x348>
 8009908:	2310      	movs	r3, #16
 800990a:	77fb      	strb	r3, [r7, #31]
 800990c:	e06a      	b.n	80099e4 <UART_SetConfig+0x348>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a1b      	ldr	r2, [pc, #108]	; (8009980 <UART_SetConfig+0x2e4>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d138      	bne.n	800998a <UART_SetConfig+0x2ee>
 8009918:	4b13      	ldr	r3, [pc, #76]	; (8009968 <UART_SetConfig+0x2cc>)
 800991a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800991e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009922:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009926:	d017      	beq.n	8009958 <UART_SetConfig+0x2bc>
 8009928:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800992c:	d82a      	bhi.n	8009984 <UART_SetConfig+0x2e8>
 800992e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009932:	d00b      	beq.n	800994c <UART_SetConfig+0x2b0>
 8009934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009938:	d824      	bhi.n	8009984 <UART_SetConfig+0x2e8>
 800993a:	2b00      	cmp	r3, #0
 800993c:	d003      	beq.n	8009946 <UART_SetConfig+0x2aa>
 800993e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009942:	d006      	beq.n	8009952 <UART_SetConfig+0x2b6>
 8009944:	e01e      	b.n	8009984 <UART_SetConfig+0x2e8>
 8009946:	2300      	movs	r3, #0
 8009948:	77fb      	strb	r3, [r7, #31]
 800994a:	e04b      	b.n	80099e4 <UART_SetConfig+0x348>
 800994c:	2302      	movs	r3, #2
 800994e:	77fb      	strb	r3, [r7, #31]
 8009950:	e048      	b.n	80099e4 <UART_SetConfig+0x348>
 8009952:	2304      	movs	r3, #4
 8009954:	77fb      	strb	r3, [r7, #31]
 8009956:	e045      	b.n	80099e4 <UART_SetConfig+0x348>
 8009958:	2308      	movs	r3, #8
 800995a:	77fb      	strb	r3, [r7, #31]
 800995c:	e042      	b.n	80099e4 <UART_SetConfig+0x348>
 800995e:	bf00      	nop
 8009960:	efff69f3 	.word	0xefff69f3
 8009964:	40011000 	.word	0x40011000
 8009968:	40023800 	.word	0x40023800
 800996c:	40004400 	.word	0x40004400
 8009970:	40004800 	.word	0x40004800
 8009974:	40004c00 	.word	0x40004c00
 8009978:	40005000 	.word	0x40005000
 800997c:	40011400 	.word	0x40011400
 8009980:	40007800 	.word	0x40007800
 8009984:	2310      	movs	r3, #16
 8009986:	77fb      	strb	r3, [r7, #31]
 8009988:	e02c      	b.n	80099e4 <UART_SetConfig+0x348>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a72      	ldr	r2, [pc, #456]	; (8009b58 <UART_SetConfig+0x4bc>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d125      	bne.n	80099e0 <UART_SetConfig+0x344>
 8009994:	4b71      	ldr	r3, [pc, #452]	; (8009b5c <UART_SetConfig+0x4c0>)
 8009996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800999a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800999e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80099a2:	d017      	beq.n	80099d4 <UART_SetConfig+0x338>
 80099a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80099a8:	d817      	bhi.n	80099da <UART_SetConfig+0x33e>
 80099aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099ae:	d00b      	beq.n	80099c8 <UART_SetConfig+0x32c>
 80099b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099b4:	d811      	bhi.n	80099da <UART_SetConfig+0x33e>
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d003      	beq.n	80099c2 <UART_SetConfig+0x326>
 80099ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099be:	d006      	beq.n	80099ce <UART_SetConfig+0x332>
 80099c0:	e00b      	b.n	80099da <UART_SetConfig+0x33e>
 80099c2:	2300      	movs	r3, #0
 80099c4:	77fb      	strb	r3, [r7, #31]
 80099c6:	e00d      	b.n	80099e4 <UART_SetConfig+0x348>
 80099c8:	2302      	movs	r3, #2
 80099ca:	77fb      	strb	r3, [r7, #31]
 80099cc:	e00a      	b.n	80099e4 <UART_SetConfig+0x348>
 80099ce:	2304      	movs	r3, #4
 80099d0:	77fb      	strb	r3, [r7, #31]
 80099d2:	e007      	b.n	80099e4 <UART_SetConfig+0x348>
 80099d4:	2308      	movs	r3, #8
 80099d6:	77fb      	strb	r3, [r7, #31]
 80099d8:	e004      	b.n	80099e4 <UART_SetConfig+0x348>
 80099da:	2310      	movs	r3, #16
 80099dc:	77fb      	strb	r3, [r7, #31]
 80099de:	e001      	b.n	80099e4 <UART_SetConfig+0x348>
 80099e0:	2310      	movs	r3, #16
 80099e2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	69db      	ldr	r3, [r3, #28]
 80099e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099ec:	d15b      	bne.n	8009aa6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80099ee:	7ffb      	ldrb	r3, [r7, #31]
 80099f0:	2b08      	cmp	r3, #8
 80099f2:	d828      	bhi.n	8009a46 <UART_SetConfig+0x3aa>
 80099f4:	a201      	add	r2, pc, #4	; (adr r2, 80099fc <UART_SetConfig+0x360>)
 80099f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099fa:	bf00      	nop
 80099fc:	08009a21 	.word	0x08009a21
 8009a00:	08009a29 	.word	0x08009a29
 8009a04:	08009a31 	.word	0x08009a31
 8009a08:	08009a47 	.word	0x08009a47
 8009a0c:	08009a37 	.word	0x08009a37
 8009a10:	08009a47 	.word	0x08009a47
 8009a14:	08009a47 	.word	0x08009a47
 8009a18:	08009a47 	.word	0x08009a47
 8009a1c:	08009a3f 	.word	0x08009a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a20:	f7fc fd00 	bl	8006424 <HAL_RCC_GetPCLK1Freq>
 8009a24:	61b8      	str	r0, [r7, #24]
        break;
 8009a26:	e013      	b.n	8009a50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a28:	f7fc fd10 	bl	800644c <HAL_RCC_GetPCLK2Freq>
 8009a2c:	61b8      	str	r0, [r7, #24]
        break;
 8009a2e:	e00f      	b.n	8009a50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a30:	4b4b      	ldr	r3, [pc, #300]	; (8009b60 <UART_SetConfig+0x4c4>)
 8009a32:	61bb      	str	r3, [r7, #24]
        break;
 8009a34:	e00c      	b.n	8009a50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a36:	f7fc fbe3 	bl	8006200 <HAL_RCC_GetSysClockFreq>
 8009a3a:	61b8      	str	r0, [r7, #24]
        break;
 8009a3c:	e008      	b.n	8009a50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a42:	61bb      	str	r3, [r7, #24]
        break;
 8009a44:	e004      	b.n	8009a50 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009a46:	2300      	movs	r3, #0
 8009a48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	77bb      	strb	r3, [r7, #30]
        break;
 8009a4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d074      	beq.n	8009b40 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009a56:	69bb      	ldr	r3, [r7, #24]
 8009a58:	005a      	lsls	r2, r3, #1
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	085b      	lsrs	r3, r3, #1
 8009a60:	441a      	add	r2, r3
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	2b0f      	cmp	r3, #15
 8009a70:	d916      	bls.n	8009aa0 <UART_SetConfig+0x404>
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a78:	d212      	bcs.n	8009aa0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	f023 030f 	bic.w	r3, r3, #15
 8009a82:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	085b      	lsrs	r3, r3, #1
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	f003 0307 	and.w	r3, r3, #7
 8009a8e:	b29a      	uxth	r2, r3
 8009a90:	89fb      	ldrh	r3, [r7, #14]
 8009a92:	4313      	orrs	r3, r2
 8009a94:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	89fa      	ldrh	r2, [r7, #14]
 8009a9c:	60da      	str	r2, [r3, #12]
 8009a9e:	e04f      	b.n	8009b40 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	77bb      	strb	r3, [r7, #30]
 8009aa4:	e04c      	b.n	8009b40 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009aa6:	7ffb      	ldrb	r3, [r7, #31]
 8009aa8:	2b08      	cmp	r3, #8
 8009aaa:	d828      	bhi.n	8009afe <UART_SetConfig+0x462>
 8009aac:	a201      	add	r2, pc, #4	; (adr r2, 8009ab4 <UART_SetConfig+0x418>)
 8009aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab2:	bf00      	nop
 8009ab4:	08009ad9 	.word	0x08009ad9
 8009ab8:	08009ae1 	.word	0x08009ae1
 8009abc:	08009ae9 	.word	0x08009ae9
 8009ac0:	08009aff 	.word	0x08009aff
 8009ac4:	08009aef 	.word	0x08009aef
 8009ac8:	08009aff 	.word	0x08009aff
 8009acc:	08009aff 	.word	0x08009aff
 8009ad0:	08009aff 	.word	0x08009aff
 8009ad4:	08009af7 	.word	0x08009af7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ad8:	f7fc fca4 	bl	8006424 <HAL_RCC_GetPCLK1Freq>
 8009adc:	61b8      	str	r0, [r7, #24]
        break;
 8009ade:	e013      	b.n	8009b08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ae0:	f7fc fcb4 	bl	800644c <HAL_RCC_GetPCLK2Freq>
 8009ae4:	61b8      	str	r0, [r7, #24]
        break;
 8009ae6:	e00f      	b.n	8009b08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ae8:	4b1d      	ldr	r3, [pc, #116]	; (8009b60 <UART_SetConfig+0x4c4>)
 8009aea:	61bb      	str	r3, [r7, #24]
        break;
 8009aec:	e00c      	b.n	8009b08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009aee:	f7fc fb87 	bl	8006200 <HAL_RCC_GetSysClockFreq>
 8009af2:	61b8      	str	r0, [r7, #24]
        break;
 8009af4:	e008      	b.n	8009b08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009afa:	61bb      	str	r3, [r7, #24]
        break;
 8009afc:	e004      	b.n	8009b08 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009afe:	2300      	movs	r3, #0
 8009b00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	77bb      	strb	r3, [r7, #30]
        break;
 8009b06:	bf00      	nop
    }

    if (pclk != 0U)
 8009b08:	69bb      	ldr	r3, [r7, #24]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d018      	beq.n	8009b40 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	085a      	lsrs	r2, r3, #1
 8009b14:	69bb      	ldr	r3, [r7, #24]
 8009b16:	441a      	add	r2, r3
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b20:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	2b0f      	cmp	r3, #15
 8009b26:	d909      	bls.n	8009b3c <UART_SetConfig+0x4a0>
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b2e:	d205      	bcs.n	8009b3c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	b29a      	uxth	r2, r3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	60da      	str	r2, [r3, #12]
 8009b3a:	e001      	b.n	8009b40 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009b4c:	7fbb      	ldrb	r3, [r7, #30]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3720      	adds	r7, #32
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	40007c00 	.word	0x40007c00
 8009b5c:	40023800 	.word	0x40023800
 8009b60:	00f42400 	.word	0x00f42400

08009b64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b70:	f003 0301 	and.w	r3, r3, #1
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d00a      	beq.n	8009b8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	430a      	orrs	r2, r1
 8009b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b92:	f003 0302 	and.w	r3, r3, #2
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00a      	beq.n	8009bb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	430a      	orrs	r2, r1
 8009bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb4:	f003 0304 	and.w	r3, r3, #4
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d00a      	beq.n	8009bd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	430a      	orrs	r2, r1
 8009bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd6:	f003 0308 	and.w	r3, r3, #8
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d00a      	beq.n	8009bf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	430a      	orrs	r2, r1
 8009bf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf8:	f003 0310 	and.w	r3, r3, #16
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d00a      	beq.n	8009c16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	689b      	ldr	r3, [r3, #8]
 8009c06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	430a      	orrs	r2, r1
 8009c14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c1a:	f003 0320 	and.w	r3, r3, #32
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d00a      	beq.n	8009c38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	430a      	orrs	r2, r1
 8009c36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d01a      	beq.n	8009c7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	430a      	orrs	r2, r1
 8009c58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c62:	d10a      	bne.n	8009c7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	430a      	orrs	r2, r1
 8009c78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00a      	beq.n	8009c9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	430a      	orrs	r2, r1
 8009c9a:	605a      	str	r2, [r3, #4]
  }
}
 8009c9c:	bf00      	nop
 8009c9e:	370c      	adds	r7, #12
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr

08009ca8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b086      	sub	sp, #24
 8009cac:	af02      	add	r7, sp, #8
 8009cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009cb8:	f7f9 feee 	bl	8003a98 <HAL_GetTick>
 8009cbc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f003 0308 	and.w	r3, r3, #8
 8009cc8:	2b08      	cmp	r3, #8
 8009cca:	d10e      	bne.n	8009cea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ccc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009cd0:	9300      	str	r3, [sp, #0]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 f81b 	bl	8009d16 <UART_WaitOnFlagUntilTimeout>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d001      	beq.n	8009cea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ce6:	2303      	movs	r3, #3
 8009ce8:	e011      	b.n	8009d0e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2220      	movs	r2, #32
 8009cee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2220      	movs	r2, #32
 8009cf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2200      	movs	r2, #0
 8009d02:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009d0c:	2300      	movs	r3, #0
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3710      	adds	r7, #16
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}

08009d16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b09c      	sub	sp, #112	; 0x70
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	60f8      	str	r0, [r7, #12]
 8009d1e:	60b9      	str	r1, [r7, #8]
 8009d20:	603b      	str	r3, [r7, #0]
 8009d22:	4613      	mov	r3, r2
 8009d24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d26:	e0a7      	b.n	8009e78 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d2e:	f000 80a3 	beq.w	8009e78 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d32:	f7f9 feb1 	bl	8003a98 <HAL_GetTick>
 8009d36:	4602      	mov	r2, r0
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	1ad3      	subs	r3, r2, r3
 8009d3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d302      	bcc.n	8009d48 <UART_WaitOnFlagUntilTimeout+0x32>
 8009d42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d13f      	bne.n	8009dc8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d50:	e853 3f00 	ldrex	r3, [r3]
 8009d54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009d5c:	667b      	str	r3, [r7, #100]	; 0x64
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	461a      	mov	r2, r3
 8009d64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d68:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009d6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009d6e:	e841 2300 	strex	r3, r2, [r1]
 8009d72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d1e6      	bne.n	8009d48 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	3308      	adds	r3, #8
 8009d80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d84:	e853 3f00 	ldrex	r3, [r3]
 8009d88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d8c:	f023 0301 	bic.w	r3, r3, #1
 8009d90:	663b      	str	r3, [r7, #96]	; 0x60
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	3308      	adds	r3, #8
 8009d98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009d9a:	64ba      	str	r2, [r7, #72]	; 0x48
 8009d9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009da0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009da2:	e841 2300 	strex	r3, r2, [r1]
 8009da6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d1e5      	bne.n	8009d7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2220      	movs	r2, #32
 8009db2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2220      	movs	r2, #32
 8009db8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8009dc4:	2303      	movs	r3, #3
 8009dc6:	e068      	b.n	8009e9a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f003 0304 	and.w	r3, r3, #4
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d050      	beq.n	8009e78 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	69db      	ldr	r3, [r3, #28]
 8009ddc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009de0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009de4:	d148      	bne.n	8009e78 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009dee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df8:	e853 3f00 	ldrex	r3, [r3]
 8009dfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009e04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e0e:	637b      	str	r3, [r7, #52]	; 0x34
 8009e10:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009e14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e16:	e841 2300 	strex	r3, r2, [r1]
 8009e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d1e6      	bne.n	8009df0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	3308      	adds	r3, #8
 8009e28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	e853 3f00 	ldrex	r3, [r3]
 8009e30:	613b      	str	r3, [r7, #16]
   return(result);
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	f023 0301 	bic.w	r3, r3, #1
 8009e38:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	3308      	adds	r3, #8
 8009e40:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009e42:	623a      	str	r2, [r7, #32]
 8009e44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e46:	69f9      	ldr	r1, [r7, #28]
 8009e48:	6a3a      	ldr	r2, [r7, #32]
 8009e4a:	e841 2300 	strex	r3, r2, [r1]
 8009e4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e50:	69bb      	ldr	r3, [r7, #24]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d1e5      	bne.n	8009e22 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2220      	movs	r2, #32
 8009e5a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2220      	movs	r2, #32
 8009e60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2220      	movs	r2, #32
 8009e68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009e74:	2303      	movs	r3, #3
 8009e76:	e010      	b.n	8009e9a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	69da      	ldr	r2, [r3, #28]
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	4013      	ands	r3, r2
 8009e82:	68ba      	ldr	r2, [r7, #8]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	bf0c      	ite	eq
 8009e88:	2301      	moveq	r3, #1
 8009e8a:	2300      	movne	r3, #0
 8009e8c:	b2db      	uxtb	r3, r3
 8009e8e:	461a      	mov	r2, r3
 8009e90:	79fb      	ldrb	r3, [r7, #7]
 8009e92:	429a      	cmp	r2, r3
 8009e94:	f43f af48 	beq.w	8009d28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e98:	2300      	movs	r3, #0
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3770      	adds	r7, #112	; 0x70
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
	...

08009ea4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b097      	sub	sp, #92	; 0x5c
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	60f8      	str	r0, [r7, #12]
 8009eac:	60b9      	str	r1, [r7, #8]
 8009eae:	4613      	mov	r3, r2
 8009eb0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	68ba      	ldr	r2, [r7, #8]
 8009eb6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	88fa      	ldrh	r2, [r7, #6]
 8009ebc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	88fa      	ldrh	r2, [r7, #6]
 8009ec4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	689b      	ldr	r3, [r3, #8]
 8009ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ed6:	d10e      	bne.n	8009ef6 <UART_Start_Receive_IT+0x52>
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	691b      	ldr	r3, [r3, #16]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d105      	bne.n	8009eec <UART_Start_Receive_IT+0x48>
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009ee6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009eea:	e02d      	b.n	8009f48 <UART_Start_Receive_IT+0xa4>
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	22ff      	movs	r2, #255	; 0xff
 8009ef0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ef4:	e028      	b.n	8009f48 <UART_Start_Receive_IT+0xa4>
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	689b      	ldr	r3, [r3, #8]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d10d      	bne.n	8009f1a <UART_Start_Receive_IT+0x76>
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	691b      	ldr	r3, [r3, #16]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d104      	bne.n	8009f10 <UART_Start_Receive_IT+0x6c>
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	22ff      	movs	r2, #255	; 0xff
 8009f0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009f0e:	e01b      	b.n	8009f48 <UART_Start_Receive_IT+0xa4>
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	227f      	movs	r2, #127	; 0x7f
 8009f14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009f18:	e016      	b.n	8009f48 <UART_Start_Receive_IT+0xa4>
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f22:	d10d      	bne.n	8009f40 <UART_Start_Receive_IT+0x9c>
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	691b      	ldr	r3, [r3, #16]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d104      	bne.n	8009f36 <UART_Start_Receive_IT+0x92>
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	227f      	movs	r2, #127	; 0x7f
 8009f30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009f34:	e008      	b.n	8009f48 <UART_Start_Receive_IT+0xa4>
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	223f      	movs	r2, #63	; 0x3f
 8009f3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009f3e:	e003      	b.n	8009f48 <UART_Start_Receive_IT+0xa4>
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2200      	movs	r2, #0
 8009f44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2222      	movs	r2, #34	; 0x22
 8009f54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	3308      	adds	r3, #8
 8009f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f62:	e853 3f00 	ldrex	r3, [r3]
 8009f66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6a:	f043 0301 	orr.w	r3, r3, #1
 8009f6e:	657b      	str	r3, [r7, #84]	; 0x54
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	3308      	adds	r3, #8
 8009f76:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f78:	64ba      	str	r2, [r7, #72]	; 0x48
 8009f7a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f7c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009f7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f80:	e841 2300 	strex	r3, r2, [r1]
 8009f84:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d1e5      	bne.n	8009f58 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f94:	d107      	bne.n	8009fa6 <UART_Start_Receive_IT+0x102>
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	691b      	ldr	r3, [r3, #16]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d103      	bne.n	8009fa6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	4a21      	ldr	r2, [pc, #132]	; (800a028 <UART_Start_Receive_IT+0x184>)
 8009fa2:	669a      	str	r2, [r3, #104]	; 0x68
 8009fa4:	e002      	b.n	8009fac <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	4a20      	ldr	r2, [pc, #128]	; (800a02c <UART_Start_Receive_IT+0x188>)
 8009faa:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	691b      	ldr	r3, [r3, #16]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d019      	beq.n	8009fe8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fbc:	e853 3f00 	ldrex	r3, [r3]
 8009fc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	461a      	mov	r2, r3
 8009fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8009fd4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009fd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009fda:	e841 2300 	strex	r3, r2, [r1]
 8009fde:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d1e6      	bne.n	8009fb4 <UART_Start_Receive_IT+0x110>
 8009fe6:	e018      	b.n	800a01a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	e853 3f00 	ldrex	r3, [r3]
 8009ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	f043 0320 	orr.w	r3, r3, #32
 8009ffc:	653b      	str	r3, [r7, #80]	; 0x50
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	461a      	mov	r2, r3
 800a004:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a006:	623b      	str	r3, [r7, #32]
 800a008:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a00a:	69f9      	ldr	r1, [r7, #28]
 800a00c:	6a3a      	ldr	r2, [r7, #32]
 800a00e:	e841 2300 	strex	r3, r2, [r1]
 800a012:	61bb      	str	r3, [r7, #24]
   return(result);
 800a014:	69bb      	ldr	r3, [r7, #24]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d1e6      	bne.n	8009fe8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800a01a:	2300      	movs	r3, #0
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	375c      	adds	r7, #92	; 0x5c
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr
 800a028:	0800a2df 	.word	0x0800a2df
 800a02c:	0800a179 	.word	0x0800a179

0800a030 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a030:	b480      	push	{r7}
 800a032:	b095      	sub	sp, #84	; 0x54
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a03e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a040:	e853 3f00 	ldrex	r3, [r3]
 800a044:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a048:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a04c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	461a      	mov	r2, r3
 800a054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a056:	643b      	str	r3, [r7, #64]	; 0x40
 800a058:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a05a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a05c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a05e:	e841 2300 	strex	r3, r2, [r1]
 800a062:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a066:	2b00      	cmp	r3, #0
 800a068:	d1e6      	bne.n	800a038 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	3308      	adds	r3, #8
 800a070:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a072:	6a3b      	ldr	r3, [r7, #32]
 800a074:	e853 3f00 	ldrex	r3, [r3]
 800a078:	61fb      	str	r3, [r7, #28]
   return(result);
 800a07a:	69fb      	ldr	r3, [r7, #28]
 800a07c:	f023 0301 	bic.w	r3, r3, #1
 800a080:	64bb      	str	r3, [r7, #72]	; 0x48
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	3308      	adds	r3, #8
 800a088:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a08a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a08c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a08e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a092:	e841 2300 	strex	r3, r2, [r1]
 800a096:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d1e5      	bne.n	800a06a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d118      	bne.n	800a0d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	e853 3f00 	ldrex	r3, [r3]
 800a0b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	f023 0310 	bic.w	r3, r3, #16
 800a0ba:	647b      	str	r3, [r7, #68]	; 0x44
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0c4:	61bb      	str	r3, [r7, #24]
 800a0c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c8:	6979      	ldr	r1, [r7, #20]
 800a0ca:	69ba      	ldr	r2, [r7, #24]
 800a0cc:	e841 2300 	strex	r3, r2, [r1]
 800a0d0:	613b      	str	r3, [r7, #16]
   return(result);
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d1e6      	bne.n	800a0a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2220      	movs	r2, #32
 800a0dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a0ec:	bf00      	nop
 800a0ee:	3754      	adds	r7, #84	; 0x54
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a104:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2200      	movs	r2, #0
 800a10a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2200      	movs	r2, #0
 800a112:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a116:	68f8      	ldr	r0, [r7, #12]
 800a118:	f7ff faaa 	bl	8009670 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a11c:	bf00      	nop
 800a11e:	3710      	adds	r7, #16
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b088      	sub	sp, #32
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	e853 3f00 	ldrex	r3, [r3]
 800a138:	60bb      	str	r3, [r7, #8]
   return(result);
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a140:	61fb      	str	r3, [r7, #28]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	461a      	mov	r2, r3
 800a148:	69fb      	ldr	r3, [r7, #28]
 800a14a:	61bb      	str	r3, [r7, #24]
 800a14c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a14e:	6979      	ldr	r1, [r7, #20]
 800a150:	69ba      	ldr	r2, [r7, #24]
 800a152:	e841 2300 	strex	r3, r2, [r1]
 800a156:	613b      	str	r3, [r7, #16]
   return(result);
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d1e6      	bne.n	800a12c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2220      	movs	r2, #32
 800a162:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f7ff fa76 	bl	800965c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a170:	bf00      	nop
 800a172:	3720      	adds	r7, #32
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b096      	sub	sp, #88	; 0x58
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a186:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a190:	2b22      	cmp	r3, #34	; 0x22
 800a192:	f040 8098 	bne.w	800a2c6 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a1a0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800a1a4:	b2d9      	uxtb	r1, r3
 800a1a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a1aa:	b2da      	uxtb	r2, r3
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1b0:	400a      	ands	r2, r1
 800a1b2:	b2d2      	uxtb	r2, r2
 800a1b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1ba:	1c5a      	adds	r2, r3, #1
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	3b01      	subs	r3, #1
 800a1ca:	b29a      	uxth	r2, r3
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a1d8:	b29b      	uxth	r3, r3
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d17b      	bne.n	800a2d6 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e6:	e853 3f00 	ldrex	r3, [r3]
 800a1ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a1ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a1f2:	653b      	str	r3, [r7, #80]	; 0x50
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1fc:	647b      	str	r3, [r7, #68]	; 0x44
 800a1fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a200:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a202:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a204:	e841 2300 	strex	r3, r2, [r1]
 800a208:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a20a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d1e6      	bne.n	800a1de <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	3308      	adds	r3, #8
 800a216:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21a:	e853 3f00 	ldrex	r3, [r3]
 800a21e:	623b      	str	r3, [r7, #32]
   return(result);
 800a220:	6a3b      	ldr	r3, [r7, #32]
 800a222:	f023 0301 	bic.w	r3, r3, #1
 800a226:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	3308      	adds	r3, #8
 800a22e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a230:	633a      	str	r2, [r7, #48]	; 0x30
 800a232:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a234:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a238:	e841 2300 	strex	r3, r2, [r1]
 800a23c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a240:	2b00      	cmp	r3, #0
 800a242:	d1e5      	bne.n	800a210 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2220      	movs	r2, #32
 800a248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2200      	movs	r2, #0
 800a250:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2200      	movs	r2, #0
 800a256:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d12e      	bne.n	800a2be <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2200      	movs	r2, #0
 800a264:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	e853 3f00 	ldrex	r3, [r3]
 800a272:	60fb      	str	r3, [r7, #12]
   return(result);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f023 0310 	bic.w	r3, r3, #16
 800a27a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	461a      	mov	r2, r3
 800a282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a284:	61fb      	str	r3, [r7, #28]
 800a286:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a288:	69b9      	ldr	r1, [r7, #24]
 800a28a:	69fa      	ldr	r2, [r7, #28]
 800a28c:	e841 2300 	strex	r3, r2, [r1]
 800a290:	617b      	str	r3, [r7, #20]
   return(result);
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d1e6      	bne.n	800a266 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	69db      	ldr	r3, [r3, #28]
 800a29e:	f003 0310 	and.w	r3, r3, #16
 800a2a2:	2b10      	cmp	r3, #16
 800a2a4:	d103      	bne.n	800a2ae <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	2210      	movs	r2, #16
 800a2ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f7ff f9e4 	bl	8009684 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a2bc:	e00b      	b.n	800a2d6 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f7f8 fce8 	bl	8002c94 <HAL_UART_RxCpltCallback>
}
 800a2c4:	e007      	b.n	800a2d6 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	699a      	ldr	r2, [r3, #24]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f042 0208 	orr.w	r2, r2, #8
 800a2d4:	619a      	str	r2, [r3, #24]
}
 800a2d6:	bf00      	nop
 800a2d8:	3758      	adds	r7, #88	; 0x58
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	b096      	sub	sp, #88	; 0x58
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a2ec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2f6:	2b22      	cmp	r3, #34	; 0x22
 800a2f8:	f040 8098 	bne.w	800a42c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a302:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a30a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800a30c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800a310:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a314:	4013      	ands	r3, r2
 800a316:	b29a      	uxth	r2, r3
 800a318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a31a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a320:	1c9a      	adds	r2, r3, #2
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	3b01      	subs	r3, #1
 800a330:	b29a      	uxth	r2, r3
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a33e:	b29b      	uxth	r3, r3
 800a340:	2b00      	cmp	r3, #0
 800a342:	d17b      	bne.n	800a43c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a34a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a34c:	e853 3f00 	ldrex	r3, [r3]
 800a350:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a354:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a358:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	461a      	mov	r2, r3
 800a360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a362:	643b      	str	r3, [r7, #64]	; 0x40
 800a364:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a366:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a368:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a36a:	e841 2300 	strex	r3, r2, [r1]
 800a36e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a372:	2b00      	cmp	r3, #0
 800a374:	d1e6      	bne.n	800a344 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	3308      	adds	r3, #8
 800a37c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a37e:	6a3b      	ldr	r3, [r7, #32]
 800a380:	e853 3f00 	ldrex	r3, [r3]
 800a384:	61fb      	str	r3, [r7, #28]
   return(result);
 800a386:	69fb      	ldr	r3, [r7, #28]
 800a388:	f023 0301 	bic.w	r3, r3, #1
 800a38c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	3308      	adds	r3, #8
 800a394:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a396:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a398:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a39a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a39c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a39e:	e841 2300 	strex	r3, r2, [r1]
 800a3a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d1e5      	bne.n	800a376 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2220      	movs	r2, #32
 800a3ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d12e      	bne.n	800a424 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	e853 3f00 	ldrex	r3, [r3]
 800a3d8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	f023 0310 	bic.w	r3, r3, #16
 800a3e0:	647b      	str	r3, [r7, #68]	; 0x44
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3ea:	61bb      	str	r3, [r7, #24]
 800a3ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ee:	6979      	ldr	r1, [r7, #20]
 800a3f0:	69ba      	ldr	r2, [r7, #24]
 800a3f2:	e841 2300 	strex	r3, r2, [r1]
 800a3f6:	613b      	str	r3, [r7, #16]
   return(result);
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d1e6      	bne.n	800a3cc <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	69db      	ldr	r3, [r3, #28]
 800a404:	f003 0310 	and.w	r3, r3, #16
 800a408:	2b10      	cmp	r3, #16
 800a40a:	d103      	bne.n	800a414 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	2210      	movs	r2, #16
 800a412:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a41a:	4619      	mov	r1, r3
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f7ff f931 	bl	8009684 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a422:	e00b      	b.n	800a43c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f7f8 fc35 	bl	8002c94 <HAL_UART_RxCpltCallback>
}
 800a42a:	e007      	b.n	800a43c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	699a      	ldr	r2, [r3, #24]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f042 0208 	orr.w	r2, r2, #8
 800a43a:	619a      	str	r2, [r3, #24]
}
 800a43c:	bf00      	nop
 800a43e:	3758      	adds	r7, #88	; 0x58
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <siprintf>:
 800a444:	b40e      	push	{r1, r2, r3}
 800a446:	b500      	push	{lr}
 800a448:	b09c      	sub	sp, #112	; 0x70
 800a44a:	ab1d      	add	r3, sp, #116	; 0x74
 800a44c:	9002      	str	r0, [sp, #8]
 800a44e:	9006      	str	r0, [sp, #24]
 800a450:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a454:	4809      	ldr	r0, [pc, #36]	; (800a47c <siprintf+0x38>)
 800a456:	9107      	str	r1, [sp, #28]
 800a458:	9104      	str	r1, [sp, #16]
 800a45a:	4909      	ldr	r1, [pc, #36]	; (800a480 <siprintf+0x3c>)
 800a45c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a460:	9105      	str	r1, [sp, #20]
 800a462:	6800      	ldr	r0, [r0, #0]
 800a464:	9301      	str	r3, [sp, #4]
 800a466:	a902      	add	r1, sp, #8
 800a468:	f000 f992 	bl	800a790 <_svfiprintf_r>
 800a46c:	9b02      	ldr	r3, [sp, #8]
 800a46e:	2200      	movs	r2, #0
 800a470:	701a      	strb	r2, [r3, #0]
 800a472:	b01c      	add	sp, #112	; 0x70
 800a474:	f85d eb04 	ldr.w	lr, [sp], #4
 800a478:	b003      	add	sp, #12
 800a47a:	4770      	bx	lr
 800a47c:	20000118 	.word	0x20000118
 800a480:	ffff0208 	.word	0xffff0208

0800a484 <memset>:
 800a484:	4402      	add	r2, r0
 800a486:	4603      	mov	r3, r0
 800a488:	4293      	cmp	r3, r2
 800a48a:	d100      	bne.n	800a48e <memset+0xa>
 800a48c:	4770      	bx	lr
 800a48e:	f803 1b01 	strb.w	r1, [r3], #1
 800a492:	e7f9      	b.n	800a488 <memset+0x4>

0800a494 <__errno>:
 800a494:	4b01      	ldr	r3, [pc, #4]	; (800a49c <__errno+0x8>)
 800a496:	6818      	ldr	r0, [r3, #0]
 800a498:	4770      	bx	lr
 800a49a:	bf00      	nop
 800a49c:	20000118 	.word	0x20000118

0800a4a0 <__libc_init_array>:
 800a4a0:	b570      	push	{r4, r5, r6, lr}
 800a4a2:	4d0d      	ldr	r5, [pc, #52]	; (800a4d8 <__libc_init_array+0x38>)
 800a4a4:	4c0d      	ldr	r4, [pc, #52]	; (800a4dc <__libc_init_array+0x3c>)
 800a4a6:	1b64      	subs	r4, r4, r5
 800a4a8:	10a4      	asrs	r4, r4, #2
 800a4aa:	2600      	movs	r6, #0
 800a4ac:	42a6      	cmp	r6, r4
 800a4ae:	d109      	bne.n	800a4c4 <__libc_init_array+0x24>
 800a4b0:	4d0b      	ldr	r5, [pc, #44]	; (800a4e0 <__libc_init_array+0x40>)
 800a4b2:	4c0c      	ldr	r4, [pc, #48]	; (800a4e4 <__libc_init_array+0x44>)
 800a4b4:	f000 fc6a 	bl	800ad8c <_init>
 800a4b8:	1b64      	subs	r4, r4, r5
 800a4ba:	10a4      	asrs	r4, r4, #2
 800a4bc:	2600      	movs	r6, #0
 800a4be:	42a6      	cmp	r6, r4
 800a4c0:	d105      	bne.n	800a4ce <__libc_init_array+0x2e>
 800a4c2:	bd70      	pop	{r4, r5, r6, pc}
 800a4c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4c8:	4798      	blx	r3
 800a4ca:	3601      	adds	r6, #1
 800a4cc:	e7ee      	b.n	800a4ac <__libc_init_array+0xc>
 800a4ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4d2:	4798      	blx	r3
 800a4d4:	3601      	adds	r6, #1
 800a4d6:	e7f2      	b.n	800a4be <__libc_init_array+0x1e>
 800a4d8:	0800aeb0 	.word	0x0800aeb0
 800a4dc:	0800aeb0 	.word	0x0800aeb0
 800a4e0:	0800aeb0 	.word	0x0800aeb0
 800a4e4:	0800aeb4 	.word	0x0800aeb4

0800a4e8 <__retarget_lock_acquire_recursive>:
 800a4e8:	4770      	bx	lr

0800a4ea <__retarget_lock_release_recursive>:
 800a4ea:	4770      	bx	lr

0800a4ec <_free_r>:
 800a4ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4ee:	2900      	cmp	r1, #0
 800a4f0:	d044      	beq.n	800a57c <_free_r+0x90>
 800a4f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4f6:	9001      	str	r0, [sp, #4]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	f1a1 0404 	sub.w	r4, r1, #4
 800a4fe:	bfb8      	it	lt
 800a500:	18e4      	addlt	r4, r4, r3
 800a502:	f000 f8df 	bl	800a6c4 <__malloc_lock>
 800a506:	4a1e      	ldr	r2, [pc, #120]	; (800a580 <_free_r+0x94>)
 800a508:	9801      	ldr	r0, [sp, #4]
 800a50a:	6813      	ldr	r3, [r2, #0]
 800a50c:	b933      	cbnz	r3, 800a51c <_free_r+0x30>
 800a50e:	6063      	str	r3, [r4, #4]
 800a510:	6014      	str	r4, [r2, #0]
 800a512:	b003      	add	sp, #12
 800a514:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a518:	f000 b8da 	b.w	800a6d0 <__malloc_unlock>
 800a51c:	42a3      	cmp	r3, r4
 800a51e:	d908      	bls.n	800a532 <_free_r+0x46>
 800a520:	6825      	ldr	r5, [r4, #0]
 800a522:	1961      	adds	r1, r4, r5
 800a524:	428b      	cmp	r3, r1
 800a526:	bf01      	itttt	eq
 800a528:	6819      	ldreq	r1, [r3, #0]
 800a52a:	685b      	ldreq	r3, [r3, #4]
 800a52c:	1949      	addeq	r1, r1, r5
 800a52e:	6021      	streq	r1, [r4, #0]
 800a530:	e7ed      	b.n	800a50e <_free_r+0x22>
 800a532:	461a      	mov	r2, r3
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	b10b      	cbz	r3, 800a53c <_free_r+0x50>
 800a538:	42a3      	cmp	r3, r4
 800a53a:	d9fa      	bls.n	800a532 <_free_r+0x46>
 800a53c:	6811      	ldr	r1, [r2, #0]
 800a53e:	1855      	adds	r5, r2, r1
 800a540:	42a5      	cmp	r5, r4
 800a542:	d10b      	bne.n	800a55c <_free_r+0x70>
 800a544:	6824      	ldr	r4, [r4, #0]
 800a546:	4421      	add	r1, r4
 800a548:	1854      	adds	r4, r2, r1
 800a54a:	42a3      	cmp	r3, r4
 800a54c:	6011      	str	r1, [r2, #0]
 800a54e:	d1e0      	bne.n	800a512 <_free_r+0x26>
 800a550:	681c      	ldr	r4, [r3, #0]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	6053      	str	r3, [r2, #4]
 800a556:	440c      	add	r4, r1
 800a558:	6014      	str	r4, [r2, #0]
 800a55a:	e7da      	b.n	800a512 <_free_r+0x26>
 800a55c:	d902      	bls.n	800a564 <_free_r+0x78>
 800a55e:	230c      	movs	r3, #12
 800a560:	6003      	str	r3, [r0, #0]
 800a562:	e7d6      	b.n	800a512 <_free_r+0x26>
 800a564:	6825      	ldr	r5, [r4, #0]
 800a566:	1961      	adds	r1, r4, r5
 800a568:	428b      	cmp	r3, r1
 800a56a:	bf04      	itt	eq
 800a56c:	6819      	ldreq	r1, [r3, #0]
 800a56e:	685b      	ldreq	r3, [r3, #4]
 800a570:	6063      	str	r3, [r4, #4]
 800a572:	bf04      	itt	eq
 800a574:	1949      	addeq	r1, r1, r5
 800a576:	6021      	streq	r1, [r4, #0]
 800a578:	6054      	str	r4, [r2, #4]
 800a57a:	e7ca      	b.n	800a512 <_free_r+0x26>
 800a57c:	b003      	add	sp, #12
 800a57e:	bd30      	pop	{r4, r5, pc}
 800a580:	200005f0 	.word	0x200005f0

0800a584 <sbrk_aligned>:
 800a584:	b570      	push	{r4, r5, r6, lr}
 800a586:	4e0e      	ldr	r6, [pc, #56]	; (800a5c0 <sbrk_aligned+0x3c>)
 800a588:	460c      	mov	r4, r1
 800a58a:	6831      	ldr	r1, [r6, #0]
 800a58c:	4605      	mov	r5, r0
 800a58e:	b911      	cbnz	r1, 800a596 <sbrk_aligned+0x12>
 800a590:	f000 fba6 	bl	800ace0 <_sbrk_r>
 800a594:	6030      	str	r0, [r6, #0]
 800a596:	4621      	mov	r1, r4
 800a598:	4628      	mov	r0, r5
 800a59a:	f000 fba1 	bl	800ace0 <_sbrk_r>
 800a59e:	1c43      	adds	r3, r0, #1
 800a5a0:	d00a      	beq.n	800a5b8 <sbrk_aligned+0x34>
 800a5a2:	1cc4      	adds	r4, r0, #3
 800a5a4:	f024 0403 	bic.w	r4, r4, #3
 800a5a8:	42a0      	cmp	r0, r4
 800a5aa:	d007      	beq.n	800a5bc <sbrk_aligned+0x38>
 800a5ac:	1a21      	subs	r1, r4, r0
 800a5ae:	4628      	mov	r0, r5
 800a5b0:	f000 fb96 	bl	800ace0 <_sbrk_r>
 800a5b4:	3001      	adds	r0, #1
 800a5b6:	d101      	bne.n	800a5bc <sbrk_aligned+0x38>
 800a5b8:	f04f 34ff 	mov.w	r4, #4294967295
 800a5bc:	4620      	mov	r0, r4
 800a5be:	bd70      	pop	{r4, r5, r6, pc}
 800a5c0:	200005f4 	.word	0x200005f4

0800a5c4 <_malloc_r>:
 800a5c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5c8:	1ccd      	adds	r5, r1, #3
 800a5ca:	f025 0503 	bic.w	r5, r5, #3
 800a5ce:	3508      	adds	r5, #8
 800a5d0:	2d0c      	cmp	r5, #12
 800a5d2:	bf38      	it	cc
 800a5d4:	250c      	movcc	r5, #12
 800a5d6:	2d00      	cmp	r5, #0
 800a5d8:	4607      	mov	r7, r0
 800a5da:	db01      	blt.n	800a5e0 <_malloc_r+0x1c>
 800a5dc:	42a9      	cmp	r1, r5
 800a5de:	d905      	bls.n	800a5ec <_malloc_r+0x28>
 800a5e0:	230c      	movs	r3, #12
 800a5e2:	603b      	str	r3, [r7, #0]
 800a5e4:	2600      	movs	r6, #0
 800a5e6:	4630      	mov	r0, r6
 800a5e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a6c0 <_malloc_r+0xfc>
 800a5f0:	f000 f868 	bl	800a6c4 <__malloc_lock>
 800a5f4:	f8d8 3000 	ldr.w	r3, [r8]
 800a5f8:	461c      	mov	r4, r3
 800a5fa:	bb5c      	cbnz	r4, 800a654 <_malloc_r+0x90>
 800a5fc:	4629      	mov	r1, r5
 800a5fe:	4638      	mov	r0, r7
 800a600:	f7ff ffc0 	bl	800a584 <sbrk_aligned>
 800a604:	1c43      	adds	r3, r0, #1
 800a606:	4604      	mov	r4, r0
 800a608:	d155      	bne.n	800a6b6 <_malloc_r+0xf2>
 800a60a:	f8d8 4000 	ldr.w	r4, [r8]
 800a60e:	4626      	mov	r6, r4
 800a610:	2e00      	cmp	r6, #0
 800a612:	d145      	bne.n	800a6a0 <_malloc_r+0xdc>
 800a614:	2c00      	cmp	r4, #0
 800a616:	d048      	beq.n	800a6aa <_malloc_r+0xe6>
 800a618:	6823      	ldr	r3, [r4, #0]
 800a61a:	4631      	mov	r1, r6
 800a61c:	4638      	mov	r0, r7
 800a61e:	eb04 0903 	add.w	r9, r4, r3
 800a622:	f000 fb5d 	bl	800ace0 <_sbrk_r>
 800a626:	4581      	cmp	r9, r0
 800a628:	d13f      	bne.n	800a6aa <_malloc_r+0xe6>
 800a62a:	6821      	ldr	r1, [r4, #0]
 800a62c:	1a6d      	subs	r5, r5, r1
 800a62e:	4629      	mov	r1, r5
 800a630:	4638      	mov	r0, r7
 800a632:	f7ff ffa7 	bl	800a584 <sbrk_aligned>
 800a636:	3001      	adds	r0, #1
 800a638:	d037      	beq.n	800a6aa <_malloc_r+0xe6>
 800a63a:	6823      	ldr	r3, [r4, #0]
 800a63c:	442b      	add	r3, r5
 800a63e:	6023      	str	r3, [r4, #0]
 800a640:	f8d8 3000 	ldr.w	r3, [r8]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d038      	beq.n	800a6ba <_malloc_r+0xf6>
 800a648:	685a      	ldr	r2, [r3, #4]
 800a64a:	42a2      	cmp	r2, r4
 800a64c:	d12b      	bne.n	800a6a6 <_malloc_r+0xe2>
 800a64e:	2200      	movs	r2, #0
 800a650:	605a      	str	r2, [r3, #4]
 800a652:	e00f      	b.n	800a674 <_malloc_r+0xb0>
 800a654:	6822      	ldr	r2, [r4, #0]
 800a656:	1b52      	subs	r2, r2, r5
 800a658:	d41f      	bmi.n	800a69a <_malloc_r+0xd6>
 800a65a:	2a0b      	cmp	r2, #11
 800a65c:	d917      	bls.n	800a68e <_malloc_r+0xca>
 800a65e:	1961      	adds	r1, r4, r5
 800a660:	42a3      	cmp	r3, r4
 800a662:	6025      	str	r5, [r4, #0]
 800a664:	bf18      	it	ne
 800a666:	6059      	strne	r1, [r3, #4]
 800a668:	6863      	ldr	r3, [r4, #4]
 800a66a:	bf08      	it	eq
 800a66c:	f8c8 1000 	streq.w	r1, [r8]
 800a670:	5162      	str	r2, [r4, r5]
 800a672:	604b      	str	r3, [r1, #4]
 800a674:	4638      	mov	r0, r7
 800a676:	f104 060b 	add.w	r6, r4, #11
 800a67a:	f000 f829 	bl	800a6d0 <__malloc_unlock>
 800a67e:	f026 0607 	bic.w	r6, r6, #7
 800a682:	1d23      	adds	r3, r4, #4
 800a684:	1af2      	subs	r2, r6, r3
 800a686:	d0ae      	beq.n	800a5e6 <_malloc_r+0x22>
 800a688:	1b9b      	subs	r3, r3, r6
 800a68a:	50a3      	str	r3, [r4, r2]
 800a68c:	e7ab      	b.n	800a5e6 <_malloc_r+0x22>
 800a68e:	42a3      	cmp	r3, r4
 800a690:	6862      	ldr	r2, [r4, #4]
 800a692:	d1dd      	bne.n	800a650 <_malloc_r+0x8c>
 800a694:	f8c8 2000 	str.w	r2, [r8]
 800a698:	e7ec      	b.n	800a674 <_malloc_r+0xb0>
 800a69a:	4623      	mov	r3, r4
 800a69c:	6864      	ldr	r4, [r4, #4]
 800a69e:	e7ac      	b.n	800a5fa <_malloc_r+0x36>
 800a6a0:	4634      	mov	r4, r6
 800a6a2:	6876      	ldr	r6, [r6, #4]
 800a6a4:	e7b4      	b.n	800a610 <_malloc_r+0x4c>
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	e7cc      	b.n	800a644 <_malloc_r+0x80>
 800a6aa:	230c      	movs	r3, #12
 800a6ac:	603b      	str	r3, [r7, #0]
 800a6ae:	4638      	mov	r0, r7
 800a6b0:	f000 f80e 	bl	800a6d0 <__malloc_unlock>
 800a6b4:	e797      	b.n	800a5e6 <_malloc_r+0x22>
 800a6b6:	6025      	str	r5, [r4, #0]
 800a6b8:	e7dc      	b.n	800a674 <_malloc_r+0xb0>
 800a6ba:	605b      	str	r3, [r3, #4]
 800a6bc:	deff      	udf	#255	; 0xff
 800a6be:	bf00      	nop
 800a6c0:	200005f0 	.word	0x200005f0

0800a6c4 <__malloc_lock>:
 800a6c4:	4801      	ldr	r0, [pc, #4]	; (800a6cc <__malloc_lock+0x8>)
 800a6c6:	f7ff bf0f 	b.w	800a4e8 <__retarget_lock_acquire_recursive>
 800a6ca:	bf00      	nop
 800a6cc:	200005ec 	.word	0x200005ec

0800a6d0 <__malloc_unlock>:
 800a6d0:	4801      	ldr	r0, [pc, #4]	; (800a6d8 <__malloc_unlock+0x8>)
 800a6d2:	f7ff bf0a 	b.w	800a4ea <__retarget_lock_release_recursive>
 800a6d6:	bf00      	nop
 800a6d8:	200005ec 	.word	0x200005ec

0800a6dc <__ssputs_r>:
 800a6dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6e0:	688e      	ldr	r6, [r1, #8]
 800a6e2:	461f      	mov	r7, r3
 800a6e4:	42be      	cmp	r6, r7
 800a6e6:	680b      	ldr	r3, [r1, #0]
 800a6e8:	4682      	mov	sl, r0
 800a6ea:	460c      	mov	r4, r1
 800a6ec:	4690      	mov	r8, r2
 800a6ee:	d82c      	bhi.n	800a74a <__ssputs_r+0x6e>
 800a6f0:	898a      	ldrh	r2, [r1, #12]
 800a6f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a6f6:	d026      	beq.n	800a746 <__ssputs_r+0x6a>
 800a6f8:	6965      	ldr	r5, [r4, #20]
 800a6fa:	6909      	ldr	r1, [r1, #16]
 800a6fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a700:	eba3 0901 	sub.w	r9, r3, r1
 800a704:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a708:	1c7b      	adds	r3, r7, #1
 800a70a:	444b      	add	r3, r9
 800a70c:	106d      	asrs	r5, r5, #1
 800a70e:	429d      	cmp	r5, r3
 800a710:	bf38      	it	cc
 800a712:	461d      	movcc	r5, r3
 800a714:	0553      	lsls	r3, r2, #21
 800a716:	d527      	bpl.n	800a768 <__ssputs_r+0x8c>
 800a718:	4629      	mov	r1, r5
 800a71a:	f7ff ff53 	bl	800a5c4 <_malloc_r>
 800a71e:	4606      	mov	r6, r0
 800a720:	b360      	cbz	r0, 800a77c <__ssputs_r+0xa0>
 800a722:	6921      	ldr	r1, [r4, #16]
 800a724:	464a      	mov	r2, r9
 800a726:	f000 faeb 	bl	800ad00 <memcpy>
 800a72a:	89a3      	ldrh	r3, [r4, #12]
 800a72c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a734:	81a3      	strh	r3, [r4, #12]
 800a736:	6126      	str	r6, [r4, #16]
 800a738:	6165      	str	r5, [r4, #20]
 800a73a:	444e      	add	r6, r9
 800a73c:	eba5 0509 	sub.w	r5, r5, r9
 800a740:	6026      	str	r6, [r4, #0]
 800a742:	60a5      	str	r5, [r4, #8]
 800a744:	463e      	mov	r6, r7
 800a746:	42be      	cmp	r6, r7
 800a748:	d900      	bls.n	800a74c <__ssputs_r+0x70>
 800a74a:	463e      	mov	r6, r7
 800a74c:	6820      	ldr	r0, [r4, #0]
 800a74e:	4632      	mov	r2, r6
 800a750:	4641      	mov	r1, r8
 800a752:	f000 faab 	bl	800acac <memmove>
 800a756:	68a3      	ldr	r3, [r4, #8]
 800a758:	1b9b      	subs	r3, r3, r6
 800a75a:	60a3      	str	r3, [r4, #8]
 800a75c:	6823      	ldr	r3, [r4, #0]
 800a75e:	4433      	add	r3, r6
 800a760:	6023      	str	r3, [r4, #0]
 800a762:	2000      	movs	r0, #0
 800a764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a768:	462a      	mov	r2, r5
 800a76a:	f000 fad7 	bl	800ad1c <_realloc_r>
 800a76e:	4606      	mov	r6, r0
 800a770:	2800      	cmp	r0, #0
 800a772:	d1e0      	bne.n	800a736 <__ssputs_r+0x5a>
 800a774:	6921      	ldr	r1, [r4, #16]
 800a776:	4650      	mov	r0, sl
 800a778:	f7ff feb8 	bl	800a4ec <_free_r>
 800a77c:	230c      	movs	r3, #12
 800a77e:	f8ca 3000 	str.w	r3, [sl]
 800a782:	89a3      	ldrh	r3, [r4, #12]
 800a784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a788:	81a3      	strh	r3, [r4, #12]
 800a78a:	f04f 30ff 	mov.w	r0, #4294967295
 800a78e:	e7e9      	b.n	800a764 <__ssputs_r+0x88>

0800a790 <_svfiprintf_r>:
 800a790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a794:	4698      	mov	r8, r3
 800a796:	898b      	ldrh	r3, [r1, #12]
 800a798:	061b      	lsls	r3, r3, #24
 800a79a:	b09d      	sub	sp, #116	; 0x74
 800a79c:	4607      	mov	r7, r0
 800a79e:	460d      	mov	r5, r1
 800a7a0:	4614      	mov	r4, r2
 800a7a2:	d50e      	bpl.n	800a7c2 <_svfiprintf_r+0x32>
 800a7a4:	690b      	ldr	r3, [r1, #16]
 800a7a6:	b963      	cbnz	r3, 800a7c2 <_svfiprintf_r+0x32>
 800a7a8:	2140      	movs	r1, #64	; 0x40
 800a7aa:	f7ff ff0b 	bl	800a5c4 <_malloc_r>
 800a7ae:	6028      	str	r0, [r5, #0]
 800a7b0:	6128      	str	r0, [r5, #16]
 800a7b2:	b920      	cbnz	r0, 800a7be <_svfiprintf_r+0x2e>
 800a7b4:	230c      	movs	r3, #12
 800a7b6:	603b      	str	r3, [r7, #0]
 800a7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7bc:	e0d0      	b.n	800a960 <_svfiprintf_r+0x1d0>
 800a7be:	2340      	movs	r3, #64	; 0x40
 800a7c0:	616b      	str	r3, [r5, #20]
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a7c6:	2320      	movs	r3, #32
 800a7c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7d0:	2330      	movs	r3, #48	; 0x30
 800a7d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a978 <_svfiprintf_r+0x1e8>
 800a7d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7da:	f04f 0901 	mov.w	r9, #1
 800a7de:	4623      	mov	r3, r4
 800a7e0:	469a      	mov	sl, r3
 800a7e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7e6:	b10a      	cbz	r2, 800a7ec <_svfiprintf_r+0x5c>
 800a7e8:	2a25      	cmp	r2, #37	; 0x25
 800a7ea:	d1f9      	bne.n	800a7e0 <_svfiprintf_r+0x50>
 800a7ec:	ebba 0b04 	subs.w	fp, sl, r4
 800a7f0:	d00b      	beq.n	800a80a <_svfiprintf_r+0x7a>
 800a7f2:	465b      	mov	r3, fp
 800a7f4:	4622      	mov	r2, r4
 800a7f6:	4629      	mov	r1, r5
 800a7f8:	4638      	mov	r0, r7
 800a7fa:	f7ff ff6f 	bl	800a6dc <__ssputs_r>
 800a7fe:	3001      	adds	r0, #1
 800a800:	f000 80a9 	beq.w	800a956 <_svfiprintf_r+0x1c6>
 800a804:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a806:	445a      	add	r2, fp
 800a808:	9209      	str	r2, [sp, #36]	; 0x24
 800a80a:	f89a 3000 	ldrb.w	r3, [sl]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	f000 80a1 	beq.w	800a956 <_svfiprintf_r+0x1c6>
 800a814:	2300      	movs	r3, #0
 800a816:	f04f 32ff 	mov.w	r2, #4294967295
 800a81a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a81e:	f10a 0a01 	add.w	sl, sl, #1
 800a822:	9304      	str	r3, [sp, #16]
 800a824:	9307      	str	r3, [sp, #28]
 800a826:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a82a:	931a      	str	r3, [sp, #104]	; 0x68
 800a82c:	4654      	mov	r4, sl
 800a82e:	2205      	movs	r2, #5
 800a830:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a834:	4850      	ldr	r0, [pc, #320]	; (800a978 <_svfiprintf_r+0x1e8>)
 800a836:	f7f5 fceb 	bl	8000210 <memchr>
 800a83a:	9a04      	ldr	r2, [sp, #16]
 800a83c:	b9d8      	cbnz	r0, 800a876 <_svfiprintf_r+0xe6>
 800a83e:	06d0      	lsls	r0, r2, #27
 800a840:	bf44      	itt	mi
 800a842:	2320      	movmi	r3, #32
 800a844:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a848:	0711      	lsls	r1, r2, #28
 800a84a:	bf44      	itt	mi
 800a84c:	232b      	movmi	r3, #43	; 0x2b
 800a84e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a852:	f89a 3000 	ldrb.w	r3, [sl]
 800a856:	2b2a      	cmp	r3, #42	; 0x2a
 800a858:	d015      	beq.n	800a886 <_svfiprintf_r+0xf6>
 800a85a:	9a07      	ldr	r2, [sp, #28]
 800a85c:	4654      	mov	r4, sl
 800a85e:	2000      	movs	r0, #0
 800a860:	f04f 0c0a 	mov.w	ip, #10
 800a864:	4621      	mov	r1, r4
 800a866:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a86a:	3b30      	subs	r3, #48	; 0x30
 800a86c:	2b09      	cmp	r3, #9
 800a86e:	d94d      	bls.n	800a90c <_svfiprintf_r+0x17c>
 800a870:	b1b0      	cbz	r0, 800a8a0 <_svfiprintf_r+0x110>
 800a872:	9207      	str	r2, [sp, #28]
 800a874:	e014      	b.n	800a8a0 <_svfiprintf_r+0x110>
 800a876:	eba0 0308 	sub.w	r3, r0, r8
 800a87a:	fa09 f303 	lsl.w	r3, r9, r3
 800a87e:	4313      	orrs	r3, r2
 800a880:	9304      	str	r3, [sp, #16]
 800a882:	46a2      	mov	sl, r4
 800a884:	e7d2      	b.n	800a82c <_svfiprintf_r+0x9c>
 800a886:	9b03      	ldr	r3, [sp, #12]
 800a888:	1d19      	adds	r1, r3, #4
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	9103      	str	r1, [sp, #12]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	bfbb      	ittet	lt
 800a892:	425b      	neglt	r3, r3
 800a894:	f042 0202 	orrlt.w	r2, r2, #2
 800a898:	9307      	strge	r3, [sp, #28]
 800a89a:	9307      	strlt	r3, [sp, #28]
 800a89c:	bfb8      	it	lt
 800a89e:	9204      	strlt	r2, [sp, #16]
 800a8a0:	7823      	ldrb	r3, [r4, #0]
 800a8a2:	2b2e      	cmp	r3, #46	; 0x2e
 800a8a4:	d10c      	bne.n	800a8c0 <_svfiprintf_r+0x130>
 800a8a6:	7863      	ldrb	r3, [r4, #1]
 800a8a8:	2b2a      	cmp	r3, #42	; 0x2a
 800a8aa:	d134      	bne.n	800a916 <_svfiprintf_r+0x186>
 800a8ac:	9b03      	ldr	r3, [sp, #12]
 800a8ae:	1d1a      	adds	r2, r3, #4
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	9203      	str	r2, [sp, #12]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	bfb8      	it	lt
 800a8b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8bc:	3402      	adds	r4, #2
 800a8be:	9305      	str	r3, [sp, #20]
 800a8c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a988 <_svfiprintf_r+0x1f8>
 800a8c4:	7821      	ldrb	r1, [r4, #0]
 800a8c6:	2203      	movs	r2, #3
 800a8c8:	4650      	mov	r0, sl
 800a8ca:	f7f5 fca1 	bl	8000210 <memchr>
 800a8ce:	b138      	cbz	r0, 800a8e0 <_svfiprintf_r+0x150>
 800a8d0:	9b04      	ldr	r3, [sp, #16]
 800a8d2:	eba0 000a 	sub.w	r0, r0, sl
 800a8d6:	2240      	movs	r2, #64	; 0x40
 800a8d8:	4082      	lsls	r2, r0
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	3401      	adds	r4, #1
 800a8de:	9304      	str	r3, [sp, #16]
 800a8e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8e4:	4825      	ldr	r0, [pc, #148]	; (800a97c <_svfiprintf_r+0x1ec>)
 800a8e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8ea:	2206      	movs	r2, #6
 800a8ec:	f7f5 fc90 	bl	8000210 <memchr>
 800a8f0:	2800      	cmp	r0, #0
 800a8f2:	d038      	beq.n	800a966 <_svfiprintf_r+0x1d6>
 800a8f4:	4b22      	ldr	r3, [pc, #136]	; (800a980 <_svfiprintf_r+0x1f0>)
 800a8f6:	bb1b      	cbnz	r3, 800a940 <_svfiprintf_r+0x1b0>
 800a8f8:	9b03      	ldr	r3, [sp, #12]
 800a8fa:	3307      	adds	r3, #7
 800a8fc:	f023 0307 	bic.w	r3, r3, #7
 800a900:	3308      	adds	r3, #8
 800a902:	9303      	str	r3, [sp, #12]
 800a904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a906:	4433      	add	r3, r6
 800a908:	9309      	str	r3, [sp, #36]	; 0x24
 800a90a:	e768      	b.n	800a7de <_svfiprintf_r+0x4e>
 800a90c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a910:	460c      	mov	r4, r1
 800a912:	2001      	movs	r0, #1
 800a914:	e7a6      	b.n	800a864 <_svfiprintf_r+0xd4>
 800a916:	2300      	movs	r3, #0
 800a918:	3401      	adds	r4, #1
 800a91a:	9305      	str	r3, [sp, #20]
 800a91c:	4619      	mov	r1, r3
 800a91e:	f04f 0c0a 	mov.w	ip, #10
 800a922:	4620      	mov	r0, r4
 800a924:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a928:	3a30      	subs	r2, #48	; 0x30
 800a92a:	2a09      	cmp	r2, #9
 800a92c:	d903      	bls.n	800a936 <_svfiprintf_r+0x1a6>
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d0c6      	beq.n	800a8c0 <_svfiprintf_r+0x130>
 800a932:	9105      	str	r1, [sp, #20]
 800a934:	e7c4      	b.n	800a8c0 <_svfiprintf_r+0x130>
 800a936:	fb0c 2101 	mla	r1, ip, r1, r2
 800a93a:	4604      	mov	r4, r0
 800a93c:	2301      	movs	r3, #1
 800a93e:	e7f0      	b.n	800a922 <_svfiprintf_r+0x192>
 800a940:	ab03      	add	r3, sp, #12
 800a942:	9300      	str	r3, [sp, #0]
 800a944:	462a      	mov	r2, r5
 800a946:	4b0f      	ldr	r3, [pc, #60]	; (800a984 <_svfiprintf_r+0x1f4>)
 800a948:	a904      	add	r1, sp, #16
 800a94a:	4638      	mov	r0, r7
 800a94c:	f3af 8000 	nop.w
 800a950:	1c42      	adds	r2, r0, #1
 800a952:	4606      	mov	r6, r0
 800a954:	d1d6      	bne.n	800a904 <_svfiprintf_r+0x174>
 800a956:	89ab      	ldrh	r3, [r5, #12]
 800a958:	065b      	lsls	r3, r3, #25
 800a95a:	f53f af2d 	bmi.w	800a7b8 <_svfiprintf_r+0x28>
 800a95e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a960:	b01d      	add	sp, #116	; 0x74
 800a962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a966:	ab03      	add	r3, sp, #12
 800a968:	9300      	str	r3, [sp, #0]
 800a96a:	462a      	mov	r2, r5
 800a96c:	4b05      	ldr	r3, [pc, #20]	; (800a984 <_svfiprintf_r+0x1f4>)
 800a96e:	a904      	add	r1, sp, #16
 800a970:	4638      	mov	r0, r7
 800a972:	f000 f879 	bl	800aa68 <_printf_i>
 800a976:	e7eb      	b.n	800a950 <_svfiprintf_r+0x1c0>
 800a978:	0800ae74 	.word	0x0800ae74
 800a97c:	0800ae7e 	.word	0x0800ae7e
 800a980:	00000000 	.word	0x00000000
 800a984:	0800a6dd 	.word	0x0800a6dd
 800a988:	0800ae7a 	.word	0x0800ae7a

0800a98c <_printf_common>:
 800a98c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a990:	4616      	mov	r6, r2
 800a992:	4699      	mov	r9, r3
 800a994:	688a      	ldr	r2, [r1, #8]
 800a996:	690b      	ldr	r3, [r1, #16]
 800a998:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a99c:	4293      	cmp	r3, r2
 800a99e:	bfb8      	it	lt
 800a9a0:	4613      	movlt	r3, r2
 800a9a2:	6033      	str	r3, [r6, #0]
 800a9a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a9a8:	4607      	mov	r7, r0
 800a9aa:	460c      	mov	r4, r1
 800a9ac:	b10a      	cbz	r2, 800a9b2 <_printf_common+0x26>
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	6033      	str	r3, [r6, #0]
 800a9b2:	6823      	ldr	r3, [r4, #0]
 800a9b4:	0699      	lsls	r1, r3, #26
 800a9b6:	bf42      	ittt	mi
 800a9b8:	6833      	ldrmi	r3, [r6, #0]
 800a9ba:	3302      	addmi	r3, #2
 800a9bc:	6033      	strmi	r3, [r6, #0]
 800a9be:	6825      	ldr	r5, [r4, #0]
 800a9c0:	f015 0506 	ands.w	r5, r5, #6
 800a9c4:	d106      	bne.n	800a9d4 <_printf_common+0x48>
 800a9c6:	f104 0a19 	add.w	sl, r4, #25
 800a9ca:	68e3      	ldr	r3, [r4, #12]
 800a9cc:	6832      	ldr	r2, [r6, #0]
 800a9ce:	1a9b      	subs	r3, r3, r2
 800a9d0:	42ab      	cmp	r3, r5
 800a9d2:	dc26      	bgt.n	800aa22 <_printf_common+0x96>
 800a9d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a9d8:	1e13      	subs	r3, r2, #0
 800a9da:	6822      	ldr	r2, [r4, #0]
 800a9dc:	bf18      	it	ne
 800a9de:	2301      	movne	r3, #1
 800a9e0:	0692      	lsls	r2, r2, #26
 800a9e2:	d42b      	bmi.n	800aa3c <_printf_common+0xb0>
 800a9e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a9e8:	4649      	mov	r1, r9
 800a9ea:	4638      	mov	r0, r7
 800a9ec:	47c0      	blx	r8
 800a9ee:	3001      	adds	r0, #1
 800a9f0:	d01e      	beq.n	800aa30 <_printf_common+0xa4>
 800a9f2:	6823      	ldr	r3, [r4, #0]
 800a9f4:	6922      	ldr	r2, [r4, #16]
 800a9f6:	f003 0306 	and.w	r3, r3, #6
 800a9fa:	2b04      	cmp	r3, #4
 800a9fc:	bf02      	ittt	eq
 800a9fe:	68e5      	ldreq	r5, [r4, #12]
 800aa00:	6833      	ldreq	r3, [r6, #0]
 800aa02:	1aed      	subeq	r5, r5, r3
 800aa04:	68a3      	ldr	r3, [r4, #8]
 800aa06:	bf0c      	ite	eq
 800aa08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa0c:	2500      	movne	r5, #0
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	bfc4      	itt	gt
 800aa12:	1a9b      	subgt	r3, r3, r2
 800aa14:	18ed      	addgt	r5, r5, r3
 800aa16:	2600      	movs	r6, #0
 800aa18:	341a      	adds	r4, #26
 800aa1a:	42b5      	cmp	r5, r6
 800aa1c:	d11a      	bne.n	800aa54 <_printf_common+0xc8>
 800aa1e:	2000      	movs	r0, #0
 800aa20:	e008      	b.n	800aa34 <_printf_common+0xa8>
 800aa22:	2301      	movs	r3, #1
 800aa24:	4652      	mov	r2, sl
 800aa26:	4649      	mov	r1, r9
 800aa28:	4638      	mov	r0, r7
 800aa2a:	47c0      	blx	r8
 800aa2c:	3001      	adds	r0, #1
 800aa2e:	d103      	bne.n	800aa38 <_printf_common+0xac>
 800aa30:	f04f 30ff 	mov.w	r0, #4294967295
 800aa34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa38:	3501      	adds	r5, #1
 800aa3a:	e7c6      	b.n	800a9ca <_printf_common+0x3e>
 800aa3c:	18e1      	adds	r1, r4, r3
 800aa3e:	1c5a      	adds	r2, r3, #1
 800aa40:	2030      	movs	r0, #48	; 0x30
 800aa42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa46:	4422      	add	r2, r4
 800aa48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa50:	3302      	adds	r3, #2
 800aa52:	e7c7      	b.n	800a9e4 <_printf_common+0x58>
 800aa54:	2301      	movs	r3, #1
 800aa56:	4622      	mov	r2, r4
 800aa58:	4649      	mov	r1, r9
 800aa5a:	4638      	mov	r0, r7
 800aa5c:	47c0      	blx	r8
 800aa5e:	3001      	adds	r0, #1
 800aa60:	d0e6      	beq.n	800aa30 <_printf_common+0xa4>
 800aa62:	3601      	adds	r6, #1
 800aa64:	e7d9      	b.n	800aa1a <_printf_common+0x8e>
	...

0800aa68 <_printf_i>:
 800aa68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa6c:	7e0f      	ldrb	r7, [r1, #24]
 800aa6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa70:	2f78      	cmp	r7, #120	; 0x78
 800aa72:	4691      	mov	r9, r2
 800aa74:	4680      	mov	r8, r0
 800aa76:	460c      	mov	r4, r1
 800aa78:	469a      	mov	sl, r3
 800aa7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aa7e:	d807      	bhi.n	800aa90 <_printf_i+0x28>
 800aa80:	2f62      	cmp	r7, #98	; 0x62
 800aa82:	d80a      	bhi.n	800aa9a <_printf_i+0x32>
 800aa84:	2f00      	cmp	r7, #0
 800aa86:	f000 80d4 	beq.w	800ac32 <_printf_i+0x1ca>
 800aa8a:	2f58      	cmp	r7, #88	; 0x58
 800aa8c:	f000 80c0 	beq.w	800ac10 <_printf_i+0x1a8>
 800aa90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa98:	e03a      	b.n	800ab10 <_printf_i+0xa8>
 800aa9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa9e:	2b15      	cmp	r3, #21
 800aaa0:	d8f6      	bhi.n	800aa90 <_printf_i+0x28>
 800aaa2:	a101      	add	r1, pc, #4	; (adr r1, 800aaa8 <_printf_i+0x40>)
 800aaa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aaa8:	0800ab01 	.word	0x0800ab01
 800aaac:	0800ab15 	.word	0x0800ab15
 800aab0:	0800aa91 	.word	0x0800aa91
 800aab4:	0800aa91 	.word	0x0800aa91
 800aab8:	0800aa91 	.word	0x0800aa91
 800aabc:	0800aa91 	.word	0x0800aa91
 800aac0:	0800ab15 	.word	0x0800ab15
 800aac4:	0800aa91 	.word	0x0800aa91
 800aac8:	0800aa91 	.word	0x0800aa91
 800aacc:	0800aa91 	.word	0x0800aa91
 800aad0:	0800aa91 	.word	0x0800aa91
 800aad4:	0800ac19 	.word	0x0800ac19
 800aad8:	0800ab41 	.word	0x0800ab41
 800aadc:	0800abd3 	.word	0x0800abd3
 800aae0:	0800aa91 	.word	0x0800aa91
 800aae4:	0800aa91 	.word	0x0800aa91
 800aae8:	0800ac3b 	.word	0x0800ac3b
 800aaec:	0800aa91 	.word	0x0800aa91
 800aaf0:	0800ab41 	.word	0x0800ab41
 800aaf4:	0800aa91 	.word	0x0800aa91
 800aaf8:	0800aa91 	.word	0x0800aa91
 800aafc:	0800abdb 	.word	0x0800abdb
 800ab00:	682b      	ldr	r3, [r5, #0]
 800ab02:	1d1a      	adds	r2, r3, #4
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	602a      	str	r2, [r5, #0]
 800ab08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab10:	2301      	movs	r3, #1
 800ab12:	e09f      	b.n	800ac54 <_printf_i+0x1ec>
 800ab14:	6820      	ldr	r0, [r4, #0]
 800ab16:	682b      	ldr	r3, [r5, #0]
 800ab18:	0607      	lsls	r7, r0, #24
 800ab1a:	f103 0104 	add.w	r1, r3, #4
 800ab1e:	6029      	str	r1, [r5, #0]
 800ab20:	d501      	bpl.n	800ab26 <_printf_i+0xbe>
 800ab22:	681e      	ldr	r6, [r3, #0]
 800ab24:	e003      	b.n	800ab2e <_printf_i+0xc6>
 800ab26:	0646      	lsls	r6, r0, #25
 800ab28:	d5fb      	bpl.n	800ab22 <_printf_i+0xba>
 800ab2a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ab2e:	2e00      	cmp	r6, #0
 800ab30:	da03      	bge.n	800ab3a <_printf_i+0xd2>
 800ab32:	232d      	movs	r3, #45	; 0x2d
 800ab34:	4276      	negs	r6, r6
 800ab36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab3a:	485a      	ldr	r0, [pc, #360]	; (800aca4 <_printf_i+0x23c>)
 800ab3c:	230a      	movs	r3, #10
 800ab3e:	e012      	b.n	800ab66 <_printf_i+0xfe>
 800ab40:	682b      	ldr	r3, [r5, #0]
 800ab42:	6820      	ldr	r0, [r4, #0]
 800ab44:	1d19      	adds	r1, r3, #4
 800ab46:	6029      	str	r1, [r5, #0]
 800ab48:	0605      	lsls	r5, r0, #24
 800ab4a:	d501      	bpl.n	800ab50 <_printf_i+0xe8>
 800ab4c:	681e      	ldr	r6, [r3, #0]
 800ab4e:	e002      	b.n	800ab56 <_printf_i+0xee>
 800ab50:	0641      	lsls	r1, r0, #25
 800ab52:	d5fb      	bpl.n	800ab4c <_printf_i+0xe4>
 800ab54:	881e      	ldrh	r6, [r3, #0]
 800ab56:	4853      	ldr	r0, [pc, #332]	; (800aca4 <_printf_i+0x23c>)
 800ab58:	2f6f      	cmp	r7, #111	; 0x6f
 800ab5a:	bf0c      	ite	eq
 800ab5c:	2308      	moveq	r3, #8
 800ab5e:	230a      	movne	r3, #10
 800ab60:	2100      	movs	r1, #0
 800ab62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab66:	6865      	ldr	r5, [r4, #4]
 800ab68:	60a5      	str	r5, [r4, #8]
 800ab6a:	2d00      	cmp	r5, #0
 800ab6c:	bfa2      	ittt	ge
 800ab6e:	6821      	ldrge	r1, [r4, #0]
 800ab70:	f021 0104 	bicge.w	r1, r1, #4
 800ab74:	6021      	strge	r1, [r4, #0]
 800ab76:	b90e      	cbnz	r6, 800ab7c <_printf_i+0x114>
 800ab78:	2d00      	cmp	r5, #0
 800ab7a:	d04b      	beq.n	800ac14 <_printf_i+0x1ac>
 800ab7c:	4615      	mov	r5, r2
 800ab7e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ab82:	fb03 6711 	mls	r7, r3, r1, r6
 800ab86:	5dc7      	ldrb	r7, [r0, r7]
 800ab88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ab8c:	4637      	mov	r7, r6
 800ab8e:	42bb      	cmp	r3, r7
 800ab90:	460e      	mov	r6, r1
 800ab92:	d9f4      	bls.n	800ab7e <_printf_i+0x116>
 800ab94:	2b08      	cmp	r3, #8
 800ab96:	d10b      	bne.n	800abb0 <_printf_i+0x148>
 800ab98:	6823      	ldr	r3, [r4, #0]
 800ab9a:	07de      	lsls	r6, r3, #31
 800ab9c:	d508      	bpl.n	800abb0 <_printf_i+0x148>
 800ab9e:	6923      	ldr	r3, [r4, #16]
 800aba0:	6861      	ldr	r1, [r4, #4]
 800aba2:	4299      	cmp	r1, r3
 800aba4:	bfde      	ittt	le
 800aba6:	2330      	movle	r3, #48	; 0x30
 800aba8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800abac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800abb0:	1b52      	subs	r2, r2, r5
 800abb2:	6122      	str	r2, [r4, #16]
 800abb4:	f8cd a000 	str.w	sl, [sp]
 800abb8:	464b      	mov	r3, r9
 800abba:	aa03      	add	r2, sp, #12
 800abbc:	4621      	mov	r1, r4
 800abbe:	4640      	mov	r0, r8
 800abc0:	f7ff fee4 	bl	800a98c <_printf_common>
 800abc4:	3001      	adds	r0, #1
 800abc6:	d14a      	bne.n	800ac5e <_printf_i+0x1f6>
 800abc8:	f04f 30ff 	mov.w	r0, #4294967295
 800abcc:	b004      	add	sp, #16
 800abce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abd2:	6823      	ldr	r3, [r4, #0]
 800abd4:	f043 0320 	orr.w	r3, r3, #32
 800abd8:	6023      	str	r3, [r4, #0]
 800abda:	4833      	ldr	r0, [pc, #204]	; (800aca8 <_printf_i+0x240>)
 800abdc:	2778      	movs	r7, #120	; 0x78
 800abde:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800abe2:	6823      	ldr	r3, [r4, #0]
 800abe4:	6829      	ldr	r1, [r5, #0]
 800abe6:	061f      	lsls	r7, r3, #24
 800abe8:	f851 6b04 	ldr.w	r6, [r1], #4
 800abec:	d402      	bmi.n	800abf4 <_printf_i+0x18c>
 800abee:	065f      	lsls	r7, r3, #25
 800abf0:	bf48      	it	mi
 800abf2:	b2b6      	uxthmi	r6, r6
 800abf4:	07df      	lsls	r7, r3, #31
 800abf6:	bf48      	it	mi
 800abf8:	f043 0320 	orrmi.w	r3, r3, #32
 800abfc:	6029      	str	r1, [r5, #0]
 800abfe:	bf48      	it	mi
 800ac00:	6023      	strmi	r3, [r4, #0]
 800ac02:	b91e      	cbnz	r6, 800ac0c <_printf_i+0x1a4>
 800ac04:	6823      	ldr	r3, [r4, #0]
 800ac06:	f023 0320 	bic.w	r3, r3, #32
 800ac0a:	6023      	str	r3, [r4, #0]
 800ac0c:	2310      	movs	r3, #16
 800ac0e:	e7a7      	b.n	800ab60 <_printf_i+0xf8>
 800ac10:	4824      	ldr	r0, [pc, #144]	; (800aca4 <_printf_i+0x23c>)
 800ac12:	e7e4      	b.n	800abde <_printf_i+0x176>
 800ac14:	4615      	mov	r5, r2
 800ac16:	e7bd      	b.n	800ab94 <_printf_i+0x12c>
 800ac18:	682b      	ldr	r3, [r5, #0]
 800ac1a:	6826      	ldr	r6, [r4, #0]
 800ac1c:	6961      	ldr	r1, [r4, #20]
 800ac1e:	1d18      	adds	r0, r3, #4
 800ac20:	6028      	str	r0, [r5, #0]
 800ac22:	0635      	lsls	r5, r6, #24
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	d501      	bpl.n	800ac2c <_printf_i+0x1c4>
 800ac28:	6019      	str	r1, [r3, #0]
 800ac2a:	e002      	b.n	800ac32 <_printf_i+0x1ca>
 800ac2c:	0670      	lsls	r0, r6, #25
 800ac2e:	d5fb      	bpl.n	800ac28 <_printf_i+0x1c0>
 800ac30:	8019      	strh	r1, [r3, #0]
 800ac32:	2300      	movs	r3, #0
 800ac34:	6123      	str	r3, [r4, #16]
 800ac36:	4615      	mov	r5, r2
 800ac38:	e7bc      	b.n	800abb4 <_printf_i+0x14c>
 800ac3a:	682b      	ldr	r3, [r5, #0]
 800ac3c:	1d1a      	adds	r2, r3, #4
 800ac3e:	602a      	str	r2, [r5, #0]
 800ac40:	681d      	ldr	r5, [r3, #0]
 800ac42:	6862      	ldr	r2, [r4, #4]
 800ac44:	2100      	movs	r1, #0
 800ac46:	4628      	mov	r0, r5
 800ac48:	f7f5 fae2 	bl	8000210 <memchr>
 800ac4c:	b108      	cbz	r0, 800ac52 <_printf_i+0x1ea>
 800ac4e:	1b40      	subs	r0, r0, r5
 800ac50:	6060      	str	r0, [r4, #4]
 800ac52:	6863      	ldr	r3, [r4, #4]
 800ac54:	6123      	str	r3, [r4, #16]
 800ac56:	2300      	movs	r3, #0
 800ac58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac5c:	e7aa      	b.n	800abb4 <_printf_i+0x14c>
 800ac5e:	6923      	ldr	r3, [r4, #16]
 800ac60:	462a      	mov	r2, r5
 800ac62:	4649      	mov	r1, r9
 800ac64:	4640      	mov	r0, r8
 800ac66:	47d0      	blx	sl
 800ac68:	3001      	adds	r0, #1
 800ac6a:	d0ad      	beq.n	800abc8 <_printf_i+0x160>
 800ac6c:	6823      	ldr	r3, [r4, #0]
 800ac6e:	079b      	lsls	r3, r3, #30
 800ac70:	d413      	bmi.n	800ac9a <_printf_i+0x232>
 800ac72:	68e0      	ldr	r0, [r4, #12]
 800ac74:	9b03      	ldr	r3, [sp, #12]
 800ac76:	4298      	cmp	r0, r3
 800ac78:	bfb8      	it	lt
 800ac7a:	4618      	movlt	r0, r3
 800ac7c:	e7a6      	b.n	800abcc <_printf_i+0x164>
 800ac7e:	2301      	movs	r3, #1
 800ac80:	4632      	mov	r2, r6
 800ac82:	4649      	mov	r1, r9
 800ac84:	4640      	mov	r0, r8
 800ac86:	47d0      	blx	sl
 800ac88:	3001      	adds	r0, #1
 800ac8a:	d09d      	beq.n	800abc8 <_printf_i+0x160>
 800ac8c:	3501      	adds	r5, #1
 800ac8e:	68e3      	ldr	r3, [r4, #12]
 800ac90:	9903      	ldr	r1, [sp, #12]
 800ac92:	1a5b      	subs	r3, r3, r1
 800ac94:	42ab      	cmp	r3, r5
 800ac96:	dcf2      	bgt.n	800ac7e <_printf_i+0x216>
 800ac98:	e7eb      	b.n	800ac72 <_printf_i+0x20a>
 800ac9a:	2500      	movs	r5, #0
 800ac9c:	f104 0619 	add.w	r6, r4, #25
 800aca0:	e7f5      	b.n	800ac8e <_printf_i+0x226>
 800aca2:	bf00      	nop
 800aca4:	0800ae85 	.word	0x0800ae85
 800aca8:	0800ae96 	.word	0x0800ae96

0800acac <memmove>:
 800acac:	4288      	cmp	r0, r1
 800acae:	b510      	push	{r4, lr}
 800acb0:	eb01 0402 	add.w	r4, r1, r2
 800acb4:	d902      	bls.n	800acbc <memmove+0x10>
 800acb6:	4284      	cmp	r4, r0
 800acb8:	4623      	mov	r3, r4
 800acba:	d807      	bhi.n	800accc <memmove+0x20>
 800acbc:	1e43      	subs	r3, r0, #1
 800acbe:	42a1      	cmp	r1, r4
 800acc0:	d008      	beq.n	800acd4 <memmove+0x28>
 800acc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acca:	e7f8      	b.n	800acbe <memmove+0x12>
 800accc:	4402      	add	r2, r0
 800acce:	4601      	mov	r1, r0
 800acd0:	428a      	cmp	r2, r1
 800acd2:	d100      	bne.n	800acd6 <memmove+0x2a>
 800acd4:	bd10      	pop	{r4, pc}
 800acd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800acde:	e7f7      	b.n	800acd0 <memmove+0x24>

0800ace0 <_sbrk_r>:
 800ace0:	b538      	push	{r3, r4, r5, lr}
 800ace2:	4d06      	ldr	r5, [pc, #24]	; (800acfc <_sbrk_r+0x1c>)
 800ace4:	2300      	movs	r3, #0
 800ace6:	4604      	mov	r4, r0
 800ace8:	4608      	mov	r0, r1
 800acea:	602b      	str	r3, [r5, #0]
 800acec:	f7f8 fb1e 	bl	800332c <_sbrk>
 800acf0:	1c43      	adds	r3, r0, #1
 800acf2:	d102      	bne.n	800acfa <_sbrk_r+0x1a>
 800acf4:	682b      	ldr	r3, [r5, #0]
 800acf6:	b103      	cbz	r3, 800acfa <_sbrk_r+0x1a>
 800acf8:	6023      	str	r3, [r4, #0]
 800acfa:	bd38      	pop	{r3, r4, r5, pc}
 800acfc:	200005e8 	.word	0x200005e8

0800ad00 <memcpy>:
 800ad00:	440a      	add	r2, r1
 800ad02:	4291      	cmp	r1, r2
 800ad04:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad08:	d100      	bne.n	800ad0c <memcpy+0xc>
 800ad0a:	4770      	bx	lr
 800ad0c:	b510      	push	{r4, lr}
 800ad0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad16:	4291      	cmp	r1, r2
 800ad18:	d1f9      	bne.n	800ad0e <memcpy+0xe>
 800ad1a:	bd10      	pop	{r4, pc}

0800ad1c <_realloc_r>:
 800ad1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad20:	4680      	mov	r8, r0
 800ad22:	4614      	mov	r4, r2
 800ad24:	460e      	mov	r6, r1
 800ad26:	b921      	cbnz	r1, 800ad32 <_realloc_r+0x16>
 800ad28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad2c:	4611      	mov	r1, r2
 800ad2e:	f7ff bc49 	b.w	800a5c4 <_malloc_r>
 800ad32:	b92a      	cbnz	r2, 800ad40 <_realloc_r+0x24>
 800ad34:	f7ff fbda 	bl	800a4ec <_free_r>
 800ad38:	4625      	mov	r5, r4
 800ad3a:	4628      	mov	r0, r5
 800ad3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad40:	f000 f81b 	bl	800ad7a <_malloc_usable_size_r>
 800ad44:	4284      	cmp	r4, r0
 800ad46:	4607      	mov	r7, r0
 800ad48:	d802      	bhi.n	800ad50 <_realloc_r+0x34>
 800ad4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ad4e:	d812      	bhi.n	800ad76 <_realloc_r+0x5a>
 800ad50:	4621      	mov	r1, r4
 800ad52:	4640      	mov	r0, r8
 800ad54:	f7ff fc36 	bl	800a5c4 <_malloc_r>
 800ad58:	4605      	mov	r5, r0
 800ad5a:	2800      	cmp	r0, #0
 800ad5c:	d0ed      	beq.n	800ad3a <_realloc_r+0x1e>
 800ad5e:	42bc      	cmp	r4, r7
 800ad60:	4622      	mov	r2, r4
 800ad62:	4631      	mov	r1, r6
 800ad64:	bf28      	it	cs
 800ad66:	463a      	movcs	r2, r7
 800ad68:	f7ff ffca 	bl	800ad00 <memcpy>
 800ad6c:	4631      	mov	r1, r6
 800ad6e:	4640      	mov	r0, r8
 800ad70:	f7ff fbbc 	bl	800a4ec <_free_r>
 800ad74:	e7e1      	b.n	800ad3a <_realloc_r+0x1e>
 800ad76:	4635      	mov	r5, r6
 800ad78:	e7df      	b.n	800ad3a <_realloc_r+0x1e>

0800ad7a <_malloc_usable_size_r>:
 800ad7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad7e:	1f18      	subs	r0, r3, #4
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	bfbc      	itt	lt
 800ad84:	580b      	ldrlt	r3, [r1, r0]
 800ad86:	18c0      	addlt	r0, r0, r3
 800ad88:	4770      	bx	lr
	...

0800ad8c <_init>:
 800ad8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad8e:	bf00      	nop
 800ad90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad92:	bc08      	pop	{r3}
 800ad94:	469e      	mov	lr, r3
 800ad96:	4770      	bx	lr

0800ad98 <_fini>:
 800ad98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad9a:	bf00      	nop
 800ad9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad9e:	bc08      	pop	{r3}
 800ada0:	469e      	mov	lr, r3
 800ada2:	4770      	bx	lr
